
e:/IoT/loop-tracks/master/target/3.0.0/argon/master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004be4  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d8c00  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000078  20034498  000d8c04  00014498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000a2e0  20034510  20034510  00024510  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d8c7c  000d8c7c  00018c7c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d8ca4  000d8ca4  00018ca4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001757d1  00000000  00000000  00018ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00016435  00000000  00000000  0018e479  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00038848  00000000  00000000  001a48ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002fd8  00000000  00000000  001dd0f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00009d98  00000000  00000000  001e00ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00037066  00000000  00000000  001e9e66  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0003d8e3  00000000  00000000  00220ecc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00127816  00000000  00000000  0025e7af  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00008734  00000000  00000000  00385fc8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f004 f85b 	bl	d80e8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f004 f87d 	bl	d8138 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	20034498 	.word	0x20034498
   d4048:	000d8c04 	.word	0x000d8c04
   d404c:	20034510 	.word	0x20034510
   d4050:	20034510 	.word	0x20034510
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f003 f8dd 	bl	d721c <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d8bdc 	.word	0x000d8bdc
   d407c:	000d8c00 	.word	0x000d8c00

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b90a 	b.w	d4298 <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 fb6f 	bl	d4768 <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f003 b887 	b.w	d71a0 <_post_loop>

000d4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4092:	f001 bcc9 	b.w	d5a28 <malloc>

000d4096 <_Znaj>:
   d4096:	f001 bcc7 	b.w	d5a28 <malloc>

000d409a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409a:	f001 bccd 	b.w	d5a38 <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr
	...

000d40b0 <__tcf_1>:
http_response_t response;

String redLineStations[] = {"Howard", "Jarvis", "Morse", "Loyola", "Granville", "Thorndale", "Bryn Mawr", "Berwyn", "Argyle", "Lawrence", "Wilson", 
"Sheridan", "Addison", "Belmont", "Fullerton", "North/Clybourn", "Clark/Divison", "Chicago", "Grand", "Lake", "Monroe", "Jackson", "Harrison", 
"Roosevelt", "Cermak-Chinatown", "Sox-35th", "47th", "Garfield", "63rd", "69th", "79th", "87th", "95th/Dan Ryan"};
String redLineOutput[arraySize(redLineStations) * 8];
   d40b0:	b538      	push	{r3, r4, r5, lr}
   d40b2:	4d05      	ldr	r5, [pc, #20]	; (d40c8 <__tcf_1+0x18>)
   d40b4:	f240 1407 	movw	r4, #263	; 0x107
   d40b8:	eb05 1004 	add.w	r0, r5, r4, lsl #4
   d40bc:	f001 fd67 	bl	d5b8e <_ZN6StringD1Ev>
   d40c0:	3c01      	subs	r4, #1
   d40c2:	d2f9      	bcs.n	d40b8 <__tcf_1+0x8>
   d40c4:	bd38      	pop	{r3, r4, r5, pc}
   d40c6:	bf00      	nop
   d40c8:	2003d338 	.word	0x2003d338

000d40cc <__tcf_0>:
String redLineStations[] = {"Howard", "Jarvis", "Morse", "Loyola", "Granville", "Thorndale", "Bryn Mawr", "Berwyn", "Argyle", "Lawrence", "Wilson", 
   d40cc:	b538      	push	{r3, r4, r5, lr}
   d40ce:	4d04      	ldr	r5, [pc, #16]	; (d40e0 <__tcf_0+0x14>)
   d40d0:	2420      	movs	r4, #32
   d40d2:	eb05 1004 	add.w	r0, r5, r4, lsl #4
   d40d6:	f001 fd5a 	bl	d5b8e <_ZN6StringD1Ev>
   d40da:	3c01      	subs	r4, #1
   d40dc:	d2f9      	bcs.n	d40d2 <__tcf_0+0x6>
   d40de:	bd38      	pop	{r3, r4, r5, pc}
   d40e0:	2003e3b8 	.word	0x2003e3b8

000d40e4 <_ZN15http_response_tD1Ev>:
 */
typedef struct
{
  int status;
  String body;
} http_response_t;
   d40e4:	b510      	push	{r4, lr}
   d40e6:	4604      	mov	r4, r0
   d40e8:	3004      	adds	r0, #4
   d40ea:	f001 fd50 	bl	d5b8e <_ZN6StringD1Ev>
   d40ee:	4620      	mov	r0, r4
   d40f0:	bd10      	pop	{r4, pc}

000d40f2 <_ZN14http_request_tD1Ev>:
} http_request_t;
   d40f2:	b510      	push	{r4, lr}
   d40f4:	4604      	mov	r4, r0
   d40f6:	303c      	adds	r0, #60	; 0x3c
   d40f8:	f001 fd49 	bl	d5b8e <_ZN6StringD1Ev>
   d40fc:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d4100:	f001 fd45 	bl	d5b8e <_ZN6StringD1Ev>
   d4104:	4620      	mov	r0, r4
   d4106:	f001 fd42 	bl	d5b8e <_ZN6StringD1Ev>
   d410a:	4620      	mov	r0, r4
   d410c:	bd10      	pop	{r4, pc}
	...

000d4110 <_ZN16JsonParserStaticILj10000ELj1000EED1Ev>:
 *
 * @param MAX_TOKENS The maximum number of tokens you expect. Each object has a token and two for each key/value pair.
 * Each array is a token and one for each element in the array.
 */
template <size_t BUFFER_SIZE, size_t MAX_TOKENS>
class JsonParserStatic : public JsonParser {
   d4110:	b510      	push	{r4, lr}
   d4112:	4b03      	ldr	r3, [pc, #12]	; (d4120 <_ZN16JsonParserStaticILj10000ELj1000EED1Ev+0x10>)
   d4114:	6003      	str	r3, [r0, #0]
   d4116:	4604      	mov	r4, r0
   d4118:	f000 fddc 	bl	d4cd4 <_ZN10JsonParserD1Ev>
   d411c:	4620      	mov	r0, r4
   d411e:	bd10      	pop	{r4, pc}
   d4120:	000d85f0 	.word	0x000d85f0

000d4124 <_ZN16JsonParserStaticILj10000ELj1000EED0Ev>:
   d4124:	b510      	push	{r4, lr}
   d4126:	4604      	mov	r4, r0
   d4128:	f7ff fff2 	bl	d4110 <_ZN16JsonParserStaticILj10000ELj1000EED1Ev>
   d412c:	4620      	mov	r0, r4
   d412e:	f246 51bc 	movw	r1, #26044	; 0x65bc
   d4132:	f003 fe9c 	bl	d7e6e <_ZdlPvj>
   d4136:	4620      	mov	r0, r4
   d4138:	bd10      	pop	{r4, pc}
	...

000d413c <_ZN10HttpClientD1Ev>:

class HttpClient {
   d413c:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d413e:	6984      	ldr	r4, [r0, #24]
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d4140:	4b0a      	ldr	r3, [pc, #40]	; (d416c <_ZN10HttpClientD1Ev+0x30>)
   d4142:	6003      	str	r3, [r0, #0]
   d4144:	4605      	mov	r5, r0
   d4146:	b17c      	cbz	r4, d4168 <_ZN10HttpClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   d4148:	6863      	ldr	r3, [r4, #4]
   d414a:	3b01      	subs	r3, #1
   d414c:	6063      	str	r3, [r4, #4]
   d414e:	b95b      	cbnz	r3, d4168 <_ZN10HttpClientD1Ev+0x2c>
          _M_dispose();
   d4150:	6823      	ldr	r3, [r4, #0]
   d4152:	4620      	mov	r0, r4
   d4154:	689b      	ldr	r3, [r3, #8]
   d4156:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4158:	68a3      	ldr	r3, [r4, #8]
   d415a:	3b01      	subs	r3, #1
   d415c:	60a3      	str	r3, [r4, #8]
   d415e:	b91b      	cbnz	r3, d4168 <_ZN10HttpClientD1Ev+0x2c>
            _M_destroy();
   d4160:	6823      	ldr	r3, [r4, #0]
   d4162:	4620      	mov	r0, r4
   d4164:	68db      	ldr	r3, [r3, #12]
   d4166:	4798      	blx	r3
   d4168:	4628      	mov	r0, r5
   d416a:	bd38      	pop	{r3, r4, r5, pc}
   d416c:	000d8928 	.word	0x000d8928

000d4170 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d4170:	6803      	ldr	r3, [r0, #0]
   d4172:	b2c9      	uxtb	r1, r1
   d4174:	689b      	ldr	r3, [r3, #8]
   d4176:	4718      	bx	r3

000d4178 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
      count++;
    }
  }
}

void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   d4178:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  String inputBuffer = "";

  if(bleCount <= slaveCountExpected){
   d417c:	4c3e      	ldr	r4, [pc, #248]	; (d4278 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x100>)
void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   d417e:	b085      	sub	sp, #20
   d4180:	4680      	mov	r8, r0
   d4182:	460e      	mov	r6, r1
  String inputBuffer = "";
   d4184:	4668      	mov	r0, sp
   d4186:	493d      	ldr	r1, [pc, #244]	; (d427c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x104>)
   d4188:	f001 fd4c 	bl	d5c24 <_ZN6StringC1EPKc>
  if(bleCount <= slaveCountExpected){
   d418c:	6823      	ldr	r3, [r4, #0]
   d418e:	2b03      	cmp	r3, #3
   d4190:	dc66      	bgt.n	d4260 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xe8>
    int input;

    for(int i = 0; i < len - 1; i++){
   d4192:	2700      	movs	r7, #0
   d4194:	3e01      	subs	r6, #1
   d4196:	42be      	cmp	r6, r7
   d4198:	d90a      	bls.n	d41b0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x38>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
   d419a:	f818 1007 	ldrb.w	r1, [r8, r7]
   d419e:	4668      	mov	r0, sp
   d41a0:	f001 fd81 	bl	d5ca6 <_ZN6String6concatEc>
      inputBuffer += (char)data[i];
      input = atoi(inputBuffer);
   d41a4:	9800      	ldr	r0, [sp, #0]
   d41a6:	f003 ff7b 	bl	d80a0 <atoi>
    for(int i = 0; i < len - 1; i++){
   d41aa:	3701      	adds	r7, #1
      input = atoi(inputBuffer);
   d41ac:	4605      	mov	r5, r0
    for(int i = 0; i < len - 1; i++){
   d41ae:	e7f2      	b.n	d4196 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1e>
    }

    if(bleCount < slaveCountExpected){
   d41b0:	6823      	ldr	r3, [r4, #0]
   d41b2:	2b02      	cmp	r3, #2
   d41b4:	dc04      	bgt.n	d41c0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x48>
      txCharacteristic.setValue("\nEnter the position of the device with the blue LED as an integer (first device is at 1, second is at 2, etc): ");
   d41b6:	4932      	ldr	r1, [pc, #200]	; (d4280 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x108>)
   d41b8:	4832      	ldr	r0, [pc, #200]	; (d4284 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x10c>)
   d41ba:	2200      	movs	r2, #0
   d41bc:	f002 f93c 	bl	d6438 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
    }

    Wire.beginTransmission(addressArr[bleCount]);
   d41c0:	f003 fe28 	bl	d7e14 <_Z19__fetch_global_Wirev>
   d41c4:	4e30      	ldr	r6, [pc, #192]	; (d4288 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x110>)
   d41c6:	6823      	ldr	r3, [r4, #0]
   d41c8:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
   d41cc:	f003 fa32 	bl	d7634 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write('3');
   d41d0:	f003 fe20 	bl	d7e14 <_Z19__fetch_global_Wirev>
   d41d4:	2133      	movs	r1, #51	; 0x33
   d41d6:	f7ff ffcb 	bl	d4170 <_ZN7TwoWire5writeEi>
    Wire.endTransmission();
   d41da:	f003 fe1b 	bl	d7e14 <_Z19__fetch_global_Wirev>
   d41de:	f003 fa30 	bl	d7642 <_ZN7TwoWire15endTransmissionEv>

    if(bleCount > 0){
   d41e2:	6823      	ldr	r3, [r4, #0]
   d41e4:	2b00      	cmp	r3, #0
   d41e6:	dd17      	ble.n	d4218 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xa0>
      sequenceArr[input - 1] = addressArr[bleCount - 1];
   d41e8:	3b01      	subs	r3, #1
   d41ea:	3d01      	subs	r5, #1
   d41ec:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
   d41f0:	4b26      	ldr	r3, [pc, #152]	; (d428c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x114>)
   d41f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
      
      Wire.beginTransmission(addressArr[bleCount - 1]);
   d41f6:	f003 fe0d 	bl	d7e14 <_Z19__fetch_global_Wirev>
   d41fa:	6823      	ldr	r3, [r4, #0]
   d41fc:	3b01      	subs	r3, #1
   d41fe:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
   d4202:	f003 fa17 	bl	d7634 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write('4');
   d4206:	f003 fe05 	bl	d7e14 <_Z19__fetch_global_Wirev>
   d420a:	2134      	movs	r1, #52	; 0x34
   d420c:	f7ff ffb0 	bl	d4170 <_ZN7TwoWire5writeEi>
      Wire.endTransmission();
   d4210:	f003 fe00 	bl	d7e14 <_Z19__fetch_global_Wirev>
   d4214:	f003 fa15 	bl	d7642 <_ZN7TwoWire15endTransmissionEv>
    }
  }

  if(bleCount == slaveCountExpected){
   d4218:	6823      	ldr	r3, [r4, #0]
   d421a:	2b03      	cmp	r3, #3
   d421c:	d120      	bne.n	d4260 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xe8>
    Serial.println("\nSequence: ");
   d421e:	f003 f919 	bl	d7454 <_Z16_fetch_usbserialv>
   d4222:	491b      	ldr	r1, [pc, #108]	; (d4290 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x118>)
   d4224:	f8df 8064 	ldr.w	r8, [pc, #100]	; d428c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x114>
    for(int i = 0; i < slaveCountExpected; i++){
      Serial.print(sequenceArr[i]);
      Serial.print(", ");
   d4228:	f8df 9068 	ldr.w	r9, [pc, #104]	; d4294 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x11c>
    Serial.println("\nSequence: ");
   d422c:	f002 ff3d 	bl	d70aa <_ZN5Print7printlnEPKc>
    for(int i = 0; i < slaveCountExpected; i++){
   d4230:	2600      	movs	r6, #0
      Serial.print(sequenceArr[i]);
   d4232:	f003 f90f 	bl	d7454 <_Z16_fetch_usbserialv>
   d4236:	f858 5b04 	ldr.w	r5, [r8], #4
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   d423a:	2d00      	cmp	r5, #0
   d423c:	4607      	mov	r7, r0
   d423e:	da18      	bge.n	d4272 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xfa>
            t = print('-');
   d4240:	212d      	movs	r1, #45	; 0x2d
   d4242:	f002 ff23 	bl	d708c <_ZN5Print5printEc>
            val = -n;
   d4246:	4269      	negs	r1, r5
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d4248:	220a      	movs	r2, #10
   d424a:	4638      	mov	r0, r7
   d424c:	f002 ff37 	bl	d70be <_ZN5Print11printNumberEmh>
    for(int i = 0; i < slaveCountExpected; i++){
   d4250:	3601      	adds	r6, #1
      Serial.print(", ");
   d4252:	f003 f8ff 	bl	d7454 <_Z16_fetch_usbserialv>
   d4256:	4649      	mov	r1, r9
   d4258:	f002 ff14 	bl	d7084 <_ZN5Print5printEPKc>
    for(int i = 0; i < slaveCountExpected; i++){
   d425c:	2e03      	cmp	r6, #3
   d425e:	d1e8      	bne.n	d4232 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xba>
    }
    //BLE.disconnect();
    //BLE.off();
  }

  bleCount++;
   d4260:	6823      	ldr	r3, [r4, #0]
  String inputBuffer = "";
   d4262:	4668      	mov	r0, sp
  bleCount++;
   d4264:	3301      	adds	r3, #1
   d4266:	6023      	str	r3, [r4, #0]
  String inputBuffer = "";
   d4268:	f001 fc91 	bl	d5b8e <_ZN6StringD1Ev>
   d426c:	b005      	add	sp, #20
   d426e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            val = n;
   d4272:	4629      	mov	r1, r5
   d4274:	e7e8      	b.n	d4248 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xd0>
   d4276:	bf00      	nop
   d4278:	2003455c 	.word	0x2003455c
   d427c:	000d863d 	.word	0x000d863d
   d4280:	000d8328 	.word	0x000d8328
   d4284:	2003e63c 	.word	0x2003e63c
   d4288:	20034550 	.word	0x20034550
   d428c:	2003e630 	.word	0x2003e630
   d4290:	000d8398 	.word	0x000d8398
   d4294:	000d83a4 	.word	0x000d83a4

000d4298 <setup>:
void setup() {
   d4298:	b510      	push	{r4, lr}
   d429a:	b096      	sub	sp, #88	; 0x58
  Serial.begin(9600);
   d429c:	f003 f8da 	bl	d7454 <_Z16_fetch_usbserialv>
   d42a0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d42a4:	f003 f8ca 	bl	d743c <_ZN9USBSerial5beginEl>
  delay(2000);
   d42a8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d42ac:	f002 ff3e 	bl	d712c <delay>
  BLE.on();
   d42b0:	f002 f97c 	bl	d65ac <_ZN8particle14BleLocalDevice11getInstanceEv>
   d42b4:	f002 f9c8 	bl	d6648 <_ZNK8particle14BleLocalDevice2onEv>
  BLE.addCharacteristic(txCharacteristic);
   d42b8:	f002 f978 	bl	d65ac <_ZN8particle14BleLocalDevice11getInstanceEv>
   d42bc:	4a27      	ldr	r2, [pc, #156]	; (d435c <setup+0xc4>)
   d42be:	4601      	mov	r1, r0
   d42c0:	a80d      	add	r0, sp, #52	; 0x34
   d42c2:	f002 fd9b 	bl	d6dfc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d42c6:	a80d      	add	r0, sp, #52	; 0x34
   d42c8:	f002 fa3f 	bl	d674a <_ZN8particle17BleCharacteristicD1Ev>
  BLE.addCharacteristic(rxCharacteristic);
   d42cc:	f002 f96e 	bl	d65ac <_ZN8particle14BleLocalDevice11getInstanceEv>
   d42d0:	4a23      	ldr	r2, [pc, #140]	; (d4360 <setup+0xc8>)
   d42d2:	4601      	mov	r1, r0
   d42d4:	a80d      	add	r0, sp, #52	; 0x34
   d42d6:	f002 fd91 	bl	d6dfc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d42da:	a80d      	add	r0, sp, #52	; 0x34
   d42dc:	f002 fa35 	bl	d674a <_ZN8particle17BleCharacteristicD1Ev>
  BleAdvertisingData data;
   d42e0:	a80d      	add	r0, sp, #52	; 0x34
   d42e2:	f001 ffe2 	bl	d62aa <_ZN8particle18BleAdvertisingDataC1Ev>
  data.appendServiceUUID(serviceUuid);
   d42e6:	491f      	ldr	r1, [pc, #124]	; (d4364 <setup+0xcc>)
   d42e8:	a803      	add	r0, sp, #12
   d42ea:	f001 fee1 	bl	d60b0 <_ZN8particle7BleUuidC1ERKS0_>
    size_t appendLocalName(const String& name);
    size_t appendAppearance(ble_sig_appearance_t appearance);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   d42ee:	a903      	add	r1, sp, #12
   d42f0:	a808      	add	r0, sp, #32
   d42f2:	f001 fedd 	bl	d60b0 <_ZN8particle7BleUuidC1ERKS0_>
        if (tempUUID.type() == BleUuidType::SHORT) {
   d42f6:	a808      	add	r0, sp, #32
   d42f8:	f001 ff20 	bl	d613c <_ZNK8particle7BleUuid4typeEv>
   d42fc:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   d42fe:	a808      	add	r0, sp, #32
        if (tempUUID.type() == BleUuidType::SHORT) {
   d4300:	bb1c      	cbnz	r4, d434a <setup+0xb2>
            uint16_t uuid16 = tempUUID.shorted();
   d4302:	f001 ff3a 	bl	d617a <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d4306:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   d4308:	f8ad 000a 	strh.w	r0, [sp, #10]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d430c:	2302      	movs	r3, #2
   d430e:	f10d 020a 	add.w	r2, sp, #10
   d4312:	2103      	movs	r1, #3
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   d4314:	a80d      	add	r0, sp, #52	; 0x34
   d4316:	f001 ffbd 	bl	d6294 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
  request.hostname = "lapi.transitchicago.com";
   d431a:	4c13      	ldr	r4, [pc, #76]	; (d4368 <setup+0xd0>)
  BLE.advertise(&data);
   d431c:	f002 f946 	bl	d65ac <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4320:	2200      	movs	r2, #0
   d4322:	a90d      	add	r1, sp, #52	; 0x34
   d4324:	f002 f9b0 	bl	d6688 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
  Wire.begin();
   d4328:	f003 fd74 	bl	d7e14 <_Z19__fetch_global_Wirev>
   d432c:	f003 f978 	bl	d7620 <_ZN7TwoWire5beginEv>
  request.hostname = "lapi.transitchicago.com";
   d4330:	490e      	ldr	r1, [pc, #56]	; (d436c <setup+0xd4>)
   d4332:	4620      	mov	r0, r4
   d4334:	f001 fc8a 	bl	d5c4c <_ZN6StringaSEPKc>
  request.port = 80;
   d4338:	2350      	movs	r3, #80	; 0x50
  request.path = "/api/1.0/ttpositions.aspx?key=00ff09063caa46748434d5fa321d048f&rt=red&outputType=JSON";
   d433a:	490d      	ldr	r1, [pc, #52]	; (d4370 <setup+0xd8>)
  request.port = 80;
   d433c:	63a3      	str	r3, [r4, #56]	; 0x38
  request.path = "/api/1.0/ttpositions.aspx?key=00ff09063caa46748434d5fa321d048f&rt=red&outputType=JSON";
   d433e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d4342:	f001 fc83 	bl	d5c4c <_ZN6StringaSEPKc>
}
   d4346:	b016      	add	sp, #88	; 0x58
   d4348:	bd10      	pop	{r4, pc}
   d434a:	f001 ff1b 	bl	d6184 <_ZNK8particle7BleUuid8rawBytesEv>
   d434e:	2300      	movs	r3, #0
   d4350:	9300      	str	r3, [sp, #0]
   d4352:	4602      	mov	r2, r0
   d4354:	2310      	movs	r3, #16
   d4356:	2107      	movs	r1, #7
   d4358:	e7dc      	b.n	d4314 <setup+0x7c>
   d435a:	bf00      	nop
   d435c:	2003e63c 	.word	0x2003e63c
   d4360:	2003e628 	.word	0x2003e628
   d4364:	20034514 	.word	0x20034514
   d4368:	2003e5c8 	.word	0x2003e5c8
   d436c:	000d83a7 	.word	0x000d83a7
   d4370:	000d83bf 	.word	0x000d83bf

000d4374 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>:
    BleCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const char* desc, void(T::*callback)(const uint8_t*, size_t, const BlePeerDevice& peer), T* instance)
            : BleCharacteristic(properties, desc, (callback && instance) ? std::bind(callback, instance, _1, _2, _3) : (BleOnDataReceivedStdFunction)nullptr) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   d4374:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4376:	4616      	mov	r6, r2
   d4378:	b091      	sub	sp, #68	; 0x44
#if __cplusplus > 201402L
      using weak_type = __weak_ptr<_Tp, _Lp>;
#endif

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d437a:	2200      	movs	r2, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d437c:	e9c0 2200 	strd	r2, r2, [r0]
   d4380:	4604      	mov	r4, r0
   d4382:	460d      	mov	r5, r1
        BleUuid cUuid(charUuid);
        BleUuid sUuid(svcUuid);
   d4384:	af0b      	add	r7, sp, #44	; 0x2c
        BleUuid cUuid(charUuid);
   d4386:	4619      	mov	r1, r3
   d4388:	a806      	add	r0, sp, #24
   d438a:	f001 fe91 	bl	d60b0 <_ZN8particle7BleUuidC1ERKS0_>
        BleUuid sUuid(svcUuid);
   d438e:	9916      	ldr	r1, [sp, #88]	; 0x58
   d4390:	4638      	mov	r0, r7
   d4392:	f001 fe8d 	bl	d60b0 <_ZN8particle7BleUuidC1ERKS0_>
    value_ = static_cast<ValueType>(value);
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const EnumFlags<T>& flags) {
    value_ = flags.value_;
   d4396:	7833      	ldrb	r3, [r6, #0]
   d4398:	f88d 3014 	strb.w	r3, [sp, #20]
        construct(desc, properties, cUuid, sUuid, callback, context);
   d439c:	9b18      	ldr	r3, [sp, #96]	; 0x60
   d439e:	9302      	str	r3, [sp, #8]
   d43a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d43a2:	4620      	mov	r0, r4
   d43a4:	e9cd 7300 	strd	r7, r3, [sp]
   d43a8:	aa05      	add	r2, sp, #20
   d43aa:	ab06      	add	r3, sp, #24
   d43ac:	4629      	mov	r1, r5
   d43ae:	f002 fc03 	bl	d6bb8 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
    }
   d43b2:	4620      	mov	r0, r4
   d43b4:	b011      	add	sp, #68	; 0x44
   d43b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d43b8 <_GLOBAL__sub_I_addressArr>:
   d43b8:	b570      	push	{r4, r5, r6, lr}
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   d43ba:	498a      	ldr	r1, [pc, #552]	; (d45e4 <_GLOBAL__sub_I_addressArr+0x22c>)
   d43bc:	488a      	ldr	r0, [pc, #552]	; (d45e8 <_GLOBAL__sub_I_addressArr+0x230>)
String redLineOutput[arraySize(redLineStations) * 8];
   d43be:	4d8b      	ldr	r5, [pc, #556]	; (d45ec <_GLOBAL__sub_I_addressArr+0x234>)
   d43c0:	4e8b      	ldr	r6, [pc, #556]	; (d45f0 <_GLOBAL__sub_I_addressArr+0x238>)
   d43c2:	b090      	sub	sp, #64	; 0x40
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   d43c4:	f001 ff5a 	bl	d627c <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   d43c8:	498a      	ldr	r1, [pc, #552]	; (d45f4 <_GLOBAL__sub_I_addressArr+0x23c>)
   d43ca:	488b      	ldr	r0, [pc, #556]	; (d45f8 <_GLOBAL__sub_I_addressArr+0x240>)
   d43cc:	f001 ff56 	bl	d627c <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   d43d0:	498a      	ldr	r1, [pc, #552]	; (d45fc <_GLOBAL__sub_I_addressArr+0x244>)
   d43d2:	488b      	ldr	r0, [pc, #556]	; (d4600 <_GLOBAL__sub_I_addressArr+0x248>)
   d43d4:	f001 ff52 	bl	d627c <_ZN8particle7BleUuidC1EPKc>
    value_ = static_cast<ValueType>(value);
   d43d8:	2310      	movs	r3, #16
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, serviceUuid);
   d43da:	4989      	ldr	r1, [pc, #548]	; (d4600 <_GLOBAL__sub_I_addressArr+0x248>)
   d43dc:	f88d 3014 	strb.w	r3, [sp, #20]
   d43e0:	a806      	add	r0, sp, #24
   d43e2:	f001 fe65 	bl	d60b0 <_ZN8particle7BleUuidC1ERKS0_>
   d43e6:	4980      	ldr	r1, [pc, #512]	; (d45e8 <_GLOBAL__sub_I_addressArr+0x230>)
   d43e8:	a80b      	add	r0, sp, #44	; 0x2c
   d43ea:	f001 fe61 	bl	d60b0 <_ZN8particle7BleUuidC1ERKS0_>
   d43ee:	2400      	movs	r4, #0
   d43f0:	ab0b      	add	r3, sp, #44	; 0x2c
   d43f2:	4984      	ldr	r1, [pc, #528]	; (d4604 <_GLOBAL__sub_I_addressArr+0x24c>)
   d43f4:	9300      	str	r3, [sp, #0]
   d43f6:	aa05      	add	r2, sp, #20
   d43f8:	ab06      	add	r3, sp, #24
   d43fa:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d43fe:	4882      	ldr	r0, [pc, #520]	; (d4608 <_GLOBAL__sub_I_addressArr+0x250>)
   d4400:	f7ff ffb8 	bl	d4374 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   d4404:	4a81      	ldr	r2, [pc, #516]	; (d460c <_GLOBAL__sub_I_addressArr+0x254>)
   d4406:	4982      	ldr	r1, [pc, #520]	; (d4610 <_GLOBAL__sub_I_addressArr+0x258>)
   d4408:	487f      	ldr	r0, [pc, #508]	; (d4608 <_GLOBAL__sub_I_addressArr+0x250>)
   d440a:	f003 fd2b 	bl	d7e64 <__aeabi_atexit>
   d440e:	2304      	movs	r3, #4
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, serviceUuid, onDataReceived, NULL);
   d4410:	4979      	ldr	r1, [pc, #484]	; (d45f8 <_GLOBAL__sub_I_addressArr+0x240>)
   d4412:	f88d 3014 	strb.w	r3, [sp, #20]
   d4416:	a806      	add	r0, sp, #24
   d4418:	f001 fe4a 	bl	d60b0 <_ZN8particle7BleUuidC1ERKS0_>
   d441c:	4972      	ldr	r1, [pc, #456]	; (d45e8 <_GLOBAL__sub_I_addressArr+0x230>)
   d441e:	a80b      	add	r0, sp, #44	; 0x2c
   d4420:	f001 fe46 	bl	d60b0 <_ZN8particle7BleUuidC1ERKS0_>
   d4424:	4b7b      	ldr	r3, [pc, #492]	; (d4614 <_GLOBAL__sub_I_addressArr+0x25c>)
   d4426:	9301      	str	r3, [sp, #4]
   d4428:	ab0b      	add	r3, sp, #44	; 0x2c
   d442a:	497b      	ldr	r1, [pc, #492]	; (d4618 <_GLOBAL__sub_I_addressArr+0x260>)
   d442c:	9300      	str	r3, [sp, #0]
   d442e:	aa05      	add	r2, sp, #20
   d4430:	ab06      	add	r3, sp, #24
   d4432:	487a      	ldr	r0, [pc, #488]	; (d461c <_GLOBAL__sub_I_addressArr+0x264>)
   d4434:	9402      	str	r4, [sp, #8]
   d4436:	f7ff ff9d 	bl	d4374 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   d443a:	4a74      	ldr	r2, [pc, #464]	; (d460c <_GLOBAL__sub_I_addressArr+0x254>)
   d443c:	4974      	ldr	r1, [pc, #464]	; (d4610 <_GLOBAL__sub_I_addressArr+0x258>)
   d443e:	4877      	ldr	r0, [pc, #476]	; (d461c <_GLOBAL__sub_I_addressArr+0x264>)
   d4440:	f003 fd10 	bl	d7e64 <__aeabi_atexit>
} http_request_t;
   d4444:	496a      	ldr	r1, [pc, #424]	; (d45f0 <_GLOBAL__sub_I_addressArr+0x238>)
   d4446:	4876      	ldr	r0, [pc, #472]	; (d4620 <_GLOBAL__sub_I_addressArr+0x268>)
   d4448:	f001 fbec 	bl	d5c24 <_ZN6StringC1EPKc>
   d444c:	4875      	ldr	r0, [pc, #468]	; (d4624 <_GLOBAL__sub_I_addressArr+0x26c>)
   d444e:	f002 ff51 	bl	d72f4 <_ZN9IPAddressC1Ev>
   d4452:	4967      	ldr	r1, [pc, #412]	; (d45f0 <_GLOBAL__sub_I_addressArr+0x238>)
   d4454:	4874      	ldr	r0, [pc, #464]	; (d4628 <_GLOBAL__sub_I_addressArr+0x270>)
   d4456:	f001 fbe5 	bl	d5c24 <_ZN6StringC1EPKc>
   d445a:	4965      	ldr	r1, [pc, #404]	; (d45f0 <_GLOBAL__sub_I_addressArr+0x238>)
   d445c:	4873      	ldr	r0, [pc, #460]	; (d462c <_GLOBAL__sub_I_addressArr+0x274>)
   d445e:	f001 fbe1 	bl	d5c24 <_ZN6StringC1EPKc>
http_request_t request;
   d4462:	4a6a      	ldr	r2, [pc, #424]	; (d460c <_GLOBAL__sub_I_addressArr+0x254>)
   d4464:	4972      	ldr	r1, [pc, #456]	; (d4630 <_GLOBAL__sub_I_addressArr+0x278>)
   d4466:	486e      	ldr	r0, [pc, #440]	; (d4620 <_GLOBAL__sub_I_addressArr+0x268>)
   d4468:	f003 fcfc 	bl	d7e64 <__aeabi_atexit>
} http_response_t;
   d446c:	4960      	ldr	r1, [pc, #384]	; (d45f0 <_GLOBAL__sub_I_addressArr+0x238>)
   d446e:	4871      	ldr	r0, [pc, #452]	; (d4634 <_GLOBAL__sub_I_addressArr+0x27c>)
   d4470:	f001 fbd8 	bl	d5c24 <_ZN6StringC1EPKc>
http_response_t response;
   d4474:	4a65      	ldr	r2, [pc, #404]	; (d460c <_GLOBAL__sub_I_addressArr+0x254>)
   d4476:	4970      	ldr	r1, [pc, #448]	; (d4638 <_GLOBAL__sub_I_addressArr+0x280>)
   d4478:	4870      	ldr	r0, [pc, #448]	; (d463c <_GLOBAL__sub_I_addressArr+0x284>)
   d447a:	f003 fcf3 	bl	d7e64 <__aeabi_atexit>
"Roosevelt", "Cermak-Chinatown", "Sox-35th", "47th", "Garfield", "63rd", "69th", "79th", "87th", "95th/Dan Ryan"};
   d447e:	4970      	ldr	r1, [pc, #448]	; (d4640 <_GLOBAL__sub_I_addressArr+0x288>)
   d4480:	4870      	ldr	r0, [pc, #448]	; (d4644 <_GLOBAL__sub_I_addressArr+0x28c>)
   d4482:	f001 fbcf 	bl	d5c24 <_ZN6StringC1EPKc>
   d4486:	4970      	ldr	r1, [pc, #448]	; (d4648 <_GLOBAL__sub_I_addressArr+0x290>)
   d4488:	4870      	ldr	r0, [pc, #448]	; (d464c <_GLOBAL__sub_I_addressArr+0x294>)
   d448a:	f001 fbcb 	bl	d5c24 <_ZN6StringC1EPKc>
   d448e:	4970      	ldr	r1, [pc, #448]	; (d4650 <_GLOBAL__sub_I_addressArr+0x298>)
   d4490:	4870      	ldr	r0, [pc, #448]	; (d4654 <_GLOBAL__sub_I_addressArr+0x29c>)
   d4492:	f001 fbc7 	bl	d5c24 <_ZN6StringC1EPKc>
   d4496:	4970      	ldr	r1, [pc, #448]	; (d4658 <_GLOBAL__sub_I_addressArr+0x2a0>)
   d4498:	4870      	ldr	r0, [pc, #448]	; (d465c <_GLOBAL__sub_I_addressArr+0x2a4>)
   d449a:	f001 fbc3 	bl	d5c24 <_ZN6StringC1EPKc>
   d449e:	4970      	ldr	r1, [pc, #448]	; (d4660 <_GLOBAL__sub_I_addressArr+0x2a8>)
   d44a0:	4870      	ldr	r0, [pc, #448]	; (d4664 <_GLOBAL__sub_I_addressArr+0x2ac>)
   d44a2:	f001 fbbf 	bl	d5c24 <_ZN6StringC1EPKc>
   d44a6:	4970      	ldr	r1, [pc, #448]	; (d4668 <_GLOBAL__sub_I_addressArr+0x2b0>)
   d44a8:	4870      	ldr	r0, [pc, #448]	; (d466c <_GLOBAL__sub_I_addressArr+0x2b4>)
   d44aa:	f001 fbbb 	bl	d5c24 <_ZN6StringC1EPKc>
   d44ae:	4970      	ldr	r1, [pc, #448]	; (d4670 <_GLOBAL__sub_I_addressArr+0x2b8>)
   d44b0:	4870      	ldr	r0, [pc, #448]	; (d4674 <_GLOBAL__sub_I_addressArr+0x2bc>)
   d44b2:	f001 fbb7 	bl	d5c24 <_ZN6StringC1EPKc>
   d44b6:	4970      	ldr	r1, [pc, #448]	; (d4678 <_GLOBAL__sub_I_addressArr+0x2c0>)
   d44b8:	4870      	ldr	r0, [pc, #448]	; (d467c <_GLOBAL__sub_I_addressArr+0x2c4>)
   d44ba:	f001 fbb3 	bl	d5c24 <_ZN6StringC1EPKc>
   d44be:	4970      	ldr	r1, [pc, #448]	; (d4680 <_GLOBAL__sub_I_addressArr+0x2c8>)
   d44c0:	4870      	ldr	r0, [pc, #448]	; (d4684 <_GLOBAL__sub_I_addressArr+0x2cc>)
   d44c2:	f001 fbaf 	bl	d5c24 <_ZN6StringC1EPKc>
   d44c6:	4970      	ldr	r1, [pc, #448]	; (d4688 <_GLOBAL__sub_I_addressArr+0x2d0>)
   d44c8:	4870      	ldr	r0, [pc, #448]	; (d468c <_GLOBAL__sub_I_addressArr+0x2d4>)
   d44ca:	f001 fbab 	bl	d5c24 <_ZN6StringC1EPKc>
   d44ce:	4970      	ldr	r1, [pc, #448]	; (d4690 <_GLOBAL__sub_I_addressArr+0x2d8>)
   d44d0:	4870      	ldr	r0, [pc, #448]	; (d4694 <_GLOBAL__sub_I_addressArr+0x2dc>)
   d44d2:	f001 fba7 	bl	d5c24 <_ZN6StringC1EPKc>
   d44d6:	4970      	ldr	r1, [pc, #448]	; (d4698 <_GLOBAL__sub_I_addressArr+0x2e0>)
   d44d8:	4870      	ldr	r0, [pc, #448]	; (d469c <_GLOBAL__sub_I_addressArr+0x2e4>)
   d44da:	f001 fba3 	bl	d5c24 <_ZN6StringC1EPKc>
   d44de:	4970      	ldr	r1, [pc, #448]	; (d46a0 <_GLOBAL__sub_I_addressArr+0x2e8>)
   d44e0:	4870      	ldr	r0, [pc, #448]	; (d46a4 <_GLOBAL__sub_I_addressArr+0x2ec>)
   d44e2:	f001 fb9f 	bl	d5c24 <_ZN6StringC1EPKc>
   d44e6:	4970      	ldr	r1, [pc, #448]	; (d46a8 <_GLOBAL__sub_I_addressArr+0x2f0>)
   d44e8:	4870      	ldr	r0, [pc, #448]	; (d46ac <_GLOBAL__sub_I_addressArr+0x2f4>)
   d44ea:	f001 fb9b 	bl	d5c24 <_ZN6StringC1EPKc>
   d44ee:	4970      	ldr	r1, [pc, #448]	; (d46b0 <_GLOBAL__sub_I_addressArr+0x2f8>)
   d44f0:	4870      	ldr	r0, [pc, #448]	; (d46b4 <_GLOBAL__sub_I_addressArr+0x2fc>)
   d44f2:	f001 fb97 	bl	d5c24 <_ZN6StringC1EPKc>
   d44f6:	4970      	ldr	r1, [pc, #448]	; (d46b8 <_GLOBAL__sub_I_addressArr+0x300>)
   d44f8:	4870      	ldr	r0, [pc, #448]	; (d46bc <_GLOBAL__sub_I_addressArr+0x304>)
   d44fa:	f001 fb93 	bl	d5c24 <_ZN6StringC1EPKc>
   d44fe:	4970      	ldr	r1, [pc, #448]	; (d46c0 <_GLOBAL__sub_I_addressArr+0x308>)
   d4500:	4870      	ldr	r0, [pc, #448]	; (d46c4 <_GLOBAL__sub_I_addressArr+0x30c>)
   d4502:	f001 fb8f 	bl	d5c24 <_ZN6StringC1EPKc>
   d4506:	4970      	ldr	r1, [pc, #448]	; (d46c8 <_GLOBAL__sub_I_addressArr+0x310>)
   d4508:	4870      	ldr	r0, [pc, #448]	; (d46cc <_GLOBAL__sub_I_addressArr+0x314>)
   d450a:	f001 fb8b 	bl	d5c24 <_ZN6StringC1EPKc>
   d450e:	4970      	ldr	r1, [pc, #448]	; (d46d0 <_GLOBAL__sub_I_addressArr+0x318>)
   d4510:	4870      	ldr	r0, [pc, #448]	; (d46d4 <_GLOBAL__sub_I_addressArr+0x31c>)
   d4512:	f001 fb87 	bl	d5c24 <_ZN6StringC1EPKc>
   d4516:	4970      	ldr	r1, [pc, #448]	; (d46d8 <_GLOBAL__sub_I_addressArr+0x320>)
   d4518:	4870      	ldr	r0, [pc, #448]	; (d46dc <_GLOBAL__sub_I_addressArr+0x324>)
   d451a:	f001 fb83 	bl	d5c24 <_ZN6StringC1EPKc>
   d451e:	4970      	ldr	r1, [pc, #448]	; (d46e0 <_GLOBAL__sub_I_addressArr+0x328>)
   d4520:	4870      	ldr	r0, [pc, #448]	; (d46e4 <_GLOBAL__sub_I_addressArr+0x32c>)
   d4522:	f001 fb7f 	bl	d5c24 <_ZN6StringC1EPKc>
   d4526:	4970      	ldr	r1, [pc, #448]	; (d46e8 <_GLOBAL__sub_I_addressArr+0x330>)
   d4528:	4870      	ldr	r0, [pc, #448]	; (d46ec <_GLOBAL__sub_I_addressArr+0x334>)
   d452a:	f001 fb7b 	bl	d5c24 <_ZN6StringC1EPKc>
   d452e:	4970      	ldr	r1, [pc, #448]	; (d46f0 <_GLOBAL__sub_I_addressArr+0x338>)
   d4530:	4870      	ldr	r0, [pc, #448]	; (d46f4 <_GLOBAL__sub_I_addressArr+0x33c>)
   d4532:	f001 fb77 	bl	d5c24 <_ZN6StringC1EPKc>
   d4536:	4970      	ldr	r1, [pc, #448]	; (d46f8 <_GLOBAL__sub_I_addressArr+0x340>)
   d4538:	4870      	ldr	r0, [pc, #448]	; (d46fc <_GLOBAL__sub_I_addressArr+0x344>)
   d453a:	f001 fb73 	bl	d5c24 <_ZN6StringC1EPKc>
   d453e:	4970      	ldr	r1, [pc, #448]	; (d4700 <_GLOBAL__sub_I_addressArr+0x348>)
   d4540:	4870      	ldr	r0, [pc, #448]	; (d4704 <_GLOBAL__sub_I_addressArr+0x34c>)
   d4542:	f001 fb6f 	bl	d5c24 <_ZN6StringC1EPKc>
   d4546:	4970      	ldr	r1, [pc, #448]	; (d4708 <_GLOBAL__sub_I_addressArr+0x350>)
   d4548:	4870      	ldr	r0, [pc, #448]	; (d470c <_GLOBAL__sub_I_addressArr+0x354>)
   d454a:	f001 fb6b 	bl	d5c24 <_ZN6StringC1EPKc>
   d454e:	4970      	ldr	r1, [pc, #448]	; (d4710 <_GLOBAL__sub_I_addressArr+0x358>)
   d4550:	4870      	ldr	r0, [pc, #448]	; (d4714 <_GLOBAL__sub_I_addressArr+0x35c>)
   d4552:	f001 fb67 	bl	d5c24 <_ZN6StringC1EPKc>
   d4556:	4970      	ldr	r1, [pc, #448]	; (d4718 <_GLOBAL__sub_I_addressArr+0x360>)
   d4558:	4870      	ldr	r0, [pc, #448]	; (d471c <_GLOBAL__sub_I_addressArr+0x364>)
   d455a:	f001 fb63 	bl	d5c24 <_ZN6StringC1EPKc>
   d455e:	4970      	ldr	r1, [pc, #448]	; (d4720 <_GLOBAL__sub_I_addressArr+0x368>)
   d4560:	4870      	ldr	r0, [pc, #448]	; (d4724 <_GLOBAL__sub_I_addressArr+0x36c>)
   d4562:	f001 fb5f 	bl	d5c24 <_ZN6StringC1EPKc>
   d4566:	4970      	ldr	r1, [pc, #448]	; (d4728 <_GLOBAL__sub_I_addressArr+0x370>)
   d4568:	4870      	ldr	r0, [pc, #448]	; (d472c <_GLOBAL__sub_I_addressArr+0x374>)
   d456a:	f001 fb5b 	bl	d5c24 <_ZN6StringC1EPKc>
   d456e:	4970      	ldr	r1, [pc, #448]	; (d4730 <_GLOBAL__sub_I_addressArr+0x378>)
   d4570:	4870      	ldr	r0, [pc, #448]	; (d4734 <_GLOBAL__sub_I_addressArr+0x37c>)
   d4572:	f001 fb57 	bl	d5c24 <_ZN6StringC1EPKc>
   d4576:	4970      	ldr	r1, [pc, #448]	; (d4738 <_GLOBAL__sub_I_addressArr+0x380>)
   d4578:	4870      	ldr	r0, [pc, #448]	; (d473c <_GLOBAL__sub_I_addressArr+0x384>)
   d457a:	f001 fb53 	bl	d5c24 <_ZN6StringC1EPKc>
   d457e:	4970      	ldr	r1, [pc, #448]	; (d4740 <_GLOBAL__sub_I_addressArr+0x388>)
   d4580:	4870      	ldr	r0, [pc, #448]	; (d4744 <_GLOBAL__sub_I_addressArr+0x38c>)
   d4582:	f001 fb4f 	bl	d5c24 <_ZN6StringC1EPKc>
String redLineStations[] = {"Howard", "Jarvis", "Morse", "Loyola", "Granville", "Thorndale", "Bryn Mawr", "Berwyn", "Argyle", "Lawrence", "Wilson", 
   d4586:	4a21      	ldr	r2, [pc, #132]	; (d460c <_GLOBAL__sub_I_addressArr+0x254>)
   d4588:	496f      	ldr	r1, [pc, #444]	; (d4748 <_GLOBAL__sub_I_addressArr+0x390>)
   d458a:	4620      	mov	r0, r4
   d458c:	f003 fc6a 	bl	d7e64 <__aeabi_atexit>
String redLineOutput[arraySize(redLineStations) * 8];
   d4590:	1928      	adds	r0, r5, r4
   d4592:	4631      	mov	r1, r6
   d4594:	3410      	adds	r4, #16
   d4596:	f001 fb45 	bl	d5c24 <_ZN6StringC1EPKc>
   d459a:	f5b4 5f84 	cmp.w	r4, #4224	; 0x1080
   d459e:	d1f7      	bne.n	d4590 <_GLOBAL__sub_I_addressArr+0x1d8>
   d45a0:	4a1a      	ldr	r2, [pc, #104]	; (d460c <_GLOBAL__sub_I_addressArr+0x254>)
   d45a2:	496a      	ldr	r1, [pc, #424]	; (d474c <_GLOBAL__sub_I_addressArr+0x394>)
public:
	/**
	 * @brief Construct a JsonParser using a static buffer and static maximum number of tokens.
	 */
	explicit JsonParserStatic() : JsonParser(staticBuffer, BUFFER_SIZE, staticTokens, MAX_TOKENS) {};
   d45a4:	4c6a      	ldr	r4, [pc, #424]	; (d4750 <_GLOBAL__sub_I_addressArr+0x398>)
   d45a6:	2000      	movs	r0, #0
   d45a8:	f003 fc5c 	bl	d7e64 <__aeabi_atexit>
HttpClient http;
   d45ac:	4869      	ldr	r0, [pc, #420]	; (d4754 <_GLOBAL__sub_I_addressArr+0x39c>)
   d45ae:	f000 fa0f 	bl	d49d0 <_ZN10HttpClientC1Ev>
   d45b2:	4a16      	ldr	r2, [pc, #88]	; (d460c <_GLOBAL__sub_I_addressArr+0x254>)
   d45b4:	4968      	ldr	r1, [pc, #416]	; (d4758 <_GLOBAL__sub_I_addressArr+0x3a0>)
   d45b6:	4867      	ldr	r0, [pc, #412]	; (d4754 <_GLOBAL__sub_I_addressArr+0x39c>)
   d45b8:	f003 fc54 	bl	d7e64 <__aeabi_atexit>
   d45bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d45c0:	9300      	str	r3, [sp, #0]
   d45c2:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   d45c6:	4b65      	ldr	r3, [pc, #404]	; (d475c <_GLOBAL__sub_I_addressArr+0x3a4>)
   d45c8:	f242 7210 	movw	r2, #10000	; 0x2710
   d45cc:	4620      	mov	r0, r4
   d45ce:	f000 fbd9 	bl	d4d84 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>
   d45d2:	4b63      	ldr	r3, [pc, #396]	; (d4760 <_GLOBAL__sub_I_addressArr+0x3a8>)
JsonParserStatic<10000, 1000> parser;
   d45d4:	4a0d      	ldr	r2, [pc, #52]	; (d460c <_GLOBAL__sub_I_addressArr+0x254>)
   d45d6:	4963      	ldr	r1, [pc, #396]	; (d4764 <_GLOBAL__sub_I_addressArr+0x3ac>)
   d45d8:	6023      	str	r3, [r4, #0]
   d45da:	4620      	mov	r0, r4
   d45dc:	f003 fc42 	bl	d7e64 <__aeabi_atexit>
   d45e0:	b010      	add	sp, #64	; 0x40
   d45e2:	bd70      	pop	{r4, r5, r6, pc}
   d45e4:	000d8415 	.word	0x000d8415
   d45e8:	20034514 	.word	0x20034514
   d45ec:	2003d338 	.word	0x2003d338
   d45f0:	000d863d 	.word	0x000d863d
   d45f4:	000d843a 	.word	0x000d843a
   d45f8:	20034528 	.word	0x20034528
   d45fc:	000d845f 	.word	0x000d845f
   d4600:	2003453c 	.word	0x2003453c
   d4604:	000d8484 	.word	0x000d8484
   d4608:	2003e63c 	.word	0x2003e63c
   d460c:	20034510 	.word	0x20034510
   d4610:	000d674b 	.word	0x000d674b
   d4614:	000d4179 	.word	0x000d4179
   d4618:	000d8487 	.word	0x000d8487
   d461c:	2003e628 	.word	0x2003e628
   d4620:	2003e5c8 	.word	0x2003e5c8
   d4624:	2003e5d8 	.word	0x2003e5d8
   d4628:	2003e5f0 	.word	0x2003e5f0
   d462c:	2003e604 	.word	0x2003e604
   d4630:	000d40f3 	.word	0x000d40f3
   d4634:	2003e618 	.word	0x2003e618
   d4638:	000d40e5 	.word	0x000d40e5
   d463c:	2003e614 	.word	0x2003e614
   d4640:	000d848a 	.word	0x000d848a
   d4644:	2003e3b8 	.word	0x2003e3b8
   d4648:	000d8491 	.word	0x000d8491
   d464c:	2003e3c8 	.word	0x2003e3c8
   d4650:	000d8498 	.word	0x000d8498
   d4654:	2003e3d8 	.word	0x2003e3d8
   d4658:	000d849e 	.word	0x000d849e
   d465c:	2003e3e8 	.word	0x2003e3e8
   d4660:	000d84a5 	.word	0x000d84a5
   d4664:	2003e3f8 	.word	0x2003e3f8
   d4668:	000d84af 	.word	0x000d84af
   d466c:	2003e408 	.word	0x2003e408
   d4670:	000d84b9 	.word	0x000d84b9
   d4674:	2003e418 	.word	0x2003e418
   d4678:	000d84c3 	.word	0x000d84c3
   d467c:	2003e428 	.word	0x2003e428
   d4680:	000d84ca 	.word	0x000d84ca
   d4684:	2003e438 	.word	0x2003e438
   d4688:	000d84d1 	.word	0x000d84d1
   d468c:	2003e448 	.word	0x2003e448
   d4690:	000d84da 	.word	0x000d84da
   d4694:	2003e458 	.word	0x2003e458
   d4698:	000d84e1 	.word	0x000d84e1
   d469c:	2003e468 	.word	0x2003e468
   d46a0:	000d84ea 	.word	0x000d84ea
   d46a4:	2003e478 	.word	0x2003e478
   d46a8:	000d84f2 	.word	0x000d84f2
   d46ac:	2003e488 	.word	0x2003e488
   d46b0:	000d84fa 	.word	0x000d84fa
   d46b4:	2003e498 	.word	0x2003e498
   d46b8:	000d8504 	.word	0x000d8504
   d46bc:	2003e4a8 	.word	0x2003e4a8
   d46c0:	000d8513 	.word	0x000d8513
   d46c4:	2003e4b8 	.word	0x2003e4b8
   d46c8:	000d8521 	.word	0x000d8521
   d46cc:	2003e4c8 	.word	0x2003e4c8
   d46d0:	000d8529 	.word	0x000d8529
   d46d4:	2003e4d8 	.word	0x2003e4d8
   d46d8:	000d852f 	.word	0x000d852f
   d46dc:	2003e4e8 	.word	0x2003e4e8
   d46e0:	000d8534 	.word	0x000d8534
   d46e4:	2003e4f8 	.word	0x2003e4f8
   d46e8:	000d853b 	.word	0x000d853b
   d46ec:	2003e508 	.word	0x2003e508
   d46f0:	000d8543 	.word	0x000d8543
   d46f4:	2003e518 	.word	0x2003e518
   d46f8:	000d854c 	.word	0x000d854c
   d46fc:	2003e528 	.word	0x2003e528
   d4700:	000d8556 	.word	0x000d8556
   d4704:	2003e538 	.word	0x2003e538
   d4708:	000d8567 	.word	0x000d8567
   d470c:	2003e548 	.word	0x2003e548
   d4710:	000d8570 	.word	0x000d8570
   d4714:	2003e558 	.word	0x2003e558
   d4718:	000d8575 	.word	0x000d8575
   d471c:	2003e568 	.word	0x2003e568
   d4720:	000d857e 	.word	0x000d857e
   d4724:	2003e578 	.word	0x2003e578
   d4728:	000d8583 	.word	0x000d8583
   d472c:	2003e588 	.word	0x2003e588
   d4730:	000d8588 	.word	0x000d8588
   d4734:	2003e598 	.word	0x2003e598
   d4738:	000d858d 	.word	0x000d858d
   d473c:	2003e5a8 	.word	0x2003e5a8
   d4740:	000d8592 	.word	0x000d8592
   d4744:	2003e5b8 	.word	0x2003e5b8
   d4748:	000d40cd 	.word	0x000d40cd
   d474c:	000d40b1 	.word	0x000d40b1
   d4750:	20036d7c 	.word	0x20036d7c
   d4754:	20034560 	.word	0x20034560
   d4758:	000d413d 	.word	0x000d413d
   d475c:	200394b8 	.word	0x200394b8
   d4760:	000d85f0 	.word	0x000d85f0
   d4764:	000d4111 	.word	0x000d4111

000d4768 <loop>:
void loop() {
   d4768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        request(aRequest, aResponse, (http_header_t*)NULL, HTTP_METHOD_DELETE);
    }

    void get(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[])
    {
        request(aRequest, aResponse, headers, HTTP_METHOD_GET);
   d476c:	4c82      	ldr	r4, [pc, #520]	; (d4978 <loop+0x210>)
   d476e:	4b83      	ldr	r3, [pc, #524]	; (d497c <loop+0x214>)
   d4770:	4983      	ldr	r1, [pc, #524]	; (d4980 <loop+0x218>)
   d4772:	4884      	ldr	r0, [pc, #528]	; (d4984 <loop+0x21c>)
   d4774:	b09b      	sub	sp, #108	; 0x6c
   d4776:	4622      	mov	r2, r4
   d4778:	9300      	str	r3, [sp, #0]
   d477a:	4b83      	ldr	r3, [pc, #524]	; (d4988 <loop+0x220>)
   d477c:	f000 f95e 	bl	d4a3c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>
  parser.clear();
   d4780:	4882      	ldr	r0, [pc, #520]	; (d498c <loop+0x224>)
   d4782:	f000 faf5 	bl	d4d70 <_ZN10JsonBuffer5clearEv>
        operator const char*() const { return c_str(); }
   d4786:	6861      	ldr	r1, [r4, #4]
	bool addString(const char *data) { return addData(data, strlen(data)); }
   d4788:	9103      	str	r1, [sp, #12]
   d478a:	4608      	mov	r0, r1
   d478c:	f003 fd12 	bl	d81b4 <strlen>
   d4790:	9903      	ldr	r1, [sp, #12]
   d4792:	4602      	mov	r2, r0
   d4794:	487d      	ldr	r0, [pc, #500]	; (d498c <loop+0x224>)
   d4796:	f000 face 	bl	d4d36 <_ZN10JsonBuffer7addDataEPKcj>
  if (!parser.parse()) {
   d479a:	487c      	ldr	r0, [pc, #496]	; (d498c <loop+0x224>)
   d479c:	f000 fe90 	bl	d54c0 <_ZN10JsonParser5parseEv>
   d47a0:	b938      	cbnz	r0, d47b2 <loop+0x4a>
		Serial.println("parsing failed");
   d47a2:	f002 fe57 	bl	d7454 <_Z16_fetch_usbserialv>
   d47a6:	497a      	ldr	r1, [pc, #488]	; (d4990 <loop+0x228>)
   d47a8:	f002 fc7f 	bl	d70aa <_ZN5Print7printlnEPKc>
}
   d47ac:	b01b      	add	sp, #108	; 0x6c
   d47ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  int count = 0;
   d47b2:	2600      	movs	r6, #0
    JsonReference train = parser.getReference().key("ctatt").key("route").index(0).key("train").index(count);
   d47b4:	4975      	ldr	r1, [pc, #468]	; (d498c <loop+0x224>)
   d47b6:	a816      	add	r0, sp, #88	; 0x58
   d47b8:	f000 faf4 	bl	d4da4 <_ZNK10JsonParser12getReferenceEv>
   d47bc:	4a75      	ldr	r2, [pc, #468]	; (d4994 <loop+0x22c>)
   d47be:	a916      	add	r1, sp, #88	; 0x58
   d47c0:	a812      	add	r0, sp, #72	; 0x48
   d47c2:	f000 fc71 	bl	d50a8 <_ZNK13JsonReference3keyEPKc>
   d47c6:	4a74      	ldr	r2, [pc, #464]	; (d4998 <loop+0x230>)
   d47c8:	a912      	add	r1, sp, #72	; 0x48
   d47ca:	a80e      	add	r0, sp, #56	; 0x38
   d47cc:	f000 fc6c 	bl	d50a8 <_ZNK13JsonReference3keyEPKc>
   d47d0:	2200      	movs	r2, #0
   d47d2:	a90e      	add	r1, sp, #56	; 0x38
   d47d4:	a80a      	add	r0, sp, #40	; 0x28
   d47d6:	f000 fb55 	bl	d4e84 <_ZNK13JsonReference5indexEj>
   d47da:	4a70      	ldr	r2, [pc, #448]	; (d499c <loop+0x234>)
   d47dc:	a90a      	add	r1, sp, #40	; 0x28
   d47de:	a807      	add	r0, sp, #28
   d47e0:	f000 fc62 	bl	d50a8 <_ZNK13JsonReference3keyEPKc>
   d47e4:	4632      	mov	r2, r6
   d47e6:	a907      	add	r1, sp, #28
   d47e8:	a804      	add	r0, sp, #16
   d47ea:	f000 fb4b 	bl	d4e84 <_ZNK13JsonReference5indexEj>
   d47ee:	a807      	add	r0, sp, #28
   d47f0:	f000 fa50 	bl	d4c94 <_ZN13JsonReferenceD1Ev>
   d47f4:	a80a      	add	r0, sp, #40	; 0x28
   d47f6:	f000 fa4d 	bl	d4c94 <_ZN13JsonReferenceD1Ev>
   d47fa:	a80e      	add	r0, sp, #56	; 0x38
   d47fc:	f000 fa4a 	bl	d4c94 <_ZN13JsonReferenceD1Ev>
   d4800:	a812      	add	r0, sp, #72	; 0x48
   d4802:	f000 fa47 	bl	d4c94 <_ZN13JsonReferenceD1Ev>
   d4806:	a816      	add	r0, sp, #88	; 0x58
   d4808:	f000 fa44 	bl	d4c94 <_ZN13JsonReferenceD1Ev>
    String nextStation = train.key("nextStaNm").valueString();
   d480c:	4a64      	ldr	r2, [pc, #400]	; (d49a0 <loop+0x238>)
   d480e:	a904      	add	r1, sp, #16
   d4810:	a816      	add	r0, sp, #88	; 0x58
   d4812:	f000 fc49 	bl	d50a8 <_ZNK13JsonReference3keyEPKc>
   d4816:	a916      	add	r1, sp, #88	; 0x58
   d4818:	a80a      	add	r0, sp, #40	; 0x28
   d481a:	f000 fc5f 	bl	d50dc <_ZNK13JsonReference11valueStringEv>
   d481e:	a816      	add	r0, sp, #88	; 0x58
   d4820:	f000 fa38 	bl	d4c94 <_ZN13JsonReferenceD1Ev>
    String trainDir = train.key("trDr").valueString();
   d4824:	4a5f      	ldr	r2, [pc, #380]	; (d49a4 <loop+0x23c>)
   d4826:	a904      	add	r1, sp, #16
   d4828:	a816      	add	r0, sp, #88	; 0x58
   d482a:	f000 fc3d 	bl	d50a8 <_ZNK13JsonReference3keyEPKc>
   d482e:	a916      	add	r1, sp, #88	; 0x58
   d4830:	a80e      	add	r0, sp, #56	; 0x38
   d4832:	f000 fc53 	bl	d50dc <_ZNK13JsonReference11valueStringEv>
   d4836:	a816      	add	r0, sp, #88	; 0x58
   d4838:	f000 fa2c 	bl	d4c94 <_ZN13JsonReferenceD1Ev>
    int currentTime = train.key("prdt").valueString().substring(14, 16).toInt();
   d483c:	4a5a      	ldr	r2, [pc, #360]	; (d49a8 <loop+0x240>)
   d483e:	a904      	add	r1, sp, #16
   d4840:	a807      	add	r0, sp, #28
   d4842:	f000 fc31 	bl	d50a8 <_ZNK13JsonReference3keyEPKc>
   d4846:	a907      	add	r1, sp, #28
   d4848:	a816      	add	r0, sp, #88	; 0x58
   d484a:	f000 fc47 	bl	d50dc <_ZNK13JsonReference11valueStringEv>
   d484e:	2310      	movs	r3, #16
   d4850:	220e      	movs	r2, #14
   d4852:	a916      	add	r1, sp, #88	; 0x58
   d4854:	a812      	add	r0, sp, #72	; 0x48
   d4856:	f001 fa79 	bl	d5d4c <_ZNK6String9substringEjj>
   d485a:	a812      	add	r0, sp, #72	; 0x48
   d485c:	f001 fa9d 	bl	d5d9a <_ZNK6String5toIntEv>
   d4860:	4604      	mov	r4, r0
   d4862:	a812      	add	r0, sp, #72	; 0x48
   d4864:	f001 f993 	bl	d5b8e <_ZN6StringD1Ev>
   d4868:	a816      	add	r0, sp, #88	; 0x58
   d486a:	f001 f990 	bl	d5b8e <_ZN6StringD1Ev>
   d486e:	a807      	add	r0, sp, #28
   d4870:	f000 fa10 	bl	d4c94 <_ZN13JsonReferenceD1Ev>
    int predictedTime = train.key("arrT").valueString().substring(14, 16).toInt();
   d4874:	4a4d      	ldr	r2, [pc, #308]	; (d49ac <loop+0x244>)
   d4876:	a904      	add	r1, sp, #16
   d4878:	a807      	add	r0, sp, #28
   d487a:	f000 fc15 	bl	d50a8 <_ZNK13JsonReference3keyEPKc>
   d487e:	a907      	add	r1, sp, #28
   d4880:	a816      	add	r0, sp, #88	; 0x58
   d4882:	f000 fc2b 	bl	d50dc <_ZNK13JsonReference11valueStringEv>
   d4886:	2310      	movs	r3, #16
   d4888:	220e      	movs	r2, #14
   d488a:	a916      	add	r1, sp, #88	; 0x58
   d488c:	a812      	add	r0, sp, #72	; 0x48
   d488e:	f001 fa5d 	bl	d5d4c <_ZNK6String9substringEjj>
   d4892:	a812      	add	r0, sp, #72	; 0x48
   d4894:	f001 fa81 	bl	d5d9a <_ZNK6String5toIntEv>
   d4898:	4605      	mov	r5, r0
   d489a:	a812      	add	r0, sp, #72	; 0x48
   d489c:	f001 f977 	bl	d5b8e <_ZN6StringD1Ev>
   d48a0:	a816      	add	r0, sp, #88	; 0x58
   d48a2:	f001 f974 	bl	d5b8e <_ZN6StringD1Ev>
   d48a6:	a807      	add	r0, sp, #28
   d48a8:	f000 f9f4 	bl	d4c94 <_ZN13JsonReferenceD1Ev>
    if(nextStation.length() <= 1){
   d48ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d48ae:	2b01      	cmp	r3, #1
    int timeDiff = predictedTime -  currentTime;
   d48b0:	eba5 0004 	sub.w	r0, r5, r4
	inline unsigned int length(void) const {return len;}
   d48b4:	4c3e      	ldr	r4, [pc, #248]	; (d49b0 <loop+0x248>)
    if(nextStation.length() <= 1){
   d48b6:	d932      	bls.n	d491e <loop+0x1b6>
          redLineOutput[i * 8 + 1 + 2 * (3 - timeDiff)] = ">";
   d48b8:	f1c0 0303 	rsb	r3, r0, #3
   d48bc:	0185      	lsls	r5, r0, #6
   d48be:	f8df 8100 	ldr.w	r8, [pc, #256]	; d49c0 <loop+0x258>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d48c2:	f8df 9100 	ldr.w	r9, [pc, #256]	; d49c4 <loop+0x25c>
   d48c6:	f8df a100 	ldr.w	sl, [pc, #256]	; d49c8 <loop+0x260>
          redLineOutput[i * 8 + timeDiff * 2] = "<";
   d48ca:	f8df b100 	ldr.w	fp, [pc, #256]	; d49cc <loop+0x264>
   d48ce:	eb04 1443 	add.w	r4, r4, r3, lsl #5
   d48d2:	3d60      	subs	r5, #96	; 0x60
    for(int i = 0; i < arraySize(redLineStations); i++){
   d48d4:	2700      	movs	r7, #0
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
   d48d6:	4641      	mov	r1, r8
   d48d8:	a80a      	add	r0, sp, #40	; 0x28
   d48da:	f001 fa06 	bl	d5cea <_ZNK6String6equalsERKS_>
      if(nextStation == redLineStations[i]){
   d48de:	b140      	cbz	r0, d48f2 <loop+0x18a>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d48e0:	4649      	mov	r1, r9
   d48e2:	a80e      	add	r0, sp, #56	; 0x38
   d48e4:	f001 fa0e 	bl	d5d04 <_ZNK6String6equalsEPKc>
        if(trainDir == "1"){
   d48e8:	b1a8      	cbz	r0, d4916 <loop+0x1ae>
          redLineOutput[i * 8 + timeDiff * 2] = "<";
   d48ea:	4659      	mov	r1, fp
   d48ec:	1960      	adds	r0, r4, r5
          redLineOutput[i * 8 + 1 + 2 * (3 - timeDiff)] = ">";
   d48ee:	f001 f9ad 	bl	d5c4c <_ZN6StringaSEPKc>
    for(int i = 0; i < arraySize(redLineStations); i++){
   d48f2:	3701      	adds	r7, #1
   d48f4:	2f21      	cmp	r7, #33	; 0x21
   d48f6:	f108 0810 	add.w	r8, r8, #16
   d48fa:	f104 0480 	add.w	r4, r4, #128	; 0x80
   d48fe:	d1ea      	bne.n	d48d6 <loop+0x16e>
    String trainDir = train.key("trDr").valueString();
   d4900:	a80e      	add	r0, sp, #56	; 0x38
   d4902:	f001 f944 	bl	d5b8e <_ZN6StringD1Ev>
    String nextStation = train.key("nextStaNm").valueString();
   d4906:	a80a      	add	r0, sp, #40	; 0x28
   d4908:	f001 f941 	bl	d5b8e <_ZN6StringD1Ev>
    JsonReference train = parser.getReference().key("ctatt").key("route").index(0).key("train").index(count);
   d490c:	a804      	add	r0, sp, #16
    count++;
   d490e:	3601      	adds	r6, #1
    JsonReference train = parser.getReference().key("ctatt").key("route").index(0).key("train").index(count);
   d4910:	f000 f9c0 	bl	d4c94 <_ZN13JsonReferenceD1Ev>
   d4914:	e74e      	b.n	d47b4 <loop+0x4c>
          redLineOutput[i * 8 + 1 + 2 * (3 - timeDiff)] = ">";
   d4916:	4651      	mov	r1, sl
   d4918:	f104 0010 	add.w	r0, r4, #16
   d491c:	e7e7      	b.n	d48ee <loop+0x186>
    String trainDir = train.key("trDr").valueString();
   d491e:	a80e      	add	r0, sp, #56	; 0x38
   d4920:	f001 f935 	bl	d5b8e <_ZN6StringD1Ev>
    String nextStation = train.key("nextStaNm").valueString();
   d4924:	a80a      	add	r0, sp, #40	; 0x28
   d4926:	f001 f932 	bl	d5b8e <_ZN6StringD1Ev>
    JsonReference train = parser.getReference().key("ctatt").key("route").index(0).key("train").index(count);
   d492a:	a804      	add	r0, sp, #16
   d492c:	f000 f9b2 	bl	d4c94 <_ZN13JsonReferenceD1Ev>
      Serial.print("|");
   d4930:	4f20      	ldr	r7, [pc, #128]	; (d49b4 <loop+0x24c>)
    redLineOutput[i] = "-";
   d4932:	4e21      	ldr	r6, [pc, #132]	; (d49b8 <loop+0x250>)
  for(int i = 0; i < arraySize(redLineOutput); i++){
   d4934:	2500      	movs	r5, #0
   d4936:	f5b5 7f84 	cmp.w	r5, #264	; 0x108
   d493a:	d012      	beq.n	d4962 <loop+0x1fa>
    if(i % 8 == 0){
   d493c:	076b      	lsls	r3, r5, #29
   d493e:	d104      	bne.n	d494a <loop+0x1e2>
      Serial.print("|");
   d4940:	f002 fd88 	bl	d7454 <_Z16_fetch_usbserialv>
   d4944:	4639      	mov	r1, r7
   d4946:	f002 fb9d 	bl	d7084 <_ZN5Print5printEPKc>
    Serial.print(redLineOutput[i]);
   d494a:	f002 fd83 	bl	d7454 <_Z16_fetch_usbserialv>
   d494e:	6821      	ldr	r1, [r4, #0]
   d4950:	f002 fb98 	bl	d7084 <_ZN5Print5printEPKc>
    redLineOutput[i] = "-";
   d4954:	4620      	mov	r0, r4
   d4956:	4631      	mov	r1, r6
   d4958:	f001 f978 	bl	d5c4c <_ZN6StringaSEPKc>
  for(int i = 0; i < arraySize(redLineOutput); i++){
   d495c:	3501      	adds	r5, #1
   d495e:	3410      	adds	r4, #16
   d4960:	e7e9      	b.n	d4936 <loop+0x1ce>
  Serial.println("\n");
   d4962:	f002 fd77 	bl	d7454 <_Z16_fetch_usbserialv>
   d4966:	4915      	ldr	r1, [pc, #84]	; (d49bc <loop+0x254>)
   d4968:	f002 fb9f 	bl	d70aa <_ZN5Print7printlnEPKc>
  delay(5000);
   d496c:	f241 3088 	movw	r0, #5000	; 0x1388
   d4970:	f002 fbdc 	bl	d712c <delay>
   d4974:	e71a      	b.n	d47ac <loop+0x44>
   d4976:	bf00      	nop
   d4978:	2003e614 	.word	0x2003e614
   d497c:	000d85a0 	.word	0x000d85a0
   d4980:	2003e5c8 	.word	0x2003e5c8
   d4984:	20034560 	.word	0x20034560
   d4988:	20034498 	.word	0x20034498
   d498c:	20036d7c 	.word	0x20036d7c
   d4990:	000d85a4 	.word	0x000d85a4
   d4994:	000d85b3 	.word	0x000d85b3
   d4998:	000d85b9 	.word	0x000d85b9
   d499c:	000d85bf 	.word	0x000d85bf
   d49a0:	000d85c5 	.word	0x000d85c5
   d49a4:	000d85cf 	.word	0x000d85cf
   d49a8:	000d85d4 	.word	0x000d85d4
   d49ac:	000d85d9 	.word	0x000d85d9
   d49b0:	2003d338 	.word	0x2003d338
   d49b4:	000d85e4 	.word	0x000d85e4
   d49b8:	000d85e6 	.word	0x000d85e6
   d49bc:	000d863c 	.word	0x000d863c
   d49c0:	2003e3b8 	.word	0x2003e3b8
   d49c4:	000d85de 	.word	0x000d85de
   d49c8:	000d85e2 	.word	0x000d85e2
   d49cc:	000d85e0 	.word	0x000d85e0

000d49d0 <_ZN10HttpClientC1Ev>:
static const uint16_t TIMEOUT = 5000; // Allow maximum 5s between data packets.

/**
* Constructor.
*/
HttpClient::HttpClient()
   d49d0:	b510      	push	{r4, lr}
   d49d2:	4604      	mov	r4, r0
   d49d4:	f003 f886 	bl	d7ae4 <_ZN9TCPClientC1Ev>
{

}
   d49d8:	4620      	mov	r0, r4
   d49da:	bd10      	pop	{r4, pc}

000d49dc <_ZN10HttpClient10sendHeaderEPKcS1_>:

/**
* Method to send a header, should only be called from within the class.
*/
void HttpClient::sendHeader(const char* aHeaderName, const char* aHeaderValue)
{
   d49dc:	b538      	push	{r3, r4, r5, lr}
   d49de:	4604      	mov	r4, r0
   d49e0:	4615      	mov	r5, r2
    client.print(aHeaderName);
   d49e2:	f002 fb4f 	bl	d7084 <_ZN5Print5printEPKc>
    client.print(": ");
   d49e6:	4905      	ldr	r1, [pc, #20]	; (d49fc <_ZN10HttpClient10sendHeaderEPKcS1_+0x20>)
   d49e8:	4620      	mov	r0, r4
   d49ea:	f002 fb4b 	bl	d7084 <_ZN5Print5printEPKc>
    client.println(aHeaderValue);
   d49ee:	4629      	mov	r1, r5
   d49f0:	4620      	mov	r0, r4
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
   d49f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    client.println(aHeaderValue);
   d49f6:	f002 bb58 	b.w	d70aa <_ZN5Print7printlnEPKc>
   d49fa:	bf00      	nop
   d49fc:	000d8395 	.word	0x000d8395

000d4a00 <_ZN10HttpClient10sendHeaderEPKci>:

void HttpClient::sendHeader(const char* aHeaderName, const int aHeaderValue)
{
   d4a00:	b538      	push	{r3, r4, r5, lr}
   d4a02:	4605      	mov	r5, r0
   d4a04:	4614      	mov	r4, r2
    client.print(aHeaderName);
   d4a06:	f002 fb3d 	bl	d7084 <_ZN5Print5printEPKc>
    client.print(": ");
   d4a0a:	490b      	ldr	r1, [pc, #44]	; (d4a38 <_ZN10HttpClient10sendHeaderEPKci+0x38>)
   d4a0c:	4628      	mov	r0, r5
   d4a0e:	f002 fb39 	bl	d7084 <_ZN5Print5printEPKc>
        if (n < 0 && base == 10) {
   d4a12:	2c00      	cmp	r4, #0
   d4a14:	da0d      	bge.n	d4a32 <_ZN10HttpClient10sendHeaderEPKci+0x32>
            t = print('-');
   d4a16:	212d      	movs	r1, #45	; 0x2d
   d4a18:	4628      	mov	r0, r5
   d4a1a:	f002 fb37 	bl	d708c <_ZN5Print5printEc>
            val = -n;
   d4a1e:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   d4a20:	4628      	mov	r0, r5
   d4a22:	220a      	movs	r2, #10
   d4a24:	f002 fb4b 	bl	d70be <_ZN5Print11printNumberEmh>
        n += println();
   d4a28:	4628      	mov	r0, r5
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
   d4a2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4a2e:	f002 bb30 	b.w	d7092 <_ZN5Print7printlnEv>
            val = n;
   d4a32:	4621      	mov	r1, r4
   d4a34:	e7f4      	b.n	d4a20 <_ZN10HttpClient10sendHeaderEPKci+0x20>
   d4a36:	bf00      	nop
   d4a38:	000d8395 	.word	0x000d8395

000d4a3c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>:
* Method to send an HTTP Request. Allocate variables in your application code
* in the aResponse struct and set the headers and the options in the aRequest
* struct.
*/
void HttpClient::request(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[], const char* aHttpMethod)
{
   d4a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4a40:	460e      	mov	r6, r1
   d4a42:	b091      	sub	sp, #68	; 0x44
   d4a44:	4698      	mov	r8, r3
    // If a proper response code isn't received it will be set to -1.
    aResponse.status = -1;
   d4a46:	f04f 33ff 	mov.w	r3, #4294967295
   d4a4a:	6013      	str	r3, [r2, #0]
{
   d4a4c:	4604      	mov	r4, r0
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d4a4e:	2100      	movs	r1, #0
   d4a50:	4630      	mov	r0, r6
   d4a52:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
   d4a56:	4617      	mov	r7, r2
   d4a58:	f001 f954 	bl	d5d04 <_ZNK6String6equalsEPKc>
   d4a5c:	f8d6 e038 	ldr.w	lr, [r6, #56]	; 0x38

    // NOTE: The default port tertiary statement is unpredictable if the request structure is not initialised
    // http_request_t request = {0} or memset(&request, 0, sizeof(http_request_t)) should be used
    // to ensure all fields are zero
    bool connected = false;
    if(aRequest.hostname!=NULL) {
   d4a60:	4603      	mov	r3, r0
   d4a62:	b998      	cbnz	r0, d4a8c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x50>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   d4a64:	f1be 0f00 	cmp.w	lr, #0
   d4a68:	bf14      	ite	ne
   d4a6a:	4672      	movne	r2, lr
   d4a6c:	2250      	moveq	r2, #80	; 0x50
        connected = client.connect(aRequest.hostname.c_str(), (aRequest.port) ? aRequest.port : 80 );
   d4a6e:	6831      	ldr	r1, [r6, #0]
   d4a70:	b292      	uxth	r2, r2
   d4a72:	4620      	mov	r0, r4
   d4a74:	f003 f84a 	bl	d7b0c <_ZN9TCPClient7connectEPKctm>
    }   else {
        connected = client.connect(aRequest.ip, aRequest.port);
   d4a78:	1e05      	subs	r5, r0, #0
   d4a7a:	bf18      	it	ne
   d4a7c:	2501      	movne	r5, #1
    } else {
        Serial.println("HttpClient>\tConnection failed.");
    }
    #endif

    if (!connected) {
   d4a7e:	b9c5      	cbnz	r5, d4ab2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x76>
        client.stop();
   d4a80:	4620      	mov	r0, r4
   d4a82:	f002 ffe5 	bl	d7a50 <_ZN9TCPClient4stopEv>
    }
    // Return the entire message body from bodyPos+4 till end.
    aResponse.body = "";
    aResponse.body += raw_response.substring(bodyPos+4);
    aResponse.status = atoi(statusCode.c_str());
}
   d4a86:	b011      	add	sp, #68	; 0x44
   d4a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d4a8c:	4b77      	ldr	r3, [pc, #476]	; (d4c6c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x230>)
   d4a8e:	930a      	str	r3, [sp, #40]	; 0x28
   d4a90:	f106 0c14 	add.w	ip, r6, #20
   d4a94:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d4a98:	ad0b      	add	r5, sp, #44	; 0x2c
   d4a9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4a9c:	f8dc 3000 	ldr.w	r3, [ip]
   d4aa0:	702b      	strb	r3, [r5, #0]
        connected = client.connect(aRequest.ip, aRequest.port);
   d4aa2:	fa1f f28e 	uxth.w	r2, lr
   d4aa6:	2300      	movs	r3, #0
   d4aa8:	a90a      	add	r1, sp, #40	; 0x28
   d4aaa:	4620      	mov	r0, r4
   d4aac:	f002 fefb 	bl	d78a6 <_ZN9TCPClient7connectE9IPAddresstm>
   d4ab0:	e7e2      	b.n	d4a78 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3c>
    client.print(aHttpMethod);
   d4ab2:	4649      	mov	r1, r9
   d4ab4:	4620      	mov	r0, r4
   d4ab6:	f002 fae5 	bl	d7084 <_ZN5Print5printEPKc>
    client.print(" ");
   d4aba:	496d      	ldr	r1, [pc, #436]	; (d4c70 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x234>)
   d4abc:	4620      	mov	r0, r4
   d4abe:	f002 fae1 	bl	d7084 <_ZN5Print5printEPKc>
    client.print(aRequest.path);
   d4ac2:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   d4ac4:	4620      	mov	r0, r4
   d4ac6:	f002 fadd 	bl	d7084 <_ZN5Print5printEPKc>
    client.print(" HTTP/1.0\r\n");
   d4aca:	496a      	ldr	r1, [pc, #424]	; (d4c74 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x238>)
   d4acc:	4620      	mov	r0, r4
   d4ace:	f002 fad9 	bl	d7084 <_ZN5Print5printEPKc>
    sendHeader("Connection", "close"); // Not supporting keep-alive for now.
   d4ad2:	4969      	ldr	r1, [pc, #420]	; (d4c78 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x23c>)
   d4ad4:	4a69      	ldr	r2, [pc, #420]	; (d4c7c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x240>)
   d4ad6:	4620      	mov	r0, r4
   d4ad8:	f7ff ff80 	bl	d49dc <_ZN10HttpClient10sendHeaderEPKcS1_>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d4adc:	2100      	movs	r1, #0
   d4ade:	4630      	mov	r0, r6
   d4ae0:	f001 f910 	bl	d5d04 <_ZNK6String6equalsEPKc>
    if(aRequest.hostname!=NULL) {
   d4ae4:	b920      	cbnz	r0, d4af0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xb4>
        sendHeader("HOST", aRequest.hostname.c_str());
   d4ae6:	6832      	ldr	r2, [r6, #0]
   d4ae8:	4965      	ldr	r1, [pc, #404]	; (d4c80 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x244>)
   d4aea:	4620      	mov	r0, r4
   d4aec:	f7ff ff76 	bl	d49dc <_ZN10HttpClient10sendHeaderEPKcS1_>
    if (aRequest.body != NULL) {
   d4af0:	f106 0a3c 	add.w	sl, r6, #60	; 0x3c
   d4af4:	2100      	movs	r1, #0
   d4af6:	4650      	mov	r0, sl
   d4af8:	f001 f904 	bl	d5d04 <_ZNK6String6equalsEPKc>
   d4afc:	b928      	cbnz	r0, d4b0a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xce>
        sendHeader("Content-Length", (aRequest.body).length());
   d4afe:	6c72      	ldr	r2, [r6, #68]	; 0x44
        sendHeader("Content-Length", 0);
   d4b00:	4960      	ldr	r1, [pc, #384]	; (d4c84 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x248>)
   d4b02:	4620      	mov	r0, r4
   d4b04:	f7ff ff7c 	bl	d4a00 <_ZN10HttpClient10sendHeaderEPKci>
   d4b08:	e006      	b.n	d4b18 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xdc>
    } else if (strcmp(aHttpMethod, HTTP_METHOD_POST) == 0) { //Check to see if its a Post method.
   d4b0a:	495f      	ldr	r1, [pc, #380]	; (d4c88 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x24c>)
   d4b0c:	4648      	mov	r0, r9
   d4b0e:	f003 fb3f 	bl	d8190 <strcmp>
   d4b12:	4602      	mov	r2, r0
   d4b14:	2800      	cmp	r0, #0
   d4b16:	d0f3      	beq.n	d4b00 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xc4>
    if (headers != NULL)
   d4b18:	f1b8 0f00 	cmp.w	r8, #0
   d4b1c:	d00e      	beq.n	d4b3c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x100>
        while (headers[i].header != NULL)
   d4b1e:	f8d8 1000 	ldr.w	r1, [r8]
   d4b22:	b159      	cbz	r1, d4b3c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x100>
            if (headers[i].value != NULL) {
   d4b24:	f8d8 2004 	ldr.w	r2, [r8, #4]
                sendHeader(headers[i].header, headers[i].value);
   d4b28:	4620      	mov	r0, r4
            if (headers[i].value != NULL) {
   d4b2a:	b122      	cbz	r2, d4b36 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xfa>
                sendHeader(headers[i].header, headers[i].value);
   d4b2c:	f7ff ff56 	bl	d49dc <_ZN10HttpClient10sendHeaderEPKcS1_>
            i++;
   d4b30:	f108 0808 	add.w	r8, r8, #8
        while (headers[i].header != NULL)
   d4b34:	e7f3      	b.n	d4b1e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xe2>
    client.println(aHeaderName);
   d4b36:	f002 fab8 	bl	d70aa <_ZN5Print7printlnEPKc>
}
   d4b3a:	e7f9      	b.n	d4b30 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xf4>
    client.println();
   d4b3c:	4620      	mov	r0, r4
   d4b3e:	f002 faa8 	bl	d7092 <_ZN5Print7printlnEv>
    client.flush();
   d4b42:	4620      	mov	r0, r4
   d4b44:	f002 fda2 	bl	d768c <_ZN9TCPClient5flushEv>
   d4b48:	2100      	movs	r1, #0
   d4b4a:	4650      	mov	r0, sl
   d4b4c:	f001 f8da 	bl	d5d04 <_ZNK6String6equalsEPKc>
    if (aRequest.body != NULL) {
   d4b50:	b918      	cbnz	r0, d4b5a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x11e>
        client.println(aRequest.body);
   d4b52:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
   d4b54:	4620      	mov	r0, r4
   d4b56:	f002 faa8 	bl	d70aa <_ZN5Print7printlnEPKc>
    memset(&buffer[0], 0, sizeof(buffer));
   d4b5a:	f104 0b1c 	add.w	fp, r4, #28
   d4b5e:	f44f 5220 	mov.w	r2, #10240	; 0x2800
   d4b62:	2100      	movs	r1, #0
   d4b64:	4658      	mov	r0, fp
   d4b66:	f003 fae7 	bl	d8138 <memset>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4b6a:	f000 fd1f 	bl	d55ac <HAL_Timer_Get_Milli_Seconds>
   d4b6e:	9001      	str	r0, [sp, #4]
   d4b70:	f000 fd1c 	bl	d55ac <HAL_Timer_Get_Milli_Seconds>
    bool error = false;
   d4b74:	f04f 0800 	mov.w	r8, #0
                buffer[bufferPosition] = '\0'; // Null-terminate buffer
   d4b78:	f504 5a20 	add.w	sl, r4, #10240	; 0x2800
    unsigned int bufferPosition = 0;
   d4b7c:	4646      	mov	r6, r8
                buffer[bufferPosition] = '\0'; // Null-terminate buffer
   d4b7e:	f10a 0a1b 	add.w	sl, sl, #27
        while (client.available()) {
   d4b82:	4620      	mov	r0, r4
   d4b84:	f002 ff0a 	bl	d799c <_ZN9TCPClient9availableEv>
   d4b88:	b1d8      	cbz	r0, d4bc2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x186>
            char c = client.read();
   d4b8a:	4620      	mov	r0, r4
   d4b8c:	f002 fe3f 	bl	d780e <_ZN9TCPClient4readEv>
   d4b90:	4681      	mov	r9, r0
   d4b92:	f000 fd0b 	bl	d55ac <HAL_Timer_Get_Milli_Seconds>
            if (bufferPosition < sizeof(buffer)-1) {
   d4b96:	f242 73fe 	movw	r3, #10238	; 0x27fe
   d4b9a:	429e      	cmp	r6, r3
   d4b9c:	9001      	str	r0, [sp, #4]
   d4b9e:	d804      	bhi.n	d4baa <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x16e>
                buffer[bufferPosition] = c;
   d4ba0:	19a3      	adds	r3, r4, r6
            char c = client.read();
   d4ba2:	f883 901c 	strb.w	r9, [r3, #28]
            bufferPosition++;
   d4ba6:	3601      	adds	r6, #1
        while (client.available()) {
   d4ba8:	e7eb      	b.n	d4b82 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x146>
            } else if ((bufferPosition == sizeof(buffer)-1)) {
   d4baa:	f242 73ff 	movw	r3, #10239	; 0x27ff
   d4bae:	429e      	cmp	r6, r3
   d4bb0:	d1f9      	bne.n	d4ba6 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x16a>
                buffer[bufferPosition] = '\0'; // Null-terminate buffer
   d4bb2:	2300      	movs	r3, #0
   d4bb4:	f88a 3000 	strb.w	r3, [sl]
                client.stop();
   d4bb8:	4620      	mov	r0, r4
   d4bba:	f002 ff49 	bl	d7a50 <_ZN9TCPClient4stopEv>
                error = true;
   d4bbe:	46a8      	mov	r8, r5
   d4bc0:	e7f1      	b.n	d4ba6 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x16a>
        buffer[bufferPosition] = '\0'; // Null-terminate buffer
   d4bc2:	19a3      	adds	r3, r4, r6
   d4bc4:	7718      	strb	r0, [r3, #28]
   d4bc6:	f000 fcf1 	bl	d55ac <HAL_Timer_Get_Milli_Seconds>
        timeout = millis() - lastRead > TIMEOUT;
   d4bca:	9b01      	ldr	r3, [sp, #4]
   d4bcc:	eba0 0903 	sub.w	r9, r0, r3
        if (!error && !timeout) {
   d4bd0:	f1b8 0f00 	cmp.w	r8, #0
   d4bd4:	d106      	bne.n	d4be4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1a8>
   d4bd6:	f241 3388 	movw	r3, #5000	; 0x1388
   d4bda:	4599      	cmp	r9, r3
   d4bdc:	d802      	bhi.n	d4be4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1a8>
            delay(200);
   d4bde:	20c8      	movs	r0, #200	; 0xc8
   d4be0:	f002 faa4 	bl	d712c <delay>
    } while (client.connected() && !timeout && !error);
   d4be4:	4620      	mov	r0, r4
   d4be6:	f002 fd52 	bl	d768e <_ZN9TCPClient9connectedEv>
   d4bea:	b130      	cbz	r0, d4bfa <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1be>
   d4bec:	f241 3388 	movw	r3, #5000	; 0x1388
   d4bf0:	4599      	cmp	r9, r3
   d4bf2:	d802      	bhi.n	d4bfa <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1be>
   d4bf4:	f1b8 0f00 	cmp.w	r8, #0
   d4bf8:	d0c3      	beq.n	d4b82 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x146>
    client.stop();
   d4bfa:	4620      	mov	r0, r4
   d4bfc:	f002 ff28 	bl	d7a50 <_ZN9TCPClient4stopEv>
    String raw_response(buffer);
   d4c00:	4659      	mov	r1, fp
   d4c02:	a802      	add	r0, sp, #8
   d4c04:	f001 f80e 	bl	d5c24 <_ZN6StringC1EPKc>
    String statusCode = raw_response.substring(9,12);
   d4c08:	230c      	movs	r3, #12
   d4c0a:	2209      	movs	r2, #9
   d4c0c:	a902      	add	r1, sp, #8
   d4c0e:	a806      	add	r0, sp, #24
   d4c10:	f001 f89c 	bl	d5d4c <_ZNK6String9substringEjj>
    int bodyPos = raw_response.indexOf("\r\n\r\n");
   d4c14:	491d      	ldr	r1, [pc, #116]	; (d4c8c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x250>)
   d4c16:	a80a      	add	r0, sp, #40	; 0x28
   d4c18:	f001 f804 	bl	d5c24 <_ZN6StringC1EPKc>
   d4c1c:	a90a      	add	r1, sp, #40	; 0x28
   d4c1e:	a802      	add	r0, sp, #8
   d4c20:	f001 f891 	bl	d5d46 <_ZNK6String7indexOfERKS_>
   d4c24:	4604      	mov	r4, r0
   d4c26:	a80a      	add	r0, sp, #40	; 0x28
   d4c28:	f000 ffb1 	bl	d5b8e <_ZN6StringD1Ev>
    if (bodyPos == -1) {
   d4c2c:	1c63      	adds	r3, r4, #1
   d4c2e:	d106      	bne.n	d4c3e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x202>
    String statusCode = raw_response.substring(9,12);
   d4c30:	a806      	add	r0, sp, #24
   d4c32:	f000 ffac 	bl	d5b8e <_ZN6StringD1Ev>
    String raw_response(buffer);
   d4c36:	a802      	add	r0, sp, #8
   d4c38:	f000 ffa9 	bl	d5b8e <_ZN6StringD1Ev>
   d4c3c:	e723      	b.n	d4a86 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x4a>
    aResponse.body = "";
   d4c3e:	1d3d      	adds	r5, r7, #4
   d4c40:	4913      	ldr	r1, [pc, #76]	; (d4c90 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x254>)
   d4c42:	4628      	mov	r0, r5
   d4c44:	f001 f802 	bl	d5c4c <_ZN6StringaSEPKc>
    aResponse.body += raw_response.substring(bodyPos+4);
   d4c48:	1d22      	adds	r2, r4, #4
   d4c4a:	a902      	add	r1, sp, #8
   d4c4c:	a80a      	add	r0, sp, #40	; 0x28
   d4c4e:	f001 f89d 	bl	d5d8c <_ZNK6String9substringEj>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   d4c52:	a90a      	add	r1, sp, #40	; 0x28
   d4c54:	4628      	mov	r0, r5
   d4c56:	f001 f822 	bl	d5c9e <_ZN6String6concatERKS_>
   d4c5a:	a80a      	add	r0, sp, #40	; 0x28
   d4c5c:	f000 ff97 	bl	d5b8e <_ZN6StringD1Ev>
    aResponse.status = atoi(statusCode.c_str());
   d4c60:	9806      	ldr	r0, [sp, #24]
   d4c62:	f003 fa1d 	bl	d80a0 <atoi>
   d4c66:	6038      	str	r0, [r7, #0]
   d4c68:	e7e2      	b.n	d4c30 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1f4>
   d4c6a:	bf00      	nop
   d4c6c:	000d8858 	.word	0x000d8858
   d4c70:	000d83a5 	.word	0x000d83a5
   d4c74:	000d8603 	.word	0x000d8603
   d4c78:	000d8615 	.word	0x000d8615
   d4c7c:	000d860f 	.word	0x000d860f
   d4c80:	000d8620 	.word	0x000d8620
   d4c84:	000d8625 	.word	0x000d8625
   d4c88:	000d8634 	.word	0x000d8634
   d4c8c:	000d8639 	.word	0x000d8639
   d4c90:	000d863d 	.word	0x000d863d

000d4c94 <_ZN13JsonReferenceD1Ev>:
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {

}

JsonReference::~JsonReference() {
}
   d4c94:	4770      	bx	lr

000d4c96 <_ZN13JsonReferenceD0Ev>:
JsonReference::~JsonReference() {
   d4c96:	b510      	push	{r4, lr}
}
   d4c98:	210c      	movs	r1, #12
JsonReference::~JsonReference() {
   d4c9a:	4604      	mov	r4, r0
}
   d4c9c:	f003 f8e7 	bl	d7e6e <_ZdlPvj>
   d4ca0:	4620      	mov	r0, r4
   d4ca2:	bd10      	pop	{r4, pc}

000d4ca4 <_ZN10JsonBufferD1Ev>:
JsonBuffer::~JsonBuffer() {
   d4ca4:	b510      	push	{r4, lr}
   d4ca6:	4b05      	ldr	r3, [pc, #20]	; (d4cbc <_ZN10JsonBufferD1Ev+0x18>)
   d4ca8:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
   d4caa:	7c03      	ldrb	r3, [r0, #16]
JsonBuffer::~JsonBuffer() {
   d4cac:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
   d4cae:	b91b      	cbnz	r3, d4cb8 <_ZN10JsonBufferD1Ev+0x14>
   d4cb0:	6840      	ldr	r0, [r0, #4]
   d4cb2:	b108      	cbz	r0, d4cb8 <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
   d4cb4:	f000 fec0 	bl	d5a38 <free>
}
   d4cb8:	4620      	mov	r0, r4
   d4cba:	bd10      	pop	{r4, pc}
   d4cbc:	000d864c 	.word	0x000d864c

000d4cc0 <_ZN10JsonBufferD0Ev>:
JsonBuffer::~JsonBuffer() {
   d4cc0:	b510      	push	{r4, lr}
   d4cc2:	4604      	mov	r4, r0
}
   d4cc4:	f7ff ffee 	bl	d4ca4 <_ZN10JsonBufferD1Ev>
   d4cc8:	4620      	mov	r0, r4
   d4cca:	2114      	movs	r1, #20
   d4ccc:	f003 f8cf 	bl	d7e6e <_ZdlPvj>
   d4cd0:	4620      	mov	r0, r4
   d4cd2:	bd10      	pop	{r4, pc}

000d4cd4 <_ZN10JsonParserD1Ev>:
JsonParser::~JsonParser() {
   d4cd4:	b510      	push	{r4, lr}
   d4cd6:	4b07      	ldr	r3, [pc, #28]	; (d4cf4 <_ZN10JsonParserD1Ev+0x20>)
   d4cd8:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && tokens) {
   d4cda:	7c03      	ldrb	r3, [r0, #16]
JsonParser::~JsonParser() {
   d4cdc:	4604      	mov	r4, r0
	if (!staticBuffers && tokens) {
   d4cde:	b91b      	cbnz	r3, d4ce8 <_ZN10JsonParserD1Ev+0x14>
   d4ce0:	6940      	ldr	r0, [r0, #20]
   d4ce2:	b108      	cbz	r0, d4ce8 <_ZN10JsonParserD1Ev+0x14>
		free(tokens);
   d4ce4:	f000 fea8 	bl	d5a38 <free>
JsonParser::~JsonParser() {
   d4ce8:	4620      	mov	r0, r4
   d4cea:	f7ff ffdb 	bl	d4ca4 <_ZN10JsonBufferD1Ev>
}
   d4cee:	4620      	mov	r0, r4
   d4cf0:	bd10      	pop	{r4, pc}
   d4cf2:	bf00      	nop
   d4cf4:	000d865c 	.word	0x000d865c

000d4cf8 <_ZN10JsonParserD0Ev>:
JsonParser::~JsonParser() {
   d4cf8:	b510      	push	{r4, lr}
   d4cfa:	4604      	mov	r4, r0
}
   d4cfc:	f7ff ffea 	bl	d4cd4 <_ZN10JsonParserD1Ev>
   d4d00:	4620      	mov	r0, r4
   d4d02:	212c      	movs	r1, #44	; 0x2c
   d4d04:	f003 f8b3 	bl	d7e6e <_ZdlPvj>
   d4d08:	4620      	mov	r0, r4
   d4d0a:	bd10      	pop	{r4, pc}

000d4d0c <_ZN10JsonBuffer8allocateEj>:
bool JsonBuffer::allocate(size_t len) {
   d4d0c:	b538      	push	{r3, r4, r5, lr}
	if (!staticBuffers) {
   d4d0e:	7c03      	ldrb	r3, [r0, #16]
bool JsonBuffer::allocate(size_t len) {
   d4d10:	4604      	mov	r4, r0
   d4d12:	460d      	mov	r5, r1
	if (!staticBuffers) {
   d4d14:	b10b      	cbz	r3, d4d1a <_ZN10JsonBuffer8allocateEj+0xe>
		return false;
   d4d16:	2000      	movs	r0, #0
}
   d4d18:	bd38      	pop	{r3, r4, r5, pc}
		if (buffer) {
   d4d1a:	6840      	ldr	r0, [r0, #4]
   d4d1c:	b138      	cbz	r0, d4d2e <_ZN10JsonBuffer8allocateEj+0x22>
			newBuffer = (char *) realloc(buffer, len);
   d4d1e:	f000 fe93 	bl	d5a48 <realloc>
		if (newBuffer) {
   d4d22:	2800      	cmp	r0, #0
   d4d24:	d0f7      	beq.n	d4d16 <_ZN10JsonBuffer8allocateEj+0xa>
			bufferLen = len;
   d4d26:	e9c4 0501 	strd	r0, r5, [r4, #4]
			return true;
   d4d2a:	2001      	movs	r0, #1
   d4d2c:	e7f4      	b.n	d4d18 <_ZN10JsonBuffer8allocateEj+0xc>
			newBuffer = (char *) malloc(len);
   d4d2e:	4608      	mov	r0, r1
   d4d30:	f000 fe7a 	bl	d5a28 <malloc>
   d4d34:	e7f5      	b.n	d4d22 <_ZN10JsonBuffer8allocateEj+0x16>

000d4d36 <_ZN10JsonBuffer7addDataEPKcj>:
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   d4d36:	b570      	push	{r4, r5, r6, lr}
   d4d38:	68c3      	ldr	r3, [r0, #12]
   d4d3a:	460e      	mov	r6, r1
   d4d3c:	18d1      	adds	r1, r2, r3
	if (!buffer || (offset + dataLen) > bufferLen) {
   d4d3e:	6843      	ldr	r3, [r0, #4]
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   d4d40:	4604      	mov	r4, r0
   d4d42:	4615      	mov	r5, r2
	if (!buffer || (offset + dataLen) > bufferLen) {
   d4d44:	b173      	cbz	r3, d4d64 <_ZN10JsonBuffer7addDataEPKcj+0x2e>
   d4d46:	6883      	ldr	r3, [r0, #8]
   d4d48:	428b      	cmp	r3, r1
   d4d4a:	d30b      	bcc.n	d4d64 <_ZN10JsonBuffer7addDataEPKcj+0x2e>
	memcpy(&buffer[offset], data, dataLen);
   d4d4c:	6860      	ldr	r0, [r4, #4]
   d4d4e:	68e3      	ldr	r3, [r4, #12]
   d4d50:	462a      	mov	r2, r5
   d4d52:	4631      	mov	r1, r6
   d4d54:	4418      	add	r0, r3
   d4d56:	f003 f9c7 	bl	d80e8 <memcpy>
	offset += dataLen;
   d4d5a:	68e2      	ldr	r2, [r4, #12]
   d4d5c:	442a      	add	r2, r5
   d4d5e:	60e2      	str	r2, [r4, #12]
	return true;
   d4d60:	2001      	movs	r0, #1
}
   d4d62:	bd70      	pop	{r4, r5, r6, pc}
		if (!allocate(offset + dataLen)) {
   d4d64:	4620      	mov	r0, r4
   d4d66:	f7ff ffd1 	bl	d4d0c <_ZN10JsonBuffer8allocateEj>
   d4d6a:	2800      	cmp	r0, #0
   d4d6c:	d1ee      	bne.n	d4d4c <_ZN10JsonBuffer7addDataEPKcj+0x16>
   d4d6e:	e7f8      	b.n	d4d62 <_ZN10JsonBuffer7addDataEPKcj+0x2c>

000d4d70 <_ZN10JsonBuffer5clearEv>:
	if (buffer && bufferLen) {
   d4d70:	6843      	ldr	r3, [r0, #4]
	offset = 0;
   d4d72:	2100      	movs	r1, #0
   d4d74:	60c1      	str	r1, [r0, #12]
	if (buffer && bufferLen) {
   d4d76:	b123      	cbz	r3, d4d82 <_ZN10JsonBuffer5clearEv+0x12>
   d4d78:	6882      	ldr	r2, [r0, #8]
   d4d7a:	b112      	cbz	r2, d4d82 <_ZN10JsonBuffer5clearEv+0x12>
		memset(buffer, 0, bufferLen);
   d4d7c:	4618      	mov	r0, r3
   d4d7e:	f003 b9db 	b.w	d8138 <memset>
}
   d4d82:	4770      	bx	lr

000d4d84 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>:
JsonParser::JsonParser(char *buffer, size_t bufferLen, JsonParserGeneratorRK::jsmntok_t *tokens, size_t maxTokens) :
   d4d84:	b510      	push	{r4, lr}
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d4d86:	e9c0 1201 	strd	r1, r2, [r0, #4]
   d4d8a:	2200      	movs	r2, #0
   d4d8c:	60c2      	str	r2, [r0, #12]
   d4d8e:	2201      	movs	r2, #1
   d4d90:	7402      	strb	r2, [r0, #16]
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {
   d4d92:	6143      	str	r3, [r0, #20]
   d4d94:	4a02      	ldr	r2, [pc, #8]	; (d4da0 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj+0x1c>)
   d4d96:	9b02      	ldr	r3, [sp, #8]
   d4d98:	6002      	str	r2, [r0, #0]
   d4d9a:	61c3      	str	r3, [r0, #28]
}
   d4d9c:	bd10      	pop	{r4, pc}
   d4d9e:	bf00      	nop
   d4da0:	000d865c 	.word	0x000d865c

000d4da4 <_ZNK10JsonParser12getReferenceEv>:
	if (tokens < tokensEnd) {
   d4da4:	e9d1 2305 	ldrd	r2, r3, [r1, #20]
   d4da8:	429a      	cmp	r2, r3
   d4daa:	4b04      	ldr	r3, [pc, #16]	; (d4dbc <_ZNK10JsonParser12getReferenceEv+0x18>)

JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
   d4dac:	bf38      	it	cc
   d4dae:	6082      	strcc	r2, [r0, #8]
   d4db0:	e9c0 3100 	strd	r3, r1, [r0]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   d4db4:	bf24      	itt	cs
   d4db6:	2300      	movcs	r3, #0
   d4db8:	6083      	strcs	r3, [r0, #8]
}
   d4dba:	4770      	bx	lr
   d4dbc:	000d866c 	.word	0x000d866c

000d4dc0 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>:
bool JsonParser::skipObject(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&obj) const {
   d4dc0:	b570      	push	{r4, r5, r6, lr}
	int curObjectEnd = obj->end;
   d4dc2:	6813      	ldr	r3, [r2, #0]
   d4dc4:	689d      	ldr	r5, [r3, #8]
	while(++obj < tokensEnd && obj->end < container->end && obj->end <= curObjectEnd) {
   d4dc6:	6813      	ldr	r3, [r2, #0]
   d4dc8:	f103 0410 	add.w	r4, r3, #16
   d4dcc:	6014      	str	r4, [r2, #0]
   d4dce:	6986      	ldr	r6, [r0, #24]
   d4dd0:	42b4      	cmp	r4, r6
   d4dd2:	d20a      	bcs.n	d4dea <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2a>
   d4dd4:	699b      	ldr	r3, [r3, #24]
   d4dd6:	688c      	ldr	r4, [r1, #8]
   d4dd8:	42a3      	cmp	r3, r4
   d4dda:	da01      	bge.n	d4de0 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x20>
   d4ddc:	42ab      	cmp	r3, r5
   d4dde:	ddf2      	ble.n	d4dc6 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x6>
	if (obj >= tokensEnd || obj->end > container->end) {
   d4de0:	42a3      	cmp	r3, r4
   d4de2:	bfcc      	ite	gt
   d4de4:	2000      	movgt	r0, #0
   d4de6:	2001      	movle	r0, #1
   d4de8:	e000      	b.n	d4dec <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2c>
		return false;
   d4dea:	2000      	movs	r0, #0
}
   d4dec:	bd70      	pop	{r4, r5, r6, pc}

000d4dee <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>:
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   d4dee:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d4df2:	9c08      	ldr	r4, [sp, #32]
   d4df4:	4698      	mov	r8, r3
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   d4df6:	f101 0310 	add.w	r3, r1, #16
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   d4dfa:	4605      	mov	r5, r0
   d4dfc:	4617      	mov	r7, r2
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   d4dfe:	9301      	str	r3, [sp, #4]
	size_t index = 0;
   d4e00:	2600      	movs	r6, #0
	while(token < tokensEnd && token->end < container->end) {
   d4e02:	9801      	ldr	r0, [sp, #4]
   d4e04:	69ab      	ldr	r3, [r5, #24]
   d4e06:	4283      	cmp	r3, r0
   d4e08:	d91b      	bls.n	d4e42 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x54>
   d4e0a:	6882      	ldr	r2, [r0, #8]
   d4e0c:	688b      	ldr	r3, [r1, #8]
   d4e0e:	429a      	cmp	r2, r3
   d4e10:	da17      	bge.n	d4e42 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x54>
		if (desiredIndex == index) {
   d4e12:	42a6      	cmp	r6, r4
   d4e14:	d10b      	bne.n	d4e2e <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
			key = token;
   d4e16:	6038      	str	r0, [r7, #0]
			if (skipObject(container, token)) {
   d4e18:	aa01      	add	r2, sp, #4
   d4e1a:	4628      	mov	r0, r5
   d4e1c:	f7ff ffd0 	bl	d4dc0 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
   d4e20:	b128      	cbz	r0, d4e2e <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
				value = token;
   d4e22:	9b01      	ldr	r3, [sp, #4]
   d4e24:	f8c8 3000 	str.w	r3, [r8]
}
   d4e28:	b002      	add	sp, #8
   d4e2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		skipObject(container, token);
   d4e2e:	aa01      	add	r2, sp, #4
   d4e30:	4628      	mov	r0, r5
   d4e32:	f7ff ffc5 	bl	d4dc0 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
		skipObject(container, token);
   d4e36:	aa01      	add	r2, sp, #4
   d4e38:	4628      	mov	r0, r5
		index++;
   d4e3a:	3601      	adds	r6, #1
		skipObject(container, token);
   d4e3c:	f7ff ffc0 	bl	d4dc0 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
   d4e40:	e7df      	b.n	d4e02 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x14>
	return false;
   d4e42:	2000      	movs	r0, #0
   d4e44:	e7f0      	b.n	d4e28 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x3a>

000d4e46 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_>:
bool JsonParser::getValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, size_t desiredIndex, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   d4e46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d4e48:	461f      	mov	r7, r3
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   d4e4a:	f101 0310 	add.w	r3, r1, #16
bool JsonParser::getValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, size_t desiredIndex, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   d4e4e:	4604      	mov	r4, r0
   d4e50:	4616      	mov	r6, r2
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   d4e52:	9301      	str	r3, [sp, #4]
	size_t index = 0;
   d4e54:	2500      	movs	r5, #0
	while(token < tokensEnd && token->end < container->end) {
   d4e56:	9b01      	ldr	r3, [sp, #4]
   d4e58:	69a2      	ldr	r2, [r4, #24]
   d4e5a:	429a      	cmp	r2, r3
   d4e5c:	d90f      	bls.n	d4e7e <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x38>
   d4e5e:	6898      	ldr	r0, [r3, #8]
   d4e60:	688a      	ldr	r2, [r1, #8]
   d4e62:	4290      	cmp	r0, r2
   d4e64:	da0b      	bge.n	d4e7e <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x38>
		if (desiredIndex == index) {
   d4e66:	42b5      	cmp	r5, r6
   d4e68:	d103      	bne.n	d4e72 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x2c>
			value = token;
   d4e6a:	603b      	str	r3, [r7, #0]
			return true;
   d4e6c:	2001      	movs	r0, #1
}
   d4e6e:	b003      	add	sp, #12
   d4e70:	bdf0      	pop	{r4, r5, r6, r7, pc}
		skipObject(container, token);
   d4e72:	aa01      	add	r2, sp, #4
   d4e74:	4620      	mov	r0, r4
		index++;
   d4e76:	3501      	adds	r5, #1
		skipObject(container, token);
   d4e78:	f7ff ffa2 	bl	d4dc0 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
   d4e7c:	e7eb      	b.n	d4e56 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x10>
	return false;
   d4e7e:	2000      	movs	r0, #0
   d4e80:	e7f5      	b.n	d4e6e <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x28>
	...

000d4e84 <_ZNK13JsonReference5indexEj>:
	else {
		return JsonReference(parser);
	}
}

JsonReference JsonReference::index(size_t index) const {
   d4e84:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d4e86:	460d      	mov	r5, r1
	const JsonParserGeneratorRK::jsmntok_t *newToken;

	if (token && parser->getValueTokenByIndex(token, index, newToken)) {
   d4e88:	6889      	ldr	r1, [r1, #8]
   d4e8a:	4e0a      	ldr	r6, [pc, #40]	; (d4eb4 <_ZNK13JsonReference5indexEj+0x30>)
JsonReference JsonReference::index(size_t index) const {
   d4e8c:	4604      	mov	r4, r0
	if (token && parser->getValueTokenByIndex(token, index, newToken)) {
   d4e8e:	b161      	cbz	r1, d4eaa <_ZNK13JsonReference5indexEj+0x26>
   d4e90:	6868      	ldr	r0, [r5, #4]
   d4e92:	ab01      	add	r3, sp, #4
   d4e94:	f7ff ffd7 	bl	d4e46 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_>
   d4e98:	b138      	cbz	r0, d4eaa <_ZNK13JsonReference5indexEj+0x26>
		return JsonReference(parser, newToken);
   d4e9a:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
   d4e9c:	e9c4 6300 	strd	r6, r3, [r4]
   d4ea0:	9b01      	ldr	r3, [sp, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   d4ea2:	60a3      	str	r3, [r4, #8]
	}
	else {
		return JsonReference(parser);
	}
}
   d4ea4:	4620      	mov	r0, r4
   d4ea6:	b002      	add	sp, #8
   d4ea8:	bd70      	pop	{r4, r5, r6, pc}
		return JsonReference(parser);
   d4eaa:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   d4eac:	e9c4 6300 	strd	r6, r3, [r4]
   d4eb0:	2300      	movs	r3, #0
   d4eb2:	e7f6      	b.n	d4ea2 <_ZNK13JsonReference5indexEj+0x1e>
   d4eb4:	000d866c 	.word	0x000d866c

000d4eb8 <_ZN16JsonParserString6appendEc>:
	if (buf && bufLen) {
		memset(buf, 0, bufLen);
	}
}

void JsonParserString::append(char ch) {
   d4eb8:	b510      	push	{r4, lr}
   d4eba:	4604      	mov	r4, r0
	if (str) {
   d4ebc:	6800      	ldr	r0, [r0, #0]
void JsonParserString::append(char ch) {
   d4ebe:	460b      	mov	r3, r1
	if (str) {
   d4ec0:	b128      	cbz	r0, d4ece <_ZN16JsonParserString6appendEc+0x16>
		str->concat(ch);
   d4ec2:	f000 fef0 	bl	d5ca6 <_ZN6String6concatEc>
	}
	else {
		if (buf && length < (bufLen - 1)) {
			buf[length] = ch;
		}
		length++;
   d4ec6:	68e3      	ldr	r3, [r4, #12]
   d4ec8:	3301      	adds	r3, #1
   d4eca:	60e3      	str	r3, [r4, #12]
	}
}
   d4ecc:	bd10      	pop	{r4, pc}
		if (buf && length < (bufLen - 1)) {
   d4ece:	6860      	ldr	r0, [r4, #4]
   d4ed0:	2800      	cmp	r0, #0
   d4ed2:	d0f8      	beq.n	d4ec6 <_ZN16JsonParserString6appendEc+0xe>
   d4ed4:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
   d4ed8:	3a01      	subs	r2, #1
   d4eda:	428a      	cmp	r2, r1
			buf[length] = ch;
   d4edc:	bf88      	it	hi
   d4ede:	5443      	strbhi	r3, [r0, r1]
   d4ee0:	e7f1      	b.n	d4ec6 <_ZN16JsonParserString6appendEc+0xe>

000d4ee2 <_ZN10JsonParser10appendUtf8EtR16JsonParserString>:
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
   d4ee2:	4603      	mov	r3, r0
	if (unicode <= 0x007f) {
   d4ee4:	2b7f      	cmp	r3, #127	; 0x7f
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
   d4ee6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4ee8:	4608      	mov	r0, r1
   d4eea:	b2d9      	uxtb	r1, r3
	if (unicode <= 0x007f) {
   d4eec:	d804      	bhi.n	d4ef8 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x16>
}
   d4eee:	b003      	add	sp, #12
   d4ef0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		str.append((char)value);
   d4ef4:	f7ff bfe0 	b.w	d4eb8 <_ZN16JsonParserString6appendEc>
	if (unicode <= 0x7ff) {
   d4ef8:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   d4efc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   d4f00:	f343 1587 	sbfx	r5, r3, #6, #8
   d4f04:	f041 0480 	orr.w	r4, r1, #128	; 0x80
   d4f08:	d208      	bcs.n	d4f1c <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x3a>
		value = (0b11000000 | ((unicode >> 6) & 0b11111));
   d4f0a:	f065 013f 	orn	r1, r5, #63	; 0x3f
		str.append((char)value);
   d4f0e:	b2c9      	uxtb	r1, r1
   d4f10:	9001      	str	r0, [sp, #4]
		str.append((char)value);
   d4f12:	f7ff ffd1 	bl	d4eb8 <_ZN16JsonParserString6appendEc>
		str.append((char)value);
   d4f16:	9801      	ldr	r0, [sp, #4]
   d4f18:	4621      	mov	r1, r4
   d4f1a:	e7e8      	b.n	d4eee <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0xc>
		value = 0b11100000 | ((unicode >> 12) & 0b1111);
   d4f1c:	0b1b      	lsrs	r3, r3, #12
		str.append((char)value);
   d4f1e:	f043 01e0 	orr.w	r1, r3, #224	; 0xe0
   d4f22:	9001      	str	r0, [sp, #4]
   d4f24:	f7ff ffc8 	bl	d4eb8 <_ZN16JsonParserString6appendEc>
		value = 0b10000000 | ((unicode >> 6) & 0b111111);
   d4f28:	f005 013f 	and.w	r1, r5, #63	; 0x3f
		str.append((char)value);
   d4f2c:	9801      	ldr	r0, [sp, #4]
   d4f2e:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   d4f32:	e7ee      	b.n	d4f12 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x30>

000d4f34 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   d4f34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	bool escape = false;
   d4f38:	2400      	movs	r4, #0
	for(int ii = token->start; ii < token->end; ii++) {
   d4f3a:	684e      	ldr	r6, [r1, #4]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   d4f3c:	f8df a0cc 	ldr.w	sl, [pc, #204]	; d500c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd8>
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   d4f40:	4680      	mov	r8, r0
   d4f42:	460f      	mov	r7, r1
   d4f44:	4615      	mov	r5, r2
			escape = false;
   d4f46:	46a1      	mov	r9, r4
	for(int ii = token->start; ii < token->end; ii++) {
   d4f48:	68b8      	ldr	r0, [r7, #8]
   d4f4a:	42b0      	cmp	r0, r6
   d4f4c:	dd5a      	ble.n	d5004 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd0>
		if (escape) {
   d4f4e:	f8d8 3004 	ldr.w	r3, [r8, #4]
   d4f52:	5d99      	ldrb	r1, [r3, r6]
   d4f54:	199a      	adds	r2, r3, r6
   d4f56:	2c00      	cmp	r4, #0
   d4f58:	d04b      	beq.n	d4ff2 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xbe>
			switch(buffer[ii]) {
   d4f5a:	2975      	cmp	r1, #117	; 0x75
   d4f5c:	d805      	bhi.n	d4f6a <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
   d4f5e:	296d      	cmp	r1, #109	; 0x6d
   d4f60:	d807      	bhi.n	d4f72 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x3e>
   d4f62:	2962      	cmp	r1, #98	; 0x62
   d4f64:	d01e      	beq.n	d4fa4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x70>
   d4f66:	2966      	cmp	r1, #102	; 0x66
   d4f68:	d01e      	beq.n	d4fa8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x74>
				str.append(buffer[ii]);
   d4f6a:	4628      	mov	r0, r5
   d4f6c:	f7ff ffa4 	bl	d4eb8 <_ZN16JsonParserString6appendEc>
				break;
   d4f70:	e03d      	b.n	d4fee <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
   d4f72:	f1a1 046e 	sub.w	r4, r1, #110	; 0x6e
   d4f76:	2c07      	cmp	r4, #7
   d4f78:	d8f7      	bhi.n	d4f6a <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
   d4f7a:	f20f 0c08 	addw	ip, pc, #8
   d4f7e:	f85c f024 	ldr.w	pc, [ip, r4, lsl #2]
   d4f82:	bf00      	nop
   d4f84:	000d4fad 	.word	0x000d4fad
   d4f88:	000d4f6b 	.word	0x000d4f6b
   d4f8c:	000d4f6b 	.word	0x000d4f6b
   d4f90:	000d4f6b 	.word	0x000d4f6b
   d4f94:	000d4fb1 	.word	0x000d4fb1
   d4f98:	000d4f6b 	.word	0x000d4f6b
   d4f9c:	000d4fb5 	.word	0x000d4fb5
   d4fa0:	000d4fb9 	.word	0x000d4fb9
				str.append('\b');
   d4fa4:	2108      	movs	r1, #8
   d4fa6:	e7e0      	b.n	d4f6a <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\f');
   d4fa8:	210c      	movs	r1, #12
   d4faa:	e7de      	b.n	d4f6a <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\n');
   d4fac:	210a      	movs	r1, #10
   d4fae:	e7dc      	b.n	d4f6a <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\r');
   d4fb0:	210d      	movs	r1, #13
   d4fb2:	e7da      	b.n	d4f6a <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\t');
   d4fb4:	2109      	movs	r1, #9
   d4fb6:	e7d8      	b.n	d4f6a <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				if ((ii + 4) < token->end) {
   d4fb8:	1d31      	adds	r1, r6, #4
   d4fba:	4288      	cmp	r0, r1
   d4fbc:	dd17      	ble.n	d4fee <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
   d4fbe:	a902      	add	r1, sp, #8
   d4fc0:	3304      	adds	r3, #4
   d4fc2:	4433      	add	r3, r6
   d4fc4:	4608      	mov	r0, r1
						tmp[jj] = buffer[ii + jj + 1];
   d4fc6:	f812 4f01 	ldrb.w	r4, [r2, #1]!
   d4fca:	f801 4b01 	strb.w	r4, [r1], #1
					for(size_t jj = 0; jj < 4; jj++) {
   d4fce:	429a      	cmp	r2, r3
   d4fd0:	d1f9      	bne.n	d4fc6 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x92>
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   d4fd2:	aa01      	add	r2, sp, #4
   d4fd4:	4651      	mov	r1, sl
					tmp[4] = 0;
   d4fd6:	f88d 900c 	strb.w	r9, [sp, #12]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   d4fda:	f000 fd3d 	bl	d5a58 <sscanf>
   d4fde:	2801      	cmp	r0, #1
   d4fe0:	d105      	bne.n	d4fee <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
						appendUtf8((uint16_t)unicode, str);
   d4fe2:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   d4fe6:	4629      	mov	r1, r5
   d4fe8:	f7ff ff7b 	bl	d4ee2 <_ZN10JsonParser10appendUtf8EtR16JsonParserString>
						ii += 5; // also increments in loop
   d4fec:	3605      	adds	r6, #5
			escape = false;
   d4fee:	2400      	movs	r4, #0
   d4ff0:	e004      	b.n	d4ffc <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
		if (buffer[ii] == '\\') {
   d4ff2:	295c      	cmp	r1, #92	; 0x5c
   d4ff4:	d004      	beq.n	d5000 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xcc>
			str.append(buffer[ii]);
   d4ff6:	4628      	mov	r0, r5
   d4ff8:	f7ff ff5e 	bl	d4eb8 <_ZN16JsonParserString6appendEc>
	for(int ii = token->start; ii < token->end; ii++) {
   d4ffc:	3601      	adds	r6, #1
   d4ffe:	e7a3      	b.n	d4f48 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x14>
			escape = true;
   d5000:	2401      	movs	r4, #1
   d5002:	e7fb      	b.n	d4ffc <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
}
   d5004:	2001      	movs	r0, #1
   d5006:	b004      	add	sp, #16
   d5008:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d500c:	000d863e 	.word	0x000d863e

000d5010 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   d5010:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d5012:	460c      	mov	r4, r1
   d5014:	4606      	mov	r6, r0
	result = "";
   d5016:	490c      	ldr	r1, [pc, #48]	; (d5048 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String+0x38>)
   d5018:	4610      	mov	r0, r2
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   d501a:	4615      	mov	r5, r2
	result = "";
   d501c:	f000 fe16 	bl	d5c4c <_ZN6StringaSEPKc>
	result.reserve(token->end - token->start + 1);
   d5020:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   d5024:	1ac9      	subs	r1, r1, r3
   d5026:	3101      	adds	r1, #1
   d5028:	4628      	mov	r0, r5
   d502a:	f000 fdce 	bl	d5bca <_ZN6String7reserveEj>
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   d502e:	2300      	movs	r3, #0
	return getTokenValue(token, strWrapper);
   d5030:	466a      	mov	r2, sp
   d5032:	4621      	mov	r1, r4
   d5034:	4630      	mov	r0, r6
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   d5036:	e9cd 3301 	strd	r3, r3, [sp, #4]
   d503a:	9500      	str	r5, [sp, #0]
   d503c:	9303      	str	r3, [sp, #12]
	return getTokenValue(token, strWrapper);
   d503e:	f7ff ff79 	bl	d4f34 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>
}
   d5042:	b004      	add	sp, #16
   d5044:	bd70      	pop	{r4, r5, r6, pc}
   d5046:	bf00      	nop
   d5048:	000d863d 	.word	0x000d863d

000d504c <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>:
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   d504c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5050:	b089      	sub	sp, #36	; 0x24
   d5052:	4605      	mov	r5, r0
   d5054:	4688      	mov	r8, r1
	String keyName;
   d5056:	a804      	add	r0, sp, #16
   d5058:	4912      	ldr	r1, [pc, #72]	; (d50a4 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x58>)
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   d505a:	4616      	mov	r6, r2
   d505c:	4699      	mov	r9, r3
	String keyName;
   d505e:	f000 fde1 	bl	d5c24 <_ZN6StringC1EPKc>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   d5062:	2700      	movs	r7, #0
   d5064:	9700      	str	r7, [sp, #0]
   d5066:	464b      	mov	r3, r9
   d5068:	aa03      	add	r2, sp, #12
   d506a:	4641      	mov	r1, r8
   d506c:	4628      	mov	r0, r5
   d506e:	f7ff febe 	bl	d4dee <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>
   d5072:	4604      	mov	r4, r0
   d5074:	b170      	cbz	r0, d5094 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x48>
		if (getTokenValue(key, keyName) && keyName == name) {
   d5076:	9903      	ldr	r1, [sp, #12]
   d5078:	aa04      	add	r2, sp, #16
   d507a:	4628      	mov	r0, r5
   d507c:	f7ff ffc8 	bl	d5010 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
   d5080:	4604      	mov	r4, r0
   d5082:	b908      	cbnz	r0, d5088 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x3c>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   d5084:	3701      	adds	r7, #1
   d5086:	e7ed      	b.n	d5064 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x18>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d5088:	4631      	mov	r1, r6
   d508a:	a804      	add	r0, sp, #16
   d508c:	f000 fe3a 	bl	d5d04 <_ZNK6String6equalsEPKc>
		if (getTokenValue(key, keyName) && keyName == name) {
   d5090:	2800      	cmp	r0, #0
   d5092:	d0f7      	beq.n	d5084 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x38>
	String keyName;
   d5094:	a804      	add	r0, sp, #16
   d5096:	f000 fd7a 	bl	d5b8e <_ZN6StringD1Ev>
}
   d509a:	4620      	mov	r0, r4
   d509c:	b009      	add	sp, #36	; 0x24
   d509e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d50a2:	bf00      	nop
   d50a4:	000d863d 	.word	0x000d863d

000d50a8 <_ZNK13JsonReference3keyEPKc>:
JsonReference JsonReference::key(const char *name) const {
   d50a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d50aa:	460d      	mov	r5, r1
	if (token && parser->getValueTokenByKey(token, name, newToken)) {
   d50ac:	6889      	ldr	r1, [r1, #8]
   d50ae:	4e0a      	ldr	r6, [pc, #40]	; (d50d8 <_ZNK13JsonReference3keyEPKc+0x30>)
JsonReference JsonReference::key(const char *name) const {
   d50b0:	4604      	mov	r4, r0
	if (token && parser->getValueTokenByKey(token, name, newToken)) {
   d50b2:	b161      	cbz	r1, d50ce <_ZNK13JsonReference3keyEPKc+0x26>
   d50b4:	6868      	ldr	r0, [r5, #4]
   d50b6:	ab01      	add	r3, sp, #4
   d50b8:	f7ff ffc8 	bl	d504c <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
   d50bc:	b138      	cbz	r0, d50ce <_ZNK13JsonReference3keyEPKc+0x26>
		return JsonReference(parser, newToken);
   d50be:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
   d50c0:	e9c4 6300 	strd	r6, r3, [r4]
   d50c4:	9b01      	ldr	r3, [sp, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   d50c6:	60a3      	str	r3, [r4, #8]
}
   d50c8:	4620      	mov	r0, r4
   d50ca:	b002      	add	sp, #8
   d50cc:	bd70      	pop	{r4, r5, r6, pc}
		return JsonReference(parser);
   d50ce:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   d50d0:	e9c4 6300 	strd	r6, r3, [r4]
   d50d4:	2300      	movs	r3, #0
   d50d6:	e7f6      	b.n	d50c6 <_ZNK13JsonReference3keyEPKc+0x1e>
   d50d8:	000d866c 	.word	0x000d866c

000d50dc <_ZNK13JsonReference11valueStringEv>:
String JsonReference::valueString() const {
   d50dc:	b538      	push	{r3, r4, r5, lr}
   d50de:	460d      	mov	r5, r1
	String result;
   d50e0:	4905      	ldr	r1, [pc, #20]	; (d50f8 <_ZNK13JsonReference11valueStringEv+0x1c>)
String JsonReference::valueString() const {
   d50e2:	4604      	mov	r4, r0
	String result;
   d50e4:	f000 fd9e 	bl	d5c24 <_ZN6StringC1EPKc>
	 * There are also type-specific versions like valueBool that return the value, instead of having to pass an object
	 * to hold the value, as in this call.
	 */
	template<class T>
	bool value(T &result) const {
		if (token && parser->getTokenValue(token, result)) {
   d50e8:	68a9      	ldr	r1, [r5, #8]
   d50ea:	b119      	cbz	r1, d50f4 <_ZNK13JsonReference11valueStringEv+0x18>
   d50ec:	6868      	ldr	r0, [r5, #4]
   d50ee:	4622      	mov	r2, r4
   d50f0:	f7ff ff8e 	bl	d5010 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
}
   d50f4:	4620      	mov	r0, r4
   d50f6:	bd38      	pop	{r3, r4, r5, pc}
   d50f8:	000d863d 	.word	0x000d863d

000d50fc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>:

/**
 * Parse JSON string and fill tokens.
 */
int jsmn_parse(jsmn_parser *parser, const char *js, size_t len,
		jsmntok_t *tokens, unsigned int num_tokens) {
   d50fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int r;
	int i;
	jsmntok_t *token;
	int count = parser->toknext;
   d5100:	6844      	ldr	r4, [r0, #4]
   d5102:	f04f 0c01 	mov.w	ip, #1
	tok->start = tok->end = -1;
   d5106:	f04f 35ff 	mov.w	r5, #4294967295

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   d510a:	f8d0 e000 	ldr.w	lr, [r0]
   d510e:	4596      	cmp	lr, r2
   d5110:	f080 81c1 	bcs.w	d5496 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x39a>
   d5114:	f811 800e 	ldrb.w	r8, [r1, lr]
   d5118:	f1b8 0f00 	cmp.w	r8, #0
   d511c:	f000 81bb 	beq.w	d5496 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x39a>
		char c;
		jsmntype_t type;

		c = js[parser->pos];
		switch (c) {
   d5120:	f1b8 0f3a 	cmp.w	r8, #58	; 0x3a
   d5124:	f000 809b 	beq.w	d525e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x162>
   d5128:	d833      	bhi.n	d5192 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x96>
   d512a:	f1b8 0f22 	cmp.w	r8, #34	; 0x22
   d512e:	f000 80ad 	beq.w	d528c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x190>
   d5132:	d810      	bhi.n	d5156 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x5a>
   d5134:	f1a8 0809 	sub.w	r8, r8, #9
   d5138:	fa5f f888 	uxtb.w	r8, r8
   d513c:	f1b8 0f17 	cmp.w	r8, #23
   d5140:	d80d      	bhi.n	d515e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
   d5142:	4fc2      	ldr	r7, [pc, #776]	; (d544c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x350>)
   d5144:	fa0c f808 	lsl.w	r8, ip, r8
   d5148:	ea18 0f07 	tst.w	r8, r7
   d514c:	d007      	beq.n	d515e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   d514e:	6807      	ldr	r7, [r0, #0]
   d5150:	3701      	adds	r7, #1
   d5152:	6007      	str	r7, [r0, #0]
   d5154:	e7d9      	b.n	d510a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe>
		switch (c) {
   d5156:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
   d515a:	f000 8139 	beq.w	d53d0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2d4>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   d515e:	f8d0 8000 	ldr.w	r8, [r0]
   d5162:	4542      	cmp	r2, r8
   d5164:	d90e      	bls.n	d5184 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
   d5166:	f811 7008 	ldrb.w	r7, [r1, r8]
   d516a:	b15f      	cbz	r7, d5184 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
		switch (js[parser->pos]) {
   d516c:	2f3a      	cmp	r7, #58	; 0x3a
   d516e:	f200 8171 	bhi.w	d5454 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x358>
   d5172:	2f1f      	cmp	r7, #31
   d5174:	f200 8155 	bhi.w	d5422 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x326>
   d5178:	2f0a      	cmp	r7, #10
   d517a:	f200 8164 	bhi.w	d5446 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34a>
   d517e:	2f08      	cmp	r7, #8
   d5180:	f240 815a 	bls.w	d5438 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x33c>
	if (tokens == NULL) {
   d5184:	2b00      	cmp	r3, #0
   d5186:	f040 816a 	bne.w	d545e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x362>
		parser->pos--;
   d518a:	f108 37ff 	add.w	r7, r8, #4294967295
	parser->pos--;
   d518e:	6007      	str	r7, [r0, #0]
   d5190:	e0ac      	b.n	d52ec <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1f0>
		switch (c) {
   d5192:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   d5196:	d03a      	beq.n	d520e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x112>
   d5198:	d80a      	bhi.n	d51b0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xb4>
   d519a:	f1b8 0f5b 	cmp.w	r8, #91	; 0x5b
   d519e:	d036      	beq.n	d520e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x112>
   d51a0:	f1b8 0f5d 	cmp.w	r8, #93	; 0x5d
   d51a4:	d1db      	bne.n	d515e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
				token->start = parser->pos;
				parser->toksuper = parser->toknext - 1;
				break;
			case '}': case ']':
				if (tokens == NULL)
   d51a6:	2b00      	cmp	r3, #0
   d51a8:	d0d1      	beq.n	d514e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					break;
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   d51aa:	f04f 0b02 	mov.w	fp, #2
   d51ae:	e006      	b.n	d51be <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xc2>
		switch (c) {
   d51b0:	f1b8 0f7d 	cmp.w	r8, #125	; 0x7d
   d51b4:	d1d3      	bne.n	d515e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
				if (tokens == NULL)
   d51b6:	2b00      	cmp	r3, #0
   d51b8:	d0c9      	beq.n	d514e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   d51ba:	f04f 0b01 	mov.w	fp, #1
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
   d51be:	6847      	ldr	r7, [r0, #4]
   d51c0:	f107 38ff 	add.w	r8, r7, #4294967295
   d51c4:	eb03 1907 	add.w	r9, r3, r7, lsl #4
   d51c8:	f1b8 0f00 	cmp.w	r8, #0
   d51cc:	db4f      	blt.n	d526e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x172>
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   d51ce:	f859 7c0c 	ldr.w	r7, [r9, #-12]
   d51d2:	3701      	adds	r7, #1
   d51d4:	f1a9 0a10 	sub.w	sl, r9, #16
   d51d8:	d045      	beq.n	d5266 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x16a>
   d51da:	f859 7c08 	ldr.w	r7, [r9, #-8]
   d51de:	1c7e      	adds	r6, r7, #1
   d51e0:	d141      	bne.n	d5266 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x16a>
						if (token->type != type) {
   d51e2:	f89a 9000 	ldrb.w	r9, [sl]
   d51e6:	45d9      	cmp	r9, fp
   d51e8:	d145      	bne.n	d5276 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x17a>
							return JSMN_ERROR_INVAL;
						}
						parser->toksuper = -1;
   d51ea:	6087      	str	r7, [r0, #8]
						token->end = parser->pos + 1;
   d51ec:	f10e 0701 	add.w	r7, lr, #1
   d51f0:	f8ca 7008 	str.w	r7, [sl, #8]
						break;
					}
				}
				/* Error if unmatched closing bracket */
				if (i == -1) return JSMN_ERROR_INVAL;
   d51f4:	eb03 1e08 	add.w	lr, r3, r8, lsl #4
				for (; i >= 0; i--) {
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   d51f8:	f8de 7004 	ldr.w	r7, [lr, #4]
   d51fc:	3701      	adds	r7, #1
   d51fe:	d03d      	beq.n	d527c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x180>
   d5200:	f8de 7008 	ldr.w	r7, [lr, #8]
   d5204:	3701      	adds	r7, #1
   d5206:	d139      	bne.n	d527c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x180>
					parser->toksuper = tokens[parser->toksuper].parent;
#else
					for (i = parser->toknext - 1; i >= 0; i--) {
						if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
							if (tokens[i].start != -1 && tokens[i].end == -1) {
								parser->toksuper = i;
   d5208:	f8c0 8008 	str.w	r8, [r0, #8]
								break;
   d520c:	e79f      	b.n	d514e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
				count++;
   d520e:	3401      	adds	r4, #1
				if (tokens == NULL) {
   d5210:	2b00      	cmp	r3, #0
   d5212:	d09c      	beq.n	d514e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
	if (parser->toknext >= num_tokens) {
   d5214:	6847      	ldr	r7, [r0, #4]
   d5216:	9e09      	ldr	r6, [sp, #36]	; 0x24
   d5218:	42be      	cmp	r6, r7
   d521a:	d94e      	bls.n	d52ba <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1be>
	tok = &tokens[parser->toknext++];
   d521c:	f107 0e01 	add.w	lr, r7, #1
   d5220:	f8c0 e004 	str.w	lr, [r0, #4]
   d5224:	eb03 1e07 	add.w	lr, r3, r7, lsl #4
	tok->start = tok->end = -1;
   d5228:	e9ce 5501 	strd	r5, r5, [lr, #4]
	tok->size = 0;
   d522c:	2600      	movs	r6, #0
   d522e:	f8ce 600c 	str.w	r6, [lr, #12]
	tok = &tokens[parser->toknext++];
   d5232:	ea4f 1a07 	mov.w	sl, r7, lsl #4
				if (parser->toksuper != -1) {
   d5236:	6887      	ldr	r7, [r0, #8]
   d5238:	1c7e      	adds	r6, r7, #1
					tokens[parser->toksuper].size++;
   d523a:	bf1f      	itttt	ne
   d523c:	eb03 1907 	addne.w	r9, r3, r7, lsl #4
   d5240:	f8d9 700c 	ldrne.w	r7, [r9, #12]
   d5244:	3701      	addne	r7, #1
   d5246:	f8c9 700c 	strne.w	r7, [r9, #12]
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
   d524a:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   d524e:	bf0c      	ite	eq
   d5250:	2701      	moveq	r7, #1
   d5252:	2702      	movne	r7, #2
   d5254:	f803 700a 	strb.w	r7, [r3, sl]
				token->start = parser->pos;
   d5258:	6807      	ldr	r7, [r0, #0]
   d525a:	f8ce 7004 	str.w	r7, [lr, #4]
				parser->toksuper = parser->toknext - 1;
   d525e:	6847      	ldr	r7, [r0, #4]
   d5260:	3f01      	subs	r7, #1
   d5262:	6087      	str	r7, [r0, #8]
				break;
   d5264:	e773      	b.n	d514e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
				for (i = parser->toknext - 1; i >= 0; i--) {
   d5266:	f108 38ff 	add.w	r8, r8, #4294967295
   d526a:	46d1      	mov	r9, sl
   d526c:	e7ac      	b.n	d51c8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xcc>
				if (i == -1) return JSMN_ERROR_INVAL;
   d526e:	f1b8 3fff 	cmp.w	r8, #4294967295
   d5272:	f47f af6c 	bne.w	d514e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
							return JSMN_ERROR_INVAL;
   d5276:	f06f 0401 	mvn.w	r4, #1
   d527a:	e020      	b.n	d52be <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1c2>
				for (; i >= 0; i--) {
   d527c:	f108 38ff 	add.w	r8, r8, #4294967295
   d5280:	f1b8 3fff 	cmp.w	r8, #4294967295
   d5284:	f1ae 0e10 	sub.w	lr, lr, #16
   d5288:	d1b6      	bne.n	d51f8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xfc>
   d528a:	e760      	b.n	d514e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
	parser->pos++;
   d528c:	f10e 0901 	add.w	r9, lr, #1
   d5290:	f8c0 9000 	str.w	r9, [r0]
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   d5294:	f8d0 8000 	ldr.w	r8, [r0]
   d5298:	4542      	cmp	r2, r8
   d529a:	f240 8094 	bls.w	d53c6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ca>
   d529e:	f811 7008 	ldrb.w	r7, [r1, r8]
   d52a2:	2f00      	cmp	r7, #0
   d52a4:	f000 808f 	beq.w	d53c6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ca>
		if (c == '\"') {
   d52a8:	2f22      	cmp	r7, #34	; 0x22
   d52aa:	d130      	bne.n	d530e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x212>
			if (tokens == NULL) {
   d52ac:	b1f3      	cbz	r3, d52ec <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1f0>
	if (parser->toknext >= num_tokens) {
   d52ae:	6847      	ldr	r7, [r0, #4]
   d52b0:	9e09      	ldr	r6, [sp, #36]	; 0x24
   d52b2:	42be      	cmp	r6, r7
   d52b4:	d806      	bhi.n	d52c4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1c8>
		parser->pos = start;
   d52b6:	f8c0 e000 	str.w	lr, [r0]
					return JSMN_ERROR_NOMEM;
   d52ba:	f04f 34ff 	mov.w	r4, #4294967295
			}
		}
	}

	return count;
}
   d52be:	4620      	mov	r0, r4
   d52c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	tok = &tokens[parser->toknext++];
   d52c4:	f107 0e01 	add.w	lr, r7, #1
   d52c8:	ea4f 1807 	mov.w	r8, r7, lsl #4
   d52cc:	eb03 1707 	add.w	r7, r3, r7, lsl #4
   d52d0:	f8c0 e004 	str.w	lr, [r0, #4]
	tok->start = tok->end = -1;
   d52d4:	e9c7 5501 	strd	r5, r5, [r7, #4]
	tok->size = 0;
   d52d8:	2600      	movs	r6, #0
   d52da:	60fe      	str	r6, [r7, #12]
			jsmn_fill_token(token, JSMN_STRING, start+1, parser->pos);
   d52dc:	f8d0 e000 	ldr.w	lr, [r0]
	token->type = type;
   d52e0:	f04f 0a03 	mov.w	sl, #3
   d52e4:	f803 a008 	strb.w	sl, [r3, r8]
	token->end = end;
   d52e8:	e9c7 9e01 	strd	r9, lr, [r7, #4]
				if (parser->toksuper != -1 && tokens != NULL)
   d52ec:	6887      	ldr	r7, [r0, #8]
   d52ee:	1c7e      	adds	r6, r7, #1
				count++;
   d52f0:	f104 0401 	add.w	r4, r4, #1
				if (parser->toksuper != -1 && tokens != NULL)
   d52f4:	f43f af2b 	beq.w	d514e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
   d52f8:	2b00      	cmp	r3, #0
   d52fa:	f43f af28 	beq.w	d514e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					tokens[parser->toksuper].size++;
   d52fe:	eb03 1e07 	add.w	lr, r3, r7, lsl #4
   d5302:	f8de 700c 	ldr.w	r7, [lr, #12]
   d5306:	3701      	adds	r7, #1
   d5308:	f8ce 700c 	str.w	r7, [lr, #12]
   d530c:	e71f      	b.n	d514e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
		if (c == '\\' && parser->pos + 1 < len) {
   d530e:	2f5c      	cmp	r7, #92	; 0x5c
   d5310:	d111      	bne.n	d5336 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x23a>
   d5312:	f108 0701 	add.w	r7, r8, #1
   d5316:	42ba      	cmp	r2, r7
   d5318:	d90d      	bls.n	d5336 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x23a>
			parser->pos++;
   d531a:	6007      	str	r7, [r0, #0]
			switch (js[parser->pos]) {
   d531c:	5dcf      	ldrb	r7, [r1, r7]
   d531e:	2f75      	cmp	r7, #117	; 0x75
   d5320:	d82c      	bhi.n	d537c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x280>
   d5322:	2f6d      	cmp	r7, #109	; 0x6d
   d5324:	d80b      	bhi.n	d533e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x242>
   d5326:	2f66      	cmp	r7, #102	; 0x66
   d5328:	d828      	bhi.n	d537c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x280>
   d532a:	2f5b      	cmp	r7, #91	; 0x5b
   d532c:	d81e      	bhi.n	d536c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   d532e:	2f22      	cmp	r7, #34	; 0x22
   d5330:	d001      	beq.n	d5336 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x23a>
   d5332:	2f2f      	cmp	r7, #47	; 0x2f
   d5334:	d122      	bne.n	d537c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x280>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   d5336:	6807      	ldr	r7, [r0, #0]
   d5338:	3701      	adds	r7, #1
   d533a:	6007      	str	r7, [r0, #0]
   d533c:	e7aa      	b.n	d5294 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x198>
   d533e:	3f6e      	subs	r7, #110	; 0x6e
   d5340:	2f07      	cmp	r7, #7
   d5342:	d81b      	bhi.n	d537c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x280>
   d5344:	a601      	add	r6, pc, #4	; (adr r6, d534c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x250>)
   d5346:	f856 f027 	ldr.w	pc, [r6, r7, lsl #2]
   d534a:	bf00      	nop
   d534c:	000d5337 	.word	0x000d5337
   d5350:	000d537d 	.word	0x000d537d
   d5354:	000d537d 	.word	0x000d537d
   d5358:	000d537d 	.word	0x000d537d
   d535c:	000d5337 	.word	0x000d5337
   d5360:	000d537d 	.word	0x000d537d
   d5364:	000d5337 	.word	0x000d5337
   d5368:	000d5383 	.word	0x000d5383
   d536c:	3f5c      	subs	r7, #92	; 0x5c
   d536e:	b2ff      	uxtb	r7, r7
   d5370:	fa0c f707 	lsl.w	r7, ip, r7
   d5374:	f240 4641 	movw	r6, #1089	; 0x441
   d5378:	4237      	tst	r7, r6
   d537a:	d1dc      	bne.n	d5336 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x23a>
			parser->pos = start;
   d537c:	f8c0 e000 	str.w	lr, [r0]
				if (r < 0) return r;
   d5380:	e779      	b.n	d5276 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x17a>
					parser->pos++;
   d5382:	f108 0702 	add.w	r7, r8, #2
   d5386:	6007      	str	r7, [r0, #0]
   d5388:	f04f 0a04 	mov.w	sl, #4
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   d538c:	f8d0 8000 	ldr.w	r8, [r0]
   d5390:	4542      	cmp	r2, r8
   d5392:	d803      	bhi.n	d539c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2a0>
					parser->pos--;
   d5394:	6807      	ldr	r7, [r0, #0]
   d5396:	3f01      	subs	r7, #1
   d5398:	6007      	str	r7, [r0, #0]
					break;
   d539a:	e7cc      	b.n	d5336 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x23a>
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   d539c:	f811 7008 	ldrb.w	r7, [r1, r8]
   d53a0:	2f00      	cmp	r7, #0
   d53a2:	d0f7      	beq.n	d5394 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x298>
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || /* 0-9 */
   d53a4:	f1a7 0b30 	sub.w	fp, r7, #48	; 0x30
   d53a8:	f1bb 0f09 	cmp.w	fp, #9
   d53ac:	d904      	bls.n	d53b8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2bc>
   d53ae:	f027 0720 	bic.w	r7, r7, #32
   d53b2:	3f41      	subs	r7, #65	; 0x41
   d53b4:	2f05      	cmp	r7, #5
   d53b6:	d8e1      	bhi.n	d537c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x280>
						parser->pos++;
   d53b8:	f108 0701 	add.w	r7, r8, #1
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   d53bc:	f1ba 0a01 	subs.w	sl, sl, #1
						parser->pos++;
   d53c0:	6007      	str	r7, [r0, #0]
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   d53c2:	d1e3      	bne.n	d538c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x290>
   d53c4:	e7e6      	b.n	d5394 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x298>
	parser->pos = start;
   d53c6:	f8c0 e000 	str.w	lr, [r0]
				return JSMN_ERROR_PART;
   d53ca:	f06f 0402 	mvn.w	r4, #2
   d53ce:	e776      	b.n	d52be <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1c2>
				if (tokens != NULL && parser->toksuper != -1 &&
   d53d0:	2b00      	cmp	r3, #0
   d53d2:	f43f aebc 	beq.w	d514e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
   d53d6:	6887      	ldr	r7, [r0, #8]
   d53d8:	1c7e      	adds	r6, r7, #1
   d53da:	f43f aeb8 	beq.w	d514e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
						tokens[parser->toksuper].type != JSMN_ARRAY &&
   d53de:	013f      	lsls	r7, r7, #4
   d53e0:	5ddf      	ldrb	r7, [r3, r7]
   d53e2:	3f01      	subs	r7, #1
   d53e4:	2f01      	cmp	r7, #1
   d53e6:	f67f aeb2 	bls.w	d514e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					for (i = parser->toknext - 1; i >= 0; i--) {
   d53ea:	6847      	ldr	r7, [r0, #4]
   d53ec:	f107 38ff 	add.w	r8, r7, #4294967295
   d53f0:	eb03 1e07 	add.w	lr, r3, r7, lsl #4
   d53f4:	f1b8 0f00 	cmp.w	r8, #0
   d53f8:	f6ff aea9 	blt.w	d514e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
						if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
   d53fc:	f81e 7c10 	ldrb.w	r7, [lr, #-16]
   d5400:	3f01      	subs	r7, #1
   d5402:	2f01      	cmp	r7, #1
   d5404:	d808      	bhi.n	d5418 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x31c>
							if (tokens[i].start != -1 && tokens[i].end == -1) {
   d5406:	f85e 7c0c 	ldr.w	r7, [lr, #-12]
   d540a:	3701      	adds	r7, #1
   d540c:	d004      	beq.n	d5418 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x31c>
   d540e:	f85e 7c08 	ldr.w	r7, [lr, #-8]
   d5412:	3701      	adds	r7, #1
   d5414:	f43f aef8 	beq.w	d5208 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10c>
					for (i = parser->toknext - 1; i >= 0; i--) {
   d5418:	f108 38ff 	add.w	r8, r8, #4294967295
   d541c:	f1ae 0e10 	sub.w	lr, lr, #16
   d5420:	e7e8      	b.n	d53f4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2f8>
   d5422:	f1a7 0920 	sub.w	r9, r7, #32
   d5426:	4e0a      	ldr	r6, [pc, #40]	; (d5450 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x354>)
   d5428:	fa5f f989 	uxtb.w	r9, r9
   d542c:	fa0c f909 	lsl.w	r9, ip, r9
   d5430:	ea19 0f06 	tst.w	r9, r6
   d5434:	f47f aea6 	bne.w	d5184 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
		if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
   d5438:	3f20      	subs	r7, #32
   d543a:	2f5e      	cmp	r7, #94	; 0x5e
   d543c:	d89e      	bhi.n	d537c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x280>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   d543e:	f108 0701 	add.w	r7, r8, #1
   d5442:	6007      	str	r7, [r0, #0]
   d5444:	e68b      	b.n	d515e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
		switch (js[parser->pos]) {
   d5446:	2f0d      	cmp	r7, #13
   d5448:	d1f6      	bne.n	d5438 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x33c>
   d544a:	e69b      	b.n	d5184 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
   d544c:	00800013 	.word	0x00800013
   d5450:	04001001 	.word	0x04001001
   d5454:	f007 09df 	and.w	r9, r7, #223	; 0xdf
   d5458:	f1b9 0f5d 	cmp.w	r9, #93	; 0x5d
   d545c:	e7f4      	b.n	d5448 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>
	if (parser->toknext >= num_tokens) {
   d545e:	6847      	ldr	r7, [r0, #4]
   d5460:	9e09      	ldr	r6, [sp, #36]	; 0x24
   d5462:	42be      	cmp	r6, r7
   d5464:	f67f af27 	bls.w	d52b6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ba>
	tok = &tokens[parser->toknext++];
   d5468:	f107 0801 	add.w	r8, r7, #1
   d546c:	ea4f 1907 	mov.w	r9, r7, lsl #4
   d5470:	eb03 1707 	add.w	r7, r3, r7, lsl #4
   d5474:	f8c0 8004 	str.w	r8, [r0, #4]
	tok->start = tok->end = -1;
   d5478:	e9c7 5501 	strd	r5, r5, [r7, #4]
	tok->size = 0;
   d547c:	2600      	movs	r6, #0
   d547e:	60fe      	str	r6, [r7, #12]
	jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
   d5480:	f8d0 8000 	ldr.w	r8, [r0]
	token->type = type;
   d5484:	f04f 0a04 	mov.w	sl, #4
   d5488:	f803 a009 	strb.w	sl, [r3, r9]
	token->end = end;
   d548c:	e9c7 e801 	strd	lr, r8, [r7, #4]
	parser->pos--;
   d5490:	6807      	ldr	r7, [r0, #0]
   d5492:	3f01      	subs	r7, #1
   d5494:	e67b      	b.n	d518e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x92>
	if (tokens != NULL) {
   d5496:	2b00      	cmp	r3, #0
   d5498:	f43f af11 	beq.w	d52be <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1c2>
		for (i = parser->toknext - 1; i >= 0; i--) {
   d549c:	6842      	ldr	r2, [r0, #4]
   d549e:	1e51      	subs	r1, r2, #1
   d54a0:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   d54a4:	2900      	cmp	r1, #0
   d54a6:	f6ff af0a 	blt.w	d52be <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1c2>
			if (tokens[i].start != -1 && tokens[i].end == -1) {
   d54aa:	f853 2c0c 	ldr.w	r2, [r3, #-12]
   d54ae:	3201      	adds	r2, #1
   d54b0:	d003      	beq.n	d54ba <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3be>
   d54b2:	f853 2c08 	ldr.w	r2, [r3, #-8]
   d54b6:	3201      	adds	r2, #1
   d54b8:	d087      	beq.n	d53ca <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ce>
		for (i = parser->toknext - 1; i >= 0; i--) {
   d54ba:	3901      	subs	r1, #1
   d54bc:	3b10      	subs	r3, #16
   d54be:	e7f1      	b.n	d54a4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3a8>

000d54c0 <_ZN10JsonParser5parseEv>:
bool JsonParser::parse() {
   d54c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (offset == 0) {
   d54c2:	68c2      	ldr	r2, [r0, #12]
bool JsonParser::parse() {
   d54c4:	4604      	mov	r4, r0
	if (offset == 0) {
   d54c6:	b912      	cbnz	r2, d54ce <_ZN10JsonParser5parseEv+0xe>
		return false;
   d54c8:	2000      	movs	r0, #0
}
   d54ca:	b003      	add	sp, #12
   d54cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (tokens) {
   d54ce:	6943      	ldr	r3, [r0, #20]
   d54d0:	f100 0620 	add.w	r6, r0, #32
   d54d4:	b1ab      	cbz	r3, d5502 <_ZN10JsonParser5parseEv+0x42>
/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
	parser->pos = 0;
   d54d6:	2100      	movs	r1, #0
	parser->toknext = 0;
   d54d8:	e9c0 1108 	strd	r1, r1, [r0, #32]
	parser->toksuper = -1;
   d54dc:	f04f 31ff 	mov.w	r1, #4294967295
   d54e0:	6281      	str	r1, [r0, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   d54e2:	69c1      	ldr	r1, [r0, #28]
   d54e4:	9100      	str	r1, [sp, #0]
   d54e6:	6841      	ldr	r1, [r0, #4]
   d54e8:	4630      	mov	r0, r6
   d54ea:	f7ff fe07 	bl	d50fc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
		if (result == JsonParserGeneratorRK::JSMN_ERROR_NOMEM) {
   d54ee:	1c43      	adds	r3, r0, #1
   d54f0:	d128      	bne.n	d5544 <_ZN10JsonParser5parseEv+0x84>
			if (staticBuffers) {
   d54f2:	7c25      	ldrb	r5, [r4, #16]
   d54f4:	2d00      	cmp	r5, #0
   d54f6:	d1e7      	bne.n	d54c8 <_ZN10JsonParser5parseEv+0x8>
			free(tokens);
   d54f8:	6960      	ldr	r0, [r4, #20]
   d54fa:	f000 fa9d 	bl	d5a38 <free>
			tokens = 0;
   d54fe:	6165      	str	r5, [r4, #20]
			maxTokens = 0;
   d5500:	61e5      	str	r5, [r4, #28]
	parser->pos = 0;
   d5502:	2500      	movs	r5, #0
	parser->toksuper = -1;
   d5504:	f04f 37ff 	mov.w	r7, #4294967295
	parser->toknext = 0;
   d5508:	e9c4 5508 	strd	r5, r5, [r4, #32]
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   d550c:	68e2      	ldr	r2, [r4, #12]
   d550e:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
   d5510:	62a7      	str	r7, [r4, #40]	; 0x28
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   d5512:	9500      	str	r5, [sp, #0]
   d5514:	462b      	mov	r3, r5
   d5516:	4630      	mov	r0, r6
   d5518:	f7ff fdf0 	bl	d50fc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
	if (result < 0) {
   d551c:	2800      	cmp	r0, #0
   d551e:	dbd3      	blt.n	d54c8 <_ZN10JsonParser5parseEv+0x8>
	maxTokens = (size_t) result;
   d5520:	61e0      	str	r0, [r4, #28]
	if (maxTokens > 0) {
   d5522:	d017      	beq.n	d5554 <_ZN10JsonParser5parseEv+0x94>
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   d5524:	0100      	lsls	r0, r0, #4
   d5526:	f000 fa7f 	bl	d5a28 <malloc>
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   d552a:	69e2      	ldr	r2, [r4, #28]
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   d552c:	6160      	str	r0, [r4, #20]
   d552e:	4603      	mov	r3, r0
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   d5530:	9200      	str	r2, [sp, #0]
	parser->toknext = 0;
   d5532:	e9c4 5508 	strd	r5, r5, [r4, #32]
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   d5536:	68e2      	ldr	r2, [r4, #12]
   d5538:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
   d553a:	62a7      	str	r7, [r4, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   d553c:	4630      	mov	r0, r6
   d553e:	f7ff fddd 	bl	d50fc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
   d5542:	e001      	b.n	d5548 <_ZN10JsonParser5parseEv+0x88>
		if (result < 0) {
   d5544:	2800      	cmp	r0, #0
   d5546:	dbbf      	blt.n	d54c8 <_ZN10JsonParser5parseEv+0x8>
		tokensEnd = &tokens[result];
   d5548:	6963      	ldr	r3, [r4, #20]
   d554a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   d554e:	61a0      	str	r0, [r4, #24]
	return true;
   d5550:	2001      	movs	r0, #1
   d5552:	e7ba      	b.n	d54ca <_ZN10JsonParser5parseEv+0xa>
		tokensEnd = tokens;
   d5554:	6963      	ldr	r3, [r4, #20]
   d5556:	61a3      	str	r3, [r4, #24]
   d5558:	e7fa      	b.n	d5550 <_ZN10JsonParser5parseEv+0x90>
	...

000d555c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d555c:	b508      	push	{r3, lr}
   d555e:	4b02      	ldr	r3, [pc, #8]	; (d5568 <netdb_freeaddrinfo+0xc>)
   d5560:	681b      	ldr	r3, [r3, #0]
   d5562:	689b      	ldr	r3, [r3, #8]
   d5564:	9301      	str	r3, [sp, #4]
   d5566:	bd08      	pop	{r3, pc}
   d5568:	00030268 	.word	0x00030268

000d556c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d556c:	b508      	push	{r3, lr}
   d556e:	4b02      	ldr	r3, [pc, #8]	; (d5578 <netdb_getaddrinfo+0xc>)
   d5570:	681b      	ldr	r3, [r3, #0]
   d5572:	68db      	ldr	r3, [r3, #12]
   d5574:	9301      	str	r3, [sp, #4]
   d5576:	bd08      	pop	{r3, pc}
   d5578:	00030268 	.word	0x00030268

000d557c <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d557c:	b508      	push	{r3, lr}
   d557e:	4b02      	ldr	r3, [pc, #8]	; (d5588 <if_index_to_name+0xc>)
   d5580:	681b      	ldr	r3, [r3, #0]
   d5582:	695b      	ldr	r3, [r3, #20]
   d5584:	9301      	str	r3, [sp, #4]
   d5586:	bd08      	pop	{r3, pc}
   d5588:	0003026c 	.word	0x0003026c

000d558c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d558c:	b508      	push	{r3, lr}
   d558e:	4b02      	ldr	r3, [pc, #8]	; (d5598 <HAL_RNG_GetRandomNumber+0xc>)
   d5590:	681b      	ldr	r3, [r3, #0]
   d5592:	685b      	ldr	r3, [r3, #4]
   d5594:	9301      	str	r3, [sp, #4]
   d5596:	bd08      	pop	{r3, pc}
   d5598:	00030218 	.word	0x00030218

000d559c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d559c:	b508      	push	{r3, lr}
   d559e:	4b02      	ldr	r3, [pc, #8]	; (d55a8 <HAL_Delay_Microseconds+0xc>)
   d55a0:	681b      	ldr	r3, [r3, #0]
   d55a2:	68db      	ldr	r3, [r3, #12]
   d55a4:	9301      	str	r3, [sp, #4]
   d55a6:	bd08      	pop	{r3, pc}
   d55a8:	00030218 	.word	0x00030218

000d55ac <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d55ac:	b508      	push	{r3, lr}
   d55ae:	4b02      	ldr	r3, [pc, #8]	; (d55b8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d55b0:	681b      	ldr	r3, [r3, #0]
   d55b2:	695b      	ldr	r3, [r3, #20]
   d55b4:	9301      	str	r3, [sp, #4]
   d55b6:	bd08      	pop	{r3, pc}
   d55b8:	00030218 	.word	0x00030218

000d55bc <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   d55bc:	b508      	push	{r3, lr}
   d55be:	4b02      	ldr	r3, [pc, #8]	; (d55c8 <hal_ble_stack_init+0xc>)
   d55c0:	681b      	ldr	r3, [r3, #0]
   d55c2:	689b      	ldr	r3, [r3, #8]
   d55c4:	9301      	str	r3, [sp, #4]
   d55c6:	bd08      	pop	{r3, pc}
   d55c8:	00030278 	.word	0x00030278

000d55cc <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   d55cc:	b508      	push	{r3, lr}
   d55ce:	4b02      	ldr	r3, [pc, #8]	; (d55d8 <hal_ble_gap_set_advertising_data+0xc>)
   d55d0:	681b      	ldr	r3, [r3, #0]
   d55d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d55d4:	9301      	str	r3, [sp, #4]
   d55d6:	bd08      	pop	{r3, pc}
   d55d8:	00030278 	.word	0x00030278

000d55dc <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   d55dc:	b508      	push	{r3, lr}
   d55de:	4b02      	ldr	r3, [pc, #8]	; (d55e8 <hal_ble_gap_set_scan_response_data+0xc>)
   d55e0:	681b      	ldr	r3, [r3, #0]
   d55e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d55e4:	9301      	str	r3, [sp, #4]
   d55e6:	bd08      	pop	{r3, pc}
   d55e8:	00030278 	.word	0x00030278

000d55ec <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   d55ec:	b508      	push	{r3, lr}
   d55ee:	4b02      	ldr	r3, [pc, #8]	; (d55f8 <hal_ble_gap_start_advertising+0xc>)
   d55f0:	681b      	ldr	r3, [r3, #0]
   d55f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   d55f4:	9301      	str	r3, [sp, #4]
   d55f6:	bd08      	pop	{r3, pc}
   d55f8:	00030278 	.word	0x00030278

000d55fc <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   d55fc:	b508      	push	{r3, lr}
   d55fe:	4b03      	ldr	r3, [pc, #12]	; (d560c <hal_ble_gap_disconnect+0x10>)
   d5600:	681b      	ldr	r3, [r3, #0]
   d5602:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d5606:	9301      	str	r3, [sp, #4]
   d5608:	bd08      	pop	{r3, pc}
   d560a:	0000      	.short	0x0000
   d560c:	00030278 	.word	0x00030278

000d5610 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   d5610:	b508      	push	{r3, lr}
   d5612:	4b03      	ldr	r3, [pc, #12]	; (d5620 <hal_ble_gatt_server_add_service+0x10>)
   d5614:	681b      	ldr	r3, [r3, #0]
   d5616:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d561a:	9301      	str	r3, [sp, #4]
   d561c:	bd08      	pop	{r3, pc}
   d561e:	0000      	.short	0x0000
   d5620:	00030278 	.word	0x00030278

000d5624 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d5624:	b508      	push	{r3, lr}
   d5626:	4b03      	ldr	r3, [pc, #12]	; (d5634 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   d5628:	681b      	ldr	r3, [r3, #0]
   d562a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   d562e:	9301      	str	r3, [sp, #4]
   d5630:	bd08      	pop	{r3, pc}
   d5632:	0000      	.short	0x0000
   d5634:	00030278 	.word	0x00030278

000d5638 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_set_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d5638:	b508      	push	{r3, lr}
   d563a:	4b03      	ldr	r3, [pc, #12]	; (d5648 <hal_ble_gatt_client_write_with_response+0x10>)
   d563c:	681b      	ldr	r3, [r3, #0]
   d563e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   d5642:	9301      	str	r3, [sp, #4]
   d5644:	bd08      	pop	{r3, pc}
   d5646:	0000      	.short	0x0000
   d5648:	00030278 	.word	0x00030278

000d564c <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d564c:	b508      	push	{r3, lr}
   d564e:	4b03      	ldr	r3, [pc, #12]	; (d565c <hal_ble_gatt_client_write_without_response+0x10>)
   d5650:	681b      	ldr	r3, [r3, #0]
   d5652:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   d5656:	9301      	str	r3, [sp, #4]
   d5658:	bd08      	pop	{r3, pc}
   d565a:	0000      	.short	0x0000
   d565c:	00030278 	.word	0x00030278

000d5660 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   d5660:	b508      	push	{r3, lr}
   d5662:	4b03      	ldr	r3, [pc, #12]	; (d5670 <hal_ble_gatt_server_add_characteristic+0x10>)
   d5664:	681b      	ldr	r3, [r3, #0]
   d5666:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   d566a:	9301      	str	r3, [sp, #4]
   d566c:	bd08      	pop	{r3, pc}
   d566e:	0000      	.short	0x0000
   d5670:	00030278 	.word	0x00030278

000d5674 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   d5674:	b508      	push	{r3, lr}
   d5676:	4b03      	ldr	r3, [pc, #12]	; (d5684 <hal_ble_set_callback_on_periph_link_events+0x10>)
   d5678:	681b      	ldr	r3, [r3, #0]
   d567a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   d567e:	9301      	str	r3, [sp, #4]
   d5680:	bd08      	pop	{r3, pc}
   d5682:	0000      	.short	0x0000
   d5684:	00030278 	.word	0x00030278

000d5688 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d5688:	b508      	push	{r3, lr}
   d568a:	4b03      	ldr	r3, [pc, #12]	; (d5698 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   d568c:	681b      	ldr	r3, [r3, #0]
   d568e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   d5692:	9301      	str	r3, [sp, #4]
   d5694:	bd08      	pop	{r3, pc}
   d5696:	0000      	.short	0x0000
   d5698:	00030278 	.word	0x00030278

000d569c <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d569c:	b508      	push	{r3, lr}
   d569e:	4b03      	ldr	r3, [pc, #12]	; (d56ac <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   d56a0:	681b      	ldr	r3, [r3, #0]
   d56a2:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   d56a6:	9301      	str	r3, [sp, #4]
   d56a8:	bd08      	pop	{r3, pc}
   d56aa:	0000      	.short	0x0000
   d56ac:	00030278 	.word	0x00030278

000d56b0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d56b0:	b508      	push	{r3, lr}
   d56b2:	4b02      	ldr	r3, [pc, #8]	; (d56bc <os_mutex_recursive_create+0xc>)
   d56b4:	681b      	ldr	r3, [r3, #0]
   d56b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d56b8:	9301      	str	r3, [sp, #4]
   d56ba:	bd08      	pop	{r3, pc}
   d56bc:	00030248 	.word	0x00030248

000d56c0 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d56c0:	b508      	push	{r3, lr}
   d56c2:	4b02      	ldr	r3, [pc, #8]	; (d56cc <os_mutex_recursive_destroy+0xc>)
   d56c4:	681b      	ldr	r3, [r3, #0]
   d56c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d56c8:	9301      	str	r3, [sp, #4]
   d56ca:	bd08      	pop	{r3, pc}
   d56cc:	00030248 	.word	0x00030248

000d56d0 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d56d0:	b508      	push	{r3, lr}
   d56d2:	4b02      	ldr	r3, [pc, #8]	; (d56dc <os_mutex_recursive_lock+0xc>)
   d56d4:	681b      	ldr	r3, [r3, #0]
   d56d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d56d8:	9301      	str	r3, [sp, #4]
   d56da:	bd08      	pop	{r3, pc}
   d56dc:	00030248 	.word	0x00030248

000d56e0 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d56e0:	b508      	push	{r3, lr}
   d56e2:	4b02      	ldr	r3, [pc, #8]	; (d56ec <os_mutex_recursive_unlock+0xc>)
   d56e4:	681b      	ldr	r3, [r3, #0]
   d56e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d56e8:	9301      	str	r3, [sp, #4]
   d56ea:	bd08      	pop	{r3, pc}
   d56ec:	00030248 	.word	0x00030248

000d56f0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d56f0:	b508      	push	{r3, lr}
   d56f2:	4b02      	ldr	r3, [pc, #8]	; (d56fc <inet_inet_ntop+0xc>)
   d56f4:	681b      	ldr	r3, [r3, #0]
   d56f6:	695b      	ldr	r3, [r3, #20]
   d56f8:	9301      	str	r3, [sp, #4]
   d56fa:	bd08      	pop	{r3, pc}
   d56fc:	00030264 	.word	0x00030264

000d5700 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d5700:	b508      	push	{r3, lr}
   d5702:	4b02      	ldr	r3, [pc, #8]	; (d570c <inet_htonl+0xc>)
   d5704:	681b      	ldr	r3, [r3, #0]
   d5706:	6a1b      	ldr	r3, [r3, #32]
   d5708:	9301      	str	r3, [sp, #4]
   d570a:	bd08      	pop	{r3, pc}
   d570c:	00030264 	.word	0x00030264

000d5710 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d5710:	b508      	push	{r3, lr}
   d5712:	4b02      	ldr	r3, [pc, #8]	; (d571c <inet_htons+0xc>)
   d5714:	681b      	ldr	r3, [r3, #0]
   d5716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5718:	9301      	str	r3, [sp, #4]
   d571a:	bd08      	pop	{r3, pc}
   d571c:	00030264 	.word	0x00030264

000d5720 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d5720:	b508      	push	{r3, lr}
   d5722:	4b02      	ldr	r3, [pc, #8]	; (d572c <hal_usart_init+0xc>)
   d5724:	681b      	ldr	r3, [r3, #0]
   d5726:	681b      	ldr	r3, [r3, #0]
   d5728:	9301      	str	r3, [sp, #4]
   d572a:	bd08      	pop	{r3, pc}
   d572c:	0003023c 	.word	0x0003023c

000d5730 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d5730:	b508      	push	{r3, lr}
   d5732:	4b02      	ldr	r3, [pc, #8]	; (d573c <hal_usart_write+0xc>)
   d5734:	681b      	ldr	r3, [r3, #0]
   d5736:	68db      	ldr	r3, [r3, #12]
   d5738:	9301      	str	r3, [sp, #4]
   d573a:	bd08      	pop	{r3, pc}
   d573c:	0003023c 	.word	0x0003023c

000d5740 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d5740:	b508      	push	{r3, lr}
   d5742:	4b02      	ldr	r3, [pc, #8]	; (d574c <hal_usart_available+0xc>)
   d5744:	681b      	ldr	r3, [r3, #0]
   d5746:	691b      	ldr	r3, [r3, #16]
   d5748:	9301      	str	r3, [sp, #4]
   d574a:	bd08      	pop	{r3, pc}
   d574c:	0003023c 	.word	0x0003023c

000d5750 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d5750:	b508      	push	{r3, lr}
   d5752:	4b02      	ldr	r3, [pc, #8]	; (d575c <hal_usart_read+0xc>)
   d5754:	681b      	ldr	r3, [r3, #0]
   d5756:	695b      	ldr	r3, [r3, #20]
   d5758:	9301      	str	r3, [sp, #4]
   d575a:	bd08      	pop	{r3, pc}
   d575c:	0003023c 	.word	0x0003023c

000d5760 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d5760:	b508      	push	{r3, lr}
   d5762:	4b02      	ldr	r3, [pc, #8]	; (d576c <hal_usart_peek+0xc>)
   d5764:	681b      	ldr	r3, [r3, #0]
   d5766:	699b      	ldr	r3, [r3, #24]
   d5768:	9301      	str	r3, [sp, #4]
   d576a:	bd08      	pop	{r3, pc}
   d576c:	0003023c 	.word	0x0003023c

000d5770 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d5770:	b508      	push	{r3, lr}
   d5772:	4b02      	ldr	r3, [pc, #8]	; (d577c <hal_usart_flush+0xc>)
   d5774:	681b      	ldr	r3, [r3, #0]
   d5776:	69db      	ldr	r3, [r3, #28]
   d5778:	9301      	str	r3, [sp, #4]
   d577a:	bd08      	pop	{r3, pc}
   d577c:	0003023c 	.word	0x0003023c

000d5780 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d5780:	b508      	push	{r3, lr}
   d5782:	4b02      	ldr	r3, [pc, #8]	; (d578c <hal_usart_available_data_for_write+0xc>)
   d5784:	681b      	ldr	r3, [r3, #0]
   d5786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5788:	9301      	str	r3, [sp, #4]
   d578a:	bd08      	pop	{r3, pc}
   d578c:	0003023c 	.word	0x0003023c

000d5790 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d5790:	b508      	push	{r3, lr}
   d5792:	4b02      	ldr	r3, [pc, #8]	; (d579c <hal_i2c_begin+0xc>)
   d5794:	681b      	ldr	r3, [r3, #0]
   d5796:	68db      	ldr	r3, [r3, #12]
   d5798:	9301      	str	r3, [sp, #4]
   d579a:	bd08      	pop	{r3, pc}
   d579c:	00030228 	.word	0x00030228

000d57a0 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d57a0:	b508      	push	{r3, lr}
   d57a2:	4b02      	ldr	r3, [pc, #8]	; (d57ac <hal_i2c_begin_transmission+0xc>)
   d57a4:	681b      	ldr	r3, [r3, #0]
   d57a6:	699b      	ldr	r3, [r3, #24]
   d57a8:	9301      	str	r3, [sp, #4]
   d57aa:	bd08      	pop	{r3, pc}
   d57ac:	00030228 	.word	0x00030228

000d57b0 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d57b0:	b508      	push	{r3, lr}
   d57b2:	4b02      	ldr	r3, [pc, #8]	; (d57bc <hal_i2c_end_transmission+0xc>)
   d57b4:	681b      	ldr	r3, [r3, #0]
   d57b6:	69db      	ldr	r3, [r3, #28]
   d57b8:	9301      	str	r3, [sp, #4]
   d57ba:	bd08      	pop	{r3, pc}
   d57bc:	00030228 	.word	0x00030228

000d57c0 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d57c0:	b508      	push	{r3, lr}
   d57c2:	4b02      	ldr	r3, [pc, #8]	; (d57cc <hal_i2c_write+0xc>)
   d57c4:	681b      	ldr	r3, [r3, #0]
   d57c6:	6a1b      	ldr	r3, [r3, #32]
   d57c8:	9301      	str	r3, [sp, #4]
   d57ca:	bd08      	pop	{r3, pc}
   d57cc:	00030228 	.word	0x00030228

000d57d0 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d57d0:	b508      	push	{r3, lr}
   d57d2:	4b02      	ldr	r3, [pc, #8]	; (d57dc <hal_i2c_available+0xc>)
   d57d4:	681b      	ldr	r3, [r3, #0]
   d57d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d57d8:	9301      	str	r3, [sp, #4]
   d57da:	bd08      	pop	{r3, pc}
   d57dc:	00030228 	.word	0x00030228

000d57e0 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d57e0:	b508      	push	{r3, lr}
   d57e2:	4b02      	ldr	r3, [pc, #8]	; (d57ec <hal_i2c_read+0xc>)
   d57e4:	681b      	ldr	r3, [r3, #0]
   d57e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d57e8:	9301      	str	r3, [sp, #4]
   d57ea:	bd08      	pop	{r3, pc}
   d57ec:	00030228 	.word	0x00030228

000d57f0 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d57f0:	b508      	push	{r3, lr}
   d57f2:	4b02      	ldr	r3, [pc, #8]	; (d57fc <hal_i2c_peek+0xc>)
   d57f4:	681b      	ldr	r3, [r3, #0]
   d57f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d57f8:	9301      	str	r3, [sp, #4]
   d57fa:	bd08      	pop	{r3, pc}
   d57fc:	00030228 	.word	0x00030228

000d5800 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d5800:	b508      	push	{r3, lr}
   d5802:	4b02      	ldr	r3, [pc, #8]	; (d580c <hal_i2c_flush+0xc>)
   d5804:	681b      	ldr	r3, [r3, #0]
   d5806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5808:	9301      	str	r3, [sp, #4]
   d580a:	bd08      	pop	{r3, pc}
   d580c:	00030228 	.word	0x00030228

000d5810 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d5810:	b508      	push	{r3, lr}
   d5812:	4b02      	ldr	r3, [pc, #8]	; (d581c <hal_i2c_init+0xc>)
   d5814:	681b      	ldr	r3, [r3, #0]
   d5816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5818:	9301      	str	r3, [sp, #4]
   d581a:	bd08      	pop	{r3, pc}
   d581c:	00030228 	.word	0x00030228

000d5820 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d5820:	b508      	push	{r3, lr}
   d5822:	4b02      	ldr	r3, [pc, #8]	; (d582c <sock_setsockopt+0xc>)
   d5824:	681b      	ldr	r3, [r3, #0]
   d5826:	699b      	ldr	r3, [r3, #24]
   d5828:	9301      	str	r3, [sp, #4]
   d582a:	bd08      	pop	{r3, pc}
   d582c:	00030238 	.word	0x00030238

000d5830 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d5830:	b508      	push	{r3, lr}
   d5832:	4b02      	ldr	r3, [pc, #8]	; (d583c <sock_close+0xc>)
   d5834:	681b      	ldr	r3, [r3, #0]
   d5836:	69db      	ldr	r3, [r3, #28]
   d5838:	9301      	str	r3, [sp, #4]
   d583a:	bd08      	pop	{r3, pc}
   d583c:	00030238 	.word	0x00030238

000d5840 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d5840:	b508      	push	{r3, lr}
   d5842:	4b02      	ldr	r3, [pc, #8]	; (d584c <sock_connect+0xc>)
   d5844:	681b      	ldr	r3, [r3, #0]
   d5846:	6a1b      	ldr	r3, [r3, #32]
   d5848:	9301      	str	r3, [sp, #4]
   d584a:	bd08      	pop	{r3, pc}
   d584c:	00030238 	.word	0x00030238

000d5850 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d5850:	b508      	push	{r3, lr}
   d5852:	4b02      	ldr	r3, [pc, #8]	; (d585c <sock_recv+0xc>)
   d5854:	681b      	ldr	r3, [r3, #0]
   d5856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5858:	9301      	str	r3, [sp, #4]
   d585a:	bd08      	pop	{r3, pc}
   d585c:	00030238 	.word	0x00030238

000d5860 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d5860:	b508      	push	{r3, lr}
   d5862:	4b02      	ldr	r3, [pc, #8]	; (d586c <sock_send+0xc>)
   d5864:	681b      	ldr	r3, [r3, #0]
   d5866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5868:	9301      	str	r3, [sp, #4]
   d586a:	bd08      	pop	{r3, pc}
   d586c:	00030238 	.word	0x00030238

000d5870 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d5870:	b508      	push	{r3, lr}
   d5872:	4b02      	ldr	r3, [pc, #8]	; (d587c <sock_socket+0xc>)
   d5874:	681b      	ldr	r3, [r3, #0]
   d5876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d5878:	9301      	str	r3, [sp, #4]
   d587a:	bd08      	pop	{r3, pc}
   d587c:	00030238 	.word	0x00030238

000d5880 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5880:	b508      	push	{r3, lr}
   d5882:	4b02      	ldr	r3, [pc, #8]	; (d588c <HAL_USB_USART_Init+0xc>)
   d5884:	681b      	ldr	r3, [r3, #0]
   d5886:	681b      	ldr	r3, [r3, #0]
   d5888:	9301      	str	r3, [sp, #4]
   d588a:	bd08      	pop	{r3, pc}
   d588c:	0003024c 	.word	0x0003024c

000d5890 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d5890:	b508      	push	{r3, lr}
   d5892:	4b02      	ldr	r3, [pc, #8]	; (d589c <HAL_USB_USART_Begin+0xc>)
   d5894:	681b      	ldr	r3, [r3, #0]
   d5896:	685b      	ldr	r3, [r3, #4]
   d5898:	9301      	str	r3, [sp, #4]
   d589a:	bd08      	pop	{r3, pc}
   d589c:	0003024c 	.word	0x0003024c

000d58a0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d58a0:	b508      	push	{r3, lr}
   d58a2:	4b02      	ldr	r3, [pc, #8]	; (d58ac <HAL_USB_USART_Available_Data+0xc>)
   d58a4:	681b      	ldr	r3, [r3, #0]
   d58a6:	691b      	ldr	r3, [r3, #16]
   d58a8:	9301      	str	r3, [sp, #4]
   d58aa:	bd08      	pop	{r3, pc}
   d58ac:	0003024c 	.word	0x0003024c

000d58b0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d58b0:	b508      	push	{r3, lr}
   d58b2:	4b02      	ldr	r3, [pc, #8]	; (d58bc <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d58b4:	681b      	ldr	r3, [r3, #0]
   d58b6:	695b      	ldr	r3, [r3, #20]
   d58b8:	9301      	str	r3, [sp, #4]
   d58ba:	bd08      	pop	{r3, pc}
   d58bc:	0003024c 	.word	0x0003024c

000d58c0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d58c0:	b508      	push	{r3, lr}
   d58c2:	4b02      	ldr	r3, [pc, #8]	; (d58cc <HAL_USB_USART_Receive_Data+0xc>)
   d58c4:	681b      	ldr	r3, [r3, #0]
   d58c6:	699b      	ldr	r3, [r3, #24]
   d58c8:	9301      	str	r3, [sp, #4]
   d58ca:	bd08      	pop	{r3, pc}
   d58cc:	0003024c 	.word	0x0003024c

000d58d0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d58d0:	b508      	push	{r3, lr}
   d58d2:	4b02      	ldr	r3, [pc, #8]	; (d58dc <HAL_USB_USART_Send_Data+0xc>)
   d58d4:	681b      	ldr	r3, [r3, #0]
   d58d6:	69db      	ldr	r3, [r3, #28]
   d58d8:	9301      	str	r3, [sp, #4]
   d58da:	bd08      	pop	{r3, pc}
   d58dc:	0003024c 	.word	0x0003024c

000d58e0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d58e0:	b508      	push	{r3, lr}
   d58e2:	4b02      	ldr	r3, [pc, #8]	; (d58ec <HAL_USB_USART_Flush_Data+0xc>)
   d58e4:	681b      	ldr	r3, [r3, #0]
   d58e6:	6a1b      	ldr	r3, [r3, #32]
   d58e8:	9301      	str	r3, [sp, #4]
   d58ea:	bd08      	pop	{r3, pc}
   d58ec:	0003024c 	.word	0x0003024c

000d58f0 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d58f0:	b508      	push	{r3, lr}
   d58f2:	4b02      	ldr	r3, [pc, #8]	; (d58fc <panic_+0xc>)
   d58f4:	681b      	ldr	r3, [r3, #0]
   d58f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d58f8:	9301      	str	r3, [sp, #4]
   d58fa:	bd08      	pop	{r3, pc}
   d58fc:	00030260 	.word	0x00030260

000d5900 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d5900:	b508      	push	{r3, lr}
   d5902:	4b02      	ldr	r3, [pc, #8]	; (d590c <log_message+0xc>)
   d5904:	681b      	ldr	r3, [r3, #0]
   d5906:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5908:	9301      	str	r3, [sp, #4]
   d590a:	bd08      	pop	{r3, pc}
   d590c:	00030260 	.word	0x00030260

000d5910 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5910:	b508      	push	{r3, lr}
   d5912:	4b02      	ldr	r3, [pc, #8]	; (d591c <set_system_mode+0xc>)
   d5914:	681b      	ldr	r3, [r3, #0]
   d5916:	685b      	ldr	r3, [r3, #4]
   d5918:	9301      	str	r3, [sp, #4]
   d591a:	bd08      	pop	{r3, pc}
   d591c:	00030220 	.word	0x00030220

000d5920 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5920:	b508      	push	{r3, lr}
   d5922:	4b02      	ldr	r3, [pc, #8]	; (d592c <system_delay_ms+0xc>)
   d5924:	681b      	ldr	r3, [r3, #0]
   d5926:	695b      	ldr	r3, [r3, #20]
   d5928:	9301      	str	r3, [sp, #4]
   d592a:	bd08      	pop	{r3, pc}
   d592c:	00030220 	.word	0x00030220

000d5930 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5930:	b508      	push	{r3, lr}
   d5932:	4b03      	ldr	r3, [pc, #12]	; (d5940 <system_ctrl_set_app_request_handler+0x10>)
   d5934:	681b      	ldr	r3, [r3, #0]
   d5936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d593a:	9301      	str	r3, [sp, #4]
   d593c:	bd08      	pop	{r3, pc}
   d593e:	0000      	.short	0x0000
   d5940:	00030220 	.word	0x00030220

000d5944 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5944:	b508      	push	{r3, lr}
   d5946:	4b03      	ldr	r3, [pc, #12]	; (d5954 <system_ctrl_set_result+0x10>)
   d5948:	681b      	ldr	r3, [r3, #0]
   d594a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d594e:	9301      	str	r3, [sp, #4]
   d5950:	bd08      	pop	{r3, pc}
   d5952:	0000      	.short	0x0000
   d5954:	00030220 	.word	0x00030220

000d5958 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5958:	b508      	push	{r3, lr}
   d595a:	4b02      	ldr	r3, [pc, #8]	; (d5964 <network_connect+0xc>)
   d595c:	681b      	ldr	r3, [r3, #0]
   d595e:	685b      	ldr	r3, [r3, #4]
   d5960:	9301      	str	r3, [sp, #4]
   d5962:	bd08      	pop	{r3, pc}
   d5964:	00030240 	.word	0x00030240

000d5968 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5968:	b508      	push	{r3, lr}
   d596a:	4b02      	ldr	r3, [pc, #8]	; (d5974 <network_connecting+0xc>)
   d596c:	681b      	ldr	r3, [r3, #0]
   d596e:	689b      	ldr	r3, [r3, #8]
   d5970:	9301      	str	r3, [sp, #4]
   d5972:	bd08      	pop	{r3, pc}
   d5974:	00030240 	.word	0x00030240

000d5978 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5978:	b508      	push	{r3, lr}
   d597a:	4b02      	ldr	r3, [pc, #8]	; (d5984 <network_disconnect+0xc>)
   d597c:	681b      	ldr	r3, [r3, #0]
   d597e:	68db      	ldr	r3, [r3, #12]
   d5980:	9301      	str	r3, [sp, #4]
   d5982:	bd08      	pop	{r3, pc}
   d5984:	00030240 	.word	0x00030240

000d5988 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5988:	b508      	push	{r3, lr}
   d598a:	4b02      	ldr	r3, [pc, #8]	; (d5994 <network_ready+0xc>)
   d598c:	681b      	ldr	r3, [r3, #0]
   d598e:	691b      	ldr	r3, [r3, #16]
   d5990:	9301      	str	r3, [sp, #4]
   d5992:	bd08      	pop	{r3, pc}
   d5994:	00030240 	.word	0x00030240

000d5998 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5998:	b508      	push	{r3, lr}
   d599a:	4b02      	ldr	r3, [pc, #8]	; (d59a4 <network_on+0xc>)
   d599c:	681b      	ldr	r3, [r3, #0]
   d599e:	695b      	ldr	r3, [r3, #20]
   d59a0:	9301      	str	r3, [sp, #4]
   d59a2:	bd08      	pop	{r3, pc}
   d59a4:	00030240 	.word	0x00030240

000d59a8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d59a8:	b508      	push	{r3, lr}
   d59aa:	4b02      	ldr	r3, [pc, #8]	; (d59b4 <network_off+0xc>)
   d59ac:	681b      	ldr	r3, [r3, #0]
   d59ae:	699b      	ldr	r3, [r3, #24]
   d59b0:	9301      	str	r3, [sp, #4]
   d59b2:	bd08      	pop	{r3, pc}
   d59b4:	00030240 	.word	0x00030240

000d59b8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d59b8:	b508      	push	{r3, lr}
   d59ba:	4b02      	ldr	r3, [pc, #8]	; (d59c4 <network_listen+0xc>)
   d59bc:	681b      	ldr	r3, [r3, #0]
   d59be:	69db      	ldr	r3, [r3, #28]
   d59c0:	9301      	str	r3, [sp, #4]
   d59c2:	bd08      	pop	{r3, pc}
   d59c4:	00030240 	.word	0x00030240

000d59c8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d59c8:	b508      	push	{r3, lr}
   d59ca:	4b02      	ldr	r3, [pc, #8]	; (d59d4 <network_listening+0xc>)
   d59cc:	681b      	ldr	r3, [r3, #0]
   d59ce:	6a1b      	ldr	r3, [r3, #32]
   d59d0:	9301      	str	r3, [sp, #4]
   d59d2:	bd08      	pop	{r3, pc}
   d59d4:	00030240 	.word	0x00030240

000d59d8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d59d8:	b508      	push	{r3, lr}
   d59da:	4b02      	ldr	r3, [pc, #8]	; (d59e4 <network_set_listen_timeout+0xc>)
   d59dc:	681b      	ldr	r3, [r3, #0]
   d59de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d59e0:	9301      	str	r3, [sp, #4]
   d59e2:	bd08      	pop	{r3, pc}
   d59e4:	00030240 	.word	0x00030240

000d59e8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d59e8:	b508      	push	{r3, lr}
   d59ea:	4b02      	ldr	r3, [pc, #8]	; (d59f4 <network_get_listen_timeout+0xc>)
   d59ec:	681b      	ldr	r3, [r3, #0]
   d59ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d59f0:	9301      	str	r3, [sp, #4]
   d59f2:	bd08      	pop	{r3, pc}
   d59f4:	00030240 	.word	0x00030240

000d59f8 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d59f8:	b508      	push	{r3, lr}
   d59fa:	4b02      	ldr	r3, [pc, #8]	; (d5a04 <network_is_on+0xc>)
   d59fc:	681b      	ldr	r3, [r3, #0]
   d59fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5a00:	9301      	str	r3, [sp, #4]
   d5a02:	bd08      	pop	{r3, pc}
   d5a04:	00030240 	.word	0x00030240

000d5a08 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d5a08:	b508      	push	{r3, lr}
   d5a0a:	4b02      	ldr	r3, [pc, #8]	; (d5a14 <network_is_off+0xc>)
   d5a0c:	681b      	ldr	r3, [r3, #0]
   d5a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5a10:	9301      	str	r3, [sp, #4]
   d5a12:	bd08      	pop	{r3, pc}
   d5a14:	00030240 	.word	0x00030240

000d5a18 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5a18:	b508      	push	{r3, lr}
   d5a1a:	4b02      	ldr	r3, [pc, #8]	; (d5a24 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5a1c:	681b      	ldr	r3, [r3, #0]
   d5a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5a20:	9301      	str	r3, [sp, #4]
   d5a22:	bd08      	pop	{r3, pc}
   d5a24:	00030244 	.word	0x00030244

000d5a28 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5a28:	b508      	push	{r3, lr}
   d5a2a:	4b02      	ldr	r3, [pc, #8]	; (d5a34 <malloc+0xc>)
   d5a2c:	681b      	ldr	r3, [r3, #0]
   d5a2e:	681b      	ldr	r3, [r3, #0]
   d5a30:	9301      	str	r3, [sp, #4]
   d5a32:	bd08      	pop	{r3, pc}
   d5a34:	0003021c 	.word	0x0003021c

000d5a38 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5a38:	b508      	push	{r3, lr}
   d5a3a:	4b02      	ldr	r3, [pc, #8]	; (d5a44 <free+0xc>)
   d5a3c:	681b      	ldr	r3, [r3, #0]
   d5a3e:	685b      	ldr	r3, [r3, #4]
   d5a40:	9301      	str	r3, [sp, #4]
   d5a42:	bd08      	pop	{r3, pc}
   d5a44:	0003021c 	.word	0x0003021c

000d5a48 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d5a48:	b508      	push	{r3, lr}
   d5a4a:	4b02      	ldr	r3, [pc, #8]	; (d5a54 <realloc+0xc>)
   d5a4c:	681b      	ldr	r3, [r3, #0]
   d5a4e:	689b      	ldr	r3, [r3, #8]
   d5a50:	9301      	str	r3, [sp, #4]
   d5a52:	bd08      	pop	{r3, pc}
   d5a54:	0003021c 	.word	0x0003021c

000d5a58 <sscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   d5a58:	b508      	push	{r3, lr}
   d5a5a:	4b02      	ldr	r3, [pc, #8]	; (d5a64 <sscanf+0xc>)
   d5a5c:	681b      	ldr	r3, [r3, #0]
   d5a5e:	695b      	ldr	r3, [r3, #20]
   d5a60:	9301      	str	r3, [sp, #4]
   d5a62:	bd08      	pop	{r3, pc}
   d5a64:	0003021c 	.word	0x0003021c

000d5a68 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d5a68:	b508      	push	{r3, lr}
   d5a6a:	4b02      	ldr	r3, [pc, #8]	; (d5a74 <abort+0xc>)
   d5a6c:	681b      	ldr	r3, [r3, #0]
   d5a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5a70:	9301      	str	r3, [sp, #4]
   d5a72:	bd08      	pop	{r3, pc}
   d5a74:	0003021c 	.word	0x0003021c

000d5a78 <__errno>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d5a78:	b508      	push	{r3, lr}
   d5a7a:	4b02      	ldr	r3, [pc, #8]	; (d5a84 <__errno+0xc>)
   d5a7c:	681b      	ldr	r3, [r3, #0]
   d5a7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5a80:	9301      	str	r3, [sp, #4]
   d5a82:	bd08      	pop	{r3, pc}
   d5a84:	0003021c 	.word	0x0003021c

000d5a88 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d5a88:	b508      	push	{r3, lr}
   d5a8a:	4b02      	ldr	r3, [pc, #8]	; (d5a94 <newlib_impure_ptr_callback+0xc>)
   d5a8c:	681b      	ldr	r3, [r3, #0]
   d5a8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5a90:	9301      	str	r3, [sp, #4]
   d5a92:	bd08      	pop	{r3, pc}
   d5a94:	0003021c 	.word	0x0003021c

000d5a98 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5a98:	2200      	movs	r2, #0
   d5a9a:	6840      	ldr	r0, [r0, #4]
   d5a9c:	4611      	mov	r1, r2
   d5a9e:	f7ff bf93 	b.w	d59c8 <network_listening>

000d5aa2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d5aa2:	2200      	movs	r2, #0
   d5aa4:	6840      	ldr	r0, [r0, #4]
   d5aa6:	4611      	mov	r1, r2
   d5aa8:	f7ff bf9e 	b.w	d59e8 <network_get_listen_timeout>

000d5aac <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d5aac:	6840      	ldr	r0, [r0, #4]
   d5aae:	2200      	movs	r2, #0
   d5ab0:	f7ff bf92 	b.w	d59d8 <network_set_listen_timeout>

000d5ab4 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d5ab4:	6840      	ldr	r0, [r0, #4]
   d5ab6:	2200      	movs	r2, #0
   d5ab8:	f081 0101 	eor.w	r1, r1, #1
   d5abc:	f7ff bf7c 	b.w	d59b8 <network_listen>

000d5ac0 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d5ac0:	2300      	movs	r3, #0
   d5ac2:	6840      	ldr	r0, [r0, #4]
   d5ac4:	461a      	mov	r2, r3
   d5ac6:	4619      	mov	r1, r3
   d5ac8:	f7ff bf6e 	b.w	d59a8 <network_off>

000d5acc <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d5acc:	2300      	movs	r3, #0
   d5ace:	6840      	ldr	r0, [r0, #4]
   d5ad0:	461a      	mov	r2, r3
   d5ad2:	4619      	mov	r1, r3
   d5ad4:	f7ff bf60 	b.w	d5998 <network_on>

000d5ad8 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5ad8:	2200      	movs	r2, #0
   d5ada:	6840      	ldr	r0, [r0, #4]
   d5adc:	4611      	mov	r1, r2
   d5ade:	f7ff bf53 	b.w	d5988 <network_ready>

000d5ae2 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d5ae2:	2200      	movs	r2, #0
   d5ae4:	6840      	ldr	r0, [r0, #4]
   d5ae6:	4611      	mov	r1, r2
   d5ae8:	f7ff bf3e 	b.w	d5968 <network_connecting>

000d5aec <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5aec:	6840      	ldr	r0, [r0, #4]
   d5aee:	2200      	movs	r2, #0
   d5af0:	2102      	movs	r1, #2
   d5af2:	f7ff bf41 	b.w	d5978 <network_disconnect>

000d5af6 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d5af6:	2300      	movs	r3, #0
   d5af8:	6840      	ldr	r0, [r0, #4]
   d5afa:	461a      	mov	r2, r3
   d5afc:	f7ff bf2c 	b.w	d5958 <network_connect>

000d5b00 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5b00:	4b02      	ldr	r3, [pc, #8]	; (d5b0c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5b02:	2203      	movs	r2, #3
   d5b04:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5b06:	4a02      	ldr	r2, [pc, #8]	; (d5b10 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5b08:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d5b0a:	4770      	bx	lr
   d5b0c:	2003e644 	.word	0x2003e644
   d5b10:	000d867c 	.word	0x000d867c

000d5b14 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d5b14:	b510      	push	{r4, lr}
   d5b16:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d5b18:	6800      	ldr	r0, [r0, #0]
   d5b1a:	b118      	cbz	r0, d5b24 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d5b1c:	f7ff ff8c 	bl	d5a38 <free>
            wakeupSource_ = nullptr;
   d5b20:	2300      	movs	r3, #0
   d5b22:	6023      	str	r3, [r4, #0]
        }
    }
   d5b24:	bd10      	pop	{r4, pc}

000d5b26 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d5b26:	b510      	push	{r4, lr}
   d5b28:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d5b2a:	f7ff fff3 	bl	d5b14 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d5b2e:	4620      	mov	r0, r4
   d5b30:	bd10      	pop	{r4, pc}
	...

000d5b34 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5b34:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d5b36:	4b09      	ldr	r3, [pc, #36]	; (d5b5c <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d5b38:	4c09      	ldr	r4, [pc, #36]	; (d5b60 <_GLOBAL__sub_I_System+0x2c>)
   d5b3a:	2202      	movs	r2, #2
   d5b3c:	2000      	movs	r0, #0
   d5b3e:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d5b40:	4b08      	ldr	r3, [pc, #32]	; (d5b64 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d5b42:	6020      	str	r0, [r4, #0]
   d5b44:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d5b46:	71a0      	strb	r0, [r4, #6]
   d5b48:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5b4a:	f7ff fee1 	bl	d5910 <set_system_mode>
SystemClass System;
   d5b4e:	4620      	mov	r0, r4
   d5b50:	4a05      	ldr	r2, [pc, #20]	; (d5b68 <_GLOBAL__sub_I_System+0x34>)
   d5b52:	4906      	ldr	r1, [pc, #24]	; (d5b6c <_GLOBAL__sub_I_System+0x38>)
   d5b54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d5b58:	f002 b984 	b.w	d7e64 <__aeabi_atexit>
   d5b5c:	2003e658 	.word	0x2003e658
   d5b60:	2003e64c 	.word	0x2003e64c
   d5b64:	ffff0000 	.word	0xffff0000
   d5b68:	20034510 	.word	0x20034510
   d5b6c:	000d5b27 	.word	0x000d5b27

000d5b70 <_ZN9IPAddressaSIPKhEERS_T_>:
    void set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3);


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
   d5b70:	b570      	push	{r4, r5, r6, lr}
   d5b72:	b086      	sub	sp, #24
   d5b74:	4606      	mov	r6, r0
class IPAddress : public Printable {
   d5b76:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   d5b78:	4668      	mov	r0, sp
   d5b7a:	f001 fbff 	bl	d737c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d5b7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5b80:	1d34      	adds	r4, r6, #4
   d5b82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5b84:	682b      	ldr	r3, [r5, #0]
   d5b86:	7023      	strb	r3, [r4, #0]
    }
   d5b88:	4630      	mov	r0, r6
   d5b8a:	b006      	add	sp, #24
   d5b8c:	bd70      	pop	{r4, r5, r6, pc}

000d5b8e <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d5b8e:	b510      	push	{r4, lr}
   d5b90:	4604      	mov	r4, r0
{
	free(buffer);
   d5b92:	6800      	ldr	r0, [r0, #0]
   d5b94:	f7ff ff50 	bl	d5a38 <free>
}
   d5b98:	4620      	mov	r0, r4
   d5b9a:	bd10      	pop	{r4, pc}

000d5b9c <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d5b9c:	b510      	push	{r4, lr}
   d5b9e:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d5ba0:	6800      	ldr	r0, [r0, #0]
   d5ba2:	b108      	cbz	r0, d5ba8 <_ZN6String10invalidateEv+0xc>
   d5ba4:	f7ff ff48 	bl	d5a38 <free>
	buffer = NULL;
   d5ba8:	2300      	movs	r3, #0
	capacity = len = 0;
   d5baa:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d5bae:	6023      	str	r3, [r4, #0]
}
   d5bb0:	bd10      	pop	{r4, pc}

000d5bb2 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d5bb2:	b538      	push	{r3, r4, r5, lr}
   d5bb4:	4604      	mov	r4, r0
   d5bb6:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d5bb8:	6800      	ldr	r0, [r0, #0]
   d5bba:	3101      	adds	r1, #1
   d5bbc:	f7ff ff44 	bl	d5a48 <realloc>
	if (newbuffer) {
   d5bc0:	b110      	cbz	r0, d5bc8 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d5bc2:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d5bc6:	2001      	movs	r0, #1
	}
	return 0;
}
   d5bc8:	bd38      	pop	{r3, r4, r5, pc}

000d5bca <_ZN6String7reserveEj>:
{
   d5bca:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d5bcc:	6803      	ldr	r3, [r0, #0]
{
   d5bce:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d5bd0:	b123      	cbz	r3, d5bdc <_ZN6String7reserveEj+0x12>
   d5bd2:	6843      	ldr	r3, [r0, #4]
   d5bd4:	428b      	cmp	r3, r1
   d5bd6:	d301      	bcc.n	d5bdc <_ZN6String7reserveEj+0x12>
   d5bd8:	2001      	movs	r0, #1
}
   d5bda:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d5bdc:	4620      	mov	r0, r4
   d5bde:	f7ff ffe8 	bl	d5bb2 <_ZN6String12changeBufferEj>
   d5be2:	2800      	cmp	r0, #0
   d5be4:	d0f9      	beq.n	d5bda <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d5be6:	68a3      	ldr	r3, [r4, #8]
   d5be8:	2b00      	cmp	r3, #0
   d5bea:	d1f5      	bne.n	d5bd8 <_ZN6String7reserveEj+0xe>
   d5bec:	6822      	ldr	r2, [r4, #0]
   d5bee:	7013      	strb	r3, [r2, #0]
   d5bf0:	e7f2      	b.n	d5bd8 <_ZN6String7reserveEj+0xe>

000d5bf2 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5bf2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5bf4:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d5bf6:	4611      	mov	r1, r2
   d5bf8:	9201      	str	r2, [sp, #4]
{
   d5bfa:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d5bfc:	f7ff ffe5 	bl	d5bca <_ZN6String7reserveEj>
   d5c00:	9a01      	ldr	r2, [sp, #4]
   d5c02:	b928      	cbnz	r0, d5c10 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d5c04:	4620      	mov	r0, r4
   d5c06:	f7ff ffc9 	bl	d5b9c <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d5c0a:	4620      	mov	r0, r4
   d5c0c:	b003      	add	sp, #12
   d5c0e:	bd30      	pop	{r4, r5, pc}
	len = length;
   d5c10:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d5c12:	4629      	mov	r1, r5
   d5c14:	6820      	ldr	r0, [r4, #0]
   d5c16:	f002 fa67 	bl	d80e8 <memcpy>
	buffer[len] = 0;
   d5c1a:	6822      	ldr	r2, [r4, #0]
   d5c1c:	68a3      	ldr	r3, [r4, #8]
   d5c1e:	2100      	movs	r1, #0
   d5c20:	54d1      	strb	r1, [r2, r3]
	return *this;
   d5c22:	e7f2      	b.n	d5c0a <_ZN6String4copyEPKcj+0x18>

000d5c24 <_ZN6StringC1EPKc>:
	buffer = NULL;
   d5c24:	2300      	movs	r3, #0
String::String(const char *cstr)
   d5c26:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d5c28:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d5c2c:	4604      	mov	r4, r0
	len = 0;
   d5c2e:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5c30:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d5c32:	b141      	cbz	r1, d5c46 <_ZN6StringC1EPKc+0x22>
   d5c34:	4608      	mov	r0, r1
   d5c36:	9101      	str	r1, [sp, #4]
   d5c38:	f002 fabc 	bl	d81b4 <strlen>
   d5c3c:	9901      	ldr	r1, [sp, #4]
   d5c3e:	4602      	mov	r2, r0
   d5c40:	4620      	mov	r0, r4
   d5c42:	f7ff ffd6 	bl	d5bf2 <_ZN6String4copyEPKcj>
}
   d5c46:	4620      	mov	r0, r4
   d5c48:	b002      	add	sp, #8
   d5c4a:	bd10      	pop	{r4, pc}

000d5c4c <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d5c4c:	b513      	push	{r0, r1, r4, lr}
   d5c4e:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d5c50:	b159      	cbz	r1, d5c6a <_ZN6StringaSEPKc+0x1e>
   d5c52:	4608      	mov	r0, r1
   d5c54:	9101      	str	r1, [sp, #4]
   d5c56:	f002 faad 	bl	d81b4 <strlen>
   d5c5a:	9901      	ldr	r1, [sp, #4]
   d5c5c:	4602      	mov	r2, r0
   d5c5e:	4620      	mov	r0, r4
   d5c60:	f7ff ffc7 	bl	d5bf2 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d5c64:	4620      	mov	r0, r4
   d5c66:	b002      	add	sp, #8
   d5c68:	bd10      	pop	{r4, pc}
	else invalidate();
   d5c6a:	f7ff ff97 	bl	d5b9c <_ZN6String10invalidateEv>
   d5c6e:	e7f9      	b.n	d5c64 <_ZN6StringaSEPKc+0x18>

000d5c70 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d5c70:	b570      	push	{r4, r5, r6, lr}
   d5c72:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d5c74:	460e      	mov	r6, r1
   d5c76:	b909      	cbnz	r1, d5c7c <_ZN6String6concatEPKcj+0xc>
   d5c78:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d5c7a:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d5c7c:	b16a      	cbz	r2, d5c9a <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   d5c7e:	6884      	ldr	r4, [r0, #8]
   d5c80:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   d5c82:	4621      	mov	r1, r4
   d5c84:	f7ff ffa1 	bl	d5bca <_ZN6String7reserveEj>
   d5c88:	2800      	cmp	r0, #0
   d5c8a:	d0f5      	beq.n	d5c78 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d5c8c:	6828      	ldr	r0, [r5, #0]
   d5c8e:	68ab      	ldr	r3, [r5, #8]
   d5c90:	4631      	mov	r1, r6
   d5c92:	4418      	add	r0, r3
   d5c94:	f002 fa86 	bl	d81a4 <strcpy>
	len = newlen;
   d5c98:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   d5c9a:	2001      	movs	r0, #1
   d5c9c:	e7ed      	b.n	d5c7a <_ZN6String6concatEPKcj+0xa>

000d5c9e <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
   d5c9e:	688a      	ldr	r2, [r1, #8]
   d5ca0:	6809      	ldr	r1, [r1, #0]
   d5ca2:	f7ff bfe5 	b.w	d5c70 <_ZN6String6concatEPKcj>

000d5ca6 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   d5ca6:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d5ca8:	2300      	movs	r3, #0
	buf[0] = c;
   d5caa:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   d5cae:	2201      	movs	r2, #1
   d5cb0:	a901      	add	r1, sp, #4
	buf[1] = 0;
   d5cb2:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   d5cb6:	f7ff ffdb 	bl	d5c70 <_ZN6String6concatEPKcj>
}
   d5cba:	b003      	add	sp, #12
   d5cbc:	f85d fb04 	ldr.w	pc, [sp], #4

000d5cc0 <_ZNK6String9compareToERKS_>:
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
   d5cc0:	6802      	ldr	r2, [r0, #0]
{
   d5cc2:	460b      	mov	r3, r1
   d5cc4:	6809      	ldr	r1, [r1, #0]
	if (!buffer || !s.buffer) {
   d5cc6:	b162      	cbz	r2, d5ce2 <_ZNK6String9compareToERKS_+0x22>
   d5cc8:	b941      	cbnz	r1, d5cdc <_ZNK6String9compareToERKS_+0x1c>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
   d5cca:	6880      	ldr	r0, [r0, #8]
   d5ccc:	b160      	cbz	r0, d5ce8 <_ZNK6String9compareToERKS_+0x28>
   d5cce:	7810      	ldrb	r0, [r2, #0]
   d5cd0:	4770      	bx	lr
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   d5cd2:	6898      	ldr	r0, [r3, #8]
   d5cd4:	b140      	cbz	r0, d5ce8 <_ZNK6String9compareToERKS_+0x28>
   d5cd6:	7809      	ldrb	r1, [r1, #0]
   d5cd8:	4248      	negs	r0, r1
   d5cda:	4770      	bx	lr
		return 0;
	}
	return strcmp(buffer, s.buffer);
   d5cdc:	4610      	mov	r0, r2
   d5cde:	f002 ba57 	b.w	d8190 <strcmp>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   d5ce2:	2900      	cmp	r1, #0
   d5ce4:	d1f5      	bne.n	d5cd2 <_ZNK6String9compareToERKS_+0x12>
		return 0;
   d5ce6:	4608      	mov	r0, r1
}
   d5ce8:	4770      	bx	lr

000d5cea <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
   d5cea:	b508      	push	{r3, lr}
	return (len == s2.len && compareTo(s2) == 0);
   d5cec:	6882      	ldr	r2, [r0, #8]
   d5cee:	688b      	ldr	r3, [r1, #8]
   d5cf0:	429a      	cmp	r2, r3
   d5cf2:	d105      	bne.n	d5d00 <_ZNK6String6equalsERKS_+0x16>
   d5cf4:	f7ff ffe4 	bl	d5cc0 <_ZNK6String9compareToERKS_>
   d5cf8:	fab0 f080 	clz	r0, r0
   d5cfc:	0940      	lsrs	r0, r0, #5
}
   d5cfe:	bd08      	pop	{r3, pc}
	return (len == s2.len && compareTo(s2) == 0);
   d5d00:	2000      	movs	r0, #0
   d5d02:	e7fc      	b.n	d5cfe <_ZNK6String6equalsERKS_+0x14>

000d5d04 <_ZNK6String6equalsEPKc>:

unsigned char String::equals(const char *cstr) const
{
   d5d04:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d5d06:	6882      	ldr	r2, [r0, #8]
   d5d08:	b93a      	cbnz	r2, d5d1a <_ZNK6String6equalsEPKc+0x16>
   d5d0a:	b121      	cbz	r1, d5d16 <_ZNK6String6equalsEPKc+0x12>
   d5d0c:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   d5d0e:	fab0 f080 	clz	r0, r0
   d5d12:	0940      	lsrs	r0, r0, #5
   d5d14:	e000      	b.n	d5d18 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d5d16:	2001      	movs	r0, #1
}
   d5d18:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d5d1a:	6800      	ldr	r0, [r0, #0]
   d5d1c:	b909      	cbnz	r1, d5d22 <_ZNK6String6equalsEPKc+0x1e>
   d5d1e:	7800      	ldrb	r0, [r0, #0]
   d5d20:	e7f5      	b.n	d5d0e <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   d5d22:	f002 fa35 	bl	d8190 <strcmp>
   d5d26:	e7f2      	b.n	d5d0e <_ZNK6String6equalsEPKc+0xa>

000d5d28 <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
   d5d28:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
   d5d2a:	6883      	ldr	r3, [r0, #8]
   d5d2c:	4293      	cmp	r3, r2
   d5d2e:	d907      	bls.n	d5d40 <_ZNK6String7indexOfERKS_j+0x18>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
   d5d30:	6804      	ldr	r4, [r0, #0]
   d5d32:	6809      	ldr	r1, [r1, #0]
   d5d34:	18a0      	adds	r0, r4, r2
   d5d36:	f002 fa52 	bl	d81de <strstr>
	if (found == NULL) return -1;
   d5d3a:	b108      	cbz	r0, d5d40 <_ZNK6String7indexOfERKS_j+0x18>
	return found - buffer;
   d5d3c:	1b00      	subs	r0, r0, r4
}
   d5d3e:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
   d5d40:	f04f 30ff 	mov.w	r0, #4294967295
   d5d44:	e7fb      	b.n	d5d3e <_ZNK6String7indexOfERKS_j+0x16>

000d5d46 <_ZNK6String7indexOfERKS_>:
	return indexOf(s2, 0);
   d5d46:	2200      	movs	r2, #0
   d5d48:	f7ff bfee 	b.w	d5d28 <_ZNK6String7indexOfERKS_j>

000d5d4c <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d5d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   d5d4e:	429a      	cmp	r2, r3
{
   d5d50:	460f      	mov	r7, r1
   d5d52:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   d5d54:	490c      	ldr	r1, [pc, #48]	; (d5d88 <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   d5d56:	bf88      	it	hi
   d5d58:	4613      	movhi	r3, r2
{
   d5d5a:	4614      	mov	r4, r2
   d5d5c:	4606      	mov	r6, r0
	if (left > right) {
   d5d5e:	bf84      	itt	hi
   d5d60:	462c      	movhi	r4, r5
   d5d62:	461d      	movhi	r5, r3
	String out;
   d5d64:	f7ff ff5e 	bl	d5c24 <_ZN6StringC1EPKc>
	if (left > len) return out;
   d5d68:	68ba      	ldr	r2, [r7, #8]
   d5d6a:	42a2      	cmp	r2, r4
   d5d6c:	d30a      	bcc.n	d5d84 <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   d5d6e:	6839      	ldr	r1, [r7, #0]
   d5d70:	42aa      	cmp	r2, r5
   d5d72:	bf94      	ite	ls
   d5d74:	ebc4 0202 	rsbls	r2, r4, r2
   d5d78:	ebc4 0205 	rsbhi	r2, r4, r5
   d5d7c:	4421      	add	r1, r4
   d5d7e:	4630      	mov	r0, r6
   d5d80:	f7ff ff37 	bl	d5bf2 <_ZN6String4copyEPKcj>
	return out;
}
   d5d84:	4630      	mov	r0, r6
   d5d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d5d88:	000d863d 	.word	0x000d863d

000d5d8c <_ZNK6String9substringEj>:
{
   d5d8c:	b510      	push	{r4, lr}
   d5d8e:	4604      	mov	r4, r0
	return substring(left, len);
   d5d90:	688b      	ldr	r3, [r1, #8]
   d5d92:	f7ff ffdb 	bl	d5d4c <_ZNK6String9substringEjj>
}
   d5d96:	4620      	mov	r0, r4
   d5d98:	bd10      	pop	{r4, pc}

000d5d9a <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   d5d9a:	6800      	ldr	r0, [r0, #0]
   d5d9c:	b108      	cbz	r0, d5da2 <_ZNK6String5toIntEv+0x8>
   d5d9e:	f002 b983 	b.w	d80a8 <atol>
	return 0;
}
   d5da2:	4770      	bx	lr

000d5da4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d5da4:	4770      	bx	lr

000d5da6 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   d5da6:	4770      	bx	lr

000d5da8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   d5da8:	4770      	bx	lr

000d5daa <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d5daa:	4770      	bx	lr

000d5dac <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d5dac:	4b06      	ldr	r3, [pc, #24]	; (d5dc8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d5dae:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d5db0:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   d5db2:	f100 040c 	add.w	r4, r0, #12
	    ||
   d5db6:	d005      	beq.n	d5dc4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d5db8:	4608      	mov	r0, r1
   d5dba:	f002 f85f 	bl	d7e7c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d5dbe:	2800      	cmp	r0, #0
	return nullptr;
   d5dc0:	bf08      	it	eq
   d5dc2:	2400      	moveq	r4, #0
      }
   d5dc4:	4620      	mov	r0, r4
   d5dc6:	bd10      	pop	{r4, pc}
   d5dc8:	000d87f8 	.word	0x000d87f8

000d5dcc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d5dcc:	4b06      	ldr	r3, [pc, #24]	; (d5de8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d5dce:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d5dd0:	b510      	push	{r4, lr}
   d5dd2:	f100 040c 	add.w	r4, r0, #12
	    ||
   d5dd6:	d005      	beq.n	d5de4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d5dd8:	4608      	mov	r0, r1
   d5dda:	f002 f84f 	bl	d7e7c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d5dde:	2800      	cmp	r0, #0
	return nullptr;
   d5de0:	bf08      	it	eq
   d5de2:	2400      	moveq	r4, #0
      }
   d5de4:	4620      	mov	r0, r4
   d5de6:	bd10      	pop	{r4, pc}
   d5de8:	000d87f8 	.word	0x000d87f8

000d5dec <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d5dec:	4b06      	ldr	r3, [pc, #24]	; (d5e08 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d5dee:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d5df0:	b510      	push	{r4, lr}
   d5df2:	f100 040c 	add.w	r4, r0, #12
	    ||
   d5df6:	d005      	beq.n	d5e04 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d5df8:	4608      	mov	r0, r1
   d5dfa:	f002 f83f 	bl	d7e7c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d5dfe:	2800      	cmp	r0, #0
	return nullptr;
   d5e00:	bf08      	it	eq
   d5e02:	2400      	moveq	r4, #0
      }
   d5e04:	4620      	mov	r0, r4
   d5e06:	bd10      	pop	{r4, pc}
   d5e08:	000d87f8 	.word	0x000d87f8

000d5e0c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d5e0c:	b510      	push	{r4, lr}
   d5e0e:	2168      	movs	r1, #104	; 0x68
   d5e10:	4604      	mov	r4, r0
   d5e12:	f002 f82c 	bl	d7e6e <_ZdlPvj>
   d5e16:	4620      	mov	r0, r4
   d5e18:	bd10      	pop	{r4, pc}

000d5e1a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   d5e1a:	b510      	push	{r4, lr}
   d5e1c:	2128      	movs	r1, #40	; 0x28
   d5e1e:	4604      	mov	r4, r0
   d5e20:	f002 f825 	bl	d7e6e <_ZdlPvj>
   d5e24:	4620      	mov	r0, r4
   d5e26:	bd10      	pop	{r4, pc}

000d5e28 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   d5e28:	b510      	push	{r4, lr}
   d5e2a:	2130      	movs	r1, #48	; 0x30
   d5e2c:	4604      	mov	r4, r0
   d5e2e:	f002 f81e 	bl	d7e6e <_ZdlPvj>
   d5e32:	4620      	mov	r0, r4
   d5e34:	bd10      	pop	{r4, pc}

000d5e36 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d5e36:	f7fe b930 	b.w	d409a <_ZdlPv>

000d5e3a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   d5e3a:	f7fe b92e 	b.w	d409a <_ZdlPv>

000d5e3e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   d5e3e:	f7fe b92c 	b.w	d409a <_ZdlPv>

000d5e42 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d5e42:	b510      	push	{r4, lr}
          _M_dispose();
   d5e44:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d5e46:	4604      	mov	r4, r0
          _M_dispose();
   d5e48:	689b      	ldr	r3, [r3, #8]
   d5e4a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5e4c:	68a3      	ldr	r3, [r4, #8]
   d5e4e:	3b01      	subs	r3, #1
   d5e50:	60a3      	str	r3, [r4, #8]
   d5e52:	b92b      	cbnz	r3, d5e60 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d5e54:	6823      	ldr	r3, [r4, #0]
   d5e56:	4620      	mov	r0, r4
   d5e58:	68db      	ldr	r3, [r3, #12]
    }
   d5e5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d5e5e:	4718      	bx	r3
    }
   d5e60:	bd10      	pop	{r4, pc}

000d5e62 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d5e62:	b510      	push	{r4, lr}
   d5e64:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5e66:	6800      	ldr	r0, [r0, #0]
   d5e68:	b108      	cbz	r0, d5e6e <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d5e6a:	f7ff fc29 	bl	d56c0 <os_mutex_recursive_destroy>
    }
   d5e6e:	4620      	mov	r0, r4
   d5e70:	bd10      	pop	{r4, pc}
	...

000d5e74 <_ZN8particle3ble13WiringBleLock4lockEv.isra.0>:
    WiringBleLock(WiringBleLock&& lock) :
            locked_(lock.locked_) {
        lock.locked_ = false;
    }

    void lock() {
   d5e74:	b510      	push	{r4, lr}
        mutex_.lock();
   d5e76:	4b04      	ldr	r3, [pc, #16]	; (d5e88 <_ZN8particle3ble13WiringBleLock4lockEv.isra.0+0x14>)
    void lock() {
   d5e78:	4604      	mov	r4, r0
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d5e7a:	6818      	ldr	r0, [r3, #0]
   d5e7c:	f7ff fc28 	bl	d56d0 <os_mutex_recursive_lock>
        locked_ = true;
   d5e80:	2301      	movs	r3, #1
   d5e82:	7023      	strb	r3, [r4, #0]
    }
   d5e84:	bd10      	pop	{r4, pc}
   d5e86:	bf00      	nop
   d5e88:	2003e664 	.word	0x2003e664

000d5e8c <_ZN8particle3ble13WiringBleLock6unlockEv.isra.0>:

    void unlock() {
   d5e8c:	b510      	push	{r4, lr}
        mutex_.unlock();
   d5e8e:	4b04      	ldr	r3, [pc, #16]	; (d5ea0 <_ZN8particle3ble13WiringBleLock6unlockEv.isra.0+0x14>)
    void unlock() {
   d5e90:	4604      	mov	r4, r0
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d5e92:	6818      	ldr	r0, [r3, #0]
   d5e94:	f7ff fc24 	bl	d56e0 <os_mutex_recursive_unlock>
        locked_ = false;
   d5e98:	2300      	movs	r3, #0
   d5e9a:	7023      	strb	r3, [r4, #0]
    }
   d5e9c:	bd10      	pop	{r4, pc}
   d5e9e:	bf00      	nop
   d5ea0:	2003e664 	.word	0x2003e664

000d5ea4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   d5ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d5ea6:	2500      	movs	r5, #0
   d5ea8:	1cec      	adds	r4, r5, #3
   d5eaa:	428c      	cmp	r4, r1
   d5eac:	d80d      	bhi.n	d5eca <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   d5eae:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   d5eb0:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   d5eb2:	5d87      	ldrb	r7, [r0, r6]
   d5eb4:	4297      	cmp	r7, r2
   d5eb6:	d105      	bne.n	d5ec4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   d5eb8:	4426      	add	r6, r4
   d5eba:	42b1      	cmp	r1, r6
   d5ebc:	d305      	bcc.n	d5eca <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   d5ebe:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   d5ec0:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   d5ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   d5ec4:	3401      	adds	r4, #1
   d5ec6:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d5ec8:	e7ee      	b.n	d5ea8 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   d5eca:	2000      	movs	r0, #0
   d5ecc:	e7f9      	b.n	d5ec2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>

000d5ece <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d5ece:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d5ed2:	4604      	mov	r4, r0
   d5ed4:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
   d5ed8:	461e      	mov	r6, r3
   d5eda:	4689      	mov	r9, r1
   d5edc:	ab01      	add	r3, sp, #4
   d5ede:	4690      	mov	r8, r2
   d5ee0:	460a      	mov	r2, r1
   d5ee2:	6a01      	ldr	r1, [r0, #32]
   d5ee4:	f7ff ffde 	bl	d5ea4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (!force && adsLen > 0) {
   d5ee8:	6a25      	ldr	r5, [r4, #32]
   d5eea:	1cb3      	adds	r3, r6, #2
   d5eec:	bb17      	cbnz	r7, d5f34 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x66>
   d5eee:	b308      	cbz	r0, d5f34 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x66>
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d5ef0:	195f      	adds	r7, r3, r5
   d5ef2:	1a3f      	subs	r7, r7, r0
   d5ef4:	2f1f      	cmp	r7, #31
   d5ef6:	d819      	bhi.n	d5f2c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5e>
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d5ef8:	f8dd 9004 	ldr.w	r9, [sp, #4]
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d5efc:	f109 0a02 	add.w	sl, r9, #2
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d5f00:	eba5 0209 	sub.w	r2, r5, r9
   d5f04:	1a12      	subs	r2, r2, r0
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d5f06:	eb00 0109 	add.w	r1, r0, r9
   d5f0a:	eb06 000a 	add.w	r0, r6, sl
   d5f0e:	b292      	uxth	r2, r2
   d5f10:	4421      	add	r1, r4
   d5f12:	4420      	add	r0, r4
   d5f14:	f002 f8f6 	bl	d8104 <memmove>
            selfData_[offset] = len + 1;
   d5f18:	1c73      	adds	r3, r6, #1
   d5f1a:	f804 3009 	strb.w	r3, [r4, r9]
            memcpy(&selfData_[offset + 2], buf, len);
   d5f1e:	4632      	mov	r2, r6
   d5f20:	4641      	mov	r1, r8
   d5f22:	eb04 000a 	add.w	r0, r4, sl
   d5f26:	f002 f8df 	bl	d80e8 <memcpy>
            selfLen_ = staLen + len + 2;
   d5f2a:	6227      	str	r7, [r4, #32]
}
   d5f2c:	6a20      	ldr	r0, [r4, #32]
   d5f2e:	b002      	add	sp, #8
   d5f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d5f34:	442b      	add	r3, r5
   d5f36:	2b1f      	cmp	r3, #31
   d5f38:	d8f8      	bhi.n	d5f2c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5e>
        selfData_[selfLen_++] = len + 1;
   d5f3a:	1c73      	adds	r3, r6, #1
   d5f3c:	5563      	strb	r3, [r4, r5]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d5f3e:	1ca8      	adds	r0, r5, #2
   d5f40:	4425      	add	r5, r4
   d5f42:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   d5f44:	4632      	mov	r2, r6
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d5f46:	f885 9001 	strb.w	r9, [r5, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   d5f4a:	4641      	mov	r1, r8
   d5f4c:	4420      	add	r0, r4
   d5f4e:	f002 f8cb 	bl	d80e8 <memcpy>
        selfLen_ += len;
   d5f52:	6a23      	ldr	r3, [r4, #32]
   d5f54:	4433      	add	r3, r6
   d5f56:	6223      	str	r3, [r4, #32]
   d5f58:	e7e8      	b.n	d5f2c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5e>
	...

000d5f5c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   d5f5c:	4a02      	ldr	r2, [pc, #8]	; (d5f68 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   d5f5e:	2100      	movs	r1, #0
   d5f60:	200a      	movs	r0, #10
   d5f62:	f7ff bcc5 	b.w	d58f0 <panic_>
   d5f66:	bf00      	nop
   d5f68:	000d559d 	.word	0x000d559d

000d5f6c <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d5f6c:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5f6e:	b538      	push	{r3, r4, r5, lr}
   d5f70:	4604      	mov	r4, r0
	  switch (__op)
   d5f72:	d007      	beq.n	d5f84 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x18>
   d5f74:	2a03      	cmp	r2, #3
   d5f76:	d011      	beq.n	d5f9c <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x30>
   d5f78:	2a01      	cmp	r2, #1
   d5f7a:	d101      	bne.n	d5f80 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d5f7c:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   d5f7e:	6023      	str	r3, [r4, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d5f80:	2000      	movs	r0, #0
   d5f82:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d5f84:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   d5f86:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d5f88:	f7fe f883 	bl	d4092 <_Znwj>
   d5f8c:	4603      	mov	r3, r0
   d5f8e:	2800      	cmp	r0, #0
   d5f90:	d0f5      	beq.n	d5f7e <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x12>
   d5f92:	e895 0003 	ldmia.w	r5, {r0, r1}
   d5f96:	e883 0003 	stmia.w	r3, {r0, r1}
   d5f9a:	e7f0      	b.n	d5f7e <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x12>
	  delete __victim._M_access<_Functor*>();
   d5f9c:	6800      	ldr	r0, [r0, #0]
   d5f9e:	2800      	cmp	r0, #0
   d5fa0:	d0ee      	beq.n	d5f80 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x14>
   d5fa2:	2108      	movs	r1, #8
   d5fa4:	f001 ff63 	bl	d7e6e <_ZdlPvj>
   d5fa8:	e7ea      	b.n	d5f80 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x14>

000d5faa <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5faa:	b430      	push	{r4, r5}
   d5fac:	460d      	mov	r5, r1
   d5fae:	4611      	mov	r1, r2
   d5fb0:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   d5fb2:	6803      	ldr	r3, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d5fb4:	6809      	ldr	r1, [r1, #0]
   d5fb6:	6828      	ldr	r0, [r5, #0]
   d5fb8:	e9d3 4300 	ldrd	r4, r3, [r3]
   d5fbc:	46a4      	mov	ip, r4
      {
	(*_Base::_M_get_pointer(__functor))(
	    std::forward<_ArgTypes>(__args)...);
      }
   d5fbe:	bc30      	pop	{r4, r5}
   d5fc0:	4760      	bx	ip

000d5fc2 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d5fc2:	b510      	push	{r4, lr}
      if (_M_manager)
   d5fc4:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d5fc6:	4604      	mov	r4, r0
      if (_M_manager)
   d5fc8:	b113      	cbz	r3, d5fd0 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5fca:	2203      	movs	r2, #3
   d5fcc:	4601      	mov	r1, r0
   d5fce:	4798      	blx	r3
    }
   d5fd0:	4620      	mov	r0, r4
   d5fd2:	bd10      	pop	{r4, pc}

000d5fd4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d5fd4:	b510      	push	{r4, lr}
   d5fd6:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5fd8:	3058      	adds	r0, #88	; 0x58
   d5fda:	f7ff fff2 	bl	d5fc2 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   d5fde:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   d5fe2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d5fe6:	f7ff bdd2 	b.w	d5b8e <_ZN6StringD1Ev>

000d5fea <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   d5fea:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d5fee:	b2da      	uxtb	r2, r3
   d5ff0:	2a09      	cmp	r2, #9
   d5ff2:	d801      	bhi.n	d5ff8 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   d5ff4:	4618      	mov	r0, r3
   d5ff6:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   d5ff8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d5ffc:	2b05      	cmp	r3, #5
   d5ffe:	d801      	bhi.n	d6004 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   d6000:	3857      	subs	r0, #87	; 0x57
   d6002:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   d6004:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d6008:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   d600a:	bf94      	ite	ls
   d600c:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   d600e:	f04f 30ff 	movhi.w	r0, #4294967295
}
   d6012:	4770      	bx	lr

000d6014 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   d6014:	b510      	push	{r4, lr}
            locked_(false) {
   d6016:	2300      	movs	r3, #0
    WiringBleLock() :
   d6018:	4604      	mov	r4, r0
            locked_(false) {
   d601a:	7003      	strb	r3, [r0, #0]
        lock();
   d601c:	f7ff ff2a 	bl	d5e74 <_ZN8particle3ble13WiringBleLock4lockEv.isra.0>
    }
   d6020:	4620      	mov	r0, r4
   d6022:	bd10      	pop	{r4, pc}

000d6024 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   d6024:	b510      	push	{r4, lr}
        if (locked_) {
   d6026:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   d6028:	4604      	mov	r4, r0
        if (locked_) {
   d602a:	b10b      	cbz	r3, d6030 <_ZN8particle3ble13WiringBleLockD1Ev+0xc>
            unlock();
   d602c:	f7ff ff2e 	bl	d5e8c <_ZN8particle3ble13WiringBleLock6unlockEv.isra.0>
    }
   d6030:	4620      	mov	r0, r4
   d6032:	bd10      	pop	{r4, pc}

000d6034 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   d6034:	b082      	sub	sp, #8
   d6036:	4603      	mov	r3, r0
    address_ = addr;
   d6038:	6808      	ldr	r0, [r1, #0]
   d603a:	6849      	ldr	r1, [r1, #4]
   d603c:	466a      	mov	r2, sp
   d603e:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   d6040:	466a      	mov	r2, sp
   d6042:	ca03      	ldmia	r2!, {r0, r1}
   d6044:	6018      	str	r0, [r3, #0]
}
   d6046:	4618      	mov	r0, r3
    address_ = addr.address_;
   d6048:	6059      	str	r1, [r3, #4]
}
   d604a:	b002      	add	sp, #8
   d604c:	4770      	bx	lr

000d604e <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   d604e:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   d6050:	7982      	ldrb	r2, [r0, #6]
   d6052:	798b      	ldrb	r3, [r1, #6]
   d6054:	429a      	cmp	r2, r3
   d6056:	d106      	bne.n	d6066 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   d6058:	2206      	movs	r2, #6
   d605a:	f002 f837 	bl	d80cc <memcmp>
   d605e:	fab0 f080 	clz	r0, r0
   d6062:	0940      	lsrs	r0, r0, #5
}
   d6064:	bd08      	pop	{r3, pc}
    return false;
   d6066:	2000      	movs	r0, #0
   d6068:	e7fc      	b.n	d6064 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000d606a <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   d606a:	f04f 33ff 	mov.w	r3, #4294967295
   d606e:	6003      	str	r3, [r0, #0]
   d6070:	8083      	strh	r3, [r0, #4]
}
   d6072:	2000      	movs	r0, #0
   d6074:	4770      	bx	lr

000d6076 <_ZN8particle10BleAddressC1Ev>:
        : address_{} {
   d6076:	2100      	movs	r1, #0
BleAddress::BleAddress()
   d6078:	b508      	push	{r3, lr}
        : address_{} {
   d607a:	6001      	str	r1, [r0, #0]
   d607c:	6041      	str	r1, [r0, #4]
BleAddress::BleAddress()
   d607e:	4602      	mov	r2, r0
    clear();
   d6080:	f7ff fff3 	bl	d606a <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   d6084:	7191      	strb	r1, [r2, #6]
}
   d6086:	4610      	mov	r0, r2
   d6088:	bd08      	pop	{r3, pc}
	...

000d608c <_ZN8particle7BleUuidC1Ev>:
        : type_(BleUuidType::LONG) {
   d608c:	2201      	movs	r2, #1
   d608e:	6102      	str	r2, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d6090:	4a06      	ldr	r2, [pc, #24]	; (d60ac <_ZN8particle7BleUuidC1Ev+0x20>)
   d6092:	6811      	ldr	r1, [r2, #0]
   d6094:	6001      	str	r1, [r0, #0]
   d6096:	6851      	ldr	r1, [r2, #4]
   d6098:	6041      	str	r1, [r0, #4]
   d609a:	8911      	ldrh	r1, [r2, #8]
   d609c:	7a92      	ldrb	r2, [r2, #10]
   d609e:	7282      	strb	r2, [r0, #10]
   d60a0:	2200      	movs	r2, #0
   d60a2:	8101      	strh	r1, [r0, #8]
   d60a4:	f8c0 200b 	str.w	r2, [r0, #11]
   d60a8:	73c2      	strb	r2, [r0, #15]
}
   d60aa:	4770      	bx	lr
   d60ac:	000d8800 	.word	0x000d8800

000d60b0 <_ZN8particle7BleUuidC1ERKS0_>:
BleUuid::BleUuid(const BleUuid& uuid)
   d60b0:	b510      	push	{r4, lr}
        : type_(uuid.type_) {
   d60b2:	690b      	ldr	r3, [r1, #16]
   d60b4:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d60b6:	f101 0210 	add.w	r2, r1, #16
   d60ba:	4603      	mov	r3, r0
   d60bc:	f851 4b04 	ldr.w	r4, [r1], #4
   d60c0:	f843 4b04 	str.w	r4, [r3], #4
   d60c4:	4291      	cmp	r1, r2
   d60c6:	d1f9      	bne.n	d60bc <_ZN8particle7BleUuidC1ERKS0_+0xc>
}
   d60c8:	bd10      	pop	{r4, pc}

000d60ca <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d60ca:	b510      	push	{r4, lr}
    if (uuid128) {
   d60cc:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d60ce:	4604      	mov	r4, r0
    if (uuid128) {
   d60d0:	b1b1      	cbz	r1, d6100 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   d60d2:	2a01      	cmp	r2, #1
   d60d4:	f101 0210 	add.w	r2, r1, #16
   d60d8:	d10a      	bne.n	d60f0 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   d60da:	4601      	mov	r1, r0
   d60dc:	f853 0b04 	ldr.w	r0, [r3], #4
   d60e0:	f841 0b04 	str.w	r0, [r1], #4
   d60e4:	4293      	cmp	r3, r2
   d60e6:	d1f9      	bne.n	d60dc <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   d60e8:	2301      	movs	r3, #1
   d60ea:	6123      	str	r3, [r4, #16]
}
   d60ec:	4620      	mov	r0, r4
   d60ee:	bd10      	pop	{r4, pc}
   d60f0:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   d60f2:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   d60f6:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   d60fa:	429a      	cmp	r2, r3
   d60fc:	d1f9      	bne.n	d60f2 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   d60fe:	e7f3      	b.n	d60e8 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   d6100:	2210      	movs	r2, #16
   d6102:	f002 f819 	bl	d8138 <memset>
   d6106:	e7f1      	b.n	d60ec <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000d6108 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   d6108:	b538      	push	{r3, r4, r5, lr}
   d610a:	4604      	mov	r4, r0
   d610c:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   d610e:	461a      	mov	r2, r3
   d6110:	f7ff ffdb 	bl	d60ca <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   d6114:	81a5      	strh	r5, [r4, #12]
}
   d6116:	4620      	mov	r0, r4
   d6118:	bd38      	pop	{r3, r4, r5, pc}
	...

000d611c <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   d611c:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   d611e:	6902      	ldr	r2, [r0, #16]
   d6120:	b922      	cbnz	r2, d612c <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   d6122:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d6124:	3800      	subs	r0, #0
   d6126:	bf18      	it	ne
   d6128:	2001      	movne	r0, #1
}
   d612a:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d612c:	4902      	ldr	r1, [pc, #8]	; (d6138 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   d612e:	2210      	movs	r2, #16
   d6130:	f001 ffcc 	bl	d80cc <memcmp>
   d6134:	e7f6      	b.n	d6124 <_ZNK8particle7BleUuid7isValidEv+0x8>
   d6136:	bf00      	nop
   d6138:	000d8820 	.word	0x000d8820

000d613c <_ZNK8particle7BleUuid4typeEv>:
}
   d613c:	6900      	ldr	r0, [r0, #16]
   d613e:	4770      	bx	lr

000d6140 <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   d6140:	b538      	push	{r3, r4, r5, lr}
   d6142:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   d6144:	2214      	movs	r2, #20
   d6146:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   d6148:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   d614a:	f001 fff5 	bl	d8138 <memset>
    if (type_ == BleUuidType::SHORT) {
   d614e:	6923      	ldr	r3, [r4, #16]
   d6150:	b93b      	cbnz	r3, d6162 <_ZN8particle7BleUuid7halUUIDEv+0x22>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   d6152:	7b62      	ldrb	r2, [r4, #13]
        uuid.type = BLE_UUID_TYPE_16BIT;
   d6154:	742b      	strb	r3, [r5, #16]
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   d6156:	7b23      	ldrb	r3, [r4, #12]
   d6158:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d615c:	802b      	strh	r3, [r5, #0]
}
   d615e:	4628      	mov	r0, r5
   d6160:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   d6162:	2301      	movs	r3, #1
   d6164:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d6166:	f104 0210 	add.w	r2, r4, #16
   d616a:	462b      	mov	r3, r5
   d616c:	f854 1b04 	ldr.w	r1, [r4], #4
   d6170:	f843 1b04 	str.w	r1, [r3], #4
   d6174:	4294      	cmp	r4, r2
   d6176:	d1f9      	bne.n	d616c <_ZN8particle7BleUuid7halUUIDEv+0x2c>
   d6178:	e7f1      	b.n	d615e <_ZN8particle7BleUuid7halUUIDEv+0x1e>

000d617a <_ZNK8particle7BleUuid7shortedEv>:
    return ((uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8));
   d617a:	7b42      	ldrb	r2, [r0, #13]
   d617c:	7b00      	ldrb	r0, [r0, #12]
}
   d617e:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   d6182:	4770      	bx	lr

000d6184 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   d6184:	4770      	bx	lr

000d6186 <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   d6186:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   d6188:	6902      	ldr	r2, [r0, #16]
   d618a:	690b      	ldr	r3, [r1, #16]
   d618c:	429a      	cmp	r2, r3
   d618e:	d106      	bne.n	d619e <_ZNK8particle7BleUuideqERKS0_+0x18>
   d6190:	2210      	movs	r2, #16
   d6192:	f001 ff9b 	bl	d80cc <memcmp>
   d6196:	fab0 f080 	clz	r0, r0
   d619a:	0940      	lsrs	r0, r0, #5
}
   d619c:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   d619e:	2000      	movs	r0, #0
   d61a0:	e7fc      	b.n	d619c <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000d61a4 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   d61a4:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   d61a6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   d61aa:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d61ac:	4b32      	ldr	r3, [pc, #200]	; (d6278 <_ZN8particle7BleUuid9constructEPKc+0xd4>)
   d61ae:	681a      	ldr	r2, [r3, #0]
   d61b0:	6002      	str	r2, [r0, #0]
   d61b2:	685a      	ldr	r2, [r3, #4]
   d61b4:	6042      	str	r2, [r0, #4]
   d61b6:	2500      	movs	r5, #0
   d61b8:	891a      	ldrh	r2, [r3, #8]
   d61ba:	7a9b      	ldrb	r3, [r3, #10]
   d61bc:	8102      	strh	r2, [r0, #8]
void BleUuid::construct(const char* uuid) {
   d61be:	4604      	mov	r4, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d61c0:	7283      	strb	r3, [r0, #10]
   d61c2:	f8c0 500b 	str.w	r5, [r0, #11]
   d61c6:	73c5      	strb	r5, [r0, #15]
    if (uuid == nullptr) {
   d61c8:	460e      	mov	r6, r1
   d61ca:	b321      	cbz	r1, d6216 <_ZN8particle7BleUuid9constructEPKc+0x72>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   d61cc:	2124      	movs	r1, #36	; 0x24
   d61ce:	4630      	mov	r0, r6
   d61d0:	f001 fff8 	bl	d81c4 <strnlen>
   d61d4:	2804      	cmp	r0, #4
   d61d6:	d121      	bne.n	d621c <_ZN8particle7BleUuid9constructEPKc+0x78>
        char buf[2] = {};
   d61d8:	f8ad 5004 	strh.w	r5, [sp, #4]
   d61dc:	af01      	add	r7, sp, #4
   d61de:	1cb5      	adds	r5, r6, #2
   d61e0:	3606      	adds	r6, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d61e2:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   d61e6:	f7ff ff00 	bl	d5fea <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d61ea:	f1b0 0800 	subs.w	r8, r0, #0
   d61ee:	db10      	blt.n	d6212 <_ZN8particle7BleUuid9constructEPKc+0x6e>
            break;
        }
        const int l = hexToNibble(*src++);
   d61f0:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   d61f4:	f7ff fef9 	bl	d5fea <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d61f8:	2800      	cmp	r0, #0
   d61fa:	db0a      	blt.n	d6212 <_ZN8particle7BleUuid9constructEPKc+0x6e>
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d61fc:	3502      	adds	r5, #2
   d61fe:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   d6202:	42ae      	cmp	r6, r5
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d6204:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   d6208:	d1eb      	bne.n	d61e2 <_ZN8particle7BleUuid9constructEPKc+0x3e>
            uuid128_[UUID16_LO] = buf[1];
   d620a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   d620e:	ba5b      	rev16	r3, r3
   d6210:	81a3      	strh	r3, [r4, #12]
        type_ = BleUuidType::SHORT;
   d6212:	2300      	movs	r3, #0
   d6214:	6123      	str	r3, [r4, #16]
}
   d6216:	b002      	add	sp, #8
   d6218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   d621c:	2710      	movs	r7, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d621e:	2124      	movs	r1, #36	; 0x24
   d6220:	4630      	mov	r0, r6
   d6222:	f001 ffcf 	bl	d81c4 <strnlen>
   d6226:	42a8      	cmp	r0, r5
   d6228:	d806      	bhi.n	d6238 <_ZN8particle7BleUuid9constructEPKc+0x94>
   d622a:	4427      	add	r7, r4
        uuid128_[len - 1] = 0x00;
   d622c:	2300      	movs	r3, #0
    while (len > 0) {
   d622e:	42bc      	cmp	r4, r7
   d6230:	d0f1      	beq.n	d6216 <_ZN8particle7BleUuid9constructEPKc+0x72>
        uuid128_[len - 1] = 0x00;
   d6232:	f807 3d01 	strb.w	r3, [r7, #-1]!
    while (len > 0) {
   d6236:	e7fa      	b.n	d622e <_ZN8particle7BleUuid9constructEPKc+0x8a>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d6238:	2f00      	cmp	r7, #0
   d623a:	d0ec      	beq.n	d6216 <_ZN8particle7BleUuid9constructEPKc+0x72>
        int8_t hi = hexToNibble(uuid[i]);
   d623c:	5d70      	ldrb	r0, [r6, r5]
   d623e:	f7ff fed4 	bl	d5fea <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   d6242:	0603      	lsls	r3, r0, #24
   d6244:	d415      	bmi.n	d6272 <_ZN8particle7BleUuid9constructEPKc+0xce>
            uuid128_[len - 1] = hi << 4;
   d6246:	0100      	lsls	r0, r0, #4
   d6248:	3f01      	subs	r7, #1
   d624a:	fa5f f880 	uxtb.w	r8, r0
   d624e:	f804 8007 	strb.w	r8, [r4, r7]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   d6252:	2124      	movs	r1, #36	; 0x24
   d6254:	4630      	mov	r0, r6
   d6256:	f001 ffb5 	bl	d81c4 <strnlen>
   d625a:	3501      	adds	r5, #1
   d625c:	42a8      	cmp	r0, r5
   d625e:	d908      	bls.n	d6272 <_ZN8particle7BleUuid9constructEPKc+0xce>
                int8_t lo = hexToNibble(uuid[i]);
   d6260:	5d70      	ldrb	r0, [r6, r5]
   d6262:	f7ff fec2 	bl	d5fea <_ZN8particle11hexToNibbleEc>
   d6266:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   d6268:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   d626a:	bfa4      	itt	ge
   d626c:	ea40 0008 	orrge.w	r0, r0, r8
   d6270:	55e0      	strbge	r0, [r4, r7]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d6272:	3501      	adds	r5, #1
   d6274:	e7d3      	b.n	d621e <_ZN8particle7BleUuid9constructEPKc+0x7a>
   d6276:	bf00      	nop
   d6278:	000d8800 	.word	0x000d8800

000d627c <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   d627c:	b513      	push	{r0, r1, r4, lr}
   d627e:	4604      	mov	r4, r0
   d6280:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   d6282:	f7ff ff03 	bl	d608c <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   d6286:	4620      	mov	r0, r4
   d6288:	9901      	ldr	r1, [sp, #4]
   d628a:	f7ff ff8b 	bl	d61a4 <_ZN8particle7BleUuid9constructEPKc>
}
   d628e:	4620      	mov	r0, r4
   d6290:	b002      	add	sp, #8
   d6292:	bd10      	pop	{r4, pc}

000d6294 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d6294:	b430      	push	{r4, r5}
   d6296:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   d629a:	b912      	cbnz	r2, d62a2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0xe>
        return selfLen_;
   d629c:	6a00      	ldr	r0, [r0, #32]
}
   d629e:	bc30      	pop	{r4, r5}
   d62a0:	4770      	bx	lr
   d62a2:	9502      	str	r5, [sp, #8]
   d62a4:	bc30      	pop	{r4, r5}
   d62a6:	f7ff be12 	b.w	d5ece <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>

000d62aa <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   d62aa:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d62ac:	4604      	mov	r4, r0
          selfLen_(0) {
   d62ae:	4602      	mov	r2, r0
   d62b0:	f100 011f 	add.w	r1, r0, #31
   d62b4:	2300      	movs	r3, #0
   d62b6:	f802 3b01 	strb.w	r3, [r2], #1
   d62ba:	4291      	cmp	r1, r2
   d62bc:	d1fb      	bne.n	d62b6 <_ZN8particle18BleAdvertisingDataC1Ev+0xc>
   d62be:	6223      	str	r3, [r4, #32]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d62c0:	9300      	str	r3, [sp, #0]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d62c2:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d62c4:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d62c6:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d62ca:	4619      	mov	r1, r3
   d62cc:	f10d 020f 	add.w	r2, sp, #15
   d62d0:	4620      	mov	r0, r4
   d62d2:	f7ff ffdf 	bl	d6294 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d62d6:	4620      	mov	r0, r4
   d62d8:	b004      	add	sp, #16
   d62da:	bd10      	pop	{r4, pc}

000d62dc <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d62dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (offset == nullptr) {
   d62de:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d62e0:	460e      	mov	r6, r1
   d62e2:	ab01      	add	r3, sp, #4
   d62e4:	6a01      	ldr	r1, [r0, #32]
   d62e6:	4604      	mov	r4, r0
   d62e8:	f7ff fddc 	bl	d5ea4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   d62ec:	4605      	mov	r5, r0
   d62ee:	b178      	cbz	r0, d6310 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x34>
        size_t moveLen = selfLen_ - offset - len;
   d62f0:	9801      	ldr	r0, [sp, #4]
   d62f2:	6a22      	ldr	r2, [r4, #32]
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   d62f4:	1941      	adds	r1, r0, r5
        size_t moveLen = selfLen_ - offset - len;
   d62f6:	1a12      	subs	r2, r2, r0
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   d62f8:	4421      	add	r1, r4
   d62fa:	1b52      	subs	r2, r2, r5
   d62fc:	4420      	add	r0, r4
   d62fe:	f001 fef3 	bl	d80e8 <memcpy>
        selfLen_ -= len;
   d6302:	6a20      	ldr	r0, [r4, #32]
   d6304:	1b40      	subs	r0, r0, r5
   d6306:	6220      	str	r0, [r4, #32]
        remove(type);
   d6308:	4631      	mov	r1, r6
   d630a:	4620      	mov	r0, r4
   d630c:	f7ff ffe6 	bl	d62dc <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   d6310:	b002      	add	sp, #8
   d6312:	bd70      	pop	{r4, r5, r6, pc}

000d6314 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   d6314:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   d6316:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d631a:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   d631c:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   d631e:	8043      	strh	r3, [r0, #2]
   d6320:	220e      	movs	r2, #14
   d6322:	4629      	mov	r1, r5
   d6324:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   d6326:	7105      	strb	r5, [r0, #4]
   d6328:	3006      	adds	r0, #6
   d632a:	f001 ff05 	bl	d8138 <memset>
   d632e:	f104 0014 	add.w	r0, r4, #20
   d6332:	f7ff feab 	bl	d608c <_ZN8particle7BleUuidC1Ev>
   d6336:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d633a:	f7ff fea7 	bl	d608c <_ZN8particle7BleUuidC1Ev>
   d633e:	4904      	ldr	r1, [pc, #16]	; (d6350 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   d6340:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d6344:	f7ff fc6e 	bl	d5c24 <_ZN6StringC1EPKc>
    _Function_base() : _M_manager(nullptr) { }
   d6348:	6565      	str	r5, [r4, #84]	; 0x54
    }
   d634a:	4620      	mov	r0, r4
   d634c:	bd38      	pop	{r3, r4, r5, pc}
   d634e:	bf00      	nop
   d6350:	000d863d 	.word	0x000d863d

000d6354 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   d6354:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d6356:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   d635a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   d635e:	4293      	cmp	r3, r2
   d6360:	4618      	mov	r0, r3
   d6362:	d006      	beq.n	d6372 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   d6364:	6804      	ldr	r4, [r0, #0]
   d6366:	8824      	ldrh	r4, [r4, #0]
   d6368:	428c      	cmp	r4, r1
   d636a:	f103 0308 	add.w	r3, r3, #8
   d636e:	d1f6      	bne.n	d635e <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   d6370:	bd10      	pop	{r4, pc}
        return nullptr;
   d6372:	2000      	movs	r0, #0
   d6374:	e7fc      	b.n	d6370 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000d6378 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   d6378:	b5f0      	push	{r4, r5, r6, r7, lr}
   d637a:	4606      	mov	r6, r0
   d637c:	b085      	sub	sp, #20
   d637e:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   d6380:	460d      	mov	r5, r1
   d6382:	2900      	cmp	r1, #0
   d6384:	d050      	beq.n	d6428 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   d6386:	2a00      	cmp	r2, #0
   d6388:	d04e      	beq.n	d6428 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
    void onDataReceived(void(T::*callback)(const uint8_t*, size_t, const BlePeerDevice& peer), T* instance) {
        onDataReceived((callback && instance) ? std::bind(callback, instance, _1, _2, _3) :(BleOnDataReceivedStdFunction) nullptr);
    }

    BleCharacteristicImpl* impl() const {
        return impl_.get();
   d638a:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
   d638c:	7823      	ldrb	r3, [r4, #0]
   d638e:	2af4      	cmp	r2, #244	; 0xf4
   d6390:	bf28      	it	cs
   d6392:	22f4      	movcs	r2, #244	; 0xf4
   d6394:	b343      	cbz	r3, d63e8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   d6396:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   d6398:	0798      	lsls	r0, r3, #30
   d639a:	d509      	bpl.n	d63b0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   d639c:	89a0      	ldrh	r0, [r4, #12]
   d639e:	9203      	str	r2, [sp, #12]
   d63a0:	2300      	movs	r3, #0
   d63a2:	f7ff f93f 	bl	d5624 <hal_ble_gatt_server_set_characteristic_value>
   d63a6:	2800      	cmp	r0, #0
   d63a8:	9a03      	ldr	r2, [sp, #12]
   d63aa:	da03      	bge.n	d63b4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d63ac:	b005      	add	sp, #20
   d63ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   d63b0:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d63b4:	6834      	ldr	r4, [r6, #0]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   d63b6:	7923      	ldrb	r3, [r4, #4]
   d63b8:	06d9      	lsls	r1, r3, #27
   d63ba:	d509      	bpl.n	d63d0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   d63bc:	2f01      	cmp	r7, #1
   d63be:	d007      	beq.n	d63d0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d63c0:	89a0      	ldrh	r0, [r4, #12]
   d63c2:	2300      	movs	r3, #0
   d63c4:	4629      	mov	r1, r5
}
   d63c6:	b005      	add	sp, #20
   d63c8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d63cc:	f7ff b95c 	b.w	d5688 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   d63d0:	069b      	lsls	r3, r3, #26
   d63d2:	d5eb      	bpl.n	d63ac <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   d63d4:	2f02      	cmp	r7, #2
   d63d6:	d0e9      	beq.n	d63ac <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d63d8:	89a0      	ldrh	r0, [r4, #12]
   d63da:	2300      	movs	r3, #0
   d63dc:	4629      	mov	r1, r5
}
   d63de:	b005      	add	sp, #20
   d63e0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d63e4:	f7ff b95a 	b.w	d569c <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   d63e8:	8860      	ldrh	r0, [r4, #2]
   d63ea:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d63ee:	4288      	cmp	r0, r1
   d63f0:	d01c      	beq.n	d642c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   d63f2:	7921      	ldrb	r1, [r4, #4]
   d63f4:	074e      	lsls	r6, r1, #29
   d63f6:	d501      	bpl.n	d63fc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   d63f8:	2f01      	cmp	r7, #1
   d63fa:	d104      	bne.n	d6406 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   d63fc:	070b      	lsls	r3, r1, #28
   d63fe:	d409      	bmi.n	d6414 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   d6400:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d6404:	e7d2      	b.n	d63ac <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d6406:	89a1      	ldrh	r1, [r4, #12]
   d6408:	9300      	str	r3, [sp, #0]
   d640a:	4613      	mov	r3, r2
   d640c:	462a      	mov	r2, r5
   d640e:	f7ff f91d 	bl	d564c <hal_ble_gatt_client_write_without_response>
   d6412:	e7cb      	b.n	d63ac <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   d6414:	2f02      	cmp	r7, #2
   d6416:	d0f3      	beq.n	d6400 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d6418:	2300      	movs	r3, #0
   d641a:	89a1      	ldrh	r1, [r4, #12]
   d641c:	9300      	str	r3, [sp, #0]
   d641e:	4613      	mov	r3, r2
   d6420:	462a      	mov	r2, r5
   d6422:	f7ff f909 	bl	d5638 <hal_ble_gatt_client_write_with_response>
   d6426:	e7c1      	b.n	d63ac <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   d6428:	4802      	ldr	r0, [pc, #8]	; (d6434 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   d642a:	e7bf      	b.n	d63ac <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   d642c:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   d6430:	e7bc      	b.n	d63ac <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   d6432:	bf00      	nop
   d6434:	fffffef2 	.word	0xfffffef2

000d6438 <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>:

ssize_t BleCharacteristic::setValue(const String& str, BleTxRxType type) {
    return setValue(reinterpret_cast<const uint8_t*>(str.c_str()), str.length(), type);
}

ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   d6438:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d643a:	460c      	mov	r4, r1
   d643c:	4605      	mov	r5, r0
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   d643e:	21f4      	movs	r1, #244	; 0xf4
   d6440:	4620      	mov	r0, r4
ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   d6442:	9201      	str	r2, [sp, #4]
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   d6444:	f001 febe 	bl	d81c4 <strnlen>
   d6448:	9b01      	ldr	r3, [sp, #4]
   d644a:	4602      	mov	r2, r0
   d644c:	4621      	mov	r1, r4
   d644e:	4628      	mov	r0, r5
}
   d6450:	b003      	add	sp, #12
   d6452:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   d6456:	f7ff bf8f 	b.w	d6378 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
	...

000d645c <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   d645c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d6460:	2600      	movs	r6, #0
   d6462:	6006      	str	r6, [r0, #0]
   d6464:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d6466:	2028      	movs	r0, #40	; 0x28
   d6468:	460c      	mov	r4, r1
   d646a:	f7fd fe12 	bl	d4092 <_Znwj>
	  auto __pi = ::new (__mem)
   d646e:	1e05      	subs	r5, r0, #0
   d6470:	f105 080c 	add.w	r8, r5, #12
   d6474:	d00f      	beq.n	d6496 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   d6476:	2301      	movs	r3, #1
   d6478:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   d647c:	4b08      	ldr	r3, [pc, #32]	; (d64a0 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   d647e:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   d6480:	4640      	mov	r0, r8
   d6482:	f7ff fe03 	bl	d608c <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   d6486:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   d6488:	622e      	str	r6, [r5, #32]
   d648a:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   d648e:	4646      	mov	r6, r8
   d6490:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d6492:	6823      	ldr	r3, [r4, #0]
   d6494:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   d6496:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   d649a:	4638      	mov	r0, r7
   d649c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d64a0:	000d87c8 	.word	0x000d87c8

000d64a4 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d64a4:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d64a6:	2500      	movs	r5, #0
   d64a8:	6005      	str	r5, [r0, #0]
   d64aa:	4606      	mov	r6, r0
   d64ac:	2030      	movs	r0, #48	; 0x30
   d64ae:	f7fd fdf0 	bl	d4092 <_Znwj>
	  auto __pi = ::new (__mem)
   d64b2:	4604      	mov	r4, r0
   d64b4:	b188      	cbz	r0, d64da <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   d64b6:	2301      	movs	r3, #1
   d64b8:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   d64bc:	4b09      	ldr	r3, [pc, #36]	; (d64e4 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   d64be:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   d64c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d64c4:	8183      	strh	r3, [r0, #12]
   d64c6:	300e      	adds	r0, #14
   d64c8:	f7ff fdd5 	bl	d6076 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   d64cc:	e9c4 5506 	strd	r5, r5, [r4, #24]
   d64d0:	e9c4 5508 	strd	r5, r5, [r4, #32]
   d64d4:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   d64d8:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   d64da:	6074      	str	r4, [r6, #4]
   d64dc:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   d64de:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   d64e0:	4630      	mov	r0, r6
   d64e2:	bd70      	pop	{r4, r5, r6, pc}
   d64e4:	000d87e4 	.word	0x000d87e4

000d64e8 <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   d64e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d64ea:	460d      	mov	r5, r1
   d64ec:	4604      	mov	r4, r0
    WiringBleLock lk;
   d64ee:	a801      	add	r0, sp, #4
   d64f0:	f7ff fd90 	bl	d6014 <_ZN8particle3ble13WiringBleLockC1Ev>
    address_ = addr.address_;
   d64f4:	682a      	ldr	r2, [r5, #0]
   d64f6:	f852 3f02 	ldr.w	r3, [r2, #2]!
   d64fa:	6023      	str	r3, [r4, #0]
   d64fc:	6853      	ldr	r3, [r2, #4]
   d64fe:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   d6500:	a801      	add	r0, sp, #4
   d6502:	f7ff fd8f 	bl	d6024 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   d6506:	4620      	mov	r0, r4
   d6508:	b003      	add	sp, #12
   d650a:	bd30      	pop	{r4, r5, pc}

000d650c <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d650c:	b530      	push	{r4, r5, lr}
   d650e:	4605      	mov	r5, r0
   d6510:	b087      	sub	sp, #28
   d6512:	460c      	mov	r4, r1
    WiringBleLock lk;
   d6514:	a801      	add	r0, sp, #4
   d6516:	f7ff fd7d 	bl	d6014 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d651a:	682a      	ldr	r2, [r5, #0]
   d651c:	6823      	ldr	r3, [r4, #0]
   d651e:	8812      	ldrh	r2, [r2, #0]
   d6520:	881b      	ldrh	r3, [r3, #0]
   d6522:	429a      	cmp	r2, r3
   d6524:	d10d      	bne.n	d6542 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   d6526:	4629      	mov	r1, r5
   d6528:	a802      	add	r0, sp, #8
   d652a:	f7ff ffdd 	bl	d64e8 <_ZNK8particle13BlePeerDevice7addressEv>
   d652e:	4621      	mov	r1, r4
   d6530:	a804      	add	r0, sp, #16
   d6532:	f7ff ffd9 	bl	d64e8 <_ZNK8particle13BlePeerDevice7addressEv>
   d6536:	a904      	add	r1, sp, #16
   d6538:	a802      	add	r0, sp, #8
   d653a:	f7ff fd88 	bl	d604e <_ZNK8particle10BleAddresseqERKS0_>
   d653e:	4604      	mov	r4, r0
   d6540:	b900      	cbnz	r0, d6544 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   d6542:	2400      	movs	r4, #0
    WiringBleLock lk;
   d6544:	a801      	add	r0, sp, #4
   d6546:	f7ff fd6d 	bl	d6024 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   d654a:	4620      	mov	r0, r4
   d654c:	b007      	add	sp, #28
   d654e:	bd30      	pop	{r4, r5, pc}

000d6550 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d6550:	b510      	push	{r4, lr}
   d6552:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d6554:	2054      	movs	r0, #84	; 0x54
   d6556:	f7fd fd9c 	bl	d4092 <_Znwj>
   d655a:	4601      	mov	r1, r0
   d655c:	b160      	cbz	r0, d6578 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   d655e:	2300      	movs	r3, #0
   d6560:	e9c0 3300 	strd	r3, r3, [r0]
   d6564:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d6568:	e9c0 3304 	strd	r3, r3, [r0, #16]
   d656c:	e9c0 3306 	strd	r3, r3, [r0, #24]
   d6570:	6203      	str	r3, [r0, #32]
   d6572:	62c3      	str	r3, [r0, #44]	; 0x2c
   d6574:	63c3      	str	r3, [r0, #60]	; 0x3c
   d6576:	64c3      	str	r3, [r0, #76]	; 0x4c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   d6578:	6021      	str	r1, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   d657a:	b919      	cbnz	r1, d6584 <_ZN8particle14BleLocalDeviceC1Ev+0x34>
        SPARK_ASSERT(false);
   d657c:	4a09      	ldr	r2, [pc, #36]	; (d65a4 <_ZN8particle14BleLocalDeviceC1Ev+0x54>)
   d657e:	200a      	movs	r0, #10
   d6580:	f7ff f9b6 	bl	d58f0 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   d6584:	2000      	movs	r0, #0
   d6586:	f7ff f819 	bl	d55bc <hal_ble_stack_init>
   d658a:	b120      	cbz	r0, d6596 <_ZN8particle14BleLocalDeviceC1Ev+0x46>
   d658c:	4a05      	ldr	r2, [pc, #20]	; (d65a4 <_ZN8particle14BleLocalDeviceC1Ev+0x54>)
   d658e:	2100      	movs	r1, #0
   d6590:	200a      	movs	r0, #10
   d6592:	f7ff f9ad 	bl	d58f0 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   d6596:	6821      	ldr	r1, [r4, #0]
   d6598:	4803      	ldr	r0, [pc, #12]	; (d65a8 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d659a:	2200      	movs	r2, #0
   d659c:	f7ff f86a 	bl	d5674 <hal_ble_set_callback_on_periph_link_events>
}
   d65a0:	4620      	mov	r0, r4
   d65a2:	bd10      	pop	{r4, pc}
   d65a4:	000d559d 	.word	0x000d559d
   d65a8:	000d6935 	.word	0x000d6935

000d65ac <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   d65ac:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   d65ae:	4c0b      	ldr	r4, [pc, #44]	; (d65dc <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d65b0:	7823      	ldrb	r3, [r4, #0]
   d65b2:	f3bf 8f5b 	dmb	ish
   d65b6:	07db      	lsls	r3, r3, #31
   d65b8:	d40e      	bmi.n	d65d8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>
   d65ba:	4620      	mov	r0, r4
   d65bc:	f7fd fd6f 	bl	d409e <__cxa_guard_acquire>
   d65c0:	b150      	cbz	r0, d65d8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>
   d65c2:	4807      	ldr	r0, [pc, #28]	; (d65e0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d65c4:	f7ff ffc4 	bl	d6550 <_ZN8particle14BleLocalDeviceC1Ev>
   d65c8:	4620      	mov	r0, r4
   d65ca:	f7fd fd6d 	bl	d40a8 <__cxa_guard_release>
   d65ce:	4a05      	ldr	r2, [pc, #20]	; (d65e4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   d65d0:	4905      	ldr	r1, [pc, #20]	; (d65e8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x3c>)
   d65d2:	4803      	ldr	r0, [pc, #12]	; (d65e0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d65d4:	f001 fc46 	bl	d7e64 <__aeabi_atexit>
    return instance;
}
   d65d8:	4801      	ldr	r0, [pc, #4]	; (d65e0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d65da:	bd10      	pop	{r4, pc}
   d65dc:	2003e65c 	.word	0x2003e65c
   d65e0:	2003e668 	.word	0x2003e668
   d65e4:	20034510 	.word	0x20034510
   d65e8:	000d67b5 	.word	0x000d67b5

000d65ec <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d65ec:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   d65ee:	6803      	ldr	r3, [r0, #0]
   d65f0:	3b09      	subs	r3, #9
   d65f2:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d65f4:	b08d      	sub	sp, #52	; 0x34
   d65f6:	4604      	mov	r4, r0
   d65f8:	460d      	mov	r5, r1
    switch (event->type) {
   d65fa:	d811      	bhi.n	d6620 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   d65fc:	f7ff ffd6 	bl	d65ac <_ZN8particle14BleLocalDevice11getInstanceEv>
   d6600:	88a1      	ldrh	r1, [r4, #4]
   d6602:	6800      	ldr	r0, [r0, #0]
   d6604:	f7ff fea6 	bl	d6354 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   d6608:	4603      	mov	r3, r0
   d660a:	b958      	cbnz	r0, d6624 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   d660c:	2220      	movs	r2, #32
   d660e:	e9cd 2004 	strd	r2, r0, [sp, #16]
   d6612:	4a0b      	ldr	r2, [pc, #44]	; (d6640 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   d6614:	9200      	str	r2, [sp, #0]
   d6616:	490b      	ldr	r1, [pc, #44]	; (d6644 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   d6618:	aa04      	add	r2, sp, #16
   d661a:	2032      	movs	r0, #50	; 0x32
   d661c:	f7ff f970 	bl	d5900 <log_message>
}
   d6620:	b00d      	add	sp, #52	; 0x34
   d6622:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   d6624:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   d6626:	2a00      	cmp	r2, #0
   d6628:	d0fa      	beq.n	d6620 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   d662a:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d662e:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   d6632:	e9cd 1203 	strd	r1, r2, [sp, #12]
   d6636:	6dac      	ldr	r4, [r5, #88]	; 0x58
   d6638:	aa04      	add	r2, sp, #16
   d663a:	a903      	add	r1, sp, #12
   d663c:	47a0      	blx	r4
}
   d663e:	e7ef      	b.n	d6620 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   d6640:	000d86d7 	.word	0x000d86d7
   d6644:	000d86b0 	.word	0x000d86b0

000d6648 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   d6648:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   d664a:	2000      	movs	r0, #0
   d664c:	f7fe ffb6 	bl	d55bc <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   d6650:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   d6654:	bd08      	pop	{r3, pc}

000d6656 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   d6656:	4608      	mov	r0, r1
   d6658:	b911      	cbnz	r1, d6660 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   d665a:	460a      	mov	r2, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   d665c:	f7fe bfb6 	b.w	d55cc <hal_ble_gap_set_advertising_data>
   d6660:	6a09      	ldr	r1, [r1, #32]
   d6662:	2200      	movs	r2, #0
   d6664:	e7fa      	b.n	d665c <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000d6666 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:

int BleLocalDevice::setAdvertisingData(BleAdvertisingData& advertisingData) const {
    return setAdvertisingData(&advertisingData);
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   d6666:	b507      	push	{r0, r1, r2, lr}
    if (scanResponse == nullptr) {
   d6668:	4608      	mov	r0, r1
   d666a:	b929      	cbnz	r1, d6678 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   d666c:	460a      	mov	r2, r1
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
    }
}
   d666e:	b003      	add	sp, #12
   d6670:	f85d eb04 	ldr.w	lr, [sp], #4
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d6674:	f7fe bfb2 	b.w	d55dc <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   d6678:	2101      	movs	r1, #1
   d667a:	9001      	str	r0, [sp, #4]
   d667c:	f7ff fe2e 	bl	d62dc <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d6680:	9801      	ldr	r0, [sp, #4]
   d6682:	2200      	movs	r2, #0
   d6684:	6a01      	ldr	r1, [r0, #32]
   d6686:	e7f2      	b.n	d666e <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x8>

000d6688 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise() const {
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d6688:	b538      	push	{r3, r4, r5, lr}
   d668a:	4604      	mov	r4, r0
   d668c:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   d668e:	f7ff ffe2 	bl	d6656 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   d6692:	2800      	cmp	r0, #0
   d6694:	db0a      	blt.n	d66ac <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   d6696:	4629      	mov	r1, r5
   d6698:	4620      	mov	r0, r4
   d669a:	f7ff ffe4 	bl	d6666 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   d669e:	2800      	cmp	r0, #0
   d66a0:	db04      	blt.n	d66ac <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    return advertise();
}
   d66a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   d66a6:	2000      	movs	r0, #0
   d66a8:	f7fe bfa0 	b.w	d55ec <hal_ble_gap_start_advertising>
}
   d66ac:	bd38      	pop	{r3, r4, r5, pc}
	...

000d66b0 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   d66b0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d66b2:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   d66b4:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d66b6:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d66b8:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   d66ba:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d66bc:	f7fd fce9 	bl	d4092 <_Znwj>
   d66c0:	b118      	cbz	r0, d66ca <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	{ }

      _Bind(const _Bind&) = default;

      _Bind(_Bind&& __b)
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
   d66c2:	682b      	ldr	r3, [r5, #0]
   d66c4:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d66c6:	686b      	ldr	r3, [r5, #4]
   d66c8:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   d66ca:	4b03      	ldr	r3, [pc, #12]	; (d66d8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   d66cc:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   d66ce:	4b03      	ldr	r3, [pc, #12]	; (d66dc <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d66d0:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   d66d2:	60a3      	str	r3, [r4, #8]
      }
   d66d4:	4620      	mov	r0, r4
   d66d6:	bd38      	pop	{r3, r4, r5, pc}
   d66d8:	000d5fab 	.word	0x000d5fab
   d66dc:	000d5f6d 	.word	0x000d5f6d

000d66e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d66e0:	680b      	ldr	r3, [r1, #0]
   d66e2:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d66e4:	b113      	cbz	r3, d66ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d66e6:	685a      	ldr	r2, [r3, #4]
   d66e8:	3201      	adds	r2, #1
   d66ea:	605a      	str	r2, [r3, #4]
      }
   d66ec:	4770      	bx	lr

000d66ee <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   d66ee:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d66f0:	f851 3b04 	ldr.w	r3, [r1], #4
   d66f4:	4604      	mov	r4, r0
   d66f6:	f840 3b04 	str.w	r3, [r0], #4
   d66fa:	f7ff fff1 	bl	d66e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   d66fe:	6823      	ldr	r3, [r4, #0]
   d6700:	b90b      	cbnz	r3, d6706 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   d6702:	f7ff fc2b 	bl	d5f5c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   d6706:	4620      	mov	r0, r4
   d6708:	bd10      	pop	{r4, pc}

000d670a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   d670a:	b510      	push	{r4, lr}
   d670c:	f851 3b04 	ldr.w	r3, [r1], #4
   d6710:	4604      	mov	r4, r0
   d6712:	f840 3b04 	str.w	r3, [r0], #4
   d6716:	f7ff ffe3 	bl	d66e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d671a:	4620      	mov	r0, r4
   d671c:	bd10      	pop	{r4, pc}

000d671e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   d671e:	b510      	push	{r4, lr}
   d6720:	f851 3b04 	ldr.w	r3, [r1], #4
   d6724:	4604      	mov	r4, r0
   d6726:	f840 3b04 	str.w	r3, [r0], #4
   d672a:	f7ff ffd9 	bl	d66e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d672e:	4620      	mov	r0, r4
   d6730:	bd10      	pop	{r4, pc}

000d6732 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d6732:	b510      	push	{r4, lr}
   d6734:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   d6736:	6800      	ldr	r0, [r0, #0]
   d6738:	b128      	cbz	r0, d6746 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
      if (--_M_use_count == 0)
   d673a:	6843      	ldr	r3, [r0, #4]
   d673c:	3b01      	subs	r3, #1
   d673e:	6043      	str	r3, [r0, #4]
   d6740:	b90b      	cbnz	r3, d6746 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d6742:	f7ff fb7e 	bl	d5e42 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
      }
   d6746:	4620      	mov	r0, r4
   d6748:	bd10      	pop	{r4, pc}

000d674a <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   d674a:	b510      	push	{r4, lr}
   d674c:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   d674e:	3004      	adds	r0, #4
   d6750:	f7ff ffef 	bl	d6732 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d6754:	4620      	mov	r0, r4
   d6756:	bd10      	pop	{r4, pc}

000d6758 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6758:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d675a:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d675e:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d6760:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   d6764:	42ae      	cmp	r6, r5
   d6766:	d004      	beq.n	d6772 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   d6768:	1d28      	adds	r0, r5, #4
   d676a:	f7ff ffe2 	bl	d6732 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d676e:	3508      	adds	r5, #8
   d6770:	e7f8      	b.n	d6764 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d6772:	6820      	ldr	r0, [r4, #0]
   d6774:	f7ff f960 	bl	d5a38 <free>
}
   d6778:	4620      	mov	r0, r4
   d677a:	bd70      	pop	{r4, r5, r6, pc}

000d677c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d677c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d677e:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6782:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d6784:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   d6788:	42ae      	cmp	r6, r5
   d678a:	d004      	beq.n	d6796 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   d678c:	1d28      	adds	r0, r5, #4
   d678e:	f7ff ffd0 	bl	d6732 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6792:	3508      	adds	r5, #8
   d6794:	e7f8      	b.n	d6788 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d6796:	6820      	ldr	r0, [r4, #0]
   d6798:	f7ff f94e 	bl	d5a38 <free>
}
   d679c:	4620      	mov	r0, r4
   d679e:	bd70      	pop	{r4, r5, r6, pc}

000d67a0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d67a0:	b510      	push	{r4, lr}
   d67a2:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   d67a4:	3024      	adds	r0, #36	; 0x24
   d67a6:	f7ff ffe9 	bl	d677c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d67aa:	f104 0018 	add.w	r0, r4, #24
   d67ae:	f7ff ffd3 	bl	d6758 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   d67b2:	bd10      	pop	{r4, pc}

000d67b4 <_ZN8particle14BleLocalDeviceD1Ev>:
        return impl_.get();
    }

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   d67b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (__ptr != nullptr)
   d67b6:	6804      	ldr	r4, [r0, #0]
   d67b8:	4606      	mov	r6, r0
   d67ba:	b324      	cbz	r4, d6806 <_ZN8particle14BleLocalDeviceD1Ev+0x52>
    class function<_Res(_ArgTypes...)>
   d67bc:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d67c0:	f7ff fbff 	bl	d5fc2 <_ZNSt14_Function_baseD1Ev>
   d67c4:	f104 0034 	add.w	r0, r4, #52	; 0x34
   d67c8:	f7ff fbfb 	bl	d5fc2 <_ZNSt14_Function_baseD1Ev>
   d67cc:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d67d0:	f7ff fbf7 	bl	d5fc2 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   d67d4:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   d67d8:	eb05 07c3 	add.w	r7, r5, r3, lsl #3
        for (; p != end; ++p) {
   d67dc:	42af      	cmp	r7, r5
   d67de:	d004      	beq.n	d67ea <_ZN8particle14BleLocalDeviceD1Ev+0x36>
      ~__shared_ptr() = default;
   d67e0:	1d28      	adds	r0, r5, #4
   d67e2:	f7ff ffa6 	bl	d6732 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d67e6:	3508      	adds	r5, #8
   d67e8:	e7f8      	b.n	d67dc <_ZN8particle14BleLocalDeviceD1Ev+0x28>
    ::free(ptr);
   d67ea:	69a0      	ldr	r0, [r4, #24]
   d67ec:	f7ff f924 	bl	d5a38 <free>
    ~BleLocalDeviceImpl() = default;
   d67f0:	f104 000c 	add.w	r0, r4, #12
   d67f4:	f7ff ffc2 	bl	d677c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d67f8:	4620      	mov	r0, r4
   d67fa:	f7ff ffad 	bl	d6758 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   d67fe:	2154      	movs	r1, #84	; 0x54
   d6800:	4620      	mov	r0, r4
   d6802:	f001 fb34 	bl	d7e6e <_ZdlPvj>
   d6806:	4630      	mov	r0, r6
   d6808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d680a <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   d680a:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d680c:	b510      	push	{r4, lr}
      if (_M_empty())
   d680e:	b90a      	cbnz	r2, d6814 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   d6810:	f001 fb31 	bl	d7e76 <_ZSt25__throw_bad_function_callv>
    }
   d6814:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6818:	68c3      	ldr	r3, [r0, #12]
   d681a:	4718      	bx	r3

000d681c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   d681c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d681e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6820:	4604      	mov	r4, r0
   d6822:	460d      	mov	r5, r1
   d6824:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d6826:	d914      	bls.n	d6852 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d6828:	4290      	cmp	r0, r2
   d682a:	d213      	bcs.n	d6854 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   d682c:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   d6830:	1a75      	subs	r5, r6, r1
   d6832:	f1a1 0708 	sub.w	r7, r1, #8
   d6836:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d6838:	42b7      	cmp	r7, r6
   d683a:	d018      	beq.n	d686e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d683c:	b11c      	cbz	r4, d6846 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d683e:	4631      	mov	r1, r6
   d6840:	4620      	mov	r0, r4
   d6842:	f7ff ff6c 	bl	d671e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d6846:	1d30      	adds	r0, r6, #4
   d6848:	f7ff ff73 	bl	d6732 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   d684c:	3e08      	subs	r6, #8
   d684e:	3c08      	subs	r4, #8
   d6850:	e7f2      	b.n	d6838 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   d6852:	d00c      	beq.n	d686e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d6854:	42b5      	cmp	r5, r6
   d6856:	d00a      	beq.n	d686e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d6858:	b11c      	cbz	r4, d6862 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d685a:	4629      	mov	r1, r5
   d685c:	4620      	mov	r0, r4
   d685e:	f7ff ff5e 	bl	d671e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d6862:	1d28      	adds	r0, r5, #4
   d6864:	f7ff ff65 	bl	d6732 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   d6868:	3508      	adds	r5, #8
   d686a:	3408      	adds	r4, #8
   d686c:	e7f2      	b.n	d6854 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   d686e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6870 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d6870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    T* const p = find(data_, data_ + size_, value);
   d6874:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d6878:	4605      	mov	r5, r0
   d687a:	4688      	mov	r8, r1
    T* const p = find(data_, data_ + size_, value);
   d687c:	eb04 07c3 	add.w	r7, r4, r3, lsl #3
        for (; p != end; ++p) {
   d6880:	42a7      	cmp	r7, r4
   d6882:	d103      	bne.n	d688c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x1c>
        return false;
   d6884:	2600      	movs	r6, #0
}
   d6886:	4630      	mov	r0, r6
   d6888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if (*p == value) {
   d688c:	4641      	mov	r1, r8
   d688e:	4620      	mov	r0, r4
   d6890:	f7ff fe3c 	bl	d650c <_ZNK8particle13BlePeerDeviceeqERKS0_>
   d6894:	4606      	mov	r6, r0
   d6896:	b908      	cbnz	r0, d689c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>
        for (; p != end; ++p) {
   d6898:	3408      	adds	r4, #8
   d689a:	e7f1      	b.n	d6880 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x10>
    if (!p) {
   d689c:	2c00      	cmp	r4, #0
   d689e:	d0f1      	beq.n	d6884 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x14>
   d68a0:	1d20      	adds	r0, r4, #4
   d68a2:	f7ff ff46 	bl	d6732 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   d68a6:	e9d5 3200 	ldrd	r3, r2, [r5]
   d68aa:	f104 0108 	add.w	r1, r4, #8
   d68ae:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d68b2:	4620      	mov	r0, r4
   d68b4:	f7ff ffb2 	bl	d681c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   d68b8:	686b      	ldr	r3, [r5, #4]
   d68ba:	3b01      	subs	r3, #1
   d68bc:	606b      	str	r3, [r5, #4]
    return true;
   d68be:	e7e2      	b.n	d6886 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x16>

000d68c0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d68c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d68c2:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d68c4:	6846      	ldr	r6, [r0, #4]
   d68c6:	4668      	mov	r0, sp
   d68c8:	f7ff ff29 	bl	d671e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d68cc:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   d68d0:	429f      	cmp	r7, r3
   d68d2:	db12      	blt.n	d68fa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   d68d4:	3701      	adds	r7, #1
        if (n > 0) {
   d68d6:	2f00      	cmp	r7, #0
   d68d8:	dd29      	ble.n	d692e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   d68da:	00f8      	lsls	r0, r7, #3
   d68dc:	f7ff f8a4 	bl	d5a28 <malloc>
            if (!d) {
   d68e0:	4605      	mov	r5, r0
   d68e2:	b1f0      	cbz	r0, d6922 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   d68e4:	e9d4 1200 	ldrd	r1, r2, [r4]
   d68e8:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d68ec:	f7ff ff96 	bl	d681c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   d68f0:	6820      	ldr	r0, [r4, #0]
   d68f2:	f7ff f8a1 	bl	d5a38 <free>
        data_ = d;
   d68f6:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d68f8:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   d68fa:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d68fc:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d68fe:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   d6902:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d6906:	4631      	mov	r1, r6
   d6908:	f106 0008 	add.w	r0, r6, #8
   d690c:	f7ff ff86 	bl	d681c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d6910:	b11e      	cbz	r6, d691a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   d6912:	4669      	mov	r1, sp
   d6914:	4630      	mov	r0, r6
   d6916:	f7ff ff02 	bl	d671e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   d691a:	6863      	ldr	r3, [r4, #4]
   d691c:	3301      	adds	r3, #1
   d691e:	6063      	str	r3, [r4, #4]
    return true;
   d6920:	2501      	movs	r5, #1
   d6922:	a801      	add	r0, sp, #4
   d6924:	f7ff ff05 	bl	d6732 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d6928:	4628      	mov	r0, r5
   d692a:	b003      	add	sp, #12
   d692c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   d692e:	2500      	movs	r5, #0
   d6930:	e7de      	b.n	d68f0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>
	...

000d6934 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d6934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6938:	4605      	mov	r5, r0
   d693a:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   d693c:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d693e:	460c      	mov	r4, r1
        WiringBleLock lk;
   d6940:	f7ff fb68 	bl	d6014 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   d6944:	682e      	ldr	r6, [r5, #0]
   d6946:	2e04      	cmp	r6, #4
   d6948:	d06b      	beq.n	d6a22 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
   d694a:	d807      	bhi.n	d695c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x28>
   d694c:	2e03      	cmp	r6, #3
   d694e:	d028      	beq.n	d69a2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x6e>
        WiringBleLock lk;
   d6950:	a803      	add	r0, sp, #12
   d6952:	f7ff fb67 	bl	d6024 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   d6956:	b00e      	add	sp, #56	; 0x38
   d6958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        switch (event->type) {
   d695c:	f1a6 030c 	sub.w	r3, r6, #12
   d6960:	2b03      	cmp	r3, #3
   d6962:	d8f5      	bhi.n	d6950 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d6964:	89a9      	ldrh	r1, [r5, #12]
   d6966:	4620      	mov	r0, r4
   d6968:	f7ff fcf4 	bl	d6354 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d696c:	4607      	mov	r7, r0
   d696e:	2800      	cmp	r0, #0
   d6970:	d0ee      	beq.n	d6950 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                    if (impl->pairingEventCallback_) {
   d6972:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   d6974:	2b00      	cmp	r3, #0
   d6976:	d0eb      	beq.n	d6950 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                        BlePairingEvent pairingEvent = {
   d6978:	2210      	movs	r2, #16
   d697a:	2100      	movs	r1, #0
   d697c:	a807      	add	r0, sp, #28
   d697e:	f001 fbdb 	bl	d8138 <memset>
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY) {
   d6982:	2e0d      	cmp	r6, #13
                        };
   d6984:	9706      	str	r7, [sp, #24]
                            .type = static_cast<BlePairingEventType>(event->type)
   d6986:	f88d 601c 	strb.w	r6, [sp, #28]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY) {
   d698a:	f040 8092 	bne.w	d6ab2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17e>
                            pairingEvent.payload.passkey = event->params.passkey_display.passkey;
   d698e:	686b      	ldr	r3, [r5, #4]
   d6990:	9309      	str	r3, [sp, #36]	; 0x24
                            pairingEvent.payloadLen = BLE_PAIRING_PASSKEY_LEN;
   d6992:	2306      	movs	r3, #6
                            pairingEvent.payloadLen = sizeof(BlePairingStatus);
   d6994:	9308      	str	r3, [sp, #32]
   d6996:	6d23      	ldr	r3, [r4, #80]	; 0x50
   d6998:	a906      	add	r1, sp, #24
   d699a:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d699e:	4798      	blx	r3
   d69a0:	e7d6      	b.n	d6950 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                BlePeerDevice peer;
   d69a2:	a804      	add	r0, sp, #16
   d69a4:	f7ff fd7e 	bl	d64a4 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   d69a8:	9b04      	ldr	r3, [sp, #16]
   d69aa:	89aa      	ldrh	r2, [r5, #12]
   d69ac:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   d69ae:	6869      	ldr	r1, [r5, #4]
   d69b0:	9804      	ldr	r0, [sp, #16]
   d69b2:	3108      	adds	r1, #8
   d69b4:	3002      	adds	r0, #2
   d69b6:	f7ff fb3d 	bl	d6034 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   d69ba:	a904      	add	r1, sp, #16
   d69bc:	a806      	add	r0, sp, #24
   d69be:	f7ff feae 	bl	d671e <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   d69c2:	a906      	add	r1, sp, #24
   d69c4:	f104 0018 	add.w	r0, r4, #24
   d69c8:	f7ff ff7a 	bl	d68c0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d69cc:	4605      	mov	r5, r0
   d69ce:	a807      	add	r0, sp, #28
   d69d0:	f7ff feaf 	bl	d6732 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d69d4:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   d69d6:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   d69d8:	b98d      	cbnz	r5, d69fe <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xca>
                    LOG(ERROR, "Failed to append peer Central device.");
   d69da:	4b3e      	ldr	r3, [pc, #248]	; (d6ad4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a0>)
   d69dc:	493e      	ldr	r1, [pc, #248]	; (d6ad8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a4>)
   d69de:	9300      	str	r3, [sp, #0]
   d69e0:	2032      	movs	r0, #50	; 0x32
   d69e2:	462b      	mov	r3, r5
   d69e4:	aa06      	add	r2, sp, #24
   d69e6:	9507      	str	r5, [sp, #28]
   d69e8:	f7fe ff8a 	bl	d5900 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   d69ec:	9b04      	ldr	r3, [sp, #16]
   d69ee:	4629      	mov	r1, r5
   d69f0:	8818      	ldrh	r0, [r3, #0]
   d69f2:	f7fe fe03 	bl	d55fc <hal_ble_gap_disconnect>
   d69f6:	a805      	add	r0, sp, #20
   d69f8:	f7ff fe9b 	bl	d6732 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d69fc:	e7a8      	b.n	d6950 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                LOG(TRACE, "Connected by Central device.");
   d69fe:	4a37      	ldr	r2, [pc, #220]	; (d6adc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a8>)
   d6a00:	9200      	str	r2, [sp, #0]
   d6a02:	2300      	movs	r3, #0
   d6a04:	4934      	ldr	r1, [pc, #208]	; (d6ad8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a4>)
   d6a06:	9307      	str	r3, [sp, #28]
   d6a08:	aa06      	add	r2, sp, #24
   d6a0a:	2001      	movs	r0, #1
   d6a0c:	f7fe ff78 	bl	d5900 <log_message>
                if (impl->connectedCallback_) {
   d6a10:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d6a12:	2b00      	cmp	r3, #0
   d6a14:	d0ef      	beq.n	d69f6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xc2>
                    impl->connectedCallback_(peer);
   d6a16:	a904      	add	r1, sp, #16
   d6a18:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d6a1c:	f7ff fef5 	bl	d680a <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   d6a20:	e7e9      	b.n	d69f6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xc2>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d6a22:	89a9      	ldrh	r1, [r5, #12]
   d6a24:	4620      	mov	r0, r4
   d6a26:	f7ff fc95 	bl	d6354 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d6a2a:	4606      	mov	r6, r0
   d6a2c:	2800      	cmp	r0, #0
   d6a2e:	d08f      	beq.n	d6950 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
        return impl_.get();
   d6a30:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   d6a32:	e9d5 3106 	ldrd	r3, r1, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   d6a36:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d6a3a:	802a      	strh	r2, [r5, #0]
   d6a3c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
        for (auto& characteristic : characteristics()) {
   d6a40:	4299      	cmp	r1, r3
   d6a42:	d003      	beq.n	d6a4c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x118>
        return impl_.get();
   d6a44:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d6a48:	8042      	strh	r2, [r0, #2]
        for (auto& characteristic : characteristics()) {
   d6a4a:	e7f9      	b.n	d6a40 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10c>
    destruct(data_, data_ + size_);
   d6a4c:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   d6a50:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   d6a54:	45b8      	cmp	r8, r7
   d6a56:	d004      	beq.n	d6a62 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12e>
   d6a58:	1d38      	adds	r0, r7, #4
   d6a5a:	f7ff fe6a 	bl	d6732 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6a5e:	3708      	adds	r7, #8
   d6a60:	e7f8      	b.n	d6a54 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x120>
    size_ = 0;
   d6a62:	2300      	movs	r3, #0
   d6a64:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   d6a66:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   d6a6a:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   d6a6e:	45b8      	cmp	r8, r7
   d6a70:	d004      	beq.n	d6a7c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x148>
   d6a72:	1d38      	adds	r0, r7, #4
   d6a74:	f7ff fe5d 	bl	d6732 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6a78:	3708      	adds	r7, #8
   d6a7a:	e7f8      	b.n	d6a6e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13a>
    size_ = 0;
   d6a7c:	2300      	movs	r3, #0
   d6a7e:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   d6a80:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   d6a82:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d6a84:	b123      	cbz	r3, d6a90 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x15c>
                        impl->disconnectedCallback_(*peer);
   d6a86:	4631      	mov	r1, r6
   d6a88:	f104 0034 	add.w	r0, r4, #52	; 0x34
   d6a8c:	f7ff febd 	bl	d680a <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   d6a90:	2300      	movs	r3, #0
   d6a92:	2220      	movs	r2, #32
   d6a94:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d6a98:	4a11      	ldr	r2, [pc, #68]	; (d6ae0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ac>)
   d6a9a:	9200      	str	r2, [sp, #0]
   d6a9c:	490e      	ldr	r1, [pc, #56]	; (d6ad8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a4>)
   d6a9e:	aa06      	add	r2, sp, #24
   d6aa0:	2001      	movs	r0, #1
   d6aa2:	f7fe ff2d 	bl	d5900 <log_message>
                    impl->peers_.removeOne(*peer);
   d6aa6:	4631      	mov	r1, r6
   d6aa8:	f104 0018 	add.w	r0, r4, #24
   d6aac:	f7ff fee0 	bl	d6870 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
   d6ab0:	e74e      	b.n	d6950 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   d6ab2:	2e0f      	cmp	r6, #15
   d6ab4:	f47f af6f 	bne.w	d6996 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x62>
                            pairingEvent.payload.status.status = event->params.pairing_status.status;
   d6ab8:	686b      	ldr	r3, [r5, #4]
   d6aba:	9309      	str	r3, [sp, #36]	; 0x24
                            pairingEvent.payload.status.bonded = event->params.pairing_status.bonded;
   d6abc:	7a2b      	ldrb	r3, [r5, #8]
   d6abe:	f003 0201 	and.w	r2, r3, #1
                            pairingEvent.payload.status.lesc = event->params.pairing_status.lesc;
   d6ac2:	f3c3 0340 	ubfx	r3, r3, #1, #1
   d6ac6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
                            pairingEvent.payload.status.bonded = event->params.pairing_status.bonded;
   d6aca:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
                            pairingEvent.payloadLen = sizeof(BlePairingStatus);
   d6ace:	2308      	movs	r3, #8
   d6ad0:	e760      	b.n	d6994 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x60>
   d6ad2:	bf00      	nop
   d6ad4:	000d86ef 	.word	0x000d86ef
   d6ad8:	000d86b0 	.word	0x000d86b0
   d6adc:	000d8715 	.word	0x000d8715
   d6ae0:	000d8732 	.word	0x000d8732

000d6ae4 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_>:
      operator=(__shared_ptr&& __r) noexcept
   d6ae4:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   d6ae6:	2300      	movs	r3, #0
      operator=(__shared_ptr&& __r) noexcept
   d6ae8:	4604      	mov	r4, r0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6aea:	e9d1 0200 	ldrd	r0, r2, [r1]
	__r._M_ptr = 0;
   d6aee:	e9c1 3300 	strd	r3, r3, [r1]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6af2:	6823      	ldr	r3, [r4, #0]
   d6af4:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d6af6:	6020      	str	r0, [r4, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6af8:	6863      	ldr	r3, [r4, #4]
	__r._M_pi = _M_pi;
   d6afa:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
   d6afc:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   d6afe:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   d6b00:	f7ff fe17 	bl	d6732 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   d6b04:	4620      	mov	r0, r4
   d6b06:	b002      	add	sp, #8
   d6b08:	bd10      	pop	{r4, pc}

000d6b0a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d6b0a:	b513      	push	{r0, r1, r4, lr}
   d6b0c:	460b      	mov	r3, r1
   d6b0e:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6b10:	e9d0 0100 	ldrd	r0, r1, [r0]
   d6b14:	466c      	mov	r4, sp
   d6b16:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d6b1a:	e893 0003 	ldmia.w	r3, {r0, r1}
   d6b1e:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d6b22:	e894 0003 	ldmia.w	r4, {r0, r1}
   d6b26:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d6b2a:	b002      	add	sp, #8
   d6b2c:	bd10      	pop	{r4, pc}

000d6b2e <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   d6b2e:	b538      	push	{r3, r4, r5, lr}
   d6b30:	4605      	mov	r5, r0
   d6b32:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   d6b34:	f7ff ffe9 	bl	d6b0a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6b38:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   d6b3a:	68a2      	ldr	r2, [r4, #8]
   d6b3c:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6b3e:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6b40:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   d6b42:	68e2      	ldr	r2, [r4, #12]
   d6b44:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6b46:	60e3      	str	r3, [r4, #12]
      }
   d6b48:	bd38      	pop	{r3, r4, r5, pc}

000d6b4a <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSEOS7_>:
      operator=(function&& __x) noexcept
   d6b4a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    _Function_base() : _M_manager(nullptr) { }
   d6b4c:	2300      	movs	r3, #0
      operator=(function&& __x) noexcept
   d6b4e:	4604      	mov	r4, r0
   d6b50:	4608      	mov	r0, r1
	__x.swap(*this);
   d6b52:	4669      	mov	r1, sp
    _Function_base() : _M_manager(nullptr) { }
   d6b54:	9302      	str	r3, [sp, #8]
	__x.swap(*this);
   d6b56:	f7ff ffea 	bl	d6b2e <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   d6b5a:	4621      	mov	r1, r4
   d6b5c:	4668      	mov	r0, sp
   d6b5e:	f7ff ffe6 	bl	d6b2e <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   d6b62:	4668      	mov	r0, sp
   d6b64:	f7ff fa2d 	bl	d5fc2 <_ZNSt14_Function_baseD1Ev>
      }
   d6b68:	4620      	mov	r0, r4
   d6b6a:	b004      	add	sp, #16
   d6b6c:	bd10      	pop	{r4, pc}

000d6b6e <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   d6b6e:	b570      	push	{r4, r5, r6, lr}
   d6b70:	460e      	mov	r6, r1
   d6b72:	b088      	sub	sp, #32
   d6b74:	4604      	mov	r4, r0
   d6b76:	9201      	str	r2, [sp, #4]
   d6b78:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   d6b7a:	f7ff fbcb 	bl	d6314 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   d6b7e:	7833      	ldrb	r3, [r6, #0]
        description_ = desc;
   d6b80:	9901      	ldr	r1, [sp, #4]
        properties_ = properties;
   d6b82:	7123      	strb	r3, [r4, #4]
        description_ = desc;
   d6b84:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d6b88:	f7ff f860 	bl	d5c4c <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   d6b8c:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   d6b90:	b185      	cbz	r5, d6bb4 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x46>
   d6b92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d6b94:	9502      	str	r5, [sp, #8]
   d6b96:	a902      	add	r1, sp, #8
   d6b98:	a804      	add	r0, sp, #16
   d6b9a:	9303      	str	r3, [sp, #12]
   d6b9c:	f7ff fd88 	bl	d66b0 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
   d6ba0:	a904      	add	r1, sp, #16
   d6ba2:	4630      	mov	r0, r6
   d6ba4:	f7ff ffd1 	bl	d6b4a <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSEOS7_>
    class function<_Res(_ArgTypes...)>
   d6ba8:	a804      	add	r0, sp, #16
   d6baa:	f7ff fa0a 	bl	d5fc2 <_ZNSt14_Function_baseD1Ev>
    }
   d6bae:	4620      	mov	r0, r4
   d6bb0:	b008      	add	sp, #32
   d6bb2:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   d6bb4:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   d6bb6:	e7f3      	b.n	d6ba0 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x32>

000d6bb8 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   d6bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6bbc:	b086      	sub	sp, #24
   d6bbe:	4607      	mov	r7, r0
   d6bc0:	461d      	mov	r5, r3
   d6bc2:	2068      	movs	r0, #104	; 0x68
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d6bc4:	2300      	movs	r3, #0
   d6bc6:	4689      	mov	r9, r1
   d6bc8:	4692      	mov	sl, r2
   d6bca:	9304      	str	r3, [sp, #16]
   d6bcc:	f7fd fa61 	bl	d4092 <_Znwj>
	  auto __pi = ::new (__mem)
   d6bd0:	1e06      	subs	r6, r0, #0
   d6bd2:	f106 080c 	add.w	r8, r6, #12
   d6bd6:	d01d      	beq.n	d6c14 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   d6bd8:	2301      	movs	r3, #1
	: _M_impl(__a)
   d6bda:	4634      	mov	r4, r6
      : _M_use_count(1), _M_weak_count(1) { }
   d6bdc:	e9c6 3301 	strd	r3, r3, [r6, #4]
	: _M_impl(__a)
   d6be0:	4b15      	ldr	r3, [pc, #84]	; (d6c38 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x80>)
   d6be2:	f844 3b20 	str.w	r3, [r4], #32
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
	noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
   d6be6:	f89a 3000 	ldrb.w	r3, [sl]
    value_ = flags.value_;
   d6bea:	f88d 300c 	strb.w	r3, [sp, #12]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   d6bee:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d6bf0:	9300      	str	r3, [sp, #0]
   d6bf2:	464a      	mov	r2, r9
   d6bf4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d6bf6:	a903      	add	r1, sp, #12
   d6bf8:	4640      	mov	r0, r8
   d6bfa:	f7ff ffb8 	bl	d6b6e <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   d6bfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6c00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6c02:	682b      	ldr	r3, [r5, #0]
        svcUuid_ = svcUuid;
   d6c04:	9d0e      	ldr	r5, [sp, #56]	; 0x38
        charUuid_ = charUuid;
   d6c06:	6023      	str	r3, [r4, #0]
        svcUuid_ = svcUuid;
   d6c08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6c0a:	f106 0434 	add.w	r4, r6, #52	; 0x34
   d6c0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6c10:	682b      	ldr	r3, [r5, #0]
   d6c12:	6023      	str	r3, [r4, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   d6c14:	a904      	add	r1, sp, #16
   d6c16:	4638      	mov	r0, r7
	  __p = __pi->_M_ptr();
   d6c18:	e9cd 8604 	strd	r8, r6, [sp, #16]
   d6c1c:	f7ff ff62 	bl	d6ae4 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_>
      ~__shared_ptr() = default;
   d6c20:	a805      	add	r0, sp, #20
   d6c22:	f7ff fd86 	bl	d6732 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   d6c26:	6839      	ldr	r1, [r7, #0]
   d6c28:	b919      	cbnz	r1, d6c32 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x7a>
        SPARK_ASSERT(false);
   d6c2a:	4a04      	ldr	r2, [pc, #16]	; (d6c3c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>)
   d6c2c:	200a      	movs	r0, #10
   d6c2e:	f7fe fe5f 	bl	d58f0 <panic_>
}
   d6c32:	b006      	add	sp, #24
   d6c34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6c38:	000d87ac 	.word	0x000d87ac
   d6c3c:	000d559d 	.word	0x000d559d

000d6c40 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   d6c40:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d6c42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6c44:	4604      	mov	r4, r0
   d6c46:	460d      	mov	r5, r1
   d6c48:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d6c4a:	d914      	bls.n	d6c76 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d6c4c:	4290      	cmp	r0, r2
   d6c4e:	d213      	bcs.n	d6c78 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   d6c50:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   d6c54:	1a75      	subs	r5, r6, r1
   d6c56:	f1a1 0708 	sub.w	r7, r1, #8
   d6c5a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d6c5c:	42b7      	cmp	r7, r6
   d6c5e:	d018      	beq.n	d6c92 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d6c60:	b11c      	cbz	r4, d6c6a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default;
   d6c62:	4631      	mov	r1, r6
   d6c64:	4620      	mov	r0, r4
   d6c66:	f7ff fd50 	bl	d670a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d6c6a:	1d30      	adds	r0, r6, #4
   d6c6c:	f7ff fd61 	bl	d6732 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   d6c70:	3e08      	subs	r6, #8
   d6c72:	3c08      	subs	r4, #8
   d6c74:	e7f2      	b.n	d6c5c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   d6c76:	d00c      	beq.n	d6c92 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d6c78:	42b5      	cmp	r5, r6
   d6c7a:	d00a      	beq.n	d6c92 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d6c7c:	b11c      	cbz	r4, d6c86 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d6c7e:	4629      	mov	r1, r5
   d6c80:	4620      	mov	r0, r4
   d6c82:	f7ff fd42 	bl	d670a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d6c86:	1d28      	adds	r0, r5, #4
   d6c88:	f7ff fd53 	bl	d6732 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   d6c8c:	3508      	adds	r5, #8
   d6c8e:	3408      	adds	r4, #8
   d6c90:	e7f2      	b.n	d6c78 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   d6c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6c94 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   d6c94:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   d6c96:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   d6c98:	4605      	mov	r5, r0
        if (n > 0) {
   d6c9a:	dd11      	ble.n	d6cc0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   d6c9c:	00f0      	lsls	r0, r6, #3
   d6c9e:	f7fe fec3 	bl	d5a28 <malloc>
            if (!d) {
   d6ca2:	4604      	mov	r4, r0
   d6ca4:	b158      	cbz	r0, d6cbe <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   d6ca6:	e9d5 1200 	ldrd	r1, r2, [r5]
   d6caa:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d6cae:	f7ff ffc7 	bl	d6c40 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   d6cb2:	6828      	ldr	r0, [r5, #0]
   d6cb4:	f7fe fec0 	bl	d5a38 <free>
        data_ = d;
   d6cb8:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d6cba:	60ae      	str	r6, [r5, #8]
        return true;
   d6cbc:	2001      	movs	r0, #1
    }
   d6cbe:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   d6cc0:	2400      	movs	r4, #0
   d6cc2:	e7f6      	b.n	d6cb2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000d6cc4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d6cc4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d6cc6:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d6cc8:	6845      	ldr	r5, [r0, #4]
   d6cca:	4668      	mov	r0, sp
   d6ccc:	f7ff fd1d 	bl	d670a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6cd0:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   d6cd4:	4299      	cmp	r1, r3
   d6cd6:	da10      	bge.n	d6cfa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   d6cd8:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d6cda:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d6cdc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d6ce0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d6ce4:	4629      	mov	r1, r5
   d6ce6:	f105 0008 	add.w	r0, r5, #8
   d6cea:	f7ff ffa9 	bl	d6c40 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d6cee:	b98d      	cbnz	r5, d6d14 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   d6cf0:	6863      	ldr	r3, [r4, #4]
   d6cf2:	3301      	adds	r3, #1
   d6cf4:	6063      	str	r3, [r4, #4]
    return true;
   d6cf6:	2601      	movs	r6, #1
   d6cf8:	e006      	b.n	d6d08 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6cfa:	3101      	adds	r1, #1
   d6cfc:	4620      	mov	r0, r4
   d6cfe:	f7ff ffc9 	bl	d6c94 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d6d02:	4606      	mov	r6, r0
   d6d04:	2800      	cmp	r0, #0
   d6d06:	d1e7      	bne.n	d6cd8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   d6d08:	a801      	add	r0, sp, #4
   d6d0a:	f7ff fd12 	bl	d6732 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d6d0e:	4630      	mov	r0, r6
   d6d10:	b002      	add	sp, #8
   d6d12:	bd70      	pop	{r4, r5, r6, pc}
   d6d14:	4669      	mov	r1, sp
   d6d16:	4628      	mov	r0, r5
   d6d18:	f7ff fcf7 	bl	d670a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d6d1c:	e7e8      	b.n	d6cf0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000d6d1e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   d6d1e:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d6d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6d22:	4604      	mov	r4, r0
   d6d24:	460d      	mov	r5, r1
   d6d26:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d6d28:	d914      	bls.n	d6d54 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d6d2a:	4290      	cmp	r0, r2
   d6d2c:	d213      	bcs.n	d6d56 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   d6d2e:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   d6d32:	1a75      	subs	r5, r6, r1
   d6d34:	f1a1 0708 	sub.w	r7, r1, #8
   d6d38:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d6d3a:	42b7      	cmp	r7, r6
   d6d3c:	d018      	beq.n	d6d70 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d6d3e:	b11c      	cbz	r4, d6d48 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   d6d40:	4631      	mov	r1, r6
   d6d42:	4620      	mov	r0, r4
   d6d44:	f7ff fcd3 	bl	d66ee <_ZN8particle17BleCharacteristicC1ERKS0_>
   d6d48:	1d30      	adds	r0, r6, #4
   d6d4a:	f7ff fcf2 	bl	d6732 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   d6d4e:	3e08      	subs	r6, #8
   d6d50:	3c08      	subs	r4, #8
   d6d52:	e7f2      	b.n	d6d3a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   d6d54:	d00c      	beq.n	d6d70 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d6d56:	42b5      	cmp	r5, r6
   d6d58:	d00a      	beq.n	d6d70 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d6d5a:	b11c      	cbz	r4, d6d64 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d6d5c:	4629      	mov	r1, r5
   d6d5e:	4620      	mov	r0, r4
   d6d60:	f7ff fcc5 	bl	d66ee <_ZN8particle17BleCharacteristicC1ERKS0_>
   d6d64:	1d28      	adds	r0, r5, #4
   d6d66:	f7ff fce4 	bl	d6732 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   d6d6a:	3508      	adds	r5, #8
   d6d6c:	3408      	adds	r4, #8
   d6d6e:	e7f2      	b.n	d6d56 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   d6d70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6d72 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   d6d72:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   d6d74:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   d6d76:	4605      	mov	r5, r0
        if (n > 0) {
   d6d78:	dd11      	ble.n	d6d9e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   d6d7a:	00f0      	lsls	r0, r6, #3
   d6d7c:	f7fe fe54 	bl	d5a28 <malloc>
            if (!d) {
   d6d80:	4604      	mov	r4, r0
   d6d82:	b158      	cbz	r0, d6d9c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   d6d84:	e9d5 1200 	ldrd	r1, r2, [r5]
   d6d88:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d6d8c:	f7ff ffc7 	bl	d6d1e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   d6d90:	6828      	ldr	r0, [r5, #0]
   d6d92:	f7fe fe51 	bl	d5a38 <free>
        data_ = d;
   d6d96:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d6d98:	60ae      	str	r6, [r5, #8]
        return true;
   d6d9a:	2001      	movs	r0, #1
    }
   d6d9c:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   d6d9e:	2400      	movs	r4, #0
   d6da0:	e7f6      	b.n	d6d90 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000d6da2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d6da2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d6da4:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d6da6:	6845      	ldr	r5, [r0, #4]
   d6da8:	4668      	mov	r0, sp
   d6daa:	f7ff fca0 	bl	d66ee <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6dae:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   d6db2:	4299      	cmp	r1, r3
   d6db4:	da10      	bge.n	d6dd8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   d6db6:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d6db8:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d6dba:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d6dbe:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d6dc2:	4629      	mov	r1, r5
   d6dc4:	f105 0008 	add.w	r0, r5, #8
   d6dc8:	f7ff ffa9 	bl	d6d1e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d6dcc:	b98d      	cbnz	r5, d6df2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   d6dce:	6863      	ldr	r3, [r4, #4]
   d6dd0:	3301      	adds	r3, #1
   d6dd2:	6063      	str	r3, [r4, #4]
    return true;
   d6dd4:	2601      	movs	r6, #1
   d6dd6:	e006      	b.n	d6de6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6dd8:	3101      	adds	r1, #1
   d6dda:	4620      	mov	r0, r4
   d6ddc:	f7ff ffc9 	bl	d6d72 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d6de0:	4606      	mov	r6, r0
   d6de2:	2800      	cmp	r0, #0
   d6de4:	d1e7      	bne.n	d6db6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   d6de6:	a801      	add	r0, sp, #4
   d6de8:	f7ff fca3 	bl	d6732 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d6dec:	4630      	mov	r0, r6
   d6dee:	b002      	add	sp, #8
   d6df0:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   d6df2:	4669      	mov	r1, sp
   d6df4:	4628      	mov	r0, r5
   d6df6:	f7ff fc7a 	bl	d66ee <_ZN8particle17BleCharacteristicC1ERKS0_>
   d6dfa:	e7e8      	b.n	d6dce <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000d6dfc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   d6dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6e00:	4617      	mov	r7, r2
   d6e02:	b0a1      	sub	sp, #132	; 0x84
   d6e04:	4680      	mov	r8, r0
    WiringBleLock lk;
   d6e06:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   d6e08:	460e      	mov	r6, r1
    WiringBleLock lk;
   d6e0a:	f7ff f903 	bl	d6014 <_ZN8particle3ble13WiringBleLockC1Ev>
   d6e0e:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   d6e10:	7923      	ldrb	r3, [r4, #4]
   d6e12:	b953      	cbnz	r3, d6e2a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   d6e14:	4639      	mov	r1, r7
   d6e16:	4640      	mov	r0, r8
   d6e18:	f7ff fc69 	bl	d66ee <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   d6e1c:	a80a      	add	r0, sp, #40	; 0x28
   d6e1e:	f7ff f901 	bl	d6024 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   d6e22:	4640      	mov	r0, r8
   d6e24:	b021      	add	sp, #132	; 0x84
   d6e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d6e2a:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   d6e2c:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   d6e30:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   d6e34:	9303      	str	r3, [sp, #12]
   d6e36:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   d6e3a:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   d6e3e:	9b03      	ldr	r3, [sp, #12]
   d6e40:	429d      	cmp	r5, r3
   d6e42:	d021      	beq.n	d6e88 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   d6e44:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   d6e48:	4658      	mov	r0, fp
   d6e4a:	f109 0114 	add.w	r1, r9, #20
   d6e4e:	f7ff f99a 	bl	d6186 <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   d6e52:	b1b8      	cbz	r0, d6e84 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   d6e54:	f109 0128 	add.w	r1, r9, #40	; 0x28
   d6e58:	4650      	mov	r0, sl
   d6e5a:	f7ff f994 	bl	d6186 <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   d6e5e:	b188      	cbz	r0, d6e84 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   d6e60:	6823      	ldr	r3, [r4, #0]
   d6e62:	f8d9 2000 	ldr.w	r2, [r9]
   d6e66:	4053      	eors	r3, r2
   d6e68:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   d6e6c:	d10a      	bne.n	d6e84 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   d6e6e:	2220      	movs	r2, #32
   d6e70:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   d6e74:	4a5e      	ldr	r2, [pc, #376]	; (d6ff0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   d6e76:	9200      	str	r2, [sp, #0]
   d6e78:	aa15      	add	r2, sp, #84	; 0x54
   d6e7a:	495e      	ldr	r1, [pc, #376]	; (d6ff4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   d6e7c:	2032      	movs	r0, #50	; 0x32
   d6e7e:	f7fe fd3f 	bl	d5900 <log_message>
   d6e82:	e7c7      	b.n	d6e14 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   d6e84:	3508      	adds	r5, #8
   d6e86:	e7da      	b.n	d6e3e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   d6e88:	4650      	mov	r0, sl
   d6e8a:	f7ff f947 	bl	d611c <_ZNK8particle7BleUuid7isValidEv>
   d6e8e:	b960      	cbnz	r0, d6eaa <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
        return *this = BleUuid(uuid);
   d6e90:	4959      	ldr	r1, [pc, #356]	; (d6ff8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   d6e92:	2201      	movs	r2, #1
   d6e94:	a815      	add	r0, sp, #84	; 0x54
   d6e96:	ad15      	add	r5, sp, #84	; 0x54
   d6e98:	f7ff f917 	bl	d60ca <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   d6e9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6e9e:	46d4      	mov	ip, sl
   d6ea0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   d6ea4:	682b      	ldr	r3, [r5, #0]
   d6ea6:	f8cc 3000 	str.w	r3, [ip]
   d6eaa:	6833      	ldr	r3, [r6, #0]
   d6eac:	e9d3 5300 	ldrd	r5, r3, [r3]
   d6eb0:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   d6eb4:	455d      	cmp	r5, fp
   d6eb6:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   d6eb8:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   d6eba:	d06e      	beq.n	d6f9a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   d6ebc:	f855 0b08 	ldr.w	r0, [r5], #8
   d6ec0:	f7ff f961 	bl	d6186 <_ZNK8particle7BleUuideqERKS0_>
   d6ec4:	2800      	cmp	r0, #0
   d6ec6:	d0f5      	beq.n	d6eb4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   d6ec8:	f104 0a14 	add.w	sl, r4, #20
   d6ecc:	4650      	mov	r0, sl
   d6ece:	f7ff f925 	bl	d611c <_ZNK8particle7BleUuid7isValidEv>
   d6ed2:	b988      	cbnz	r0, d6ef8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   d6ed4:	4b49      	ldr	r3, [pc, #292]	; (d6ffc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d6ed6:	4948      	ldr	r1, [pc, #288]	; (d6ff8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   d6ed8:	881a      	ldrh	r2, [r3, #0]
   d6eda:	3201      	adds	r2, #1
   d6edc:	b292      	uxth	r2, r2
   d6ede:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d6ee0:	a815      	add	r0, sp, #84	; 0x54
   d6ee2:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   d6ee4:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d6ee6:	f7ff f90f 	bl	d6108 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   d6eea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6eec:	46d4      	mov	ip, sl
   d6eee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   d6ef2:	682b      	ldr	r3, [r5, #0]
   d6ef4:	f8cc 3000 	str.w	r3, [ip]
    hal_ble_char_init_t charInit = {};
   d6ef8:	2228      	movs	r2, #40	; 0x28
   d6efa:	2100      	movs	r1, #0
   d6efc:	a816      	add	r0, sp, #88	; 0x58
   d6efe:	f001 f91b 	bl	d8138 <memset>
    charInit.version = BLE_API_VERSION;
   d6f02:	4b3f      	ldr	r3, [pc, #252]	; (d7000 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   d6f04:	9315      	str	r3, [sp, #84]	; 0x54
    charInit.uuid = charImpl->charUUID().halUUID();
   d6f06:	4651      	mov	r1, sl
   d6f08:	a804      	add	r0, sp, #16
   d6f0a:	f7ff f919 	bl	d6140 <_ZN8particle7BleUuid7halUUIDEv>
   d6f0e:	ab04      	add	r3, sp, #16
   d6f10:	aa18      	add	r2, sp, #96	; 0x60
   d6f12:	f10d 0c20 	add.w	ip, sp, #32
   d6f16:	6818      	ldr	r0, [r3, #0]
   d6f18:	6859      	ldr	r1, [r3, #4]
   d6f1a:	4615      	mov	r5, r2
   d6f1c:	c503      	stmia	r5!, {r0, r1}
   d6f1e:	3308      	adds	r3, #8
   d6f20:	4563      	cmp	r3, ip
   d6f22:	462a      	mov	r2, r5
   d6f24:	d1f7      	bne.n	d6f16 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   d6f26:	6818      	ldr	r0, [r3, #0]
   d6f28:	6028      	str	r0, [r5, #0]
    charInit.properties = charImpl->properties().value();
   d6f2a:	7923      	ldrb	r3, [r4, #4]
   d6f2c:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   d6f30:	f8d9 3000 	ldr.w	r3, [r9]
   d6f34:	8a9b      	ldrh	r3, [r3, #20]
   d6f36:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   d6f3a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d6f3c:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   d6f3e:	4b31      	ldr	r3, [pc, #196]	; (d7004 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d6f40:	2200      	movs	r2, #0
   d6f42:	1da1      	adds	r1, r4, #6
   d6f44:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   d6f46:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d6f4a:	f7fe fb89 	bl	d5660 <hal_ble_gatt_server_add_characteristic>
   d6f4e:	2800      	cmp	r0, #0
   d6f50:	f47f af60 	bne.w	d6e14 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   d6f54:	2301      	movs	r3, #1
   d6f56:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   d6f58:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   d6f5a:	4639      	mov	r1, r7
        return characteristics_;
   d6f5c:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   d6f5e:	a80d      	add	r0, sp, #52	; 0x34
   d6f60:	f7ff fbc5 	bl	d66ee <_ZN8particle17BleCharacteristicC1ERKS0_>
   d6f64:	4620      	mov	r0, r4
   d6f66:	a90d      	add	r1, sp, #52	; 0x34
   d6f68:	f7ff ff1b 	bl	d6da2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   d6f6c:	4604      	mov	r4, r0
   d6f6e:	a80e      	add	r0, sp, #56	; 0x38
   d6f70:	f7ff fbdf 	bl	d6732 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6f74:	2c00      	cmp	r4, #0
   d6f76:	f47f af4d 	bne.w	d6e14 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   d6f7a:	2320      	movs	r3, #32
   d6f7c:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   d6f80:	4b21      	ldr	r3, [pc, #132]	; (d7008 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   d6f82:	9300      	str	r3, [sp, #0]
   d6f84:	aa0d      	add	r2, sp, #52	; 0x34
   d6f86:	4623      	mov	r3, r4
   d6f88:	e777      	b.n	d6e7a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   d6f8a:	4639      	mov	r1, r7
   d6f8c:	4640      	mov	r0, r8
   d6f8e:	f7ff fbae 	bl	d66ee <_ZN8particle17BleCharacteristicC1ERKS0_>
   d6f92:	a80c      	add	r0, sp, #48	; 0x30
   d6f94:	f7ff fbcd 	bl	d6732 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6f98:	e740      	b.n	d6e1c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   d6f9a:	a80b      	add	r0, sp, #44	; 0x2c
   d6f9c:	f7ff fa5e 	bl	d645c <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   d6fa0:	4651      	mov	r1, sl
   d6fa2:	a815      	add	r0, sp, #84	; 0x54
   d6fa4:	f7ff f8cc 	bl	d6140 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   d6fa8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d6faa:	2300      	movs	r3, #0
   d6fac:	3214      	adds	r2, #20
   d6fae:	a915      	add	r1, sp, #84	; 0x54
   d6fb0:	2001      	movs	r0, #1
   d6fb2:	f7fe fb2d 	bl	d5610 <hal_ble_gatt_server_add_service>
   d6fb6:	2800      	cmp	r0, #0
   d6fb8:	d1e7      	bne.n	d6f8a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   d6fba:	6835      	ldr	r5, [r6, #0]
   d6fbc:	a90b      	add	r1, sp, #44	; 0x2c
   d6fbe:	a80d      	add	r0, sp, #52	; 0x34
   d6fc0:	f7ff fba3 	bl	d670a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   d6fc4:	4628      	mov	r0, r5
   d6fc6:	a90d      	add	r1, sp, #52	; 0x34
   d6fc8:	f7ff fe7c 	bl	d6cc4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   d6fcc:	4605      	mov	r5, r0
   d6fce:	a80e      	add	r0, sp, #56	; 0x38
   d6fd0:	f7ff fbaf 	bl	d6732 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6fd4:	2d00      	cmp	r5, #0
   d6fd6:	d0d8      	beq.n	d6f8a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   d6fd8:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   d6fda:	6853      	ldr	r3, [r2, #4]
   d6fdc:	6812      	ldr	r2, [r2, #0]
   d6fde:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   d6fe2:	3b01      	subs	r3, #1
   d6fe4:	a80c      	add	r0, sp, #48	; 0x30
   d6fe6:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   d6fea:	f7ff fba2 	bl	d6732 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6fee:	e76b      	b.n	d6ec8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   d6ff0:	000d8751 	.word	0x000d8751
   d6ff4:	000d86b0 	.word	0x000d86b0
   d6ff8:	000d8810 	.word	0x000d8810
   d6ffc:	2003e660 	.word	0x2003e660
   d7000:	002c0001 	.word	0x002c0001
   d7004:	000d65ed 	.word	0x000d65ed
   d7008:	000d877c 	.word	0x000d877c

000d700c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d700c:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d700e:	4c06      	ldr	r4, [pc, #24]	; (d7028 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d7010:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d7012:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d7014:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d7016:	f7fe fb4b 	bl	d56b0 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d701a:	4620      	mov	r0, r4
   d701c:	4a03      	ldr	r2, [pc, #12]	; (d702c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d701e:	4904      	ldr	r1, [pc, #16]	; (d7030 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d7020:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d7024:	f000 bf1e 	b.w	d7e64 <__aeabi_atexit>
   d7028:	2003e664 	.word	0x2003e664
   d702c:	20034510 	.word	0x20034510
   d7030:	000d5e63 	.word	0x000d5e63

000d7034 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d7034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7036:	4606      	mov	r6, r0
   d7038:	460d      	mov	r5, r1
  size_t n = 0;
   d703a:	188f      	adds	r7, r1, r2
   d703c:	2400      	movs	r4, #0
  while (size--) {
   d703e:	42bd      	cmp	r5, r7
   d7040:	d00c      	beq.n	d705c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d7042:	6833      	ldr	r3, [r6, #0]
   d7044:	f815 1b01 	ldrb.w	r1, [r5], #1
   d7048:	689b      	ldr	r3, [r3, #8]
   d704a:	4630      	mov	r0, r6
   d704c:	4798      	blx	r3
     if (chunk>=0)
   d704e:	1e03      	subs	r3, r0, #0
   d7050:	db01      	blt.n	d7056 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d7052:	441c      	add	r4, r3
  while (size--) {
   d7054:	e7f3      	b.n	d703e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d7056:	2c00      	cmp	r4, #0
   d7058:	bf08      	it	eq
   d705a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d705c:	4620      	mov	r0, r4
   d705e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7060 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d7060:	b513      	push	{r0, r1, r4, lr}
   d7062:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d7064:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d7066:	b159      	cbz	r1, d7080 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d7068:	9101      	str	r1, [sp, #4]
   d706a:	f001 f8a3 	bl	d81b4 <strlen>
   d706e:	6823      	ldr	r3, [r4, #0]
   d7070:	9901      	ldr	r1, [sp, #4]
   d7072:	68db      	ldr	r3, [r3, #12]
   d7074:	4602      	mov	r2, r0
   d7076:	4620      	mov	r0, r4
    }
   d7078:	b002      	add	sp, #8
   d707a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d707e:	4718      	bx	r3
    }
   d7080:	b002      	add	sp, #8
   d7082:	bd10      	pop	{r4, pc}

000d7084 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d7084:	b508      	push	{r3, lr}
  return write(str);
   d7086:	f7ff ffeb 	bl	d7060 <_ZN5Print5writeEPKc>
}
   d708a:	bd08      	pop	{r3, pc}

000d708c <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d708c:	6803      	ldr	r3, [r0, #0]
   d708e:	689b      	ldr	r3, [r3, #8]
   d7090:	4718      	bx	r3

000d7092 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d7092:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d7094:	210d      	movs	r1, #13
{
   d7096:	4605      	mov	r5, r0
  size_t n = print('\r');
   d7098:	f7ff fff8 	bl	d708c <_ZN5Print5printEc>
  n += print('\n');
   d709c:	210a      	movs	r1, #10
  size_t n = print('\r');
   d709e:	4604      	mov	r4, r0
  n += print('\n');
   d70a0:	4628      	mov	r0, r5
   d70a2:	f7ff fff3 	bl	d708c <_ZN5Print5printEc>
  return n;
}
   d70a6:	4420      	add	r0, r4
   d70a8:	bd38      	pop	{r3, r4, r5, pc}

000d70aa <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d70aa:	b538      	push	{r3, r4, r5, lr}
   d70ac:	4605      	mov	r5, r0
  return write(str);
   d70ae:	f7ff ffd7 	bl	d7060 <_ZN5Print5writeEPKc>
   d70b2:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d70b4:	4628      	mov	r0, r5
   d70b6:	f7ff ffec 	bl	d7092 <_ZN5Print7printlnEv>
  return n;
}
   d70ba:	4420      	add	r0, r4
   d70bc:	bd38      	pop	{r3, r4, r5, pc}

000d70be <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d70be:	b530      	push	{r4, r5, lr}
   d70c0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d70c2:	2300      	movs	r3, #0
   d70c4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d70c8:	2a01      	cmp	r2, #1
   d70ca:	bf98      	it	ls
   d70cc:	220a      	movls	r2, #10
   d70ce:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d70d0:	460d      	mov	r5, r1
   d70d2:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d70d6:	fb01 5312 	mls	r3, r1, r2, r5
   d70da:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d70de:	2b09      	cmp	r3, #9
   d70e0:	bf94      	ite	ls
   d70e2:	3330      	addls	r3, #48	; 0x30
   d70e4:	3337      	addhi	r3, #55	; 0x37
   d70e6:	b2db      	uxtb	r3, r3
  } while(n);
   d70e8:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d70ea:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d70ee:	d9ef      	bls.n	d70d0 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d70f0:	4621      	mov	r1, r4
   d70f2:	f7ff ffb5 	bl	d7060 <_ZN5Print5writeEPKc>
}
   d70f6:	b00b      	add	sp, #44	; 0x2c
   d70f8:	bd30      	pop	{r4, r5, pc}

000d70fa <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d70fa:	2300      	movs	r3, #0
   d70fc:	6840      	ldr	r0, [r0, #4]
   d70fe:	461a      	mov	r2, r3
   d7100:	4619      	mov	r1, r3
   d7102:	f7fe bc49 	b.w	d5998 <network_on>
	...

000d7108 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d7108:	4b01      	ldr	r3, [pc, #4]	; (d7110 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d710a:	4a02      	ldr	r2, [pc, #8]	; (d7114 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d710c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d710e:	4770      	bx	lr
   d7110:	2003e66c 	.word	0x2003e66c
   d7114:	000d8830 	.word	0x000d8830

000d7118 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d7118:	4b02      	ldr	r3, [pc, #8]	; (d7124 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d711a:	681a      	ldr	r2, [r3, #0]
   d711c:	4b02      	ldr	r3, [pc, #8]	; (d7128 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d711e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d7120:	4770      	bx	lr
   d7122:	bf00      	nop
   d7124:	200344a8 	.word	0x200344a8
   d7128:	2003e670 	.word	0x2003e670

000d712c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d712c:	2100      	movs	r1, #0
   d712e:	f7fe bbf7 	b.w	d5920 <system_delay_ms>

000d7132 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d7132:	b510      	push	{r4, lr}
   d7134:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   d7136:	f7fe ff44 	bl	d5fc2 <_ZNSt14_Function_baseD1Ev>
   d713a:	4620      	mov	r0, r4
   d713c:	bd10      	pop	{r4, pc}
	...

000d7140 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d7140:	4803      	ldr	r0, [pc, #12]	; (d7150 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d7142:	4a04      	ldr	r2, [pc, #16]	; (d7154 <_GLOBAL__sub_I_RGB+0x14>)
   d7144:	4904      	ldr	r1, [pc, #16]	; (d7158 <_GLOBAL__sub_I_RGB+0x18>)
   d7146:	2300      	movs	r3, #0
   d7148:	6083      	str	r3, [r0, #8]
   d714a:	f000 be8b 	b.w	d7e64 <__aeabi_atexit>
   d714e:	bf00      	nop
   d7150:	2003e674 	.word	0x2003e674
   d7154:	20034510 	.word	0x20034510
   d7158:	000d7133 	.word	0x000d7133

000d715c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d715c:	4b01      	ldr	r3, [pc, #4]	; (d7164 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d715e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d7160:	4770      	bx	lr
   d7162:	bf00      	nop
   d7164:	200344ac 	.word	0x200344ac

000d7168 <serialEventRun>:
{
   d7168:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d716a:	4b0b      	ldr	r3, [pc, #44]	; (d7198 <serialEventRun+0x30>)
   d716c:	b143      	cbz	r3, d7180 <serialEventRun+0x18>
   d716e:	f000 f971 	bl	d7454 <_Z16_fetch_usbserialv>
   d7172:	6803      	ldr	r3, [r0, #0]
   d7174:	691b      	ldr	r3, [r3, #16]
   d7176:	4798      	blx	r3
   d7178:	2800      	cmp	r0, #0
   d717a:	dd01      	ble.n	d7180 <serialEventRun+0x18>
        serialEvent();
   d717c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d7180:	4b06      	ldr	r3, [pc, #24]	; (d719c <serialEventRun+0x34>)
   d7182:	b143      	cbz	r3, d7196 <serialEventRun+0x2e>
   d7184:	f000 f9e4 	bl	d7550 <_Z22__fetch_global_Serial1v>
   d7188:	6803      	ldr	r3, [r0, #0]
   d718a:	691b      	ldr	r3, [r3, #16]
   d718c:	4798      	blx	r3
   d718e:	2800      	cmp	r0, #0
   d7190:	dd01      	ble.n	d7196 <serialEventRun+0x2e>
        serialEvent1();
   d7192:	f3af 8000 	nop.w
}
   d7196:	bd08      	pop	{r3, pc}
	...

000d71a0 <_post_loop>:
{
   d71a0:	b508      	push	{r3, lr}
	serialEventRun();
   d71a2:	f7ff ffe1 	bl	d7168 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d71a6:	f7fe fa01 	bl	d55ac <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d71aa:	4b01      	ldr	r3, [pc, #4]	; (d71b0 <_post_loop+0x10>)
   d71ac:	6018      	str	r0, [r3, #0]
}
   d71ae:	bd08      	pop	{r3, pc}
   d71b0:	2003e7d4 	.word	0x2003e7d4

000d71b4 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d71b4:	4802      	ldr	r0, [pc, #8]	; (d71c0 <_Z33system_initialize_user_backup_ramv+0xc>)
   d71b6:	4a03      	ldr	r2, [pc, #12]	; (d71c4 <_Z33system_initialize_user_backup_ramv+0x10>)
   d71b8:	4903      	ldr	r1, [pc, #12]	; (d71c8 <_Z33system_initialize_user_backup_ramv+0x14>)
   d71ba:	1a12      	subs	r2, r2, r0
   d71bc:	f000 bf94 	b.w	d80e8 <memcpy>
   d71c0:	2003f400 	.word	0x2003f400
   d71c4:	2003f404 	.word	0x2003f404
   d71c8:	000d8c00 	.word	0x000d8c00

000d71cc <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d71cc:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d71ce:	2300      	movs	r3, #0
   d71d0:	9300      	str	r3, [sp, #0]
   d71d2:	461a      	mov	r2, r3
   d71d4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d71d8:	f7fe fbb4 	bl	d5944 <system_ctrl_set_result>
}
   d71dc:	b003      	add	sp, #12
   d71de:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d71e4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d71e4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d71e6:	8843      	ldrh	r3, [r0, #2]
   d71e8:	2b0a      	cmp	r3, #10
   d71ea:	d008      	beq.n	d71fe <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d71ec:	2b50      	cmp	r3, #80	; 0x50
   d71ee:	d10b      	bne.n	d7208 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d71f0:	4b09      	ldr	r3, [pc, #36]	; (d7218 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d71f2:	681b      	ldr	r3, [r3, #0]
   d71f4:	b14b      	cbz	r3, d720a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d71f6:	b003      	add	sp, #12
   d71f8:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d71fc:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d71fe:	f7ff ffe5 	bl	d71cc <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d7202:	b003      	add	sp, #12
   d7204:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7208:	2300      	movs	r3, #0
   d720a:	9300      	str	r3, [sp, #0]
   d720c:	461a      	mov	r2, r3
   d720e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7212:	f7fe fb97 	bl	d5944 <system_ctrl_set_result>
}
   d7216:	e7f4      	b.n	d7202 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d7218:	2003e688 	.word	0x2003e688

000d721c <module_user_init_hook>:
{
   d721c:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d721e:	4c12      	ldr	r4, [pc, #72]	; (d7268 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d7220:	4812      	ldr	r0, [pc, #72]	; (d726c <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d7222:	4d13      	ldr	r5, [pc, #76]	; (d7270 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d7224:	2100      	movs	r1, #0
   d7226:	f7fe fc2f 	bl	d5a88 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d722a:	6823      	ldr	r3, [r4, #0]
   d722c:	42ab      	cmp	r3, r5
   d722e:	4b11      	ldr	r3, [pc, #68]	; (d7274 <module_user_init_hook+0x58>)
   d7230:	bf0c      	ite	eq
   d7232:	2201      	moveq	r2, #1
   d7234:	2200      	movne	r2, #0
   d7236:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d7238:	d002      	beq.n	d7240 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d723a:	f7ff ffbb 	bl	d71b4 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d723e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d7240:	f7fe f9a4 	bl	d558c <HAL_RNG_GetRandomNumber>
   d7244:	4604      	mov	r4, r0
    srand(seed);
   d7246:	f000 ff7f 	bl	d8148 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d724a:	4b0b      	ldr	r3, [pc, #44]	; (d7278 <module_user_init_hook+0x5c>)
   d724c:	b113      	cbz	r3, d7254 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d724e:	4620      	mov	r0, r4
   d7250:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d7254:	2100      	movs	r1, #0
   d7256:	4808      	ldr	r0, [pc, #32]	; (d7278 <module_user_init_hook+0x5c>)
   d7258:	f7fe fbde 	bl	d5a18 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d725c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7260:	4806      	ldr	r0, [pc, #24]	; (d727c <module_user_init_hook+0x60>)
   d7262:	2100      	movs	r1, #0
   d7264:	f7fe bb64 	b.w	d5930 <system_ctrl_set_app_request_handler>
   d7268:	2003f400 	.word	0x2003f400
   d726c:	000d715d 	.word	0x000d715d
   d7270:	9a271c1e 	.word	0x9a271c1e
   d7274:	2003e684 	.word	0x2003e684
   d7278:	00000000 	.word	0x00000000
   d727c:	000d71e5 	.word	0x000d71e5

000d7280 <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
   d7280:	4770      	bx	lr

000d7282 <_ZN9IPAddressD0Ev>:
   d7282:	b510      	push	{r4, lr}
   d7284:	2118      	movs	r1, #24
   d7286:	4604      	mov	r4, r0
   d7288:	f000 fdf1 	bl	d7e6e <_ZdlPvj>
   d728c:	4620      	mov	r0, r4
   d728e:	bd10      	pop	{r4, pc}

000d7290 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d7290:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d7292:	7d03      	ldrb	r3, [r0, #20]
   d7294:	2b06      	cmp	r3, #6
{
   d7296:	b08d      	sub	sp, #52	; 0x34
   d7298:	460e      	mov	r6, r1
   d729a:	f100 0704 	add.w	r7, r0, #4
   d729e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d72a2:	d012      	beq.n	d72ca <_ZNK9IPAddress7printToER5Print+0x3a>
   d72a4:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d72a8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d72ac:	220a      	movs	r2, #10
   d72ae:	4630      	mov	r0, r6
   d72b0:	f7ff ff05 	bl	d70be <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d72b4:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d72b6:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d72b8:	d019      	beq.n	d72ee <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d72ba:	2c00      	cmp	r4, #0
   d72bc:	d0f4      	beq.n	d72a8 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d72be:	212e      	movs	r1, #46	; 0x2e
   d72c0:	4630      	mov	r0, r6
   d72c2:	f7ff fee3 	bl	d708c <_ZN5Print5printEc>
   d72c6:	4404      	add	r4, r0
   d72c8:	e7ee      	b.n	d72a8 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d72ca:	232f      	movs	r3, #47	; 0x2f
   d72cc:	466a      	mov	r2, sp
   d72ce:	4639      	mov	r1, r7
   d72d0:	200a      	movs	r0, #10
		buf[0] = 0;
   d72d2:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d72d6:	f7fe fa0b 	bl	d56f0 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d72da:	4668      	mov	r0, sp
   d72dc:	f000 ff6a 	bl	d81b4 <strlen>
   d72e0:	6833      	ldr	r3, [r6, #0]
   d72e2:	4602      	mov	r2, r0
   d72e4:	68db      	ldr	r3, [r3, #12]
   d72e6:	4669      	mov	r1, sp
   d72e8:	4630      	mov	r0, r6
   d72ea:	4798      	blx	r3
   d72ec:	4604      	mov	r4, r0
    }
    return n;
}
   d72ee:	4620      	mov	r0, r4
   d72f0:	b00d      	add	sp, #52	; 0x34
   d72f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d72f4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d72f4:	b510      	push	{r4, lr}
   d72f6:	4b05      	ldr	r3, [pc, #20]	; (d730c <_ZN9IPAddressC1Ev+0x18>)
   d72f8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d72fa:	2211      	movs	r2, #17
   d72fc:	f840 3b04 	str.w	r3, [r0], #4
   d7300:	2100      	movs	r1, #0
   d7302:	f000 ff19 	bl	d8138 <memset>
}
   d7306:	4620      	mov	r0, r4
   d7308:	bd10      	pop	{r4, pc}
   d730a:	bf00      	nop
   d730c:	000d8858 	.word	0x000d8858

000d7310 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d7310:	4603      	mov	r3, r0
   d7312:	4a07      	ldr	r2, [pc, #28]	; (d7330 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d7314:	b510      	push	{r4, lr}
   d7316:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d731a:	f101 0210 	add.w	r2, r1, #16
   d731e:	f851 4b04 	ldr.w	r4, [r1], #4
   d7322:	f843 4b04 	str.w	r4, [r3], #4
   d7326:	4291      	cmp	r1, r2
   d7328:	d1f9      	bne.n	d731e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d732a:	780a      	ldrb	r2, [r1, #0]
   d732c:	701a      	strb	r2, [r3, #0]
}
   d732e:	bd10      	pop	{r4, pc}
   d7330:	000d8858 	.word	0x000d8858

000d7334 <_ZNK9IPAddresscvbEv>:
    if (version() == 4) {
   d7334:	7d03      	ldrb	r3, [r0, #20]
   d7336:	2b04      	cmp	r3, #4
   d7338:	d104      	bne.n	d7344 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   d733a:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d733c:	3800      	subs	r0, #0
   d733e:	bf18      	it	ne
   d7340:	2001      	movne	r0, #1
   d7342:	4770      	bx	lr
    } else if (version() == 6) {
   d7344:	2b06      	cmp	r3, #6
   d7346:	d107      	bne.n	d7358 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d7348:	6843      	ldr	r3, [r0, #4]
   d734a:	b93b      	cbnz	r3, d735c <_ZNK9IPAddresscvbEv+0x28>
   d734c:	6883      	ldr	r3, [r0, #8]
   d734e:	b92b      	cbnz	r3, d735c <_ZNK9IPAddresscvbEv+0x28>
   d7350:	68c3      	ldr	r3, [r0, #12]
   d7352:	b91b      	cbnz	r3, d735c <_ZNK9IPAddresscvbEv+0x28>
   d7354:	6900      	ldr	r0, [r0, #16]
   d7356:	e7f1      	b.n	d733c <_ZNK9IPAddresscvbEv+0x8>
        return false;
   d7358:	2000      	movs	r0, #0
   d735a:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d735c:	2001      	movs	r0, #1
}
   d735e:	4770      	bx	lr

000d7360 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d7360:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d7362:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d7366:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d736a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d736e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d7372:	2304      	movs	r3, #4
   d7374:	6041      	str	r1, [r0, #4]
   d7376:	7503      	strb	r3, [r0, #20]
}
   d7378:	bd10      	pop	{r4, pc}
	...

000d737c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d737c:	b513      	push	{r0, r1, r4, lr}
   d737e:	4b05      	ldr	r3, [pc, #20]	; (d7394 <_ZN9IPAddressC1EPKh+0x18>)
   d7380:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d7382:	78cb      	ldrb	r3, [r1, #3]
   d7384:	9300      	str	r3, [sp, #0]
   d7386:	788b      	ldrb	r3, [r1, #2]
   d7388:	784a      	ldrb	r2, [r1, #1]
   d738a:	7809      	ldrb	r1, [r1, #0]
   d738c:	f7ff ffe8 	bl	d7360 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d7390:	b002      	add	sp, #8
   d7392:	bd10      	pop	{r4, pc}
   d7394:	000d8858 	.word	0x000d8858

000d7398 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7398:	7441      	strb	r1, [r0, #17]
}
   d739a:	4770      	bx	lr

000d739c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d739c:	4770      	bx	lr

000d739e <_ZN9USBSerial4readEv>:
{
   d739e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d73a0:	2100      	movs	r1, #0
   d73a2:	7c00      	ldrb	r0, [r0, #16]
   d73a4:	f7fe fa8c 	bl	d58c0 <HAL_USB_USART_Receive_Data>
}
   d73a8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d73ac:	bd08      	pop	{r3, pc}

000d73ae <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d73ae:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d73b0:	2101      	movs	r1, #1
   d73b2:	7c00      	ldrb	r0, [r0, #16]
   d73b4:	f7fe fa84 	bl	d58c0 <HAL_USB_USART_Receive_Data>
}
   d73b8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d73bc:	bd08      	pop	{r3, pc}

000d73be <_ZN9USBSerial17availableForWriteEv>:
{
   d73be:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d73c0:	7c00      	ldrb	r0, [r0, #16]
   d73c2:	f7fe fa75 	bl	d58b0 <HAL_USB_USART_Available_Data_For_Write>
}
   d73c6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d73ca:	bd08      	pop	{r3, pc}

000d73cc <_ZN9USBSerial9availableEv>:
{
   d73cc:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d73ce:	7c00      	ldrb	r0, [r0, #16]
   d73d0:	f7fe fa66 	bl	d58a0 <HAL_USB_USART_Available_Data>
}
   d73d4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d73d8:	bd08      	pop	{r3, pc}

000d73da <_ZN9USBSerial5writeEh>:
{
   d73da:	b513      	push	{r0, r1, r4, lr}
   d73dc:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d73de:	7c00      	ldrb	r0, [r0, #16]
{
   d73e0:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d73e2:	f7fe fa65 	bl	d58b0 <HAL_USB_USART_Available_Data_For_Write>
   d73e6:	2800      	cmp	r0, #0
   d73e8:	9901      	ldr	r1, [sp, #4]
   d73ea:	dc01      	bgt.n	d73f0 <_ZN9USBSerial5writeEh+0x16>
   d73ec:	7c60      	ldrb	r0, [r4, #17]
   d73ee:	b120      	cbz	r0, d73fa <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d73f0:	7c20      	ldrb	r0, [r4, #16]
   d73f2:	f7fe fa6d 	bl	d58d0 <HAL_USB_USART_Send_Data>
   d73f6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d73fa:	b002      	add	sp, #8
   d73fc:	bd10      	pop	{r4, pc}

000d73fe <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d73fe:	7c00      	ldrb	r0, [r0, #16]
   d7400:	f7fe ba6e 	b.w	d58e0 <HAL_USB_USART_Flush_Data>

000d7404 <_ZN9USBSerialD0Ev>:
   d7404:	b510      	push	{r4, lr}
   d7406:	2114      	movs	r1, #20
   d7408:	4604      	mov	r4, r0
   d740a:	f000 fd30 	bl	d7e6e <_ZdlPvj>
   d740e:	4620      	mov	r0, r4
   d7410:	bd10      	pop	{r4, pc}
	...

000d7414 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7414:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d7416:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d741a:	4604      	mov	r4, r0
   d741c:	4608      	mov	r0, r1
   d741e:	2100      	movs	r1, #0
   d7420:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d7424:	4b04      	ldr	r3, [pc, #16]	; (d7438 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d7426:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d7428:	2301      	movs	r3, #1
  _serial = serial;
   d742a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d742c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d742e:	4611      	mov	r1, r2
   d7430:	f7fe fa26 	bl	d5880 <HAL_USB_USART_Init>
}
   d7434:	4620      	mov	r0, r4
   d7436:	bd10      	pop	{r4, pc}
   d7438:	000d886c 	.word	0x000d886c

000d743c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d743c:	7c00      	ldrb	r0, [r0, #16]
   d743e:	2200      	movs	r2, #0
   d7440:	f7fe ba26 	b.w	d5890 <HAL_USB_USART_Begin>

000d7444 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7444:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d7446:	2214      	movs	r2, #20
{
   d7448:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d744a:	2100      	movs	r1, #0
   d744c:	f000 fe74 	bl	d8138 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d7450:	4620      	mov	r0, r4
   d7452:	bd10      	pop	{r4, pc}

000d7454 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d7454:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7456:	4c10      	ldr	r4, [pc, #64]	; (d7498 <_Z16_fetch_usbserialv+0x44>)
{
   d7458:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d745a:	a803      	add	r0, sp, #12
   d745c:	f7ff fff2 	bl	d7444 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7460:	7821      	ldrb	r1, [r4, #0]
   d7462:	f3bf 8f5b 	dmb	ish
   d7466:	f011 0101 	ands.w	r1, r1, #1
   d746a:	d111      	bne.n	d7490 <_Z16_fetch_usbserialv+0x3c>
   d746c:	4620      	mov	r0, r4
   d746e:	9101      	str	r1, [sp, #4]
   d7470:	f7fc fe15 	bl	d409e <__cxa_guard_acquire>
   d7474:	9901      	ldr	r1, [sp, #4]
   d7476:	b158      	cbz	r0, d7490 <_Z16_fetch_usbserialv+0x3c>
   d7478:	aa03      	add	r2, sp, #12
   d747a:	4808      	ldr	r0, [pc, #32]	; (d749c <_Z16_fetch_usbserialv+0x48>)
   d747c:	f7ff ffca 	bl	d7414 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d7480:	4620      	mov	r0, r4
   d7482:	f7fc fe11 	bl	d40a8 <__cxa_guard_release>
   d7486:	4a06      	ldr	r2, [pc, #24]	; (d74a0 <_Z16_fetch_usbserialv+0x4c>)
   d7488:	4906      	ldr	r1, [pc, #24]	; (d74a4 <_Z16_fetch_usbserialv+0x50>)
   d748a:	4804      	ldr	r0, [pc, #16]	; (d749c <_Z16_fetch_usbserialv+0x48>)
   d748c:	f000 fcea 	bl	d7e64 <__aeabi_atexit>
	return _usbserial;
}
   d7490:	4802      	ldr	r0, [pc, #8]	; (d749c <_Z16_fetch_usbserialv+0x48>)
   d7492:	b008      	add	sp, #32
   d7494:	bd10      	pop	{r4, pc}
   d7496:	bf00      	nop
   d7498:	2003e68c 	.word	0x2003e68c
   d749c:	2003e690 	.word	0x2003e690
   d74a0:	20034510 	.word	0x20034510
   d74a4:	000d739d 	.word	0x000d739d

000d74a8 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d74a8:	4770      	bx	lr

000d74aa <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d74aa:	7441      	strb	r1, [r0, #17]
}
   d74ac:	4770      	bx	lr

000d74ae <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d74ae:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d74b0:	7c00      	ldrb	r0, [r0, #16]
   d74b2:	f7fe f965 	bl	d5780 <hal_usart_available_data_for_write>
}
   d74b6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d74ba:	bd08      	pop	{r3, pc}

000d74bc <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d74bc:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d74be:	7c00      	ldrb	r0, [r0, #16]
   d74c0:	f7fe f93e 	bl	d5740 <hal_usart_available>
}
   d74c4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d74c8:	bd08      	pop	{r3, pc}

000d74ca <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d74ca:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d74cc:	7c00      	ldrb	r0, [r0, #16]
   d74ce:	f7fe f947 	bl	d5760 <hal_usart_peek>
}
   d74d2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d74d6:	bd08      	pop	{r3, pc}

000d74d8 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d74d8:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d74da:	7c00      	ldrb	r0, [r0, #16]
   d74dc:	f7fe f938 	bl	d5750 <hal_usart_read>
}
   d74e0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d74e4:	bd08      	pop	{r3, pc}

000d74e6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d74e6:	7c00      	ldrb	r0, [r0, #16]
   d74e8:	f7fe b942 	b.w	d5770 <hal_usart_flush>

000d74ec <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d74ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d74ee:	7c45      	ldrb	r5, [r0, #17]
{
   d74f0:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d74f2:	b12d      	cbz	r5, d7500 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d74f4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d74f6:	b003      	add	sp, #12
   d74f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d74fc:	f7fe b918 	b.w	d5730 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d7500:	7c00      	ldrb	r0, [r0, #16]
   d7502:	9101      	str	r1, [sp, #4]
   d7504:	f7fe f93c 	bl	d5780 <hal_usart_available_data_for_write>
   d7508:	2800      	cmp	r0, #0
   d750a:	9901      	ldr	r1, [sp, #4]
   d750c:	dcf2      	bgt.n	d74f4 <_ZN11USARTSerial5writeEh+0x8>
}
   d750e:	4628      	mov	r0, r5
   d7510:	b003      	add	sp, #12
   d7512:	bd30      	pop	{r4, r5, pc}

000d7514 <_ZN11USARTSerialD0Ev>:
   d7514:	b510      	push	{r4, lr}
   d7516:	2114      	movs	r1, #20
   d7518:	4604      	mov	r4, r0
   d751a:	f000 fca8 	bl	d7e6e <_ZdlPvj>
   d751e:	4620      	mov	r0, r4
   d7520:	bd10      	pop	{r4, pc}
	...

000d7524 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d7524:	b510      	push	{r4, lr}
   d7526:	f04f 0c00 	mov.w	ip, #0
   d752a:	4604      	mov	r4, r0
   d752c:	4608      	mov	r0, r1
   d752e:	4611      	mov	r1, r2
   d7530:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7534:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d7538:	4a04      	ldr	r2, [pc, #16]	; (d754c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d753a:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d753c:	2201      	movs	r2, #1
  _serial = serial;
   d753e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d7540:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d7542:	461a      	mov	r2, r3
   d7544:	f7fe f8ec 	bl	d5720 <hal_usart_init>
}
   d7548:	4620      	mov	r0, r4
   d754a:	bd10      	pop	{r4, pc}
   d754c:	000d889c 	.word	0x000d889c

000d7550 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d7550:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d7552:	4c0e      	ldr	r4, [pc, #56]	; (d758c <_Z22__fetch_global_Serial1v+0x3c>)
   d7554:	7821      	ldrb	r1, [r4, #0]
   d7556:	f3bf 8f5b 	dmb	ish
   d755a:	f011 0101 	ands.w	r1, r1, #1
   d755e:	d112      	bne.n	d7586 <_Z22__fetch_global_Serial1v+0x36>
   d7560:	4620      	mov	r0, r4
   d7562:	9101      	str	r1, [sp, #4]
   d7564:	f7fc fd9b 	bl	d409e <__cxa_guard_acquire>
   d7568:	9901      	ldr	r1, [sp, #4]
   d756a:	b160      	cbz	r0, d7586 <_Z22__fetch_global_Serial1v+0x36>
   d756c:	4a08      	ldr	r2, [pc, #32]	; (d7590 <_Z22__fetch_global_Serial1v+0x40>)
   d756e:	4b09      	ldr	r3, [pc, #36]	; (d7594 <_Z22__fetch_global_Serial1v+0x44>)
   d7570:	4809      	ldr	r0, [pc, #36]	; (d7598 <_Z22__fetch_global_Serial1v+0x48>)
   d7572:	f7ff ffd7 	bl	d7524 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d7576:	4620      	mov	r0, r4
   d7578:	f7fc fd96 	bl	d40a8 <__cxa_guard_release>
   d757c:	4a07      	ldr	r2, [pc, #28]	; (d759c <_Z22__fetch_global_Serial1v+0x4c>)
   d757e:	4908      	ldr	r1, [pc, #32]	; (d75a0 <_Z22__fetch_global_Serial1v+0x50>)
   d7580:	4805      	ldr	r0, [pc, #20]	; (d7598 <_Z22__fetch_global_Serial1v+0x48>)
   d7582:	f000 fc6f 	bl	d7e64 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d7586:	4804      	ldr	r0, [pc, #16]	; (d7598 <_Z22__fetch_global_Serial1v+0x48>)
   d7588:	b002      	add	sp, #8
   d758a:	bd10      	pop	{r4, pc}
   d758c:	2003e6a4 	.word	0x2003e6a4
   d7590:	2003e6a8 	.word	0x2003e6a8
   d7594:	2003e72c 	.word	0x2003e72c
   d7598:	2003e7b0 	.word	0x2003e7b0
   d759c:	20034510 	.word	0x20034510
   d75a0:	000d74a9 	.word	0x000d74a9

000d75a4 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d75a4:	4770      	bx	lr

000d75a6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d75a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d75a8:	4606      	mov	r6, r0
   d75aa:	4615      	mov	r5, r2
   d75ac:	460c      	mov	r4, r1
   d75ae:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d75b0:	42bc      	cmp	r4, r7
   d75b2:	d006      	beq.n	d75c2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d75b4:	6833      	ldr	r3, [r6, #0]
   d75b6:	f814 1b01 	ldrb.w	r1, [r4], #1
   d75ba:	689b      	ldr	r3, [r3, #8]
   d75bc:	4630      	mov	r0, r6
   d75be:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d75c0:	e7f6      	b.n	d75b0 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d75c2:	4628      	mov	r0, r5
   d75c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d75c6 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d75c6:	7c00      	ldrb	r0, [r0, #16]
   d75c8:	2200      	movs	r2, #0
   d75ca:	f7fe b8f9 	b.w	d57c0 <hal_i2c_write>

000d75ce <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d75ce:	7c00      	ldrb	r0, [r0, #16]
   d75d0:	2100      	movs	r1, #0
   d75d2:	f7fe b8fd 	b.w	d57d0 <hal_i2c_available>

000d75d6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d75d6:	7c00      	ldrb	r0, [r0, #16]
   d75d8:	2100      	movs	r1, #0
   d75da:	f7fe b901 	b.w	d57e0 <hal_i2c_read>

000d75de <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d75de:	7c00      	ldrb	r0, [r0, #16]
   d75e0:	2100      	movs	r1, #0
   d75e2:	f7fe b905 	b.w	d57f0 <hal_i2c_peek>

000d75e6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d75e6:	7c00      	ldrb	r0, [r0, #16]
   d75e8:	2100      	movs	r1, #0
   d75ea:	f7fe b909 	b.w	d5800 <hal_i2c_flush>

000d75ee <_ZN7TwoWireD0Ev>:
   d75ee:	b510      	push	{r4, lr}
   d75f0:	2114      	movs	r1, #20
   d75f2:	4604      	mov	r4, r0
   d75f4:	f000 fc3b 	bl	d7e6e <_ZdlPvj>
   d75f8:	4620      	mov	r0, r4
   d75fa:	bd10      	pop	{r4, pc}

000d75fc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d75fc:	b510      	push	{r4, lr}
   d75fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7602:	4604      	mov	r4, r0
   d7604:	4608      	mov	r0, r1
   d7606:	2100      	movs	r1, #0
   d7608:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d760c:	4b03      	ldr	r3, [pc, #12]	; (d761c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d760e:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d7610:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d7612:	4611      	mov	r1, r2
   d7614:	f7fe f8fc 	bl	d5810 <hal_i2c_init>
}
   d7618:	4620      	mov	r0, r4
   d761a:	bd10      	pop	{r4, pc}
   d761c:	000d88cc 	.word	0x000d88cc

000d7620 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d7620:	2300      	movs	r3, #0
   d7622:	7c00      	ldrb	r0, [r0, #16]
   d7624:	461a      	mov	r2, r3
   d7626:	4619      	mov	r1, r3
   d7628:	f7fe b8b2 	b.w	d5790 <hal_i2c_begin>

000d762c <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d762c:	7c00      	ldrb	r0, [r0, #16]
   d762e:	2200      	movs	r2, #0
   d7630:	f7fe b8b6 	b.w	d57a0 <hal_i2c_begin_transmission>

000d7634 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d7634:	b2c9      	uxtb	r1, r1
   d7636:	f7ff bff9 	b.w	d762c <_ZN7TwoWire17beginTransmissionEh>

000d763a <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d763a:	7c00      	ldrb	r0, [r0, #16]
   d763c:	2200      	movs	r2, #0
   d763e:	f7fe b8b7 	b.w	d57b0 <hal_i2c_end_transmission>

000d7642 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d7642:	2101      	movs	r1, #1
   d7644:	f7ff bff9 	b.w	d763a <_ZN7TwoWire15endTransmissionEh>

000d7648 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d7648:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d764a:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   d764c:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d7650:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d7652:	2201      	movs	r2, #1
   d7654:	f04f 33ff 	mov.w	r3, #4294967295
   d7658:	f10d 0107 	add.w	r1, sp, #7
   d765c:	47a0      	blx	r4
}
   d765e:	b002      	add	sp, #8
   d7660:	bd10      	pop	{r4, pc}

000d7662 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d7662:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d7664:	6803      	ldr	r3, [r0, #0]
   d7666:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d7668:	f04f 33ff 	mov.w	r3, #4294967295
   d766c:	46a4      	mov	ip, r4
}
   d766e:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d7672:	4760      	bx	ip

000d7674 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d7674:	b513      	push	{r0, r1, r4, lr}
   d7676:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   d7678:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d767a:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   d767e:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d7680:	f10d 0107 	add.w	r1, sp, #7
   d7684:	2201      	movs	r2, #1
   d7686:	47a0      	blx	r4
}
   d7688:	b002      	add	sp, #8
   d768a:	bd10      	pop	{r4, pc}

000d768c <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   d768c:	4770      	bx	lr

000d768e <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d768e:	b538      	push	{r3, r4, r5, lr}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d7690:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d7692:	681a      	ldr	r2, [r3, #0]
   d7694:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   d7696:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   d7698:	da10      	bge.n	d76bc <_ZN9TCPClient9connectedEv+0x2e>
   d769a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d769e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d76a2:	429a      	cmp	r2, r3
   d76a4:	d10a      	bne.n	d76bc <_ZN9TCPClient9connectedEv+0x2e>
    if (!rv) {
        rv = available();
   d76a6:	6803      	ldr	r3, [r0, #0]
   d76a8:	691b      	ldr	r3, [r3, #16]
   d76aa:	4798      	blx	r3
        if (!rv) {
   d76ac:	4604      	mov	r4, r0
   d76ae:	b928      	cbnz	r0, d76bc <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   d76b0:	682b      	ldr	r3, [r5, #0]
   d76b2:	4628      	mov	r0, r5
   d76b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d76b6:	4798      	blx	r3
        rv = available();
   d76b8:	4620      	mov	r0, r4
        }
    }
    return rv;
}
   d76ba:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   d76bc:	2001      	movs	r0, #1
   d76be:	e7fc      	b.n	d76ba <_ZN9TCPClient9connectedEv+0x2c>

000d76c0 <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d76c0:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   d76c2:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   d76c4:	43c0      	mvns	r0, r0
   d76c6:	0fc0      	lsrs	r0, r0, #31
   d76c8:	4770      	bx	lr

000d76ca <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d76ca:	4770      	bx	lr

000d76cc <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d76cc:	4b06      	ldr	r3, [pc, #24]	; (d76e8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d76ce:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d76d0:	b510      	push	{r4, lr}
   d76d2:	f100 040c 	add.w	r4, r0, #12
	    ||
   d76d6:	d005      	beq.n	d76e4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d76d8:	4608      	mov	r0, r1
   d76da:	f000 fbcf 	bl	d7e7c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d76de:	2800      	cmp	r0, #0
	return nullptr;
   d76e0:	bf08      	it	eq
   d76e2:	2400      	moveq	r4, #0
      }
   d76e4:	4620      	mov	r0, r4
   d76e6:	bd10      	pop	{r4, pc}
   d76e8:	000d87f8 	.word	0x000d87f8

000d76ec <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d76ec:	b510      	push	{r4, lr}
   d76ee:	21ac      	movs	r1, #172	; 0xac
   d76f0:	4604      	mov	r4, r0
   d76f2:	f000 fbbc 	bl	d7e6e <_ZdlPvj>
   d76f6:	4620      	mov	r0, r4
   d76f8:	bd10      	pop	{r4, pc}

000d76fa <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	::operator delete(__p);
   d76fa:	f7fc bcce 	b.w	d409a <_ZdlPv>

000d76fe <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d76fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   d7702:	f04f 0800 	mov.w	r8, #0
   d7706:	b086      	sub	sp, #24
   d7708:	461d      	mov	r5, r3
   d770a:	f8c0 8004 	str.w	r8, [r0, #4]
   d770e:	4604      	mov	r4, r0
   d7710:	460e      	mov	r6, r1
   d7712:	4617      	mov	r7, r2
    struct timeval tv = {};
   d7714:	4641      	mov	r1, r8
   d7716:	2210      	movs	r2, #16
   d7718:	a802      	add	r0, sp, #8
   d771a:	f000 fd0d 	bl	d8138 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   d771e:	1c6b      	adds	r3, r5, #1
   d7720:	d009      	beq.n	d7736 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   d7722:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d7726:	fbb5 f3f0 	udiv	r3, r5, r0
   d772a:	e9cd 3802 	strd	r3, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d772e:	fb00 5313 	mls	r3, r0, r3, r5
   d7732:	4358      	muls	r0, r3
   d7734:	9004      	str	r0, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d7736:	6960      	ldr	r0, [r4, #20]
   d7738:	2310      	movs	r3, #16
   d773a:	9300      	str	r3, [sp, #0]
   d773c:	6800      	ldr	r0, [r0, #0]
   d773e:	ab02      	add	r3, sp, #8
   d7740:	f241 0205 	movw	r2, #4101	; 0x1005
   d7744:	f640 71ff 	movw	r1, #4095	; 0xfff
   d7748:	f7fe f86a 	bl	d5820 <sock_setsockopt>
    if (ret < 0) {
   d774c:	2800      	cmp	r0, #0
   d774e:	da07      	bge.n	d7760 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   d7750:	f7fe f992 	bl	d5a78 <__errno>
   d7754:	6803      	ldr	r3, [r0, #0]
   d7756:	6063      	str	r3, [r4, #4]
        return 0;
   d7758:	2000      	movs	r0, #0
}
   d775a:	b006      	add	sp, #24
   d775c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   d7760:	6960      	ldr	r0, [r4, #20]
   d7762:	2300      	movs	r3, #0
   d7764:	6800      	ldr	r0, [r0, #0]
   d7766:	463a      	mov	r2, r7
   d7768:	4631      	mov	r1, r6
   d776a:	f7fe f879 	bl	d5860 <sock_send>
    if (ret < 0) {
   d776e:	1e03      	subs	r3, r0, #0
   d7770:	dbee      	blt.n	d7750 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   d7772:	4618      	mov	r0, r3
   d7774:	e7f1      	b.n	d775a <_ZN9TCPClient5writeEPKhjm+0x5c>
	...

000d7778 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d7778:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   d777a:	6984      	ldr	r4, [r0, #24]
   d777c:	4b0a      	ldr	r3, [pc, #40]	; (d77a8 <_ZN9TCPClientD1Ev+0x30>)
   d777e:	6003      	str	r3, [r0, #0]
   d7780:	4605      	mov	r5, r0
   d7782:	b17c      	cbz	r4, d77a4 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   d7784:	6863      	ldr	r3, [r4, #4]
   d7786:	3b01      	subs	r3, #1
   d7788:	6063      	str	r3, [r4, #4]
   d778a:	b95b      	cbnz	r3, d77a4 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   d778c:	6823      	ldr	r3, [r4, #0]
   d778e:	4620      	mov	r0, r4
   d7790:	689b      	ldr	r3, [r3, #8]
   d7792:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d7794:	68a3      	ldr	r3, [r4, #8]
   d7796:	3b01      	subs	r3, #1
   d7798:	60a3      	str	r3, [r4, #8]
   d779a:	b91b      	cbnz	r3, d77a4 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d779c:	6823      	ldr	r3, [r4, #0]
   d779e:	4620      	mov	r0, r4
   d77a0:	68db      	ldr	r3, [r3, #12]
   d77a2:	4798      	blx	r3
   d77a4:	4628      	mov	r0, r5
   d77a6:	bd38      	pop	{r3, r4, r5, pc}
   d77a8:	000d8928 	.word	0x000d8928

000d77ac <_ZN9TCPClientD0Ev>:
   d77ac:	b510      	push	{r4, lr}
   d77ae:	4604      	mov	r4, r0
   d77b0:	f7ff ffe2 	bl	d7778 <_ZN9TCPClientD1Ev>
   d77b4:	4620      	mov	r0, r4
   d77b6:	211c      	movs	r1, #28
   d77b8:	f000 fb59 	bl	d7e6e <_ZdlPvj>
   d77bc:	4620      	mov	r0, r4
   d77be:	bd10      	pop	{r4, pc}

000d77c0 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   d77c0:	b570      	push	{r4, r5, r6, lr}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d77c2:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   d77c4:	4b05      	ldr	r3, [pc, #20]	; (d77dc <_ZN9TCPClient8remoteIPEv+0x1c>)
   d77c6:	4604      	mov	r4, r0
   d77c8:	358c      	adds	r5, #140	; 0x8c
   d77ca:	f844 3b04 	str.w	r3, [r4], #4
   d77ce:	4606      	mov	r6, r0
   d77d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d77d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d77d4:	682b      	ldr	r3, [r5, #0]
   d77d6:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d77d8:	4630      	mov	r0, r6
   d77da:	bd70      	pop	{r4, r5, r6, pc}
   d77dc:	000d8858 	.word	0x000d8858

000d77e0 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   d77e0:	b510      	push	{r4, lr}
   d77e2:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d77e4:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d77e8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d77ec:	429a      	cmp	r2, r3
int TCPClient::peek() {
   d77ee:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d77f0:	d005      	beq.n	d77fe <_ZN9TCPClient4peekEv+0x1e>
   d77f2:	6963      	ldr	r3, [r4, #20]
   d77f4:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d77f8:	4413      	add	r3, r2
   d77fa:	7918      	ldrb	r0, [r3, #4]
}
   d77fc:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d77fe:	6803      	ldr	r3, [r0, #0]
   d7800:	691b      	ldr	r3, [r3, #16]
   d7802:	4798      	blx	r3
   d7804:	2800      	cmp	r0, #0
   d7806:	d1f4      	bne.n	d77f2 <_ZN9TCPClient4peekEv+0x12>
   d7808:	f04f 30ff 	mov.w	r0, #4294967295
   d780c:	e7f6      	b.n	d77fc <_ZN9TCPClient4peekEv+0x1c>

000d780e <_ZN9TCPClient4readEv>:
int TCPClient::read() {
   d780e:	b510      	push	{r4, lr}
   d7810:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d7812:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7816:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d781a:	429a      	cmp	r2, r3
int TCPClient::read() {
   d781c:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d781e:	d008      	beq.n	d7832 <_ZN9TCPClient4readEv+0x24>
   d7820:	6963      	ldr	r3, [r4, #20]
   d7822:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d7826:	1c51      	adds	r1, r2, #1
   d7828:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   d782c:	4413      	add	r3, r2
   d782e:	7918      	ldrb	r0, [r3, #4]
}
   d7830:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d7832:	6803      	ldr	r3, [r0, #0]
   d7834:	691b      	ldr	r3, [r3, #16]
   d7836:	4798      	blx	r3
   d7838:	2800      	cmp	r0, #0
   d783a:	d1f1      	bne.n	d7820 <_ZN9TCPClient4readEv+0x12>
   d783c:	f04f 30ff 	mov.w	r0, #4294967295
   d7840:	e7f6      	b.n	d7830 <_ZN9TCPClient4readEv+0x22>

000d7842 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   d7842:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7844:	6943      	ldr	r3, [r0, #20]
   d7846:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   d7848:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d784c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7850:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   d7852:	4605      	mov	r5, r0
   d7854:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   d7856:	d016      	beq.n	d7886 <_ZN9TCPClient4readEPhj+0x44>
   d7858:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   d785a:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d785e:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d7862:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d7864:	42bc      	cmp	r4, r7
   d7866:	bf28      	it	cs
   d7868:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d786a:	3304      	adds	r3, #4
   d786c:	4622      	mov	r2, r4
   d786e:	4419      	add	r1, r3
   d7870:	4630      	mov	r0, r6
   d7872:	f000 fc39 	bl	d80e8 <memcpy>
   d7876:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d7878:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d787c:	4423      	add	r3, r4
   d787e:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   d7882:	4620      	mov	r0, r4
   d7884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   d7886:	6803      	ldr	r3, [r0, #0]
   d7888:	691b      	ldr	r3, [r3, #16]
   d788a:	4798      	blx	r3
   d788c:	2800      	cmp	r0, #0
   d788e:	d1e3      	bne.n	d7858 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   d7890:	f04f 34ff 	mov.w	r4, #4294967295
   d7894:	e7f5      	b.n	d7882 <_ZN9TCPClient4readEPhj+0x40>

000d7896 <_ZN9TCPClient12flush_bufferEv>:
   d7896:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d7898:	2300      	movs	r3, #0
   d789a:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d789e:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d78a0:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   d78a4:	4770      	bx	lr

000d78a6 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d78a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d78aa:	461f      	mov	r7, r3
    stop();
   d78ac:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d78ae:	460c      	mov	r4, r1
    stop();
   d78b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d78b2:	b08a      	sub	sp, #40	; 0x28
   d78b4:	4605      	mov	r5, r0
   d78b6:	4616      	mov	r6, r2
    stop();
   d78b8:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d78ba:	7d23      	ldrb	r3, [r4, #20]
   d78bc:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d78c0:	2b04      	cmp	r3, #4
   d78c2:	bf0c      	ite	eq
   d78c4:	2002      	moveq	r0, #2
   d78c6:	200a      	movne	r0, #10
   d78c8:	2206      	movs	r2, #6
   d78ca:	2101      	movs	r1, #1
   d78cc:	f7fd ffd0 	bl	d5870 <sock_socket>
   d78d0:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d78d4:	696b      	ldr	r3, [r5, #20]
   d78d6:	681b      	ldr	r3, [r3, #0]
   d78d8:	2b00      	cmp	r3, #0
   d78da:	da08      	bge.n	d78ee <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   d78dc:	682b      	ldr	r3, [r5, #0]
   d78de:	4628      	mov	r0, r5
   d78e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d78e2:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   d78e4:	4798      	blx	r3
}
   d78e6:	4620      	mov	r0, r4
   d78e8:	b00a      	add	sp, #40	; 0x28
   d78ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   d78ee:	4628      	mov	r0, r5
   d78f0:	f7ff ffd1 	bl	d7896 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   d78f4:	b1b7      	cbz	r7, d7924 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   d78f6:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d78f8:	a903      	add	r1, sp, #12
   d78fa:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   d78fc:	9303      	str	r3, [sp, #12]
   d78fe:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d7902:	f7fd fe3b 	bl	d557c <if_index_to_name>
   d7906:	2800      	cmp	r0, #0
   d7908:	d1e8      	bne.n	d78dc <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d790a:	6968      	ldr	r0, [r5, #20]
   d790c:	2306      	movs	r3, #6
   d790e:	9300      	str	r3, [sp, #0]
   d7910:	6800      	ldr	r0, [r0, #0]
   d7912:	ab03      	add	r3, sp, #12
   d7914:	f241 020b 	movw	r2, #4107	; 0x100b
   d7918:	f640 71ff 	movw	r1, #4095	; 0xfff
   d791c:	f7fd ff80 	bl	d5820 <sock_setsockopt>
   d7920:	2800      	cmp	r0, #0
   d7922:	d1db      	bne.n	d78dc <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   d7924:	221c      	movs	r2, #28
   d7926:	2100      	movs	r1, #0
   d7928:	a803      	add	r0, sp, #12
   d792a:	f000 fc05 	bl	d8138 <memset>
    if (ip.version() == 4) {
   d792e:	7d23      	ldrb	r3, [r4, #20]
   d7930:	2b04      	cmp	r3, #4
   d7932:	d11d      	bne.n	d7970 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   d7934:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   d7938:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   d793a:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   d793e:	f7fd fee7 	bl	d5710 <inet_htons>
   d7942:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d7946:	6860      	ldr	r0, [r4, #4]
   d7948:	f7fd feda 	bl	d5700 <inet_htonl>
   d794c:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d794e:	696b      	ldr	r3, [r5, #20]
   d7950:	221c      	movs	r2, #28
   d7952:	6818      	ldr	r0, [r3, #0]
   d7954:	a903      	add	r1, sp, #12
   d7956:	f7fd ff73 	bl	d5840 <sock_connect>
   d795a:	2800      	cmp	r0, #0
   d795c:	d1be      	bne.n	d78dc <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   d795e:	3404      	adds	r4, #4
   d7960:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d7962:	696d      	ldr	r5, [r5, #20]
   d7964:	358c      	adds	r5, #140	; 0x8c
   d7966:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d7968:	6823      	ldr	r3, [r4, #0]
   d796a:	702b      	strb	r3, [r5, #0]
    return 1; // success
   d796c:	2401      	movs	r4, #1
   d796e:	e7ba      	b.n	d78e6 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   d7970:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   d7974:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   d7976:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   d797a:	f7fd fec9 	bl	d5710 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d797e:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   d7980:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d7984:	1d23      	adds	r3, r4, #4
   d7986:	f104 0714 	add.w	r7, r4, #20
   d798a:	6818      	ldr	r0, [r3, #0]
   d798c:	6859      	ldr	r1, [r3, #4]
   d798e:	4632      	mov	r2, r6
   d7990:	c203      	stmia	r2!, {r0, r1}
   d7992:	3308      	adds	r3, #8
   d7994:	42bb      	cmp	r3, r7
   d7996:	4616      	mov	r6, r2
   d7998:	d1f7      	bne.n	d798a <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   d799a:	e7d8      	b.n	d794e <_ZN9TCPClient7connectE9IPAddresstm+0xa8>

000d799c <_ZN9TCPClient9availableEv>:
{
   d799c:	b530      	push	{r4, r5, lr}
   d799e:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   d79a0:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   d79a4:	b08b      	sub	sp, #44	; 0x2c
   d79a6:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   d79a8:	b12b      	cbz	r3, d79b6 <_ZN9TCPClient9availableEv+0x1a>
   d79aa:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d79ae:	429a      	cmp	r2, r3
   d79b0:	d101      	bne.n	d79b6 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   d79b2:	f7ff ff70 	bl	d7896 <_ZN9TCPClient12flush_bufferEv>
   d79b6:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   d79b8:	6808      	ldr	r0, [r1, #0]
   d79ba:	2800      	cmp	r0, #0
   d79bc:	db18      	blt.n	d79f0 <_ZN9TCPClient9availableEv+0x54>
   d79be:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
        if (d_->total < arraySize(d_->buffer)) {
   d79c2:	2d7f      	cmp	r5, #127	; 0x7f
   d79c4:	d814      	bhi.n	d79f0 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d79c6:	3104      	adds	r1, #4
   d79c8:	2308      	movs	r3, #8
   d79ca:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d79ce:	4429      	add	r1, r5
   d79d0:	f7fd ff3e 	bl	d5850 <sock_recv>
            if (ret > 0) {
   d79d4:	2800      	cmp	r0, #0
   d79d6:	dd13      	ble.n	d7a00 <_ZN9TCPClient9availableEv+0x64>
   d79d8:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d79da:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d79de:	b90a      	cbnz	r2, d79e4 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   d79e0:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d79e4:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   d79e6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d79ea:	4410      	add	r0, r2
   d79ec:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   d79f0:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   d79f2:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   d79f6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   d79fa:	1ac0      	subs	r0, r0, r3
   d79fc:	b00b      	add	sp, #44	; 0x2c
   d79fe:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d7a00:	f7fe f83a 	bl	d5a78 <__errno>
   d7a04:	6803      	ldr	r3, [r0, #0]
   d7a06:	2b0b      	cmp	r3, #11
   d7a08:	d0f2      	beq.n	d79f0 <_ZN9TCPClient9availableEv+0x54>
   d7a0a:	f7fe f835 	bl	d5a78 <__errno>
   d7a0e:	6803      	ldr	r3, [r0, #0]
   d7a10:	2b0b      	cmp	r3, #11
   d7a12:	d0ed      	beq.n	d79f0 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   d7a14:	2320      	movs	r3, #32
   d7a16:	2500      	movs	r5, #0
   d7a18:	e9cd 3502 	strd	r3, r5, [sp, #8]
   d7a1c:	f7fe f82c 	bl	d5a78 <__errno>
   d7a20:	6803      	ldr	r3, [r0, #0]
   d7a22:	9301      	str	r3, [sp, #4]
   d7a24:	4b08      	ldr	r3, [pc, #32]	; (d7a48 <_ZN9TCPClient9availableEv+0xac>)
   d7a26:	4909      	ldr	r1, [pc, #36]	; (d7a4c <_ZN9TCPClient9availableEv+0xb0>)
   d7a28:	9300      	str	r3, [sp, #0]
   d7a2a:	aa02      	add	r2, sp, #8
   d7a2c:	462b      	mov	r3, r5
   d7a2e:	2032      	movs	r0, #50	; 0x32
   d7a30:	f7fd ff66 	bl	d5900 <log_message>
                    sock_close(d_->sock);
   d7a34:	6963      	ldr	r3, [r4, #20]
   d7a36:	6818      	ldr	r0, [r3, #0]
   d7a38:	f7fd fefa 	bl	d5830 <sock_close>
   d7a3c:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d7a3e:	f04f 32ff 	mov.w	r2, #4294967295
   d7a42:	601a      	str	r2, [r3, #0]
   d7a44:	e7d4      	b.n	d79f0 <_ZN9TCPClient9availableEv+0x54>
   d7a46:	bf00      	nop
   d7a48:	000d88f3 	.word	0x000d88f3
   d7a4c:	000d88ec 	.word	0x000d88ec

000d7a50 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   d7a50:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d7a52:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   d7a54:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d7a56:	6818      	ldr	r0, [r3, #0]
   d7a58:	2800      	cmp	r0, #0
   d7a5a:	db01      	blt.n	d7a60 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d7a5c:	f7fd fee8 	bl	d5830 <sock_close>
   d7a60:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   d7a62:	f04f 32ff 	mov.w	r2, #4294967295
   d7a66:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   d7a68:	6960      	ldr	r0, [r4, #20]
   d7a6a:	2211      	movs	r2, #17
   d7a6c:	2100      	movs	r1, #0
   d7a6e:	308c      	adds	r0, #140	; 0x8c
   d7a70:	f000 fb62 	bl	d8138 <memset>
    flush_buffer();
   d7a74:	4620      	mov	r0, r4
}
   d7a76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   d7a7a:	f7ff bf0c 	b.w	d7896 <_ZN9TCPClient12flush_bufferEv>

000d7a7e <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   d7a7e:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d7a80:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   d7a82:	4604      	mov	r4, r0
          total(0) {
   d7a84:	6001      	str	r1, [r0, #0]
   d7a86:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   d7a8a:	3088      	adds	r0, #136	; 0x88
   d7a8c:	f7ff fc32 	bl	d72f4 <_ZN9IPAddressC1Ev>
}
   d7a90:	4620      	mov	r0, r4
   d7a92:	bd10      	pop	{r4, pc}

000d7a94 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   d7a94:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d7a96:	2300      	movs	r3, #0
   d7a98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7a9c:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   d7aa0:	4a0e      	ldr	r2, [pc, #56]	; (d7adc <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   d7aa2:	6103      	str	r3, [r0, #16]
   d7aa4:	6002      	str	r2, [r0, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d7aa6:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   d7aa8:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d7aaa:	20ac      	movs	r0, #172	; 0xac
   d7aac:	9101      	str	r1, [sp, #4]
   d7aae:	f7fc faf0 	bl	d4092 <_Znwj>
	  auto __pi = ::new (__mem)
   d7ab2:	1e05      	subs	r5, r0, #0
   d7ab4:	f105 060c 	add.w	r6, r5, #12
   d7ab8:	d008      	beq.n	d7acc <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   d7aba:	2301      	movs	r3, #1
   d7abc:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   d7ac0:	4b07      	ldr	r3, [pc, #28]	; (d7ae0 <_ZN9TCPClientC1Ei+0x4c>)
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d7ac2:	9901      	ldr	r1, [sp, #4]
   d7ac4:	602b      	str	r3, [r5, #0]
   d7ac6:	4630      	mov	r0, r6
   d7ac8:	f7ff ffd9 	bl	d7a7e <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   d7acc:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   d7ace:	e9c4 6505 	strd	r6, r5, [r4, #20]
   d7ad2:	f7ff fee0 	bl	d7896 <_ZN9TCPClient12flush_bufferEv>
}
   d7ad6:	b002      	add	sp, #8
   d7ad8:	bd70      	pop	{r4, r5, r6, pc}
   d7ada:	bf00      	nop
   d7adc:	000d8928 	.word	0x000d8928
   d7ae0:	000d890c 	.word	0x000d890c

000d7ae4 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   d7ae4:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d7ae6:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   d7aea:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d7aec:	f7ff ffd2 	bl	d7a94 <_ZN9TCPClientC1Ei>
}
   d7af0:	4620      	mov	r0, r4
   d7af2:	bd10      	pop	{r4, pc}

000d7af4 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   d7af4:	b510      	push	{r4, lr}
   d7af6:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d7af8:	6800      	ldr	r0, [r0, #0]
   d7afa:	2800      	cmp	r0, #0
   d7afc:	db01      	blt.n	d7b02 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d7afe:	f7fd fe97 	bl	d5830 <sock_close>
    }
}
   d7b02:	4620      	mov	r0, r4
   d7b04:	bd10      	pop	{r4, pc}

000d7b06 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
   d7b06:	300c      	adds	r0, #12
   d7b08:	f7ff bff4 	b.w	d7af4 <_ZN9TCPClient4DataD1Ev>

000d7b0c <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d7b0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7b10:	4698      	mov	r8, r3
    stop();
   d7b12:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d7b14:	b093      	sub	sp, #76	; 0x4c
   d7b16:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   d7b18:	2400      	movs	r4, #0
    stop();
   d7b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d7b1c:	4606      	mov	r6, r0
   d7b1e:	4617      	mov	r7, r2
    stop();
   d7b20:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d7b22:	4628      	mov	r0, r5
   d7b24:	466b      	mov	r3, sp
   d7b26:	4622      	mov	r2, r4
   d7b28:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   d7b2a:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d7b2c:	f7fd fd1e 	bl	d556c <netdb_getaddrinfo>
   d7b30:	4605      	mov	r5, r0
   d7b32:	2800      	cmp	r0, #0
   d7b34:	d163      	bne.n	d7bfe <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   d7b36:	9b00      	ldr	r3, [sp, #0]
   d7b38:	2b00      	cmp	r3, #0
   d7b3a:	d04b      	beq.n	d7bd4 <_ZN9TCPClient7connectEPKctm+0xc8>
   d7b3c:	695b      	ldr	r3, [r3, #20]
   d7b3e:	2b00      	cmp	r3, #0
   d7b40:	d048      	beq.n	d7bd4 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   d7b42:	a806      	add	r0, sp, #24
   d7b44:	f7ff fbd6 	bl	d72f4 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d7b48:	9b00      	ldr	r3, [sp, #0]
   d7b4a:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d7b4c:	7863      	ldrb	r3, [r4, #1]
   d7b4e:	2b02      	cmp	r3, #2
   d7b50:	d104      	bne.n	d7b5c <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d7b52:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d7b54:	a806      	add	r0, sp, #24
   d7b56:	f7fe f80b 	bl	d5b70 <_ZN9IPAddressaSIPKhEERS_T_>
        }
        if (port) {
   d7b5a:	e026      	b.n	d7baa <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   d7b5c:	2b0a      	cmp	r3, #10
   d7b5e:	d124      	bne.n	d7baa <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   d7b60:	2211      	movs	r2, #17
   d7b62:	4629      	mov	r1, r5
   d7b64:	a801      	add	r0, sp, #4
   d7b66:	f000 fae7 	bl	d8138 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d7b6a:	68a3      	ldr	r3, [r4, #8]
   d7b6c:	2b00      	cmp	r3, #0
   d7b6e:	d038      	beq.n	d7be2 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7b70:	f104 0308 	add.w	r3, r4, #8
   d7b74:	f10d 0c04 	add.w	ip, sp, #4
   d7b78:	3418      	adds	r4, #24
   d7b7a:	6818      	ldr	r0, [r3, #0]
   d7b7c:	6859      	ldr	r1, [r3, #4]
   d7b7e:	4662      	mov	r2, ip
   d7b80:	c203      	stmia	r2!, {r0, r1}
   d7b82:	3308      	adds	r3, #8
   d7b84:	42a3      	cmp	r3, r4
   d7b86:	4694      	mov	ip, r2
   d7b88:	d1f7      	bne.n	d7b7a <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   d7b8a:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d7b8c:	a901      	add	r1, sp, #4
   d7b8e:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   d7b90:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d7b94:	f7ff fbbc 	bl	d7310 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
class IPAddress : public Printable {
   d7b98:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   d7b9c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d7ba0:	ac07      	add	r4, sp, #28
   d7ba2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7ba4:	f8dc 3000 	ldr.w	r3, [ip]
   d7ba8:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   d7baa:	a806      	add	r0, sp, #24
   d7bac:	f7ff fbc2 	bl	d7334 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d7bb0:	b180      	cbz	r0, d7bd4 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   d7bb2:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   d7bb4:	ad07      	add	r5, sp, #28
   d7bb6:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d7bba:	4b12      	ldr	r3, [pc, #72]	; (d7c04 <_ZN9TCPClient7connectEPKctm+0xf8>)
   d7bbc:	930c      	str	r3, [sp, #48]	; 0x30
   d7bbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7bc0:	ac0d      	add	r4, sp, #52	; 0x34
   d7bc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7bc4:	682b      	ldr	r3, [r5, #0]
   d7bc6:	7023      	strb	r3, [r4, #0]
   d7bc8:	463a      	mov	r2, r7
   d7bca:	4643      	mov	r3, r8
   d7bcc:	a90c      	add	r1, sp, #48	; 0x30
   d7bce:	4630      	mov	r0, r6
   d7bd0:	47c8      	blx	r9
   d7bd2:	4605      	mov	r5, r0
    SCOPE_GUARD({
   d7bd4:	9800      	ldr	r0, [sp, #0]
   d7bd6:	f7fd fcc1 	bl	d555c <netdb_freeaddrinfo>
}
   d7bda:	4628      	mov	r0, r5
   d7bdc:	b013      	add	sp, #76	; 0x4c
   d7bde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d7be2:	68e3      	ldr	r3, [r4, #12]
   d7be4:	2b00      	cmp	r3, #0
   d7be6:	d1c3      	bne.n	d7b70 <_ZN9TCPClient7connectEPKctm+0x64>
   d7be8:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d7bec:	f8d4 9010 	ldr.w	r9, [r4, #16]
   d7bf0:	f7fd fd86 	bl	d5700 <inet_htonl>
   d7bf4:	4581      	cmp	r9, r0
   d7bf6:	d1bb      	bne.n	d7b70 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   d7bf8:	f104 0114 	add.w	r1, r4, #20
   d7bfc:	e7aa      	b.n	d7b54 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d7bfe:	4625      	mov	r5, r4
   d7c00:	e7e8      	b.n	d7bd4 <_ZN9TCPClient7connectEPKctm+0xc8>
   d7c02:	bf00      	nop
   d7c04:	000d8858 	.word	0x000d8858

000d7c08 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d7c08:	2200      	movs	r2, #0
   d7c0a:	6840      	ldr	r0, [r0, #4]
   d7c0c:	4611      	mov	r1, r2
   d7c0e:	f7fd bebb 	b.w	d5988 <network_ready>

000d7c12 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7c12:	2200      	movs	r2, #0
   d7c14:	6840      	ldr	r0, [r0, #4]
   d7c16:	4611      	mov	r1, r2
   d7c18:	f7fd bed6 	b.w	d59c8 <network_listening>

000d7c1c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d7c1c:	2200      	movs	r2, #0
   d7c1e:	6840      	ldr	r0, [r0, #4]
   d7c20:	4611      	mov	r1, r2
   d7c22:	f7fd bee1 	b.w	d59e8 <network_get_listen_timeout>

000d7c26 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d7c26:	6840      	ldr	r0, [r0, #4]
   d7c28:	2200      	movs	r2, #0
   d7c2a:	f7fd bed5 	b.w	d59d8 <network_set_listen_timeout>

000d7c2e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d7c2e:	6840      	ldr	r0, [r0, #4]
   d7c30:	2200      	movs	r2, #0
   d7c32:	f081 0101 	eor.w	r1, r1, #1
   d7c36:	f7fd bebf 	b.w	d59b8 <network_listen>

000d7c3a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d7c3a:	2300      	movs	r3, #0
   d7c3c:	6840      	ldr	r0, [r0, #4]
   d7c3e:	461a      	mov	r2, r3
   d7c40:	4619      	mov	r1, r3
   d7c42:	f7fd beb1 	b.w	d59a8 <network_off>

000d7c46 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d7c46:	2200      	movs	r2, #0
   d7c48:	6840      	ldr	r0, [r0, #4]
   d7c4a:	4611      	mov	r1, r2
   d7c4c:	f7fd be8c 	b.w	d5968 <network_connecting>

000d7c50 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7c50:	6840      	ldr	r0, [r0, #4]
   d7c52:	2200      	movs	r2, #0
   d7c54:	2102      	movs	r1, #2
   d7c56:	f7fd be8f 	b.w	d5978 <network_disconnect>

000d7c5a <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d7c5a:	2300      	movs	r3, #0
   d7c5c:	6840      	ldr	r0, [r0, #4]
   d7c5e:	461a      	mov	r2, r3
   d7c60:	f7fd be7a 	b.w	d5958 <network_connect>

000d7c64 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d7c64:	4b02      	ldr	r3, [pc, #8]	; (d7c70 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d7c66:	2204      	movs	r2, #4
   d7c68:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d7c6a:	4a02      	ldr	r2, [pc, #8]	; (d7c74 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d7c6c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d7c6e:	4770      	bx	lr
   d7c70:	2003e7c4 	.word	0x2003e7c4
   d7c74:	000d8974 	.word	0x000d8974

000d7c78 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d7c78:	2300      	movs	r3, #0
   d7c7a:	6840      	ldr	r0, [r0, #4]
   d7c7c:	461a      	mov	r2, r3
   d7c7e:	f7fd be6b 	b.w	d5958 <network_connect>

000d7c82 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d7c82:	6840      	ldr	r0, [r0, #4]
   d7c84:	2200      	movs	r2, #0
   d7c86:	2102      	movs	r1, #2
   d7c88:	f7fd be76 	b.w	d5978 <network_disconnect>

000d7c8c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d7c8c:	2200      	movs	r2, #0
   d7c8e:	6840      	ldr	r0, [r0, #4]
   d7c90:	4611      	mov	r1, r2
   d7c92:	f7fd be69 	b.w	d5968 <network_connecting>

000d7c96 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d7c96:	2200      	movs	r2, #0
   d7c98:	6840      	ldr	r0, [r0, #4]
   d7c9a:	4611      	mov	r1, r2
   d7c9c:	f7fd be74 	b.w	d5988 <network_ready>

000d7ca0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d7ca0:	2300      	movs	r3, #0
   d7ca2:	6840      	ldr	r0, [r0, #4]
   d7ca4:	461a      	mov	r2, r3
   d7ca6:	4619      	mov	r1, r3
   d7ca8:	f7fd be76 	b.w	d5998 <network_on>

000d7cac <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d7cac:	2300      	movs	r3, #0
   d7cae:	6840      	ldr	r0, [r0, #4]
   d7cb0:	461a      	mov	r2, r3
   d7cb2:	4619      	mov	r1, r3
   d7cb4:	f7fd be78 	b.w	d59a8 <network_off>

000d7cb8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d7cb8:	6840      	ldr	r0, [r0, #4]
   d7cba:	2100      	movs	r1, #0
   d7cbc:	f7fd be9c 	b.w	d59f8 <network_is_on>

000d7cc0 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d7cc0:	6840      	ldr	r0, [r0, #4]
   d7cc2:	2100      	movs	r1, #0
   d7cc4:	f7fd bea0 	b.w	d5a08 <network_is_off>

000d7cc8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d7cc8:	6840      	ldr	r0, [r0, #4]
   d7cca:	2200      	movs	r2, #0
   d7ccc:	f081 0101 	eor.w	r1, r1, #1
   d7cd0:	f7fd be72 	b.w	d59b8 <network_listen>

000d7cd4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d7cd4:	6840      	ldr	r0, [r0, #4]
   d7cd6:	2200      	movs	r2, #0
   d7cd8:	f7fd be7e 	b.w	d59d8 <network_set_listen_timeout>

000d7cdc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d7cdc:	2200      	movs	r2, #0
   d7cde:	6840      	ldr	r0, [r0, #4]
   d7ce0:	4611      	mov	r1, r2
   d7ce2:	f7fd be81 	b.w	d59e8 <network_get_listen_timeout>

000d7ce6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d7ce6:	2200      	movs	r2, #0
   d7ce8:	6840      	ldr	r0, [r0, #4]
   d7cea:	4611      	mov	r1, r2
   d7cec:	f7fd be6c 	b.w	d59c8 <network_listening>

000d7cf0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d7cf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7cf4:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d7cf6:	b095      	sub	sp, #84	; 0x54
   d7cf8:	4616      	mov	r6, r2
   d7cfa:	460d      	mov	r5, r1
   d7cfc:	4607      	mov	r7, r0
    IPAddress addr;
   d7cfe:	f7ff faf9 	bl	d72f4 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d7d02:	4621      	mov	r1, r4
   d7d04:	2218      	movs	r2, #24
   d7d06:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d7d08:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d7d0a:	f000 fa15 	bl	d8138 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d7d0e:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d7d10:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d7d14:	4621      	mov	r1, r4
   d7d16:	466b      	mov	r3, sp
   d7d18:	aa0c      	add	r2, sp, #48	; 0x30
   d7d1a:	4630      	mov	r0, r6
   d7d1c:	f7fd fc26 	bl	d556c <netdb_getaddrinfo>
    if (!r) {
   d7d20:	4604      	mov	r4, r0
   d7d22:	2800      	cmp	r0, #0
   d7d24:	d14c      	bne.n	d7dc0 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7d26:	4602      	mov	r2, r0
   d7d28:	2101      	movs	r1, #1
   d7d2a:	6868      	ldr	r0, [r5, #4]
   d7d2c:	f7fd fe2c 	bl	d5988 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7d30:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7d32:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7d34:	4622      	mov	r2, r4
   d7d36:	6868      	ldr	r0, [r5, #4]
   d7d38:	f7fd fe26 	bl	d5988 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7d3c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7d3e:	4681      	mov	r9, r0
        bool ok = false;
   d7d40:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7d42:	2e00      	cmp	r6, #0
   d7d44:	d03c      	beq.n	d7dc0 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d7d46:	2900      	cmp	r1, #0
   d7d48:	d13a      	bne.n	d7dc0 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d7d4a:	6873      	ldr	r3, [r6, #4]
   d7d4c:	2b02      	cmp	r3, #2
   d7d4e:	d003      	beq.n	d7d58 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d7d50:	2b0a      	cmp	r3, #10
   d7d52:	d011      	beq.n	d7d78 <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7d54:	69f6      	ldr	r6, [r6, #28]
   d7d56:	e7f4      	b.n	d7d42 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d7d58:	f1b8 0f00 	cmp.w	r8, #0
   d7d5c:	d00a      	beq.n	d7d74 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d7d5e:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d7d60:	a806      	add	r0, sp, #24
   d7d62:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d7d64:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d7d66:	f7ff fb09 	bl	d737c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d7d6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7d6c:	1d3c      	adds	r4, r7, #4
   d7d6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7d70:	682b      	ldr	r3, [r5, #0]
   d7d72:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d7d74:	4641      	mov	r1, r8
   d7d76:	e7ed      	b.n	d7d54 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d7d78:	f1b9 0f00 	cmp.w	r9, #0
   d7d7c:	d101      	bne.n	d7d82 <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d7d7e:	4649      	mov	r1, r9
   d7d80:	e7e8      	b.n	d7d54 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d7d82:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d7d84:	2210      	movs	r2, #16
   d7d86:	a801      	add	r0, sp, #4
   d7d88:	f000 f9d6 	bl	d8138 <memset>
                    a.v = 6;
   d7d8c:	2306      	movs	r3, #6
   d7d8e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7d92:	ad01      	add	r5, sp, #4
   d7d94:	f104 0308 	add.w	r3, r4, #8
   d7d98:	3418      	adds	r4, #24
   d7d9a:	6818      	ldr	r0, [r3, #0]
   d7d9c:	6859      	ldr	r1, [r3, #4]
   d7d9e:	462a      	mov	r2, r5
   d7da0:	c203      	stmia	r2!, {r0, r1}
   d7da2:	3308      	adds	r3, #8
   d7da4:	42a3      	cmp	r3, r4
   d7da6:	4615      	mov	r5, r2
   d7da8:	d1f7      	bne.n	d7d9a <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d7daa:	a901      	add	r1, sp, #4
   d7dac:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d7dae:	ad07      	add	r5, sp, #28
   d7db0:	f7ff faae 	bl	d7310 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d7db4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7db6:	1d3c      	adds	r4, r7, #4
   d7db8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7dba:	682b      	ldr	r3, [r5, #0]
   d7dbc:	7023      	strb	r3, [r4, #0]
   d7dbe:	e7de      	b.n	d7d7e <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d7dc0:	9800      	ldr	r0, [sp, #0]
   d7dc2:	f7fd fbcb 	bl	d555c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d7dc6:	4638      	mov	r0, r7
   d7dc8:	b015      	add	sp, #84	; 0x54
   d7dca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d7dd0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d7dd0:	4b02      	ldr	r3, [pc, #8]	; (d7ddc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d7dd2:	4a03      	ldr	r2, [pc, #12]	; (d7de0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d7dd4:	601a      	str	r2, [r3, #0]
   d7dd6:	2200      	movs	r2, #0
   d7dd8:	605a      	str	r2, [r3, #4]

} // spark
   d7dda:	4770      	bx	lr
   d7ddc:	2003e7cc 	.word	0x2003e7cc
   d7de0:	000d89b0 	.word	0x000d89b0

000d7de4 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d7de4:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d7de6:	2300      	movs	r3, #0
   d7de8:	2520      	movs	r5, #32
   d7dea:	8043      	strh	r3, [r0, #2]
   d7dec:	2314      	movs	r3, #20
{
   d7dee:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d7df0:	8003      	strh	r3, [r0, #0]
   d7df2:	6085      	str	r5, [r0, #8]
   d7df4:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7df6:	4906      	ldr	r1, [pc, #24]	; (d7e10 <_Z17acquireWireBufferv+0x2c>)
   d7df8:	4628      	mov	r0, r5
   d7dfa:	f000 f83a 	bl	d7e72 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7dfe:	4904      	ldr	r1, [pc, #16]	; (d7e10 <_Z17acquireWireBufferv+0x2c>)
	};
   d7e00:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7e02:	4628      	mov	r0, r5
   d7e04:	f000 f835 	bl	d7e72 <_ZnajRKSt9nothrow_t>
	};
   d7e08:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d7e0a:	4620      	mov	r0, r4
   d7e0c:	bd38      	pop	{r3, r4, r5, pc}
   d7e0e:	bf00      	nop
   d7e10:	000d89e4 	.word	0x000d89e4

000d7e14 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d7e14:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7e16:	4d0f      	ldr	r5, [pc, #60]	; (d7e54 <_Z19__fetch_global_Wirev+0x40>)
   d7e18:	7829      	ldrb	r1, [r5, #0]
   d7e1a:	f3bf 8f5b 	dmb	ish
   d7e1e:	f011 0401 	ands.w	r4, r1, #1
{
   d7e22:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7e24:	d113      	bne.n	d7e4e <_Z19__fetch_global_Wirev+0x3a>
   d7e26:	4628      	mov	r0, r5
   d7e28:	f7fc f939 	bl	d409e <__cxa_guard_acquire>
   d7e2c:	b178      	cbz	r0, d7e4e <_Z19__fetch_global_Wirev+0x3a>
   d7e2e:	a801      	add	r0, sp, #4
   d7e30:	f7ff ffd8 	bl	d7de4 <_Z17acquireWireBufferv>
   d7e34:	aa01      	add	r2, sp, #4
   d7e36:	4621      	mov	r1, r4
   d7e38:	4807      	ldr	r0, [pc, #28]	; (d7e58 <_Z19__fetch_global_Wirev+0x44>)
   d7e3a:	f7ff fbdf 	bl	d75fc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d7e3e:	4628      	mov	r0, r5
   d7e40:	f7fc f932 	bl	d40a8 <__cxa_guard_release>
   d7e44:	4a05      	ldr	r2, [pc, #20]	; (d7e5c <_Z19__fetch_global_Wirev+0x48>)
   d7e46:	4906      	ldr	r1, [pc, #24]	; (d7e60 <_Z19__fetch_global_Wirev+0x4c>)
   d7e48:	4803      	ldr	r0, [pc, #12]	; (d7e58 <_Z19__fetch_global_Wirev+0x44>)
   d7e4a:	f000 f80b 	bl	d7e64 <__aeabi_atexit>
	return wire;
}
   d7e4e:	4802      	ldr	r0, [pc, #8]	; (d7e58 <_Z19__fetch_global_Wirev+0x44>)
   d7e50:	b007      	add	sp, #28
   d7e52:	bd30      	pop	{r4, r5, pc}
   d7e54:	2003e7d8 	.word	0x2003e7d8
   d7e58:	2003e7dc 	.word	0x2003e7dc
   d7e5c:	20034510 	.word	0x20034510
   d7e60:	000d75a5 	.word	0x000d75a5

000d7e64 <__aeabi_atexit>:
   d7e64:	460b      	mov	r3, r1
   d7e66:	4601      	mov	r1, r0
   d7e68:	4618      	mov	r0, r3
   d7e6a:	f000 b921 	b.w	d80b0 <__cxa_atexit>

000d7e6e <_ZdlPvj>:
   d7e6e:	f7fc b914 	b.w	d409a <_ZdlPv>

000d7e72 <_ZnajRKSt9nothrow_t>:
   d7e72:	f7fc b910 	b.w	d4096 <_Znaj>

000d7e76 <_ZSt25__throw_bad_function_callv>:
   d7e76:	b508      	push	{r3, lr}
   d7e78:	f7fd fdf6 	bl	d5a68 <abort>

000d7e7c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   d7e7c:	4901      	ldr	r1, [pc, #4]	; (d7e84 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   d7e7e:	f000 b8f9 	b.w	d8074 <_ZNKSt9type_infoeqERKS_>
   d7e82:	bf00      	nop
   d7e84:	000d8a00 	.word	0x000d8a00

000d7e88 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   d7e88:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d7e8a:	2400      	movs	r4, #0
   d7e8c:	2310      	movs	r3, #16
   d7e8e:	e9cd 3402 	strd	r3, r4, [sp, #8]
   d7e92:	6803      	ldr	r3, [r0, #0]
   d7e94:	9400      	str	r4, [sp, #0]
   d7e96:	699e      	ldr	r6, [r3, #24]
   d7e98:	f88d 4004 	strb.w	r4, [sp, #4]
   d7e9c:	4615      	mov	r5, r2
   d7e9e:	466b      	mov	r3, sp
   d7ea0:	6812      	ldr	r2, [r2, #0]
   d7ea2:	47b0      	blx	r6
   d7ea4:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d7ea8:	f003 0306 	and.w	r3, r3, #6
   d7eac:	2b06      	cmp	r3, #6
   d7eae:	bf03      	ittte	eq
   d7eb0:	9b00      	ldreq	r3, [sp, #0]
   d7eb2:	602b      	streq	r3, [r5, #0]
   d7eb4:	2001      	moveq	r0, #1
   d7eb6:	4620      	movne	r0, r4
   d7eb8:	b004      	add	sp, #16
   d7eba:	bd70      	pop	{r4, r5, r6, pc}

000d7ebc <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   d7ebc:	9800      	ldr	r0, [sp, #0]
   d7ebe:	4290      	cmp	r0, r2
   d7ec0:	bf14      	ite	ne
   d7ec2:	2001      	movne	r0, #1
   d7ec4:	2006      	moveq	r0, #6
   d7ec6:	4770      	bx	lr

000d7ec8 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   d7ec8:	b510      	push	{r4, lr}
   d7eca:	4b03      	ldr	r3, [pc, #12]	; (d7ed8 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   d7ecc:	6003      	str	r3, [r0, #0]
   d7ece:	4604      	mov	r4, r0
   d7ed0:	f000 f8cd 	bl	d806e <_ZNSt9type_infoD1Ev>
   d7ed4:	4620      	mov	r0, r4
   d7ed6:	bd10      	pop	{r4, pc}
   d7ed8:	000d8a40 	.word	0x000d8a40

000d7edc <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   d7edc:	b510      	push	{r4, lr}
   d7ede:	4604      	mov	r4, r0
   d7ee0:	f7ff fff2 	bl	d7ec8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d7ee4:	4620      	mov	r0, r4
   d7ee6:	2108      	movs	r1, #8
   d7ee8:	f7ff ffc1 	bl	d7e6e <_ZdlPvj>
   d7eec:	4620      	mov	r0, r4
   d7eee:	bd10      	pop	{r4, pc}

000d7ef0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   d7ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7ef4:	461f      	mov	r7, r3
   d7ef6:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   d7efa:	f8dd 8018 	ldr.w	r8, [sp, #24]
   d7efe:	4598      	cmp	r8, r3
   d7f00:	4606      	mov	r6, r0
   d7f02:	4615      	mov	r5, r2
   d7f04:	d107      	bne.n	d7f16 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d7f06:	9907      	ldr	r1, [sp, #28]
   d7f08:	f000 f8b4 	bl	d8074 <_ZNKSt9type_infoeqERKS_>
   d7f0c:	b118      	cbz	r0, d7f16 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d7f0e:	7165      	strb	r5, [r4, #5]
   d7f10:	2000      	movs	r0, #0
   d7f12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7f16:	4639      	mov	r1, r7
   d7f18:	4630      	mov	r0, r6
   d7f1a:	f000 f8ab 	bl	d8074 <_ZNKSt9type_infoeqERKS_>
   d7f1e:	2800      	cmp	r0, #0
   d7f20:	d0f6      	beq.n	d7f10 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   d7f22:	2301      	movs	r3, #1
   d7f24:	f8c4 8000 	str.w	r8, [r4]
   d7f28:	7125      	strb	r5, [r4, #4]
   d7f2a:	71a3      	strb	r3, [r4, #6]
   d7f2c:	e7f0      	b.n	d7f10 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000d7f2e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   d7f2e:	b538      	push	{r3, r4, r5, lr}
   d7f30:	4615      	mov	r5, r2
   d7f32:	461c      	mov	r4, r3
   d7f34:	f000 f89e 	bl	d8074 <_ZNKSt9type_infoeqERKS_>
   d7f38:	b120      	cbz	r0, d7f44 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   d7f3a:	2308      	movs	r3, #8
   d7f3c:	60e3      	str	r3, [r4, #12]
   d7f3e:	2306      	movs	r3, #6
   d7f40:	6025      	str	r5, [r4, #0]
   d7f42:	7123      	strb	r3, [r4, #4]
   d7f44:	bd38      	pop	{r3, r4, r5, pc}

000d7f46 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   d7f46:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d7f48:	4605      	mov	r5, r0
   d7f4a:	460c      	mov	r4, r1
   d7f4c:	9201      	str	r2, [sp, #4]
   d7f4e:	461e      	mov	r6, r3
   d7f50:	f000 f890 	bl	d8074 <_ZNKSt9type_infoeqERKS_>
   d7f54:	b950      	cbnz	r0, d7f6c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d7f56:	2e03      	cmp	r6, #3
   d7f58:	d808      	bhi.n	d7f6c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d7f5a:	6823      	ldr	r3, [r4, #0]
   d7f5c:	9a01      	ldr	r2, [sp, #4]
   d7f5e:	695b      	ldr	r3, [r3, #20]
   d7f60:	4629      	mov	r1, r5
   d7f62:	4620      	mov	r0, r4
   d7f64:	b002      	add	sp, #8
   d7f66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d7f6a:	4718      	bx	r3
   d7f6c:	b002      	add	sp, #8
   d7f6e:	bd70      	pop	{r4, r5, r6, pc}

000d7f70 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   d7f70:	b510      	push	{r4, lr}
   d7f72:	4b03      	ldr	r3, [pc, #12]	; (d7f80 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   d7f74:	6003      	str	r3, [r0, #0]
   d7f76:	4604      	mov	r4, r0
   d7f78:	f7ff ffa6 	bl	d7ec8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d7f7c:	4620      	mov	r0, r4
   d7f7e:	bd10      	pop	{r4, pc}
   d7f80:	000d8aa0 	.word	0x000d8aa0

000d7f84 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   d7f84:	b510      	push	{r4, lr}
   d7f86:	4604      	mov	r4, r0
   d7f88:	f7ff fff2 	bl	d7f70 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   d7f8c:	4620      	mov	r0, r4
   d7f8e:	210c      	movs	r1, #12
   d7f90:	f7ff ff6d 	bl	d7e6e <_ZdlPvj>
   d7f94:	4620      	mov	r0, r4
   d7f96:	bd10      	pop	{r4, pc}

000d7f98 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   d7f98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d7f9a:	9f08      	ldr	r7, [sp, #32]
   d7f9c:	4297      	cmp	r7, r2
   d7f9e:	4605      	mov	r5, r0
   d7fa0:	460e      	mov	r6, r1
   d7fa2:	4614      	mov	r4, r2
   d7fa4:	d00a      	beq.n	d7fbc <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   d7fa6:	68a8      	ldr	r0, [r5, #8]
   d7fa8:	6802      	ldr	r2, [r0, #0]
   d7faa:	9708      	str	r7, [sp, #32]
   d7fac:	6a15      	ldr	r5, [r2, #32]
   d7fae:	4631      	mov	r1, r6
   d7fb0:	4622      	mov	r2, r4
   d7fb2:	46ac      	mov	ip, r5
   d7fb4:	b003      	add	sp, #12
   d7fb6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d7fba:	4760      	bx	ip
   d7fbc:	4619      	mov	r1, r3
   d7fbe:	9301      	str	r3, [sp, #4]
   d7fc0:	f000 f858 	bl	d8074 <_ZNKSt9type_infoeqERKS_>
   d7fc4:	9b01      	ldr	r3, [sp, #4]
   d7fc6:	2800      	cmp	r0, #0
   d7fc8:	d0ed      	beq.n	d7fa6 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   d7fca:	2006      	movs	r0, #6
   d7fcc:	b003      	add	sp, #12
   d7fce:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7fd0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   d7fd0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7fd4:	460d      	mov	r5, r1
   d7fd6:	4619      	mov	r1, r3
   d7fd8:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   d7fdc:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   d7fe0:	4681      	mov	r9, r0
   d7fe2:	4617      	mov	r7, r2
   d7fe4:	4698      	mov	r8, r3
   d7fe6:	f000 f845 	bl	d8074 <_ZNKSt9type_infoeqERKS_>
   d7fea:	b190      	cbz	r0, d8012 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   d7fec:	2d00      	cmp	r5, #0
   d7fee:	6034      	str	r4, [r6, #0]
   d7ff0:	7137      	strb	r7, [r6, #4]
   d7ff2:	db09      	blt.n	d8008 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   d7ff4:	1961      	adds	r1, r4, r5
   d7ff6:	458a      	cmp	sl, r1
   d7ff8:	bf0c      	ite	eq
   d7ffa:	2106      	moveq	r1, #6
   d7ffc:	2101      	movne	r1, #1
   d7ffe:	71b1      	strb	r1, [r6, #6]
   d8000:	2000      	movs	r0, #0
   d8002:	b001      	add	sp, #4
   d8004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8008:	3502      	adds	r5, #2
   d800a:	d1f9      	bne.n	d8000 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d800c:	2301      	movs	r3, #1
   d800e:	71b3      	strb	r3, [r6, #6]
   d8010:	e7f6      	b.n	d8000 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d8012:	4554      	cmp	r4, sl
   d8014:	d106      	bne.n	d8024 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d8016:	4659      	mov	r1, fp
   d8018:	4648      	mov	r0, r9
   d801a:	f000 f82b 	bl	d8074 <_ZNKSt9type_infoeqERKS_>
   d801e:	b108      	cbz	r0, d8024 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d8020:	7177      	strb	r7, [r6, #5]
   d8022:	e7ed      	b.n	d8000 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d8024:	f8d9 0008 	ldr.w	r0, [r9, #8]
   d8028:	6803      	ldr	r3, [r0, #0]
   d802a:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   d802e:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   d8032:	69dc      	ldr	r4, [r3, #28]
   d8034:	463a      	mov	r2, r7
   d8036:	4643      	mov	r3, r8
   d8038:	4629      	mov	r1, r5
   d803a:	46a4      	mov	ip, r4
   d803c:	b001      	add	sp, #4
   d803e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8042:	4760      	bx	ip

000d8044 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   d8044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8048:	4607      	mov	r7, r0
   d804a:	460c      	mov	r4, r1
   d804c:	4615      	mov	r5, r2
   d804e:	461e      	mov	r6, r3
   d8050:	f7ff ff6d 	bl	d7f2e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   d8054:	b948      	cbnz	r0, d806a <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   d8056:	68b8      	ldr	r0, [r7, #8]
   d8058:	6803      	ldr	r3, [r0, #0]
   d805a:	699f      	ldr	r7, [r3, #24]
   d805c:	462a      	mov	r2, r5
   d805e:	4633      	mov	r3, r6
   d8060:	4621      	mov	r1, r4
   d8062:	46bc      	mov	ip, r7
   d8064:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d8068:	4760      	bx	ip
   d806a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d806e <_ZNSt9type_infoD1Ev>:
   d806e:	4770      	bx	lr

000d8070 <_ZNKSt9type_info14__is_pointer_pEv>:
   d8070:	2000      	movs	r0, #0
   d8072:	4770      	bx	lr

000d8074 <_ZNKSt9type_infoeqERKS_>:
   d8074:	4281      	cmp	r1, r0
   d8076:	b508      	push	{r3, lr}
   d8078:	d00e      	beq.n	d8098 <_ZNKSt9type_infoeqERKS_+0x24>
   d807a:	6840      	ldr	r0, [r0, #4]
   d807c:	7803      	ldrb	r3, [r0, #0]
   d807e:	2b2a      	cmp	r3, #42	; 0x2a
   d8080:	d00c      	beq.n	d809c <_ZNKSt9type_infoeqERKS_+0x28>
   d8082:	6849      	ldr	r1, [r1, #4]
   d8084:	780b      	ldrb	r3, [r1, #0]
   d8086:	2b2a      	cmp	r3, #42	; 0x2a
   d8088:	bf08      	it	eq
   d808a:	3101      	addeq	r1, #1
   d808c:	f000 f880 	bl	d8190 <strcmp>
   d8090:	fab0 f080 	clz	r0, r0
   d8094:	0940      	lsrs	r0, r0, #5
   d8096:	bd08      	pop	{r3, pc}
   d8098:	2001      	movs	r0, #1
   d809a:	e7fc      	b.n	d8096 <_ZNKSt9type_infoeqERKS_+0x22>
   d809c:	2000      	movs	r0, #0
   d809e:	e7fa      	b.n	d8096 <_ZNKSt9type_infoeqERKS_+0x22>

000d80a0 <atoi>:
   d80a0:	220a      	movs	r2, #10
   d80a2:	2100      	movs	r1, #0
   d80a4:	f000 b92c 	b.w	d8300 <strtol>

000d80a8 <atol>:
   d80a8:	220a      	movs	r2, #10
   d80aa:	2100      	movs	r1, #0
   d80ac:	f000 b928 	b.w	d8300 <strtol>

000d80b0 <__cxa_atexit>:
   d80b0:	b510      	push	{r4, lr}
   d80b2:	4c05      	ldr	r4, [pc, #20]	; (d80c8 <__cxa_atexit+0x18>)
   d80b4:	4613      	mov	r3, r2
   d80b6:	b12c      	cbz	r4, d80c4 <__cxa_atexit+0x14>
   d80b8:	460a      	mov	r2, r1
   d80ba:	4601      	mov	r1, r0
   d80bc:	2002      	movs	r0, #2
   d80be:	f3af 8000 	nop.w
   d80c2:	bd10      	pop	{r4, pc}
   d80c4:	4620      	mov	r0, r4
   d80c6:	e7fc      	b.n	d80c2 <__cxa_atexit+0x12>
   d80c8:	00000000 	.word	0x00000000

000d80cc <memcmp>:
   d80cc:	b530      	push	{r4, r5, lr}
   d80ce:	3901      	subs	r1, #1
   d80d0:	2400      	movs	r4, #0
   d80d2:	42a2      	cmp	r2, r4
   d80d4:	d101      	bne.n	d80da <memcmp+0xe>
   d80d6:	2000      	movs	r0, #0
   d80d8:	e005      	b.n	d80e6 <memcmp+0x1a>
   d80da:	5d03      	ldrb	r3, [r0, r4]
   d80dc:	3401      	adds	r4, #1
   d80de:	5d0d      	ldrb	r5, [r1, r4]
   d80e0:	42ab      	cmp	r3, r5
   d80e2:	d0f6      	beq.n	d80d2 <memcmp+0x6>
   d80e4:	1b58      	subs	r0, r3, r5
   d80e6:	bd30      	pop	{r4, r5, pc}

000d80e8 <memcpy>:
   d80e8:	440a      	add	r2, r1
   d80ea:	4291      	cmp	r1, r2
   d80ec:	f100 33ff 	add.w	r3, r0, #4294967295
   d80f0:	d100      	bne.n	d80f4 <memcpy+0xc>
   d80f2:	4770      	bx	lr
   d80f4:	b510      	push	{r4, lr}
   d80f6:	f811 4b01 	ldrb.w	r4, [r1], #1
   d80fa:	f803 4f01 	strb.w	r4, [r3, #1]!
   d80fe:	4291      	cmp	r1, r2
   d8100:	d1f9      	bne.n	d80f6 <memcpy+0xe>
   d8102:	bd10      	pop	{r4, pc}

000d8104 <memmove>:
   d8104:	4288      	cmp	r0, r1
   d8106:	b510      	push	{r4, lr}
   d8108:	eb01 0402 	add.w	r4, r1, r2
   d810c:	d902      	bls.n	d8114 <memmove+0x10>
   d810e:	4284      	cmp	r4, r0
   d8110:	4623      	mov	r3, r4
   d8112:	d807      	bhi.n	d8124 <memmove+0x20>
   d8114:	1e43      	subs	r3, r0, #1
   d8116:	42a1      	cmp	r1, r4
   d8118:	d008      	beq.n	d812c <memmove+0x28>
   d811a:	f811 2b01 	ldrb.w	r2, [r1], #1
   d811e:	f803 2f01 	strb.w	r2, [r3, #1]!
   d8122:	e7f8      	b.n	d8116 <memmove+0x12>
   d8124:	4402      	add	r2, r0
   d8126:	4601      	mov	r1, r0
   d8128:	428a      	cmp	r2, r1
   d812a:	d100      	bne.n	d812e <memmove+0x2a>
   d812c:	bd10      	pop	{r4, pc}
   d812e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d8132:	f802 4d01 	strb.w	r4, [r2, #-1]!
   d8136:	e7f7      	b.n	d8128 <memmove+0x24>

000d8138 <memset>:
   d8138:	4402      	add	r2, r0
   d813a:	4603      	mov	r3, r0
   d813c:	4293      	cmp	r3, r2
   d813e:	d100      	bne.n	d8142 <memset+0xa>
   d8140:	4770      	bx	lr
   d8142:	f803 1b01 	strb.w	r1, [r3], #1
   d8146:	e7f9      	b.n	d813c <memset+0x4>

000d8148 <srand>:
   d8148:	b538      	push	{r3, r4, r5, lr}
   d814a:	4b0d      	ldr	r3, [pc, #52]	; (d8180 <srand+0x38>)
   d814c:	681d      	ldr	r5, [r3, #0]
   d814e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d8150:	4604      	mov	r4, r0
   d8152:	b97b      	cbnz	r3, d8174 <srand+0x2c>
   d8154:	2018      	movs	r0, #24
   d8156:	f7fd fc67 	bl	d5a28 <malloc>
   d815a:	4a0a      	ldr	r2, [pc, #40]	; (d8184 <srand+0x3c>)
   d815c:	4b0a      	ldr	r3, [pc, #40]	; (d8188 <srand+0x40>)
   d815e:	63a8      	str	r0, [r5, #56]	; 0x38
   d8160:	e9c0 2300 	strd	r2, r3, [r0]
   d8164:	4b09      	ldr	r3, [pc, #36]	; (d818c <srand+0x44>)
   d8166:	6083      	str	r3, [r0, #8]
   d8168:	230b      	movs	r3, #11
   d816a:	8183      	strh	r3, [r0, #12]
   d816c:	2201      	movs	r2, #1
   d816e:	2300      	movs	r3, #0
   d8170:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d8174:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d8176:	2200      	movs	r2, #0
   d8178:	611c      	str	r4, [r3, #16]
   d817a:	615a      	str	r2, [r3, #20]
   d817c:	bd38      	pop	{r3, r4, r5, pc}
   d817e:	bf00      	nop
   d8180:	200344ac 	.word	0x200344ac
   d8184:	abcd330e 	.word	0xabcd330e
   d8188:	e66d1234 	.word	0xe66d1234
   d818c:	0005deec 	.word	0x0005deec

000d8190 <strcmp>:
   d8190:	f810 2b01 	ldrb.w	r2, [r0], #1
   d8194:	f811 3b01 	ldrb.w	r3, [r1], #1
   d8198:	2a01      	cmp	r2, #1
   d819a:	bf28      	it	cs
   d819c:	429a      	cmpcs	r2, r3
   d819e:	d0f7      	beq.n	d8190 <strcmp>
   d81a0:	1ad0      	subs	r0, r2, r3
   d81a2:	4770      	bx	lr

000d81a4 <strcpy>:
   d81a4:	4603      	mov	r3, r0
   d81a6:	f811 2b01 	ldrb.w	r2, [r1], #1
   d81aa:	f803 2b01 	strb.w	r2, [r3], #1
   d81ae:	2a00      	cmp	r2, #0
   d81b0:	d1f9      	bne.n	d81a6 <strcpy+0x2>
   d81b2:	4770      	bx	lr

000d81b4 <strlen>:
   d81b4:	4603      	mov	r3, r0
   d81b6:	f813 2b01 	ldrb.w	r2, [r3], #1
   d81ba:	2a00      	cmp	r2, #0
   d81bc:	d1fb      	bne.n	d81b6 <strlen+0x2>
   d81be:	1a18      	subs	r0, r3, r0
   d81c0:	3801      	subs	r0, #1
   d81c2:	4770      	bx	lr

000d81c4 <strnlen>:
   d81c4:	b510      	push	{r4, lr}
   d81c6:	4602      	mov	r2, r0
   d81c8:	4401      	add	r1, r0
   d81ca:	428a      	cmp	r2, r1
   d81cc:	4613      	mov	r3, r2
   d81ce:	d101      	bne.n	d81d4 <strnlen+0x10>
   d81d0:	1a18      	subs	r0, r3, r0
   d81d2:	bd10      	pop	{r4, pc}
   d81d4:	781c      	ldrb	r4, [r3, #0]
   d81d6:	3201      	adds	r2, #1
   d81d8:	2c00      	cmp	r4, #0
   d81da:	d1f6      	bne.n	d81ca <strnlen+0x6>
   d81dc:	e7f8      	b.n	d81d0 <strnlen+0xc>

000d81de <strstr>:
   d81de:	b5f0      	push	{r4, r5, r6, r7, lr}
   d81e0:	780c      	ldrb	r4, [r1, #0]
   d81e2:	b164      	cbz	r4, d81fe <strstr+0x20>
   d81e4:	4603      	mov	r3, r0
   d81e6:	781a      	ldrb	r2, [r3, #0]
   d81e8:	4618      	mov	r0, r3
   d81ea:	1c5e      	adds	r6, r3, #1
   d81ec:	b90a      	cbnz	r2, d81f2 <strstr+0x14>
   d81ee:	4610      	mov	r0, r2
   d81f0:	e005      	b.n	d81fe <strstr+0x20>
   d81f2:	4294      	cmp	r4, r2
   d81f4:	d108      	bne.n	d8208 <strstr+0x2a>
   d81f6:	460d      	mov	r5, r1
   d81f8:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   d81fc:	b902      	cbnz	r2, d8200 <strstr+0x22>
   d81fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8200:	f813 7f01 	ldrb.w	r7, [r3, #1]!
   d8204:	4297      	cmp	r7, r2
   d8206:	d0f7      	beq.n	d81f8 <strstr+0x1a>
   d8208:	4633      	mov	r3, r6
   d820a:	e7ec      	b.n	d81e6 <strstr+0x8>

000d820c <_strtol_l.isra.0>:
   d820c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8210:	4e3a      	ldr	r6, [pc, #232]	; (d82fc <_strtol_l.isra.0+0xf0>)
   d8212:	4686      	mov	lr, r0
   d8214:	468c      	mov	ip, r1
   d8216:	4660      	mov	r0, ip
   d8218:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d821c:	5da5      	ldrb	r5, [r4, r6]
   d821e:	f015 0508 	ands.w	r5, r5, #8
   d8222:	d1f8      	bne.n	d8216 <_strtol_l.isra.0+0xa>
   d8224:	2c2d      	cmp	r4, #45	; 0x2d
   d8226:	d133      	bne.n	d8290 <_strtol_l.isra.0+0x84>
   d8228:	f89c 4000 	ldrb.w	r4, [ip]
   d822c:	f04f 0801 	mov.w	r8, #1
   d8230:	f100 0c02 	add.w	ip, r0, #2
   d8234:	2b00      	cmp	r3, #0
   d8236:	d05c      	beq.n	d82f2 <_strtol_l.isra.0+0xe6>
   d8238:	2b10      	cmp	r3, #16
   d823a:	d10c      	bne.n	d8256 <_strtol_l.isra.0+0x4a>
   d823c:	2c30      	cmp	r4, #48	; 0x30
   d823e:	d10a      	bne.n	d8256 <_strtol_l.isra.0+0x4a>
   d8240:	f89c 0000 	ldrb.w	r0, [ip]
   d8244:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d8248:	2858      	cmp	r0, #88	; 0x58
   d824a:	d14d      	bne.n	d82e8 <_strtol_l.isra.0+0xdc>
   d824c:	f89c 4001 	ldrb.w	r4, [ip, #1]
   d8250:	2310      	movs	r3, #16
   d8252:	f10c 0c02 	add.w	ip, ip, #2
   d8256:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   d825a:	3f01      	subs	r7, #1
   d825c:	2600      	movs	r6, #0
   d825e:	fbb7 f9f3 	udiv	r9, r7, r3
   d8262:	4630      	mov	r0, r6
   d8264:	fb03 7a19 	mls	sl, r3, r9, r7
   d8268:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   d826c:	2d09      	cmp	r5, #9
   d826e:	d818      	bhi.n	d82a2 <_strtol_l.isra.0+0x96>
   d8270:	462c      	mov	r4, r5
   d8272:	42a3      	cmp	r3, r4
   d8274:	dd24      	ble.n	d82c0 <_strtol_l.isra.0+0xb4>
   d8276:	1c75      	adds	r5, r6, #1
   d8278:	d007      	beq.n	d828a <_strtol_l.isra.0+0x7e>
   d827a:	4581      	cmp	r9, r0
   d827c:	d31d      	bcc.n	d82ba <_strtol_l.isra.0+0xae>
   d827e:	d101      	bne.n	d8284 <_strtol_l.isra.0+0x78>
   d8280:	45a2      	cmp	sl, r4
   d8282:	db1a      	blt.n	d82ba <_strtol_l.isra.0+0xae>
   d8284:	fb00 4003 	mla	r0, r0, r3, r4
   d8288:	2601      	movs	r6, #1
   d828a:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d828e:	e7eb      	b.n	d8268 <_strtol_l.isra.0+0x5c>
   d8290:	2c2b      	cmp	r4, #43	; 0x2b
   d8292:	bf08      	it	eq
   d8294:	f89c 4000 	ldrbeq.w	r4, [ip]
   d8298:	46a8      	mov	r8, r5
   d829a:	bf08      	it	eq
   d829c:	f100 0c02 	addeq.w	ip, r0, #2
   d82a0:	e7c8      	b.n	d8234 <_strtol_l.isra.0+0x28>
   d82a2:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   d82a6:	2d19      	cmp	r5, #25
   d82a8:	d801      	bhi.n	d82ae <_strtol_l.isra.0+0xa2>
   d82aa:	3c37      	subs	r4, #55	; 0x37
   d82ac:	e7e1      	b.n	d8272 <_strtol_l.isra.0+0x66>
   d82ae:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   d82b2:	2d19      	cmp	r5, #25
   d82b4:	d804      	bhi.n	d82c0 <_strtol_l.isra.0+0xb4>
   d82b6:	3c57      	subs	r4, #87	; 0x57
   d82b8:	e7db      	b.n	d8272 <_strtol_l.isra.0+0x66>
   d82ba:	f04f 36ff 	mov.w	r6, #4294967295
   d82be:	e7e4      	b.n	d828a <_strtol_l.isra.0+0x7e>
   d82c0:	1c73      	adds	r3, r6, #1
   d82c2:	d106      	bne.n	d82d2 <_strtol_l.isra.0+0xc6>
   d82c4:	2322      	movs	r3, #34	; 0x22
   d82c6:	f8ce 3000 	str.w	r3, [lr]
   d82ca:	4638      	mov	r0, r7
   d82cc:	b942      	cbnz	r2, d82e0 <_strtol_l.isra.0+0xd4>
   d82ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d82d2:	f1b8 0f00 	cmp.w	r8, #0
   d82d6:	d000      	beq.n	d82da <_strtol_l.isra.0+0xce>
   d82d8:	4240      	negs	r0, r0
   d82da:	2a00      	cmp	r2, #0
   d82dc:	d0f7      	beq.n	d82ce <_strtol_l.isra.0+0xc2>
   d82de:	b10e      	cbz	r6, d82e4 <_strtol_l.isra.0+0xd8>
   d82e0:	f10c 31ff 	add.w	r1, ip, #4294967295
   d82e4:	6011      	str	r1, [r2, #0]
   d82e6:	e7f2      	b.n	d82ce <_strtol_l.isra.0+0xc2>
   d82e8:	2430      	movs	r4, #48	; 0x30
   d82ea:	2b00      	cmp	r3, #0
   d82ec:	d1b3      	bne.n	d8256 <_strtol_l.isra.0+0x4a>
   d82ee:	2308      	movs	r3, #8
   d82f0:	e7b1      	b.n	d8256 <_strtol_l.isra.0+0x4a>
   d82f2:	2c30      	cmp	r4, #48	; 0x30
   d82f4:	d0a4      	beq.n	d8240 <_strtol_l.isra.0+0x34>
   d82f6:	230a      	movs	r3, #10
   d82f8:	e7ad      	b.n	d8256 <_strtol_l.isra.0+0x4a>
   d82fa:	bf00      	nop
   d82fc:	000d8ada 	.word	0x000d8ada

000d8300 <strtol>:
   d8300:	4613      	mov	r3, r2
   d8302:	460a      	mov	r2, r1
   d8304:	4601      	mov	r1, r0
   d8306:	4802      	ldr	r0, [pc, #8]	; (d8310 <strtol+0x10>)
   d8308:	6800      	ldr	r0, [r0, #0]
   d830a:	f7ff bf7f 	b.w	d820c <_strtol_l.isra.0>
   d830e:	bf00      	nop
   d8310:	200344ac 	.word	0x200344ac

000d8314 <dynalib_user>:
   d8314:	000d401d 000d4059 000d4081 000d4085     .@..Y@...@...@..
   d8324:	00000000 746e450a 74207265 70206568     .....Enter the p
   d8334:	7469736f 206e6f69 7420666f 64206568     osition of the d
   d8344:	63697665 69772065 74206874 62206568     evice with the b
   d8354:	2065756c 2044454c 61207361 6e69206e     lue LED as an in
   d8364:	65676574 66282072 74737269 76656420     teger (first dev
   d8374:	20656369 61207369 2c312074 63657320     ice is at 1, sec
   d8384:	20646e6f 61207369 2c322074 63746520     ond is at 2, etc
   d8394:	00203a29 7165530a 636e6575 00203a65     ): ..Sequence: .
   d83a4:	6c00202c 2e697061 6e617274 63746973     , .lapi.transitc
   d83b4:	61636968 632e6f67 2f006d6f 2f697061     hicago.com./api/
   d83c4:	2f302e31 6f707474 69746973 2e736e6f     1.0/ttpositions.
   d83d4:	78707361 79656b3f 6630303d 30393066     aspx?key=00ff090
   d83e4:	61633336 37363461 33343834 66356434     63caa46748434d5f
   d83f4:	31323361 38343064 74722666 6465723d     a321d048f&rt=red
   d8404:	74756f26 54747570 3d657079 4e4f534a     &outputType=JSON
   d8414:	34453600 30303030 35422d31 462d3341     .6E400001-B5A3-F
   d8424:	2d333933 39413045 3035452d 44343245     393-E0A9-E50E24D
   d8434:	39414343 45360045 30303034 422d3230     CCA9E.6E400002-B
   d8444:	2d334135 33393346 4130452d 35452d39     5A3-F393-E0A9-E5
   d8454:	34324530 41434344 36004539 30303445     0E24DCCA9E.6E400
   d8464:	2d333030 33413542 3933462d 30452d33     003-B5A3-F393-E0
   d8474:	452d3941 32453035 43434434 00453941     A9-E50E24DCCA9E.
   d8484:	72007874 6f480078 64726177 72614a00     tx.rx.Howard.Jar
   d8494:	00736976 73726f4d 6f4c0065 616c6f79     vis.Morse.Loyola
   d84a4:	61724700 6c69766e 5400656c 6e726f68     .Granville.Thorn
   d84b4:	656c6164 79724200 614d206e 42007277     dale.Bryn Mawr.B
   d84c4:	79777265 7241006e 656c7967 77614c00     erwyn.Argyle.Law
   d84d4:	636e6572 69570065 6e6f736c 65685300     rence.Wilson.She
   d84e4:	61646972 6441006e 6f736964 6542006e     ridan.Addison.Be
   d84f4:	6e6f6d6c 75460074 72656c6c 006e6f74     lmont.Fullerton.
   d8504:	74726f4e 6c432f68 756f6279 43006e72     North/Clybourn.C
   d8514:	6b72616c 7669442f 6e6f7369 69684300     lark/Divison.Chi
   d8524:	6f676163 61724700 4c00646e 00656b61     cago.Grand.Lake.
   d8534:	726e6f4d 4a00656f 736b6361 48006e6f     Monroe.Jackson.H
   d8544:	69727261 006e6f73 736f6f52 6c657665     arrison.Roosevel
   d8554:	65430074 6b616d72 6968432d 6f74616e     t.Cermak-Chinato
   d8564:	53006e77 332d786f 00687435 68743734     wn.Sox-35th.47th
   d8574:	72614700 6c656966 33360064 36006472     .Garfield.63rd.6
   d8584:	00687439 68743937 74373800 35390068     9th.79th.87th.95
   d8594:	442f6874 52206e61 006e6179 00544547     th/Dan Ryan.GET.
   d85a4:	73726170 20676e69 6c696166 63006465     parsing failed.c
   d85b4:	74746174 756f7200 74006574 6e696172     tatt.route.train
   d85c4:	78656e00 61745374 74006d4e 00724472     .nextStaNm.trDr.
   d85d4:	74647270 72726100 00310054 003e003c     prdt.arrT.1.<.>.
   d85e4:	002d007c                                |.-.

000d85e8 <_ZTV16JsonParserStaticILj10000ELj1000EE>:
	...
   d85f0:	000d4111 000d4125 65636341 2f007470     .A..%A..Accept./
   d8600:	20002f2a 50545448 302e312f 63000a0d     */. HTTP/1.0...c
   d8610:	65736f6c 6e6f4300 7463656e 006e6f69     lose.Connection.
   d8620:	54534f48 6e6f4300 746e6574 6e654c2d     HOST.Content-Len
   d8630:	00687467 54534f50 0d0a0d00 3025000a     gth.POST......%0
   d8640:	00007834                                4x..

000d8644 <_ZTV10JsonBuffer>:
	...
   d864c:	000d4ca5 000d4cc1                       .L...L..

000d8654 <_ZTV10JsonParser>:
	...
   d865c:	000d4cd5 000d4cf9                       .L...L..

000d8664 <_ZTV13JsonReference>:
	...
   d866c:	000d4c95 000d4c97                       .L...L..

000d8674 <_ZTVN5spark13EthernetClassE>:
	...
   d867c:	000d5af7 000d5aed 000d5ae3 000d5ad9     .Z...Z...Z...Z..
   d868c:	000d5acd 000d5ac1 000d7cb9 000d7cc1     .Z...Z...|...|..
   d869c:	000d5ab5 000d5aad 000d5aa3 000d5a99     .Z...Z...Z...Z..
   d86ac:	000d7cf1 69726977 622e676e 5300656c     .|..wiring.ble.S
   d86bc:	74726174 73696420 65766f63 676e6972     tart discovering
   d86cc:	72657320 65636976 50002e73 20726565      services..Peer 
   d86dc:	69766564 69206563 696d2073 6e697373     device is missin
   d86ec:	46002167 656c6961 6f742064 70706120     g!.Failed to app
   d86fc:	20646e65 72656570 6e654320 6c617274     end peer Central
   d870c:	76656420 2e656369 6e6f4300 7463656e      device..Connect
   d871c:	62206465 65432079 6172746e 6564206c     ed by Central de
   d872c:	65636976 6944002e 6e6f6373 7463656e     vice..Disconnect
   d873c:	62206465 65722079 65746f6d 76656420     ed by remote dev
   d874c:	2e656369 70754400 6163696c 20646574     ice..Duplicated 
   d875c:	72616863 65746361 74736972 63206369     characteristic c
   d876c:	6f6e6e61 65622074 64646120 002e6465     annot be added..
   d877c:	6c696146 74206465 7061206f 646e6570     Failed to append
   d878c:	636f6c20 63206c61 61726168 72657463      local character
   d879c:	69747369 00002e63                       istic...

000d87a4 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d87ac:	000d5dab 000d5e0d 000d5fd5 000d5e37     .]...^..._..7^..
   d87bc:	000d5dad                                .]..

000d87c0 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d87c8:	000d5da7 000d5e1b 000d5da9 000d5e3b     .]...^...]..;^..
   d87d8:	000d5dcd                                .]..

000d87dc <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d87e4:	000d5da5 000d5e29 000d67a1 000d5e3f     .]..)^...g..?^..
   d87f4:	000d5ded                                .]..

000d87f8 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   d8800:	5f9b34fb 80000080 00001000 00000000     .4._............

000d8810 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   d8810:	7427e37b ac15f87b 13a949dd f5720000     {.'t{....I....r.

000d8820 <_ZN8particle7BleUuid9BASE_UUIDE>:
   d8820:	5f9b34fb 80000080 00001000 00000000     .4._............
   d8830:	00707061 252d5925 64252d6d 3a482554     app.%Y-%m-%dT%H:
   d8840:	253a4d25 007a2553 74637361 00656d69     %M:%S%z.asctime.

000d8850 <_ZTV9IPAddress>:
	...
   d8858:	000d7291 000d7281 000d7283              .r...r...r..

000d8864 <_ZTV9USBSerial>:
	...
   d886c:	000d739d 000d7405 000d73db 000d7035     .s...t...s..5p..
   d887c:	000d73cd 000d739f 000d73af 000d73ff     .s...s...s...s..
   d888c:	000d73bf 000d7399                       .s...s..

000d8894 <_ZTV11USARTSerial>:
	...
   d889c:	000d74a9 000d7515 000d74ed 000d7035     .t...u...t..5p..
   d88ac:	000d74bd 000d74d9 000d74cb 000d74e7     .t...t...t...t..
   d88bc:	000d74ab 000d74af                       .t...t..

000d88c4 <_ZTV7TwoWire>:
	...
   d88cc:	000d75a5 000d75ef 000d75c7 000d75a7     .u...u...u...u..
   d88dc:	000d75cf 000d75d7 000d75df 000d75e7     .u...u...u...u..
   d88ec:	69726977 7200676e 20766365 6f727265     wiring.recv erro
   d88fc:	203d2072 00006425                       r = %d..

000d8904 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d890c:	000d76cb 000d76ed 000d7b07 000d76fb     .v...v...{...v..
   d891c:	000d76cd                                .v..

000d8920 <_ZTV9TCPClient>:
	...
   d8928:	000d7779 000d77ad 000d7649 000d7663     yw...w..Iv..cv..
   d8938:	000d799d 000d780f 000d77e1 000d768d     .y...x...w...v..
   d8948:	000d78a7 000d7b0d 000d7843 000d7a51     .x...{..Cx..Qz..
   d8958:	000d768f 000d76c1 000d7675 000d76ff     .v...v..uv...v..
   d8968:	000d77c1                                .w..

000d896c <_ZTVN5spark9WiFiClassE>:
	...
   d8974:	000d7c5b 000d7c51 000d7c47 000d7c09     [|..Q|..G|...|..
   d8984:	000d70fb 000d7c3b 000d7cb9 000d7cc1     .p..;|...|...|..
   d8994:	000d7c2f 000d7c27 000d7c1d 000d7c13     /|..'|...|...|..
   d89a4:	000d7cf1                                .|..

000d89a8 <_ZTVN5spark12NetworkClassE>:
	...
   d89b0:	000d7c79 000d7c83 000d7c8d 000d7c97     y|...|...|...|..
   d89c0:	000d7ca1 000d7cad 000d7cb9 000d7cc1     .|...|...|...|..
   d89d0:	000d7cc9 000d7cd5 000d7cdd 000d7ce7     .|...|...|...|..
   d89e0:	000d7cf1                                .|..

000d89e4 <_ZSt7nothrow>:
	...

000d89e5 <_ZTSSt19_Sp_make_shared_tag>:
   d89e5:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
   d89f5:	5f646572 00676174                        red_tag....

000d8a00 <_ZTISt19_Sp_make_shared_tag>:
   d8a00:	000d8a40 000d89e5                       @.......

000d8a08 <_ZTIN10__cxxabiv117__class_type_infoE>:
   d8a08:	000d8aa0 000d8a14 000d8ac4              ............

000d8a14 <_ZTSN10__cxxabiv117__class_type_infoE>:
   d8a14:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   d8a24:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   d8a34:	00000045                                E...

000d8a38 <_ZTVN10__cxxabiv117__class_type_infoE>:
   d8a38:	00000000 000d8a08 000d7ec9 000d7edd     .........~...~..
   d8a48:	000d8071 000d8071 000d7f47 000d7e89     q...q...G....~..
   d8a58:	000d7f2f 000d7ef1 000d7ebd              /....~...~..

000d8a64 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   d8a64:	000d8aa0 000d8a70 000d8a08              ....p.......

000d8a70 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   d8a70:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   d8a80:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   d8a90:	456f666e 00000000                       nfoE....

000d8a98 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   d8a98:	00000000 000d8a64 000d7f71 000d7f85     ....d...q.......
   d8aa8:	000d8071 000d8071 000d7f47 000d7e89     q...q...G....~..
   d8ab8:	000d8045 000d7fd1 000d7f99              E...........

000d8ac4 <_ZTISt9type_info>:
   d8ac4:	000d8a40 000d8acc                       @.......

000d8acc <_ZTSSt9type_info>:
   d8acc:	74397453 5f657079 6f666e69               St9type_info.

000d8ad9 <_ctype_>:
   d8ad9:	20202000 20202020 28282020 20282828     .         ((((( 
   d8ae9:	20202020 20202020 20202020 20202020                     
   d8af9:	10108820 10101010 10101010 10101010      ...............
   d8b09:	04040410 04040404 10040404 10101010     ................
   d8b19:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d8b29:	01010101 01010101 01010101 10101010     ................
   d8b39:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d8b49:	02020202 02020202 02020202 10101010     ................
   d8b59:	00000020 00000000 00000000 00000000      ...............
	...

000d8bda <link_const_variable_data_end>:
	...

000d8bdc <link_constructors_location>:
   d8bdc:	000d43b9 	.word	0x000d43b9
   d8be0:	000d5b01 	.word	0x000d5b01
   d8be4:	000d5b35 	.word	0x000d5b35
   d8be8:	000d700d 	.word	0x000d700d
   d8bec:	000d7109 	.word	0x000d7109
   d8bf0:	000d7119 	.word	0x000d7119
   d8bf4:	000d7141 	.word	0x000d7141
   d8bf8:	000d7c65 	.word	0x000d7c65
   d8bfc:	000d7dd1 	.word	0x000d7dd1
