
c:/Users/Arjun/Documents/GitHub/loop_tracks/master/target/3.0.0/argon/master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000079c0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000db9e0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000001f0  200353d4  000db9e4  000153d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000922c  200355c4  200355c4  000255c4  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000dbbd4  000dbbd4  0001bbd4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000dbbfc  000dbbfc  0001bbfc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001b92d2  00000000  00000000  0001bc00  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00019e97  00000000  00000000  001d4ed2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0003bb78  00000000  00000000  001eed69  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003468  00000000  00000000  0022a8e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 0000a4d0  00000000  00000000  0022dd49  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003b9e0  00000000  00000000  00238219  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00045421  00000000  00000000  00273bf9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00129ea7  00000000  00000000  002b901a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00009ba0  00000000  00000000  003e2ec4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f005 f8af 	bl	d9194 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f005 f8d1 	bl	d91e4 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	200353d4 	.word	0x200353d4
   d404c:	000db9e4 	.word	0x000db9e4
   d4050:	200355c4 	.word	0x200355c4
   d4054:	200355c4 	.word	0x200355c4
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f003 fbd5 	bl	d7810 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000db9ac 	.word	0x000db9ac
   d4080:	000db9d4 	.word	0x000db9d4

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b920 	b.w	d42c8 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fad5 	bl	d4638 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f003 bb7f 	b.w	d7794 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f001 bf03 	b.w	d5ea0 <malloc>

000d409a <_Znaj>:
   d409a:	f001 bf01 	b.w	d5ea0 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f001 bf07 	b.w	d5eb0 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr
	...

000d40b4 <__tcf_0>:
};

http_request_t request;
http_response_t response;

String redLineStations[] = {"North/Clybourn", "Clark/Divison", "Chicago", "Grand", "Lake", "Monroe", "Jackson", "Harrison", 
   d40b4:	b538      	push	{r3, r4, r5, lr}
   d40b6:	4d04      	ldr	r5, [pc, #16]	; (d40c8 <__tcf_0+0x14>)
   d40b8:	2409      	movs	r4, #9
   d40ba:	eb05 1004 	add.w	r0, r5, r4, lsl #4
   d40be:	f002 f874 	bl	d61aa <_ZN6StringD1Ev>
   d40c2:	3c01      	subs	r4, #1
   d40c4:	d2f9      	bcs.n	d40ba <__tcf_0+0x6>
   d40c6:	bd38      	pop	{r3, r4, r5, pc}
   d40c8:	2003e508 	.word	0x2003e508

000d40cc <_ZN15http_response_tD1Ev>:
 */
typedef struct
{
  int status;
  String body;
} http_response_t;
   d40cc:	b510      	push	{r4, lr}
   d40ce:	4604      	mov	r4, r0
   d40d0:	3004      	adds	r0, #4
   d40d2:	f002 f86a 	bl	d61aa <_ZN6StringD1Ev>
   d40d6:	4620      	mov	r0, r4
   d40d8:	bd10      	pop	{r4, pc}

000d40da <_ZN14http_request_tD1Ev>:
} http_request_t;
   d40da:	b510      	push	{r4, lr}
   d40dc:	4604      	mov	r4, r0
   d40de:	303c      	adds	r0, #60	; 0x3c
   d40e0:	f002 f863 	bl	d61aa <_ZN6StringD1Ev>
   d40e4:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d40e8:	f002 f85f 	bl	d61aa <_ZN6StringD1Ev>
   d40ec:	4620      	mov	r0, r4
   d40ee:	f002 f85c 	bl	d61aa <_ZN6StringD1Ev>
   d40f2:	4620      	mov	r0, r4
   d40f4:	bd10      	pop	{r4, pc}
	...

000d40f8 <_ZN16JsonParserStaticILj10000ELj1000EED1Ev>:
 *
 * @param MAX_TOKENS The maximum number of tokens you expect. Each object has a token and two for each key/value pair.
 * Each array is a token and one for each element in the array.
 */
template <size_t BUFFER_SIZE, size_t MAX_TOKENS>
class JsonParserStatic : public JsonParser {
   d40f8:	b510      	push	{r4, lr}
   d40fa:	4b03      	ldr	r3, [pc, #12]	; (d4108 <_ZN16JsonParserStaticILj10000ELj1000EED1Ev+0x10>)
   d40fc:	6003      	str	r3, [r0, #0]
   d40fe:	4604      	mov	r4, r0
   d4100:	f000 ffac 	bl	d505c <_ZN10JsonParserD1Ev>
   d4104:	4620      	mov	r0, r4
   d4106:	bd10      	pop	{r4, pc}
   d4108:	000db248 	.word	0x000db248

000d410c <_ZN16JsonParserStaticILj10000ELj1000EED0Ev>:
   d410c:	b510      	push	{r4, lr}
   d410e:	4604      	mov	r4, r0
   d4110:	f7ff fff2 	bl	d40f8 <_ZN16JsonParserStaticILj10000ELj1000EED1Ev>
   d4114:	4620      	mov	r0, r4
   d4116:	f246 51bc 	movw	r1, #26044	; 0x65bc
   d411a:	f004 f9f2 	bl	d8502 <_ZdlPvj>
   d411e:	4620      	mov	r0, r4
   d4120:	bd10      	pop	{r4, pc}
	...

000d4124 <_ZN10HttpClientD1Ev>:

class HttpClient {
   d4124:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d4126:	6984      	ldr	r4, [r0, #24]
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d4128:	4b0a      	ldr	r3, [pc, #40]	; (d4154 <_ZN10HttpClientD1Ev+0x30>)
   d412a:	6003      	str	r3, [r0, #0]
   d412c:	4605      	mov	r5, r0
   d412e:	b17c      	cbz	r4, d4150 <_ZN10HttpClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   d4130:	6863      	ldr	r3, [r4, #4]
   d4132:	3b01      	subs	r3, #1
   d4134:	6063      	str	r3, [r4, #4]
   d4136:	b95b      	cbnz	r3, d4150 <_ZN10HttpClientD1Ev+0x2c>
          _M_dispose();
   d4138:	6823      	ldr	r3, [r4, #0]
   d413a:	4620      	mov	r0, r4
   d413c:	689b      	ldr	r3, [r3, #8]
   d413e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4140:	68a3      	ldr	r3, [r4, #8]
   d4142:	3b01      	subs	r3, #1
   d4144:	60a3      	str	r3, [r4, #8]
   d4146:	b91b      	cbnz	r3, d4150 <_ZN10HttpClientD1Ev+0x2c>
            _M_destroy();
   d4148:	6823      	ldr	r3, [r4, #0]
   d414a:	4620      	mov	r0, r4
   d414c:	68db      	ldr	r3, [r3, #12]
   d414e:	4798      	blx	r3
   d4150:	4628      	mov	r0, r5
   d4152:	bd38      	pop	{r3, r4, r5, pc}
   d4154:	000db588 	.word	0x000db588

000d4158 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d4158:	6803      	ldr	r3, [r0, #0]
   d415a:	b2c9      	uxtb	r1, r1
   d415c:	689b      	ldr	r3, [r3, #8]
   d415e:	4718      	bx	r3

000d4160 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
      count++;
    }
  }
}

void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   d4160:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  String inputBuffer = "";

  if(bleCount <= slaveCountExpected){
   d4164:	4c50      	ldr	r4, [pc, #320]	; (d42a8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x148>)
void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   d4166:	b085      	sub	sp, #20
   d4168:	4680      	mov	r8, r0
   d416a:	460e      	mov	r6, r1
  String inputBuffer = "";
   d416c:	4668      	mov	r0, sp
   d416e:	494f      	ldr	r1, [pc, #316]	; (d42ac <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x14c>)
   d4170:	f002 f866 	bl	d6240 <_ZN6StringC1EPKc>
  if(bleCount <= slaveCountExpected){
   d4174:	6823      	ldr	r3, [r4, #0]
   d4176:	2b03      	cmp	r3, #3
   d4178:	f300 808a 	bgt.w	d4290 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x130>
    int input;

    for(int i = 0; i < len - 1; i++){
   d417c:	2700      	movs	r7, #0
   d417e:	3e01      	subs	r6, #1
   d4180:	42be      	cmp	r6, r7
   d4182:	d90a      	bls.n	d419a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3a>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
   d4184:	f818 1007 	ldrb.w	r1, [r8, r7]
   d4188:	4668      	mov	r0, sp
   d418a:	f002 f89a 	bl	d62c2 <_ZN6String6concatEc>
      inputBuffer += (char)data[i];
      input = atoi(inputBuffer);
   d418e:	9800      	ldr	r0, [sp, #0]
   d4190:	f004 ffdf 	bl	d9152 <atoi>
    for(int i = 0; i < len - 1; i++){
   d4194:	3701      	adds	r7, #1
      input = atoi(inputBuffer);
   d4196:	4605      	mov	r5, r0
    for(int i = 0; i < len - 1; i++){
   d4198:	e7f2      	b.n	d4180 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x20>
    }

    if(bleCount < slaveCountExpected){
   d419a:	6823      	ldr	r3, [r4, #0]
   d419c:	2b02      	cmp	r3, #2
   d419e:	dc04      	bgt.n	d41aa <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4a>
      txCharacteristic.setValue("\nEnter the position of the device with the blue LED as an integer (first device is at 1, second is at 2, etc): ");
   d41a0:	4943      	ldr	r1, [pc, #268]	; (d42b0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x150>)
   d41a2:	4844      	ldr	r0, [pc, #272]	; (d42b4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x154>)
   d41a4:	2200      	movs	r2, #0
   d41a6:	f002 fc41 	bl	d6a2c <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>
    }

    Wire.beginTransmission(addressArr[bleCount]);
   d41aa:	f004 f97d 	bl	d84a8 <_Z19__fetch_global_Wirev>
   d41ae:	4e42      	ldr	r6, [pc, #264]	; (d42b8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x158>)
   d41b0:	6823      	ldr	r3, [r4, #0]
   d41b2:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
   d41b6:	f003 fd37 	bl	d7c28 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write('3');
   d41ba:	f004 f975 	bl	d84a8 <_Z19__fetch_global_Wirev>
   d41be:	2133      	movs	r1, #51	; 0x33
   d41c0:	f7ff ffca 	bl	d4158 <_ZN7TwoWire5writeEi>
    Wire.endTransmission();
   d41c4:	f004 f970 	bl	d84a8 <_Z19__fetch_global_Wirev>
   d41c8:	f003 fd35 	bl	d7c36 <_ZN7TwoWire15endTransmissionEv>

    if(bleCount > 0){
   d41cc:	6823      	ldr	r3, [r4, #0]
   d41ce:	2b00      	cmp	r3, #0
   d41d0:	dd17      	ble.n	d4202 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xa2>
      sequenceArr[input - 1] = addressArr[bleCount - 1];
   d41d2:	3b01      	subs	r3, #1
   d41d4:	3d01      	subs	r5, #1
   d41d6:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
   d41da:	4b38      	ldr	r3, [pc, #224]	; (d42bc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x15c>)
   d41dc:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
      
      Wire.beginTransmission(addressArr[bleCount - 1]);
   d41e0:	f004 f962 	bl	d84a8 <_Z19__fetch_global_Wirev>
   d41e4:	6823      	ldr	r3, [r4, #0]
   d41e6:	3b01      	subs	r3, #1
   d41e8:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
   d41ec:	f003 fd1c 	bl	d7c28 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write('4');
   d41f0:	f004 f95a 	bl	d84a8 <_Z19__fetch_global_Wirev>
   d41f4:	2134      	movs	r1, #52	; 0x34
   d41f6:	f7ff ffaf 	bl	d4158 <_ZN7TwoWire5writeEi>
      Wire.endTransmission();
   d41fa:	f004 f955 	bl	d84a8 <_Z19__fetch_global_Wirev>
   d41fe:	f003 fd1a 	bl	d7c36 <_ZN7TwoWire15endTransmissionEv>
    }
  }

  if(bleCount == slaveCountExpected){
   d4202:	6825      	ldr	r5, [r4, #0]
   d4204:	2d03      	cmp	r5, #3
   d4206:	d143      	bne.n	d4290 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x130>
    delay(1000);
   d4208:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d420c:	f003 fa88 	bl	d7720 <delay>
    Serial.println("\nSequence: ");
   d4210:	f003 fc1a 	bl	d7a48 <_Z16_fetch_usbserialv>
   d4214:	492a      	ldr	r1, [pc, #168]	; (d42c0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x160>)
   d4216:	4f29      	ldr	r7, [pc, #164]	; (d42bc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x15c>)
    for(int i = 0; i < slaveCountExpected; i++){
      Serial.print(sequenceArr[i]);
      Serial.print(", ");
   d4218:	f8df 90a8 	ldr.w	r9, [pc, #168]	; d42c4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x164>
    Serial.println("\nSequence: ");
   d421c:	f003 fa3f 	bl	d769e <_ZN5Print7printlnEPKc>
      Serial.print(sequenceArr[i]);
   d4220:	f003 fc12 	bl	d7a48 <_Z16_fetch_usbserialv>
   d4224:	f857 6b04 	ldr.w	r6, [r7], #4
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   d4228:	2e00      	cmp	r6, #0
   d422a:	4680      	mov	r8, r0
   d422c:	da39      	bge.n	d42a2 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x142>
            t = print('-');
   d422e:	212d      	movs	r1, #45	; 0x2d
   d4230:	f003 fa26 	bl	d7680 <_ZN5Print5printEc>
            val = -n;
   d4234:	4271      	negs	r1, r6
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d4236:	220a      	movs	r2, #10
   d4238:	4640      	mov	r0, r8
   d423a:	f003 fa3a 	bl	d76b2 <_ZN5Print11printNumberEmh>
      Serial.print(", ");
   d423e:	f003 fc03 	bl	d7a48 <_Z16_fetch_usbserialv>
   d4242:	4649      	mov	r1, r9
   d4244:	f003 fa18 	bl	d7678 <_ZN5Print5printEPKc>

      Wire.beginTransmission(sequenceArr[i]);
   d4248:	f004 f92e 	bl	d84a8 <_Z19__fetch_global_Wirev>
   d424c:	f857 1c04 	ldr.w	r1, [r7, #-4]
   d4250:	f003 fcea 	bl	d7c28 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write('3');
   d4254:	f004 f928 	bl	d84a8 <_Z19__fetch_global_Wirev>
   d4258:	2133      	movs	r1, #51	; 0x33
   d425a:	f7ff ff7d 	bl	d4158 <_ZN7TwoWire5writeEi>
      Wire.endTransmission();
   d425e:	f004 f923 	bl	d84a8 <_Z19__fetch_global_Wirev>
   d4262:	f003 fce8 	bl	d7c36 <_ZN7TwoWire15endTransmissionEv>
      delay(2000);
   d4266:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d426a:	f003 fa59 	bl	d7720 <delay>
      Wire.beginTransmission(sequenceArr[i]);
   d426e:	f004 f91b 	bl	d84a8 <_Z19__fetch_global_Wirev>
   d4272:	f857 1c04 	ldr.w	r1, [r7, #-4]
   d4276:	f003 fcd7 	bl	d7c28 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write('4');
   d427a:	f004 f915 	bl	d84a8 <_Z19__fetch_global_Wirev>
   d427e:	2134      	movs	r1, #52	; 0x34
   d4280:	f7ff ff6a 	bl	d4158 <_ZN7TwoWire5writeEi>
      Wire.endTransmission();
   d4284:	f004 f910 	bl	d84a8 <_Z19__fetch_global_Wirev>
   d4288:	f003 fcd5 	bl	d7c36 <_ZN7TwoWire15endTransmissionEv>
    for(int i = 0; i < slaveCountExpected; i++){
   d428c:	3d01      	subs	r5, #1
   d428e:	d1c7      	bne.n	d4220 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xc0>
    }
    //BLE.disconnect();
    //BLE.off();
  }

  bleCount++;
   d4290:	6823      	ldr	r3, [r4, #0]
  String inputBuffer = "";
   d4292:	4668      	mov	r0, sp
  bleCount++;
   d4294:	3301      	adds	r3, #1
   d4296:	6023      	str	r3, [r4, #0]
  String inputBuffer = "";
   d4298:	f001 ff87 	bl	d61aa <_ZN6StringD1Ev>
   d429c:	b005      	add	sp, #20
   d429e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            val = n;
   d42a2:	4631      	mov	r1, r6
   d42a4:	e7c7      	b.n	d4236 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xd6>
   d42a6:	bf00      	nop
   d42a8:	20035610 	.word	0x20035610
   d42ac:	000db295 	.word	0x000db295
   d42b0:	000db038 	.word	0x000db038
   d42b4:	2003e62c 	.word	0x2003e62c
   d42b8:	20035604 	.word	0x20035604
   d42bc:	2003e610 	.word	0x2003e610
   d42c0:	000db0a8 	.word	0x000db0a8
   d42c4:	000db0b4 	.word	0x000db0b4

000d42c8 <setup>:
void setup() {
   d42c8:	b510      	push	{r4, lr}
   d42ca:	b096      	sub	sp, #88	; 0x58
  Serial.begin(9600);
   d42cc:	f003 fbbc 	bl	d7a48 <_Z16_fetch_usbserialv>
   d42d0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d42d4:	f003 fbac 	bl	d7a30 <_ZN9USBSerial5beginEl>
  delay(2000);
   d42d8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d42dc:	f003 fa20 	bl	d7720 <delay>
  BLE.on();
   d42e0:	f002 fc5e 	bl	d6ba0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d42e4:	f002 fcaa 	bl	d6c3c <_ZNK8particle14BleLocalDevice2onEv>
  BLE.addCharacteristic(txCharacteristic);
   d42e8:	f002 fc5a 	bl	d6ba0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d42ec:	4a2a      	ldr	r2, [pc, #168]	; (d4398 <setup+0xd0>)
   d42ee:	4601      	mov	r1, r0
   d42f0:	a80d      	add	r0, sp, #52	; 0x34
   d42f2:	f003 f87d 	bl	d73f0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d42f6:	a80d      	add	r0, sp, #52	; 0x34
   d42f8:	f002 fd21 	bl	d6d3e <_ZN8particle17BleCharacteristicD1Ev>
  BLE.addCharacteristic(rxCharacteristic);
   d42fc:	f002 fc50 	bl	d6ba0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4300:	4a26      	ldr	r2, [pc, #152]	; (d439c <setup+0xd4>)
   d4302:	4601      	mov	r1, r0
   d4304:	a80d      	add	r0, sp, #52	; 0x34
   d4306:	f003 f873 	bl	d73f0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d430a:	a80d      	add	r0, sp, #52	; 0x34
   d430c:	f002 fd17 	bl	d6d3e <_ZN8particle17BleCharacteristicD1Ev>
  BleAdvertisingData data;
   d4310:	a80d      	add	r0, sp, #52	; 0x34
   d4312:	f002 fac4 	bl	d689e <_ZN8particle18BleAdvertisingDataC1Ev>
  data.appendServiceUUID(serviceUuid);
   d4316:	4922      	ldr	r1, [pc, #136]	; (d43a0 <setup+0xd8>)
   d4318:	a803      	add	r0, sp, #12
   d431a:	f002 f9c3 	bl	d66a4 <_ZN8particle7BleUuidC1ERKS0_>
    size_t appendLocalName(const String& name);
    size_t appendAppearance(ble_sig_appearance_t appearance);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   d431e:	a903      	add	r1, sp, #12
   d4320:	a808      	add	r0, sp, #32
   d4322:	f002 f9bf 	bl	d66a4 <_ZN8particle7BleUuidC1ERKS0_>
        if (tempUUID.type() == BleUuidType::SHORT) {
   d4326:	a808      	add	r0, sp, #32
   d4328:	f002 fa02 	bl	d6730 <_ZNK8particle7BleUuid4typeEv>
   d432c:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   d432e:	a808      	add	r0, sp, #32
        if (tempUUID.type() == BleUuidType::SHORT) {
   d4330:	bb4c      	cbnz	r4, d4386 <setup+0xbe>
            uint16_t uuid16 = tempUUID.shorted();
   d4332:	f002 fa1c 	bl	d676e <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d4336:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   d4338:	f8ad 000a 	strh.w	r0, [sp, #10]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d433c:	2302      	movs	r3, #2
   d433e:	f10d 020a 	add.w	r2, sp, #10
   d4342:	2103      	movs	r1, #3
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   d4344:	a80d      	add	r0, sp, #52	; 0x34
   d4346:	f002 fa9f 	bl	d6888 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
  request.hostname = "lapi.transitchicago.com";
   d434a:	4c16      	ldr	r4, [pc, #88]	; (d43a4 <setup+0xdc>)
  BLE.advertise(&data);
   d434c:	f002 fc28 	bl	d6ba0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4350:	2200      	movs	r2, #0
   d4352:	a90d      	add	r1, sp, #52	; 0x34
   d4354:	f002 fc92 	bl	d6c7c <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
  Wire.begin();
   d4358:	f004 f8a6 	bl	d84a8 <_Z19__fetch_global_Wirev>
   d435c:	f003 fc5a 	bl	d7c14 <_ZN7TwoWire5beginEv>
  request.hostname = "lapi.transitchicago.com";
   d4360:	4911      	ldr	r1, [pc, #68]	; (d43a8 <setup+0xe0>)
   d4362:	4620      	mov	r0, r4
   d4364:	f001 ff80 	bl	d6268 <_ZN6StringaSEPKc>
  request.port = 80;
   d4368:	2350      	movs	r3, #80	; 0x50
  request.path = "/api/1.0/ttpositions.aspx?key=00ff09063caa46748434d5fa321d048f&rt=red&outputType=JSON";
   d436a:	4910      	ldr	r1, [pc, #64]	; (d43ac <setup+0xe4>)
  request.port = 80;
   d436c:	63a3      	str	r3, [r4, #56]	; 0x38
  request.path = "/api/1.0/ttpositions.aspx?key=00ff09063caa46748434d5fa321d048f&rt=red&outputType=JSON";
   d436e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d4372:	f001 ff79 	bl	d6268 <_ZN6StringaSEPKc>
  strip.begin();
   d4376:	480e      	ldr	r0, [pc, #56]	; (d43b0 <setup+0xe8>)
   d4378:	f000 fcdf 	bl	d4d3a <_ZN16Adafruit_DotStar5beginEv>
  strip.show();
   d437c:	480c      	ldr	r0, [pc, #48]	; (d43b0 <setup+0xe8>)
   d437e:	f000 fc37 	bl	d4bf0 <_ZN16Adafruit_DotStar4showEv>
}
   d4382:	b016      	add	sp, #88	; 0x58
   d4384:	bd10      	pop	{r4, pc}
   d4386:	f002 f9f7 	bl	d6778 <_ZNK8particle7BleUuid8rawBytesEv>
   d438a:	2300      	movs	r3, #0
   d438c:	9300      	str	r3, [sp, #0]
   d438e:	4602      	mov	r2, r0
   d4390:	2310      	movs	r3, #16
   d4392:	2107      	movs	r1, #7
   d4394:	e7d6      	b.n	d4344 <setup+0x7c>
   d4396:	bf00      	nop
   d4398:	2003e62c 	.word	0x2003e62c
   d439c:	2003e608 	.word	0x2003e608
   d43a0:	200355c8 	.word	0x200355c8
   d43a4:	2003e5a8 	.word	0x2003e5a8
   d43a8:	000db0b7 	.word	0x000db0b7
   d43ac:	000db0cf 	.word	0x000db0cf
   d43b0:	2003e61c 	.word	0x2003e61c

000d43b4 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>:
    BleCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const char* desc, void(T::*callback)(const uint8_t*, size_t, const BlePeerDevice& peer), T* instance)
            : BleCharacteristic(properties, desc, (callback && instance) ? std::bind(callback, instance, _1, _2, _3) : (BleOnDataReceivedStdFunction)nullptr) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   d43b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d43b6:	4616      	mov	r6, r2
   d43b8:	b091      	sub	sp, #68	; 0x44
#if __cplusplus > 201402L
      using weak_type = __weak_ptr<_Tp, _Lp>;
#endif

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d43ba:	2200      	movs	r2, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d43bc:	e9c0 2200 	strd	r2, r2, [r0]
   d43c0:	4604      	mov	r4, r0
   d43c2:	460d      	mov	r5, r1
        BleUuid cUuid(charUuid);
        BleUuid sUuid(svcUuid);
   d43c4:	af0b      	add	r7, sp, #44	; 0x2c
        BleUuid cUuid(charUuid);
   d43c6:	4619      	mov	r1, r3
   d43c8:	a806      	add	r0, sp, #24
   d43ca:	f002 f96b 	bl	d66a4 <_ZN8particle7BleUuidC1ERKS0_>
        BleUuid sUuid(svcUuid);
   d43ce:	9916      	ldr	r1, [sp, #88]	; 0x58
   d43d0:	4638      	mov	r0, r7
   d43d2:	f002 f967 	bl	d66a4 <_ZN8particle7BleUuidC1ERKS0_>
    value_ = static_cast<ValueType>(value);
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const EnumFlags<T>& flags) {
    value_ = flags.value_;
   d43d6:	7833      	ldrb	r3, [r6, #0]
   d43d8:	f88d 3014 	strb.w	r3, [sp, #20]
        construct(desc, properties, cUuid, sUuid, callback, context);
   d43dc:	9b18      	ldr	r3, [sp, #96]	; 0x60
   d43de:	9302      	str	r3, [sp, #8]
   d43e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d43e2:	4620      	mov	r0, r4
   d43e4:	e9cd 7300 	strd	r7, r3, [sp]
   d43e8:	aa05      	add	r2, sp, #20
   d43ea:	ab06      	add	r3, sp, #24
   d43ec:	4629      	mov	r1, r5
   d43ee:	f002 fedd 	bl	d71ac <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
    }
   d43f2:	4620      	mov	r0, r4
   d43f4:	b011      	add	sp, #68	; 0x44
   d43f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d43f8 <_GLOBAL__sub_I_addressArr>:
   d43f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   d43fc:	4c67      	ldr	r4, [pc, #412]	; (d459c <_GLOBAL__sub_I_addressArr+0x1a4>)
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   d43fe:	f8df 822c 	ldr.w	r8, [pc, #556]	; d462c <_GLOBAL__sub_I_addressArr+0x234>
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   d4402:	4d67      	ldr	r5, [pc, #412]	; (d45a0 <_GLOBAL__sub_I_addressArr+0x1a8>)
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   d4404:	4967      	ldr	r1, [pc, #412]	; (d45a4 <_GLOBAL__sub_I_addressArr+0x1ac>)
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, serviceUuid);
   d4406:	f8df 9228 	ldr.w	r9, [pc, #552]	; d4630 <_GLOBAL__sub_I_addressArr+0x238>
   d440a:	4f67      	ldr	r7, [pc, #412]	; (d45a8 <_GLOBAL__sub_I_addressArr+0x1b0>)
   d440c:	b091      	sub	sp, #68	; 0x44
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   d440e:	4620      	mov	r0, r4
   d4410:	f002 fa2e 	bl	d6870 <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   d4414:	4965      	ldr	r1, [pc, #404]	; (d45ac <_GLOBAL__sub_I_addressArr+0x1b4>)
   d4416:	4640      	mov	r0, r8
   d4418:	f002 fa2a 	bl	d6870 <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   d441c:	4964      	ldr	r1, [pc, #400]	; (d45b0 <_GLOBAL__sub_I_addressArr+0x1b8>)
   d441e:	4628      	mov	r0, r5
   d4420:	f002 fa26 	bl	d6870 <_ZN8particle7BleUuidC1EPKc>
    value_ = static_cast<ValueType>(value);
   d4424:	2310      	movs	r3, #16
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, serviceUuid);
   d4426:	4629      	mov	r1, r5
   d4428:	a806      	add	r0, sp, #24
   d442a:	f88d 3014 	strb.w	r3, [sp, #20]
   d442e:	f002 f939 	bl	d66a4 <_ZN8particle7BleUuidC1ERKS0_>
   d4432:	4621      	mov	r1, r4
   d4434:	a80b      	add	r0, sp, #44	; 0x2c
   d4436:	f002 f935 	bl	d66a4 <_ZN8particle7BleUuidC1ERKS0_>
   d443a:	4d5e      	ldr	r5, [pc, #376]	; (d45b4 <_GLOBAL__sub_I_addressArr+0x1bc>)
   d443c:	495e      	ldr	r1, [pc, #376]	; (d45b8 <_GLOBAL__sub_I_addressArr+0x1c0>)
   d443e:	2600      	movs	r6, #0
   d4440:	ab0b      	add	r3, sp, #44	; 0x2c
   d4442:	9300      	str	r3, [sp, #0]
   d4444:	aa05      	add	r2, sp, #20
   d4446:	ab06      	add	r3, sp, #24
   d4448:	e9cd 6601 	strd	r6, r6, [sp, #4]
   d444c:	4648      	mov	r0, r9
   d444e:	f7ff ffb1 	bl	d43b4 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   d4452:	462a      	mov	r2, r5
   d4454:	4639      	mov	r1, r7
   d4456:	4648      	mov	r0, r9
   d4458:	f004 f84e 	bl	d84f8 <__aeabi_atexit>
   d445c:	2304      	movs	r3, #4
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, serviceUuid, onDataReceived, NULL);
   d445e:	4641      	mov	r1, r8
   d4460:	a806      	add	r0, sp, #24
   d4462:	f88d 3014 	strb.w	r3, [sp, #20]
   d4466:	f002 f91d 	bl	d66a4 <_ZN8particle7BleUuidC1ERKS0_>
   d446a:	4621      	mov	r1, r4
   d446c:	a80b      	add	r0, sp, #44	; 0x2c
   d446e:	f002 f919 	bl	d66a4 <_ZN8particle7BleUuidC1ERKS0_>
   d4472:	4c52      	ldr	r4, [pc, #328]	; (d45bc <_GLOBAL__sub_I_addressArr+0x1c4>)
   d4474:	4b52      	ldr	r3, [pc, #328]	; (d45c0 <_GLOBAL__sub_I_addressArr+0x1c8>)
   d4476:	9301      	str	r3, [sp, #4]
   d4478:	ab0b      	add	r3, sp, #44	; 0x2c
   d447a:	9300      	str	r3, [sp, #0]
   d447c:	aa05      	add	r2, sp, #20
   d447e:	ab06      	add	r3, sp, #24
   d4480:	4950      	ldr	r1, [pc, #320]	; (d45c4 <_GLOBAL__sub_I_addressArr+0x1cc>)
   d4482:	9602      	str	r6, [sp, #8]
   d4484:	4620      	mov	r0, r4
   d4486:	f7ff ff95 	bl	d43b4 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   d448a:	4639      	mov	r1, r7
   d448c:	4620      	mov	r0, r4
} http_request_t;
   d448e:	4f4e      	ldr	r7, [pc, #312]	; (d45c8 <_GLOBAL__sub_I_addressArr+0x1d0>)
   d4490:	4c4e      	ldr	r4, [pc, #312]	; (d45cc <_GLOBAL__sub_I_addressArr+0x1d4>)
   d4492:	462a      	mov	r2, r5
   d4494:	f004 f830 	bl	d84f8 <__aeabi_atexit>
   d4498:	4639      	mov	r1, r7
   d449a:	4620      	mov	r0, r4
   d449c:	f001 fed0 	bl	d6240 <_ZN6StringC1EPKc>
   d44a0:	f104 0010 	add.w	r0, r4, #16
   d44a4:	f003 fa20 	bl	d78e8 <_ZN9IPAddressC1Ev>
   d44a8:	4639      	mov	r1, r7
   d44aa:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d44ae:	f001 fec7 	bl	d6240 <_ZN6StringC1EPKc>
   d44b2:	4639      	mov	r1, r7
   d44b4:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d44b8:	f001 fec2 	bl	d6240 <_ZN6StringC1EPKc>
http_request_t request;
   d44bc:	4620      	mov	r0, r4
} http_response_t;
   d44be:	4c44      	ldr	r4, [pc, #272]	; (d45d0 <_GLOBAL__sub_I_addressArr+0x1d8>)
   d44c0:	4944      	ldr	r1, [pc, #272]	; (d45d4 <_GLOBAL__sub_I_addressArr+0x1dc>)
   d44c2:	462a      	mov	r2, r5
   d44c4:	f004 f818 	bl	d84f8 <__aeabi_atexit>
   d44c8:	4639      	mov	r1, r7
   d44ca:	1d20      	adds	r0, r4, #4
   d44cc:	f001 feb8 	bl	d6240 <_ZN6StringC1EPKc>
http_response_t response;
   d44d0:	4620      	mov	r0, r4
"Roosevelt", "Cermak-Chinatown"};
   d44d2:	4c41      	ldr	r4, [pc, #260]	; (d45d8 <_GLOBAL__sub_I_addressArr+0x1e0>)
http_response_t response;
   d44d4:	4941      	ldr	r1, [pc, #260]	; (d45dc <_GLOBAL__sub_I_addressArr+0x1e4>)
   d44d6:	462a      	mov	r2, r5
   d44d8:	f004 f80e 	bl	d84f8 <__aeabi_atexit>
"Roosevelt", "Cermak-Chinatown"};
   d44dc:	4940      	ldr	r1, [pc, #256]	; (d45e0 <_GLOBAL__sub_I_addressArr+0x1e8>)
   d44de:	4620      	mov	r0, r4
   d44e0:	f001 feae 	bl	d6240 <_ZN6StringC1EPKc>
   d44e4:	493f      	ldr	r1, [pc, #252]	; (d45e4 <_GLOBAL__sub_I_addressArr+0x1ec>)
   d44e6:	f104 0010 	add.w	r0, r4, #16
   d44ea:	f001 fea9 	bl	d6240 <_ZN6StringC1EPKc>
   d44ee:	493e      	ldr	r1, [pc, #248]	; (d45e8 <_GLOBAL__sub_I_addressArr+0x1f0>)
   d44f0:	f104 0020 	add.w	r0, r4, #32
   d44f4:	f001 fea4 	bl	d6240 <_ZN6StringC1EPKc>
   d44f8:	493c      	ldr	r1, [pc, #240]	; (d45ec <_GLOBAL__sub_I_addressArr+0x1f4>)
   d44fa:	f104 0030 	add.w	r0, r4, #48	; 0x30
   d44fe:	f001 fe9f 	bl	d6240 <_ZN6StringC1EPKc>
   d4502:	493b      	ldr	r1, [pc, #236]	; (d45f0 <_GLOBAL__sub_I_addressArr+0x1f8>)
   d4504:	f104 0040 	add.w	r0, r4, #64	; 0x40
   d4508:	f001 fe9a 	bl	d6240 <_ZN6StringC1EPKc>
   d450c:	4939      	ldr	r1, [pc, #228]	; (d45f4 <_GLOBAL__sub_I_addressArr+0x1fc>)
   d450e:	f104 0050 	add.w	r0, r4, #80	; 0x50
   d4512:	f001 fe95 	bl	d6240 <_ZN6StringC1EPKc>
   d4516:	4938      	ldr	r1, [pc, #224]	; (d45f8 <_GLOBAL__sub_I_addressArr+0x200>)
   d4518:	f104 0060 	add.w	r0, r4, #96	; 0x60
   d451c:	f001 fe90 	bl	d6240 <_ZN6StringC1EPKc>
   d4520:	4936      	ldr	r1, [pc, #216]	; (d45fc <_GLOBAL__sub_I_addressArr+0x204>)
   d4522:	f104 0070 	add.w	r0, r4, #112	; 0x70
   d4526:	f001 fe8b 	bl	d6240 <_ZN6StringC1EPKc>
   d452a:	4935      	ldr	r1, [pc, #212]	; (d4600 <_GLOBAL__sub_I_addressArr+0x208>)
   d452c:	f104 0080 	add.w	r0, r4, #128	; 0x80
   d4530:	f001 fe86 	bl	d6240 <_ZN6StringC1EPKc>
   d4534:	4933      	ldr	r1, [pc, #204]	; (d4604 <_GLOBAL__sub_I_addressArr+0x20c>)
   d4536:	f104 0090 	add.w	r0, r4, #144	; 0x90
HttpClient http;
   d453a:	4c33      	ldr	r4, [pc, #204]	; (d4608 <_GLOBAL__sub_I_addressArr+0x210>)
"Roosevelt", "Cermak-Chinatown"};
   d453c:	f001 fe80 	bl	d6240 <_ZN6StringC1EPKc>
String redLineStations[] = {"North/Clybourn", "Clark/Divison", "Chicago", "Grand", "Lake", "Monroe", "Jackson", "Harrison", 
   d4540:	462a      	mov	r2, r5
   d4542:	4932      	ldr	r1, [pc, #200]	; (d460c <_GLOBAL__sub_I_addressArr+0x214>)
   d4544:	4630      	mov	r0, r6
   d4546:	f003 ffd7 	bl	d84f8 <__aeabi_atexit>
HttpClient http;
   d454a:	4620      	mov	r0, r4
   d454c:	f000 fc04 	bl	d4d58 <_ZN10HttpClientC1Ev>
   d4550:	462a      	mov	r2, r5
   d4552:	492f      	ldr	r1, [pc, #188]	; (d4610 <_GLOBAL__sub_I_addressArr+0x218>)
   d4554:	4620      	mov	r0, r4
public:
	/**
	 * @brief Construct a JsonParser using a static buffer and static maximum number of tokens.
	 */
	explicit JsonParserStatic() : JsonParser(staticBuffer, BUFFER_SIZE, staticTokens, MAX_TOKENS) {};
   d4556:	4c2f      	ldr	r4, [pc, #188]	; (d4614 <_GLOBAL__sub_I_addressArr+0x21c>)
   d4558:	f003 ffce 	bl	d84f8 <__aeabi_atexit>
   d455c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4560:	9300      	str	r3, [sp, #0]
   d4562:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   d4566:	4b2c      	ldr	r3, [pc, #176]	; (d4618 <_GLOBAL__sub_I_addressArr+0x220>)
   d4568:	f242 7210 	movw	r2, #10000	; 0x2710
   d456c:	4620      	mov	r0, r4
   d456e:	f000 fdcd 	bl	d510c <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>
   d4572:	4b2a      	ldr	r3, [pc, #168]	; (d461c <_GLOBAL__sub_I_addressArr+0x224>)
   d4574:	6023      	str	r3, [r4, #0]
JsonParserStatic<10000, 1000> parser;
   d4576:	4620      	mov	r0, r4
Adafruit_DotStar strip = Adafruit_DotStar(NUMPIXELS);
   d4578:	4c29      	ldr	r4, [pc, #164]	; (d4620 <_GLOBAL__sub_I_addressArr+0x228>)
JsonParserStatic<10000, 1000> parser;
   d457a:	492a      	ldr	r1, [pc, #168]	; (d4624 <_GLOBAL__sub_I_addressArr+0x22c>)
   d457c:	462a      	mov	r2, r5
   d457e:	f003 ffbb 	bl	d84f8 <__aeabi_atexit>
Adafruit_DotStar strip = Adafruit_DotStar(NUMPIXELS);
   d4582:	2212      	movs	r2, #18
   d4584:	2147      	movs	r1, #71	; 0x47
   d4586:	4620      	mov	r0, r4
   d4588:	f000 facd 	bl	d4b26 <_ZN16Adafruit_DotStarC1Eth>
   d458c:	4926      	ldr	r1, [pc, #152]	; (d4628 <_GLOBAL__sub_I_addressArr+0x230>)
   d458e:	462a      	mov	r2, r5
   d4590:	4620      	mov	r0, r4
   d4592:	f003 ffb1 	bl	d84f8 <__aeabi_atexit>
   d4596:	b011      	add	sp, #68	; 0x44
   d4598:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d459c:	200355c8 	.word	0x200355c8
   d45a0:	200355f0 	.word	0x200355f0
   d45a4:	000db125 	.word	0x000db125
   d45a8:	000d6d3f 	.word	0x000d6d3f
   d45ac:	000db14a 	.word	0x000db14a
   d45b0:	000db16f 	.word	0x000db16f
   d45b4:	200355c4 	.word	0x200355c4
   d45b8:	000db194 	.word	0x000db194
   d45bc:	2003e608 	.word	0x2003e608
   d45c0:	000d4161 	.word	0x000d4161
   d45c4:	000db197 	.word	0x000db197
   d45c8:	000db295 	.word	0x000db295
   d45cc:	2003e5a8 	.word	0x2003e5a8
   d45d0:	2003e5f4 	.word	0x2003e5f4
   d45d4:	000d40db 	.word	0x000d40db
   d45d8:	2003e508 	.word	0x2003e508
   d45dc:	000d40cd 	.word	0x000d40cd
   d45e0:	000db19a 	.word	0x000db19a
   d45e4:	000db1a9 	.word	0x000db1a9
   d45e8:	000db1b7 	.word	0x000db1b7
   d45ec:	000db1bf 	.word	0x000db1bf
   d45f0:	000db1c5 	.word	0x000db1c5
   d45f4:	000db1ca 	.word	0x000db1ca
   d45f8:	000db1d1 	.word	0x000db1d1
   d45fc:	000db1d9 	.word	0x000db1d9
   d4600:	000db1e2 	.word	0x000db1e2
   d4604:	000db1ec 	.word	0x000db1ec
   d4608:	20035614 	.word	0x20035614
   d460c:	000d40b5 	.word	0x000d40b5
   d4610:	000d4125 	.word	0x000d4125
   d4614:	20037e30 	.word	0x20037e30
   d4618:	2003a56c 	.word	0x2003a56c
   d461c:	000db248 	.word	0x000db248
   d4620:	2003e61c 	.word	0x2003e61c
   d4624:	000d40f9 	.word	0x000d40f9
   d4628:	000d4bbb 	.word	0x000d4bbb
   d462c:	200355dc 	.word	0x200355dc
   d4630:	2003e62c 	.word	0x2003e62c
   d4634:	00000000 	.word	0x00000000

000d4638 <loop>:
void loop() {
   d4638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        request(aRequest, aResponse, (http_header_t*)NULL, HTTP_METHOD_DELETE);
    }

    void get(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[])
    {
        request(aRequest, aResponse, headers, HTTP_METHOD_GET);
   d463c:	4db8      	ldr	r5, [pc, #736]	; (d4920 <loop+0x2e8>)
   d463e:	4bb9      	ldr	r3, [pc, #740]	; (d4924 <loop+0x2ec>)
   d4640:	49b9      	ldr	r1, [pc, #740]	; (d4928 <loop+0x2f0>)
   d4642:	48ba      	ldr	r0, [pc, #744]	; (d492c <loop+0x2f4>)
   d4644:	b09a      	sub	sp, #104	; 0x68
   d4646:	462a      	mov	r2, r5
   d4648:	9300      	str	r3, [sp, #0]
   d464a:	4bb9      	ldr	r3, [pc, #740]	; (d4930 <loop+0x2f8>)
   d464c:	f000 fbba 	bl	d4dc4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>
  parser.clear();
   d4650:	48b8      	ldr	r0, [pc, #736]	; (d4934 <loop+0x2fc>)
   d4652:	f000 fd51 	bl	d50f8 <_ZN10JsonBuffer5clearEv>
        operator const char*() const { return c_str(); }
   d4656:	6869      	ldr	r1, [r5, #4]
	bool addString(const char *data) { return addData(data, strlen(data)); }
   d4658:	9103      	str	r1, [sp, #12]
   d465a:	4608      	mov	r0, r1
   d465c:	f004 fe00 	bl	d9260 <strlen>
   d4660:	9903      	ldr	r1, [sp, #12]
   d4662:	4602      	mov	r2, r0
   d4664:	48b3      	ldr	r0, [pc, #716]	; (d4934 <loop+0x2fc>)
   d4666:	f000 fd2a 	bl	d50be <_ZN10JsonBuffer7addDataEPKcj>
  if (!parser.parse()) {
   d466a:	48b2      	ldr	r0, [pc, #712]	; (d4934 <loop+0x2fc>)
   d466c:	f001 f8ec 	bl	d5848 <_ZN10JsonParser5parseEv>
   d4670:	4605      	mov	r5, r0
   d4672:	b938      	cbnz	r0, d4684 <loop+0x4c>
		Serial.println("parsing failed");
   d4674:	f003 f9e8 	bl	d7a48 <_Z16_fetch_usbserialv>
   d4678:	49af      	ldr	r1, [pc, #700]	; (d4938 <loop+0x300>)
   d467a:	f003 f810 	bl	d769e <_ZN5Print7printlnEPKc>
}
   d467e:	b01a      	add	sp, #104	; 0x68
   d4680:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  int count = 0;
   d4684:	f04f 0a00 	mov.w	sl, #0
    JsonReference train = parser.getReference().key("ctatt").key("route").index(0).key("train").index(count);
   d4688:	49aa      	ldr	r1, [pc, #680]	; (d4934 <loop+0x2fc>)
   d468a:	a808      	add	r0, sp, #32
   d468c:	f000 fd4e 	bl	d512c <_ZNK10JsonParser12getReferenceEv>
   d4690:	4aaa      	ldr	r2, [pc, #680]	; (d493c <loop+0x304>)
   d4692:	a908      	add	r1, sp, #32
   d4694:	a80b      	add	r0, sp, #44	; 0x2c
   d4696:	f000 fecb 	bl	d5430 <_ZNK13JsonReference3keyEPKc>
   d469a:	4aa9      	ldr	r2, [pc, #676]	; (d4940 <loop+0x308>)
   d469c:	a90b      	add	r1, sp, #44	; 0x2c
   d469e:	a80e      	add	r0, sp, #56	; 0x38
   d46a0:	f000 fec6 	bl	d5430 <_ZNK13JsonReference3keyEPKc>
   d46a4:	2200      	movs	r2, #0
   d46a6:	a90e      	add	r1, sp, #56	; 0x38
   d46a8:	a812      	add	r0, sp, #72	; 0x48
   d46aa:	f000 fdaf 	bl	d520c <_ZNK13JsonReference5indexEj>
   d46ae:	4aa5      	ldr	r2, [pc, #660]	; (d4944 <loop+0x30c>)
   d46b0:	a912      	add	r1, sp, #72	; 0x48
   d46b2:	a816      	add	r0, sp, #88	; 0x58
   d46b4:	f000 febc 	bl	d5430 <_ZNK13JsonReference3keyEPKc>
   d46b8:	4652      	mov	r2, sl
   d46ba:	a916      	add	r1, sp, #88	; 0x58
   d46bc:	a805      	add	r0, sp, #20
   d46be:	f000 fda5 	bl	d520c <_ZNK13JsonReference5indexEj>
   d46c2:	a816      	add	r0, sp, #88	; 0x58
   d46c4:	f000 fcaa 	bl	d501c <_ZN13JsonReferenceD1Ev>
   d46c8:	a812      	add	r0, sp, #72	; 0x48
   d46ca:	f000 fca7 	bl	d501c <_ZN13JsonReferenceD1Ev>
   d46ce:	a80e      	add	r0, sp, #56	; 0x38
   d46d0:	f000 fca4 	bl	d501c <_ZN13JsonReferenceD1Ev>
   d46d4:	a80b      	add	r0, sp, #44	; 0x2c
   d46d6:	f000 fca1 	bl	d501c <_ZN13JsonReferenceD1Ev>
   d46da:	a808      	add	r0, sp, #32
   d46dc:	f000 fc9e 	bl	d501c <_ZN13JsonReferenceD1Ev>
    String nextStation = train.key("nextStaNm").valueString();
   d46e0:	4a99      	ldr	r2, [pc, #612]	; (d4948 <loop+0x310>)
   d46e2:	a905      	add	r1, sp, #20
   d46e4:	a816      	add	r0, sp, #88	; 0x58
   d46e6:	f000 fea3 	bl	d5430 <_ZNK13JsonReference3keyEPKc>
   d46ea:	a916      	add	r1, sp, #88	; 0x58
   d46ec:	a80e      	add	r0, sp, #56	; 0x38
   d46ee:	f000 feb9 	bl	d5464 <_ZNK13JsonReference11valueStringEv>
   d46f2:	a816      	add	r0, sp, #88	; 0x58
   d46f4:	f000 fc92 	bl	d501c <_ZN13JsonReferenceD1Ev>
    String trainDir = train.key("trDr").valueString();
   d46f8:	4a94      	ldr	r2, [pc, #592]	; (d494c <loop+0x314>)
   d46fa:	a905      	add	r1, sp, #20
   d46fc:	a816      	add	r0, sp, #88	; 0x58
   d46fe:	f000 fe97 	bl	d5430 <_ZNK13JsonReference3keyEPKc>
   d4702:	a916      	add	r1, sp, #88	; 0x58
   d4704:	a812      	add	r0, sp, #72	; 0x48
   d4706:	f000 fead 	bl	d5464 <_ZNK13JsonReference11valueStringEv>
   d470a:	a816      	add	r0, sp, #88	; 0x58
   d470c:	f000 fc86 	bl	d501c <_ZN13JsonReferenceD1Ev>
    float lat = train.key("lat").valueString().toFloat();
   d4710:	4a8f      	ldr	r2, [pc, #572]	; (d4950 <loop+0x318>)
   d4712:	a905      	add	r1, sp, #20
   d4714:	a80b      	add	r0, sp, #44	; 0x2c
   d4716:	f000 fe8b 	bl	d5430 <_ZNK13JsonReference3keyEPKc>
   d471a:	a90b      	add	r1, sp, #44	; 0x2c
   d471c:	a816      	add	r0, sp, #88	; 0x58
   d471e:	f000 fea1 	bl	d5464 <_ZNK13JsonReference11valueStringEv>
   d4722:	a816      	add	r0, sp, #88	; 0x58
   d4724:	f001 fe26 	bl	d6374 <_ZNK6String7toFloatEv>
   d4728:	a816      	add	r0, sp, #88	; 0x58
   d472a:	ee10 6a10 	vmov	r6, s0
   d472e:	f001 fd3c 	bl	d61aa <_ZN6StringD1Ev>
   d4732:	a80b      	add	r0, sp, #44	; 0x2c
   d4734:	f000 fc72 	bl	d501c <_ZN13JsonReferenceD1Ev>
    float lon = train.key("lon").valueString().toFloat();
   d4738:	4a86      	ldr	r2, [pc, #536]	; (d4954 <loop+0x31c>)
   d473a:	a905      	add	r1, sp, #20
   d473c:	a80b      	add	r0, sp, #44	; 0x2c
   d473e:	f000 fe77 	bl	d5430 <_ZNK13JsonReference3keyEPKc>
   d4742:	a90b      	add	r1, sp, #44	; 0x2c
   d4744:	a816      	add	r0, sp, #88	; 0x58
   d4746:	f000 fe8d 	bl	d5464 <_ZNK13JsonReference11valueStringEv>
   d474a:	a816      	add	r0, sp, #88	; 0x58
   d474c:	f001 fe12 	bl	d6374 <_ZNK6String7toFloatEv>
   d4750:	a816      	add	r0, sp, #88	; 0x58
   d4752:	ee10 8a10 	vmov	r8, s0
   d4756:	f001 fd28 	bl	d61aa <_ZN6StringD1Ev>
   d475a:	a80b      	add	r0, sp, #44	; 0x2c
   d475c:	f000 fc5e 	bl	d501c <_ZN13JsonReferenceD1Ev>
    if(nextStation.length() <= 1){
   d4760:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d4762:	2b01      	cmp	r3, #1
   d4764:	f240 8085 	bls.w	d4872 <loop+0x23a>
    if(lat < 41.89950 && lat > 41.853206){
   d4768:	4630      	mov	r0, r6
   d476a:	f004 f947 	bl	d89fc <__aeabi_f2d>
   d476e:	a35e      	add	r3, pc, #376	; (adr r3, d48e8 <loop+0x2b0>)
   d4770:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4774:	4606      	mov	r6, r0
   d4776:	460f      	mov	r7, r1
   d4778:	f004 fc0a 	bl	d8f90 <__aeabi_dcmplt>
   d477c:	2800      	cmp	r0, #0
   d477e:	d037      	beq.n	d47f0 <loop+0x1b8>
   d4780:	a35b      	add	r3, pc, #364	; (adr r3, d48f0 <loop+0x2b8>)
   d4782:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4786:	4630      	mov	r0, r6
   d4788:	4639      	mov	r1, r7
   d478a:	f004 fc1f 	bl	d8fcc <__aeabi_dcmpgt>
   d478e:	b378      	cbz	r0, d47f0 <loop+0x1b8>
      pos = (int) (RED_LINE_VERTICAL * (lat - 41.853206) / (41.89950 - 41.853206) + 0.5);
   d4790:	a357      	add	r3, pc, #348	; (adr r3, d48f0 <loop+0x2b8>)
   d4792:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4796:	4630      	mov	r0, r6
   d4798:	4639      	mov	r1, r7
   d479a:	f003 ffcf 	bl	d873c <__aeabi_dsub>
   d479e:	4b6e      	ldr	r3, [pc, #440]	; (d4958 <loop+0x320>)
   d47a0:	2200      	movs	r2, #0
   d47a2:	f004 f983 	bl	d8aac <__aeabi_dmul>
   d47a6:	a354      	add	r3, pc, #336	; (adr r3, d48f8 <loop+0x2c0>)
   d47a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d47ac:	f004 faa8 	bl	d8d00 <__aeabi_ddiv>
   d47b0:	4b6a      	ldr	r3, [pc, #424]	; (d495c <loop+0x324>)
   d47b2:	2200      	movs	r2, #0
   d47b4:	f003 ffc4 	bl	d8740 <__adddf3>
   d47b8:	f004 fc12 	bl	d8fe0 <__aeabi_d2iz>
   d47bc:	4604      	mov	r4, r0
      validTrain = true;
   d47be:	462e      	mov	r6, r5
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d47c0:	4967      	ldr	r1, [pc, #412]	; (d4960 <loop+0x328>)
   d47c2:	a812      	add	r0, sp, #72	; 0x48
   d47c4:	f001 fd8a 	bl	d62dc <_ZNK6String6equalsEPKc>
    if(trainDir == "1" && validTrain){
   d47c8:	2800      	cmp	r0, #0
   d47ca:	d047      	beq.n	d485c <loop+0x224>
   d47cc:	2e00      	cmp	r6, #0
   d47ce:	d045      	beq.n	d485c <loop+0x224>
      redLineOutput[pos] = 1;
   d47d0:	4b64      	ldr	r3, [pc, #400]	; (d4964 <loop+0x32c>)
   d47d2:	2201      	movs	r2, #1
      redLineOutput[pos] = 5;
   d47d4:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    String trainDir = train.key("trDr").valueString();
   d47d8:	a812      	add	r0, sp, #72	; 0x48
   d47da:	f001 fce6 	bl	d61aa <_ZN6StringD1Ev>
    String nextStation = train.key("nextStaNm").valueString();
   d47de:	a80e      	add	r0, sp, #56	; 0x38
   d47e0:	f001 fce3 	bl	d61aa <_ZN6StringD1Ev>
    JsonReference train = parser.getReference().key("ctatt").key("route").index(0).key("train").index(count);
   d47e4:	a805      	add	r0, sp, #20
    count++;
   d47e6:	f10a 0a01 	add.w	sl, sl, #1
    JsonReference train = parser.getReference().key("ctatt").key("route").index(0).key("train").index(count);
   d47ea:	f000 fc17 	bl	d501c <_ZN13JsonReferenceD1Ev>
   d47ee:	e74b      	b.n	d4688 <loop+0x50>
    }else if(lat > 41.89950 && lon < -87.628176 && lat < 41.910655){
   d47f0:	a33d      	add	r3, pc, #244	; (adr r3, d48e8 <loop+0x2b0>)
   d47f2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d47f6:	4630      	mov	r0, r6
   d47f8:	4639      	mov	r1, r7
   d47fa:	f004 fbe7 	bl	d8fcc <__aeabi_dcmpgt>
   d47fe:	b358      	cbz	r0, d4858 <loop+0x220>
   d4800:	4640      	mov	r0, r8
   d4802:	f004 f8fb 	bl	d89fc <__aeabi_f2d>
   d4806:	a33e      	add	r3, pc, #248	; (adr r3, d4900 <loop+0x2c8>)
   d4808:	e9d3 2300 	ldrd	r2, r3, [r3]
   d480c:	4680      	mov	r8, r0
   d480e:	4689      	mov	r9, r1
   d4810:	f004 fbbe 	bl	d8f90 <__aeabi_dcmplt>
   d4814:	b300      	cbz	r0, d4858 <loop+0x220>
   d4816:	a33c      	add	r3, pc, #240	; (adr r3, d4908 <loop+0x2d0>)
   d4818:	e9d3 2300 	ldrd	r2, r3, [r3]
   d481c:	4630      	mov	r0, r6
   d481e:	4639      	mov	r1, r7
   d4820:	f004 fbb6 	bl	d8f90 <__aeabi_dcmplt>
   d4824:	b1c0      	cbz	r0, d4858 <loop+0x220>
      pos = (int) (RED_LINE_HORIZONTAL * (lon - -87.628176) / (-87.649177 - -87.628176) + 0.5) + RED_LINE_VERTICAL;
   d4826:	a33a      	add	r3, pc, #232	; (adr r3, d4910 <loop+0x2d8>)
   d4828:	e9d3 2300 	ldrd	r2, r3, [r3]
   d482c:	4640      	mov	r0, r8
   d482e:	4649      	mov	r1, r9
   d4830:	f003 ff86 	bl	d8740 <__adddf3>
   d4834:	4b4c      	ldr	r3, [pc, #304]	; (d4968 <loop+0x330>)
   d4836:	2200      	movs	r2, #0
   d4838:	f004 f938 	bl	d8aac <__aeabi_dmul>
   d483c:	a336      	add	r3, pc, #216	; (adr r3, d4918 <loop+0x2e0>)
   d483e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4842:	f004 fa5d 	bl	d8d00 <__aeabi_ddiv>
   d4846:	4b45      	ldr	r3, [pc, #276]	; (d495c <loop+0x324>)
   d4848:	2200      	movs	r2, #0
   d484a:	f003 ff79 	bl	d8740 <__adddf3>
   d484e:	f004 fbc7 	bl	d8fe0 <__aeabi_d2iz>
   d4852:	f100 0437 	add.w	r4, r0, #55	; 0x37
   d4856:	e7b2      	b.n	d47be <loop+0x186>
   d4858:	4606      	mov	r6, r0
   d485a:	e7b1      	b.n	d47c0 <loop+0x188>
   d485c:	4943      	ldr	r1, [pc, #268]	; (d496c <loop+0x334>)
   d485e:	a812      	add	r0, sp, #72	; 0x48
   d4860:	f001 fd3c 	bl	d62dc <_ZNK6String6equalsEPKc>
    }else if(trainDir == "5" && validTrain){
   d4864:	2800      	cmp	r0, #0
   d4866:	d0b7      	beq.n	d47d8 <loop+0x1a0>
   d4868:	2e00      	cmp	r6, #0
   d486a:	d0b5      	beq.n	d47d8 <loop+0x1a0>
      redLineOutput[pos] = 5;
   d486c:	4b3d      	ldr	r3, [pc, #244]	; (d4964 <loop+0x32c>)
   d486e:	2205      	movs	r2, #5
   d4870:	e7b0      	b.n	d47d4 <loop+0x19c>
    String trainDir = train.key("trDr").valueString();
   d4872:	a812      	add	r0, sp, #72	; 0x48
   d4874:	f001 fc99 	bl	d61aa <_ZN6StringD1Ev>
    String nextStation = train.key("nextStaNm").valueString();
   d4878:	a80e      	add	r0, sp, #56	; 0x38
   d487a:	f001 fc96 	bl	d61aa <_ZN6StringD1Ev>
    JsonReference train = parser.getReference().key("ctatt").key("route").index(0).key("train").index(count);
   d487e:	a805      	add	r0, sp, #20
   d4880:	f000 fbcc 	bl	d501c <_ZN13JsonReferenceD1Ev>
    strip.setPixelColor(i, 0);
   d4884:	4d3a      	ldr	r5, [pc, #232]	; (d4970 <loop+0x338>)
  for(int i = 0; i < NUMPIXELS; i++){
   d4886:	2400      	movs	r4, #0
    strip.setPixelColor(i, 0);
   d4888:	b2a1      	uxth	r1, r4
   d488a:	2200      	movs	r2, #0
   d488c:	4628      	mov	r0, r5
  for(int i = 0; i < NUMPIXELS; i++){
   d488e:	3401      	adds	r4, #1
    strip.setPixelColor(i, 0);
   d4890:	f000 f95e 	bl	d4b50 <_ZN16Adafruit_DotStar13setPixelColorEtm>
  for(int i = 0; i < NUMPIXELS; i++){
   d4894:	2c47      	cmp	r4, #71	; 0x47
   d4896:	d1f7      	bne.n	d4888 <loop+0x250>
   d4898:	f8df 90c8 	ldr.w	r9, [pc, #200]	; d4964 <loop+0x32c>
      strip.setPixelColor(i - 1, brightRed);
   d489c:	f8df 80d8 	ldr.w	r8, [pc, #216]	; d4978 <loop+0x340>
   d48a0:	4d33      	ldr	r5, [pc, #204]	; (d4970 <loop+0x338>)
      strip.setPixelColor(i, red);
   d48a2:	4f34      	ldr	r7, [pc, #208]	; (d4974 <loop+0x33c>)
  for(int i = 0; i < arraySize(redLineOutput); i++){
   d48a4:	2600      	movs	r6, #0
    if(redLineOutput[i] == 1){
   d48a6:	f859 3b04 	ldr.w	r3, [r9], #4
   d48aa:	2b01      	cmp	r3, #1
   d48ac:	d166      	bne.n	d497c <loop+0x344>
      strip.setPixelColor(i - 1, red);
   d48ae:	b2b4      	uxth	r4, r6
   d48b0:	1e61      	subs	r1, r4, #1
   d48b2:	683a      	ldr	r2, [r7, #0]
   d48b4:	b289      	uxth	r1, r1
   d48b6:	4628      	mov	r0, r5
   d48b8:	f000 f94a 	bl	d4b50 <_ZN16Adafruit_DotStar13setPixelColorEtm>
      strip.setPixelColor(i, red);
   d48bc:	683a      	ldr	r2, [r7, #0]
   d48be:	4621      	mov	r1, r4
   d48c0:	4628      	mov	r0, r5
   d48c2:	f000 f945 	bl	d4b50 <_ZN16Adafruit_DotStar13setPixelColorEtm>
      strip.setPixelColor(i + 1, brightRed);
   d48c6:	f8d8 2000 	ldr.w	r2, [r8]
   d48ca:	1c61      	adds	r1, r4, #1
      strip.setPixelColor(i + 1, red);
   d48cc:	b289      	uxth	r1, r1
   d48ce:	4628      	mov	r0, r5
   d48d0:	f000 f93e 	bl	d4b50 <_ZN16Adafruit_DotStar13setPixelColorEtm>
  for(int i = 0; i < arraySize(redLineOutput); i++){
   d48d4:	3601      	adds	r6, #1
    redLineOutput[i] = 0;
   d48d6:	2300      	movs	r3, #0
  for(int i = 0; i < arraySize(redLineOutput); i++){
   d48d8:	2e47      	cmp	r6, #71	; 0x47
    redLineOutput[i] = 0;
   d48da:	f849 3c04 	str.w	r3, [r9, #-4]
  for(int i = 0; i < arraySize(redLineOutput); i++){
   d48de:	d1e2      	bne.n	d48a6 <loop+0x26e>
  strip.show();
   d48e0:	4823      	ldr	r0, [pc, #140]	; (d4970 <loop+0x338>)
   d48e2:	f000 f985 	bl	d4bf0 <_ZN16Adafruit_DotStar4showEv>
   d48e6:	e6ca      	b.n	d467e <loop+0x46>
   d48e8:	d0e56042 	.word	0xd0e56042
   d48ec:	4044f322 	.word	0x4044f322
   d48f0:	daad6020 	.word	0xdaad6020
   d48f4:	4044ed35 	.word	0x4044ed35
   d48f8:	e0008800 	.word	0xe0008800
   d48fc:	3fa7b3d8 	.word	0x3fa7b3d8
   d4900:	091c0874 	.word	0x091c0874
   d4904:	c055e834 	.word	0xc055e834
   d4908:	57d1782d 	.word	0x57d1782d
   d490c:	4044f490 	.word	0x4044f490
   d4910:	091c0874 	.word	0x091c0874
   d4914:	4055e834 	.word	0x4055e834
   d4918:	40bbb000 	.word	0x40bbb000
   d491c:	bf958149 	.word	0xbf958149
   d4920:	2003e5f4 	.word	0x2003e5f4
   d4924:	000db1fd 	.word	0x000db1fd
   d4928:	2003e5a8 	.word	0x2003e5a8
   d492c:	20035614 	.word	0x20035614
   d4930:	200353d8 	.word	0x200353d8
   d4934:	20037e30 	.word	0x20037e30
   d4938:	000db201 	.word	0x000db201
   d493c:	000db210 	.word	0x000db210
   d4940:	000db216 	.word	0x000db216
   d4944:	000db21c 	.word	0x000db21c
   d4948:	000db222 	.word	0x000db222
   d494c:	000db22c 	.word	0x000db22c
   d4950:	000db231 	.word	0x000db231
   d4954:	000db235 	.word	0x000db235
   d4958:	404b8000 	.word	0x404b8000
   d495c:	3fe00000 	.word	0x3fe00000
   d4960:	000db239 	.word	0x000db239
   d4964:	2003e3ec 	.word	0x2003e3ec
   d4968:	40300000 	.word	0x40300000
   d496c:	000db23b 	.word	0x000db23b
   d4970:	2003e61c 	.word	0x2003e61c
   d4974:	200353e8 	.word	0x200353e8
   d4978:	200353d4 	.word	0x200353d4
    }else if(redLineOutput[i] == 5){
   d497c:	2b05      	cmp	r3, #5
   d497e:	d1a9      	bne.n	d48d4 <loop+0x29c>
      strip.setPixelColor(i - 1, brightRed);
   d4980:	b2b4      	uxth	r4, r6
   d4982:	1e61      	subs	r1, r4, #1
   d4984:	f8d8 2000 	ldr.w	r2, [r8]
   d4988:	b289      	uxth	r1, r1
   d498a:	4628      	mov	r0, r5
   d498c:	f000 f8e0 	bl	d4b50 <_ZN16Adafruit_DotStar13setPixelColorEtm>
      strip.setPixelColor(i, red);
   d4990:	683a      	ldr	r2, [r7, #0]
   d4992:	4621      	mov	r1, r4
   d4994:	4628      	mov	r0, r5
   d4996:	f000 f8db 	bl	d4b50 <_ZN16Adafruit_DotStar13setPixelColorEtm>
      strip.setPixelColor(i + 1, red);
   d499a:	683a      	ldr	r2, [r7, #0]
   d499c:	1c61      	adds	r1, r4, #1
   d499e:	e795      	b.n	d48cc <loop+0x294>

000d49a0 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d49a0:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d49a2:	6803      	ldr	r3, [r0, #0]
   d49a4:	2b2f      	cmp	r3, #47	; 0x2f
{
   d49a6:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d49a8:	d904      	bls.n	d49b4 <nrf_gpio_pin_port_decode+0x14>
   d49aa:	4a07      	ldr	r2, [pc, #28]	; (d49c8 <nrf_gpio_pin_port_decode+0x28>)
   d49ac:	2100      	movs	r1, #0
   d49ae:	200a      	movs	r0, #10
   d49b0:	f001 f9da 	bl	d5d68 <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   d49b4:	6823      	ldr	r3, [r4, #0]
   d49b6:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d49b8:	bf83      	ittte	hi
   d49ba:	f003 031f 	andhi.w	r3, r3, #31
        return NRF_P1;
   d49be:	4803      	ldrhi	r0, [pc, #12]	; (d49cc <nrf_gpio_pin_port_decode+0x2c>)
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d49c0:	6023      	strhi	r3, [r4, #0]
        return NRF_P0;
   d49c2:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    }
#endif
}
   d49c6:	bd10      	pop	{r4, pc}
   d49c8:	000d5945 	.word	0x000d5945
   d49cc:	50000300 	.word	0x50000300

000d49d0 <nrf_gpio_pin_clear>:
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
}


__STATIC_INLINE void nrf_gpio_pin_clear(uint32_t pin_number)
{
   d49d0:	b507      	push	{r0, r1, r2, lr}
   d49d2:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d49d4:	a801      	add	r0, sp, #4
   d49d6:	f7ff ffe3 	bl	d49a0 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   d49da:	9a01      	ldr	r2, [sp, #4]
   d49dc:	2301      	movs	r3, #1
   d49de:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   d49e0:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
}
   d49e4:	b003      	add	sp, #12
   d49e6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d49ec <_ZN16Adafruit_DotStar11sw_spi_initEv>:

void Adafruit_DotStar::hw_spi_end(void) { // Stop hardware SPI
  SPI.end();
}

void Adafruit_DotStar::sw_spi_init(void) { // Init 'soft' (bitbang) SPI
   d49ec:	b538      	push	{r3, r4, r5, lr}
   d49ee:	4604      	mov	r4, r0
  pinMode(dataPin , OUTPUT);
  pinMode(clockPin, OUTPUT);
  pinSet(dataPin , LOW);
   d49f0:	4d12      	ldr	r5, [pc, #72]	; (d4a3c <_ZN16Adafruit_DotStar11sw_spi_initEv+0x50>)
  pinMode(dataPin , OUTPUT);
   d49f2:	7880      	ldrb	r0, [r0, #2]
   d49f4:	2101      	movs	r1, #1
   d49f6:	f003 fd2d 	bl	d8454 <pinMode>
  pinMode(clockPin, OUTPUT);
   d49fa:	78e0      	ldrb	r0, [r4, #3]
   d49fc:	2101      	movs	r1, #1
   d49fe:	f003 fd29 	bl	d8454 <pinMode>
  pinSet(dataPin , LOW);
   d4a02:	682a      	ldr	r2, [r5, #0]
   d4a04:	78a3      	ldrb	r3, [r4, #2]
   d4a06:	0119      	lsls	r1, r3, #4
   d4a08:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   d4a0c:	5c50      	ldrb	r0, [r2, r1]
   d4a0e:	785b      	ldrb	r3, [r3, #1]
   d4a10:	f003 031f 	and.w	r3, r3, #31
   d4a14:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   d4a18:	f7ff ffda 	bl	d49d0 <nrf_gpio_pin_clear>
  pinSet(clockPin, LOW);
   d4a1c:	78e3      	ldrb	r3, [r4, #3]
   d4a1e:	682a      	ldr	r2, [r5, #0]
   d4a20:	0119      	lsls	r1, r3, #4
   d4a22:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   d4a26:	5c50      	ldrb	r0, [r2, r1]
   d4a28:	785b      	ldrb	r3, [r3, #1]
   d4a2a:	f003 031f 	and.w	r3, r3, #31
   d4a2e:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
}
   d4a32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  pinSet(clockPin, LOW);
   d4a36:	f7ff bfcb 	b.w	d49d0 <nrf_gpio_pin_clear>
   d4a3a:	bf00      	nop
   d4a3c:	2003e640 	.word	0x2003e640

000d4a40 <_ZN16Adafruit_DotStar10sw_spi_endEv>:

void Adafruit_DotStar::sw_spi_end() { // Stop 'soft' SPI
   d4a40:	b510      	push	{r4, lr}
   d4a42:	4604      	mov	r4, r0
  pinMode(dataPin , INPUT);
   d4a44:	2100      	movs	r1, #0
   d4a46:	7880      	ldrb	r0, [r0, #2]
   d4a48:	f003 fd04 	bl	d8454 <pinMode>
  pinMode(clockPin, INPUT);
   d4a4c:	78e0      	ldrb	r0, [r4, #3]
   d4a4e:	2100      	movs	r1, #0
}
   d4a50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pinMode(clockPin, INPUT);
   d4a54:	f003 bcfe 	b.w	d8454 <pinMode>

000d4a58 <_ZN16Adafruit_DotStar10sw_spi_outEh>:

void Adafruit_DotStar::sw_spi_out(uint8_t n) { // Bitbang SPI write
   d4a58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d4a5a:	4f23      	ldr	r7, [pc, #140]	; (d4ae8 <_ZN16Adafruit_DotStar10sw_spi_outEh+0x90>)
   d4a5c:	4605      	mov	r5, r0
   d4a5e:	460c      	mov	r4, r1
   d4a60:	2609      	movs	r6, #9
  for(uint8_t i=8; i--; n <<= 1) {
   d4a62:	3e01      	subs	r6, #1
   d4a64:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   d4a68:	d03c      	beq.n	d4ae4 <_ZN16Adafruit_DotStar10sw_spi_outEh+0x8c>
    if(n & 0x80) pinSet(dataPin, HIGH);
   d4a6a:	78ab      	ldrb	r3, [r5, #2]
   d4a6c:	683a      	ldr	r2, [r7, #0]
   d4a6e:	0119      	lsls	r1, r3, #4
   d4a70:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   d4a74:	5c50      	ldrb	r0, [r2, r1]
   d4a76:	785b      	ldrb	r3, [r3, #1]
   d4a78:	f003 031f 	and.w	r3, r3, #31
   d4a7c:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   d4a80:	0623      	lsls	r3, r4, #24
   d4a82:	d52c      	bpl.n	d4ade <_ZN16Adafruit_DotStar10sw_spi_outEh+0x86>
   d4a84:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4a86:	a801      	add	r0, sp, #4
   d4a88:	f7ff ff8a 	bl	d49a0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d4a8c:	9a01      	ldr	r2, [sp, #4]
   d4a8e:	2301      	movs	r3, #1
   d4a90:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   d4a92:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    else         pinSet(dataPin, LOW);
    pinSet(clockPin, HIGH);
   d4a96:	78eb      	ldrb	r3, [r5, #3]
   d4a98:	683a      	ldr	r2, [r7, #0]
   d4a9a:	0119      	lsls	r1, r3, #4
   d4a9c:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   d4aa0:	5c52      	ldrb	r2, [r2, r1]
   d4aa2:	785b      	ldrb	r3, [r3, #1]
   d4aa4:	f003 031f 	and.w	r3, r3, #31
   d4aa8:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4aac:	a801      	add	r0, sp, #4
   d4aae:	9301      	str	r3, [sp, #4]
   d4ab0:	f7ff ff76 	bl	d49a0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d4ab4:	9a01      	ldr	r2, [sp, #4]
   d4ab6:	2301      	movs	r3, #1
   d4ab8:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   d4aba:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    pinSet(clockPin, LOW);
   d4abe:	78eb      	ldrb	r3, [r5, #3]
   d4ac0:	683a      	ldr	r2, [r7, #0]
   d4ac2:	0119      	lsls	r1, r3, #4
   d4ac4:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   d4ac8:	5c50      	ldrb	r0, [r2, r1]
   d4aca:	785b      	ldrb	r3, [r3, #1]
   d4acc:	f003 031f 	and.w	r3, r3, #31
   d4ad0:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
  for(uint8_t i=8; i--; n <<= 1) {
   d4ad4:	0064      	lsls	r4, r4, #1
    pinSet(clockPin, LOW);
   d4ad6:	f7ff ff7b 	bl	d49d0 <nrf_gpio_pin_clear>
  for(uint8_t i=8; i--; n <<= 1) {
   d4ada:	b2e4      	uxtb	r4, r4
   d4adc:	e7c1      	b.n	d4a62 <_ZN16Adafruit_DotStar10sw_spi_outEh+0xa>
    else         pinSet(dataPin, LOW);
   d4ade:	f7ff ff77 	bl	d49d0 <nrf_gpio_pin_clear>
   d4ae2:	e7d8      	b.n	d4a96 <_ZN16Adafruit_DotStar10sw_spi_outEh+0x3e>
  }
}
   d4ae4:	b003      	add	sp, #12
   d4ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4ae8:	2003e640 	.word	0x2003e640

000d4aec <_ZN16Adafruit_DotStar5clearEv>:

  //__enable_irq();
}

void Adafruit_DotStar::clear() { // Write 0s (off) to full pixel buffer
  memset(pixels, 0, numLEDs * 3);
   d4aec:	8802      	ldrh	r2, [r0, #0]
   d4aee:	6880      	ldr	r0, [r0, #8]
   d4af0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   d4af4:	2100      	movs	r1, #0
   d4af6:	f004 bb75 	b.w	d91e4 <memset>

000d4afa <_ZN16Adafruit_DotStar12updateLengthEt>:
void Adafruit_DotStar::updateLength(uint16_t n) {
   d4afa:	b538      	push	{r3, r4, r5, lr}
   d4afc:	4604      	mov	r4, r0
  if(pixels) free(pixels);
   d4afe:	6880      	ldr	r0, [r0, #8]
void Adafruit_DotStar::updateLength(uint16_t n) {
   d4b00:	460d      	mov	r5, r1
  if(pixels) free(pixels);
   d4b02:	b108      	cbz	r0, d4b08 <_ZN16Adafruit_DotStar12updateLengthEt+0xe>
   d4b04:	f001 f9d4 	bl	d5eb0 <free>
  uint16_t bytes = n * 3;
   d4b08:	eb05 0045 	add.w	r0, r5, r5, lsl #1
  if((pixels = (uint8_t *)malloc(bytes))) {
   d4b0c:	b280      	uxth	r0, r0
   d4b0e:	f001 f9c7 	bl	d5ea0 <malloc>
   d4b12:	60a0      	str	r0, [r4, #8]
   d4b14:	b128      	cbz	r0, d4b22 <_ZN16Adafruit_DotStar12updateLengthEt+0x28>
    numLEDs = n;
   d4b16:	8025      	strh	r5, [r4, #0]
    clear();
   d4b18:	4620      	mov	r0, r4
}
   d4b1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    clear();
   d4b1e:	f7ff bfe5 	b.w	d4aec <_ZN16Adafruit_DotStar5clearEv>
    numLEDs = 0;
   d4b22:	8020      	strh	r0, [r4, #0]
}
   d4b24:	bd38      	pop	{r3, r4, r5, pc}

000d4b26 <_ZN16Adafruit_DotStarC1Eth>:
Adafruit_DotStar::Adafruit_DotStar(uint16_t n, uint8_t o) :
   d4b26:	b510      	push	{r4, lr}
 rOffset(o & 3), gOffset((o >> 2) & 3), bOffset((o >> 4) & 3)
   d4b28:	23ff      	movs	r3, #255	; 0xff
   d4b2a:	7083      	strb	r3, [r0, #2]
   d4b2c:	2300      	movs	r3, #0
   d4b2e:	7103      	strb	r3, [r0, #4]
   d4b30:	6083      	str	r3, [r0, #8]
   d4b32:	f002 0303 	and.w	r3, r2, #3
   d4b36:	7303      	strb	r3, [r0, #12]
   d4b38:	f3c2 0381 	ubfx	r3, r2, #2, #2
   d4b3c:	f3c2 1201 	ubfx	r2, r2, #4, #2
Adafruit_DotStar::Adafruit_DotStar(uint16_t n, uint8_t o) :
   d4b40:	4604      	mov	r4, r0
 rOffset(o & 3), gOffset((o >> 2) & 3), bOffset((o >> 4) & 3)
   d4b42:	8001      	strh	r1, [r0, #0]
   d4b44:	7343      	strb	r3, [r0, #13]
   d4b46:	7382      	strb	r2, [r0, #14]
  updateLength(n);
   d4b48:	f7ff ffd7 	bl	d4afa <_ZN16Adafruit_DotStar12updateLengthEt>
}
   d4b4c:	4620      	mov	r0, r4
   d4b4e:	bd10      	pop	{r4, pc}

000d4b50 <_ZN16Adafruit_DotStar13setPixelColorEtm>:
  }
}

// Set pixel color, 'packed' RGB value (0x000000 - 0xFFFFFF)
void Adafruit_DotStar::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
   d4b50:	8803      	ldrh	r3, [r0, #0]
   d4b52:	428b      	cmp	r3, r1
void Adafruit_DotStar::setPixelColor(uint16_t n, uint32_t c) {
   d4b54:	b510      	push	{r4, lr}
  if(n < numLEDs) {
   d4b56:	d90b      	bls.n	d4b70 <_ZN16Adafruit_DotStar13setPixelColorEtm+0x20>
    uint8_t *p = &pixels[n * 3];
   d4b58:	6883      	ldr	r3, [r0, #8]
   d4b5a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   d4b5e:	4419      	add	r1, r3
    p[rOffset] = (uint8_t)(c >> 16);
   d4b60:	7b03      	ldrb	r3, [r0, #12]
   d4b62:	0c14      	lsrs	r4, r2, #16
   d4b64:	54cc      	strb	r4, [r1, r3]
    p[gOffset] = (uint8_t)(c >>  8);
   d4b66:	7b43      	ldrb	r3, [r0, #13]
   d4b68:	0a14      	lsrs	r4, r2, #8
   d4b6a:	54cc      	strb	r4, [r1, r3]
    p[bOffset] = (uint8_t)c;
   d4b6c:	7b83      	ldrb	r3, [r0, #14]
   d4b6e:	54ca      	strb	r2, [r1, r3]
  }
}
   d4b70:	bd10      	pop	{r4, pc}
	...

000d4b74 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d4b74:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   d4b76:	4c0b      	ldr	r4, [pc, #44]	; (d4ba4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   d4b78:	7821      	ldrb	r1, [r4, #0]
   d4b7a:	f3bf 8f5b 	dmb	ish
   d4b7e:	f011 0101 	ands.w	r1, r1, #1
   d4b82:	d10b      	bne.n	d4b9c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d4b84:	4620      	mov	r0, r4
   d4b86:	9101      	str	r1, [sp, #4]
   d4b88:	f7ff fa8b 	bl	d40a2 <__cxa_guard_acquire>
   d4b8c:	9901      	ldr	r1, [sp, #4]
   d4b8e:	b128      	cbz	r0, d4b9c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d4b90:	4805      	ldr	r0, [pc, #20]	; (d4ba8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d4b92:	f001 fa09 	bl	d5fa8 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d4b96:	4620      	mov	r0, r4
   d4b98:	f7ff fa88 	bl	d40ac <__cxa_guard_release>
        return instance;
    }
   d4b9c:	4802      	ldr	r0, [pc, #8]	; (d4ba8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d4b9e:	b002      	add	sp, #8
   d4ba0:	bd10      	pop	{r4, pc}
   d4ba2:	bf00      	nop
   d4ba4:	2003e634 	.word	0x2003e634
   d4ba8:	2003e638 	.word	0x2003e638

000d4bac <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE3endEv.isra.0>:
        instance().begin(ss_pin);
    }
    void begin(hal_spi_mode_t mode, uint16_t ss_pin = SPI_DEFAULT_SS) {
        instance().begin(mode, ss_pin);
    }
    void end() {
   d4bac:	b508      	push	{r3, lr}
        instance().end();
   d4bae:	f7ff ffe1 	bl	d4b74 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    }
   d4bb2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        instance().end();
   d4bb6:	f001 ba12 	b.w	d5fde <_ZN8SPIClass3endEv>

000d4bba <_ZN16Adafruit_DotStarD1Ev>:
Adafruit_DotStar::~Adafruit_DotStar(void) { // Destructor
   d4bba:	b510      	push	{r4, lr}
   d4bbc:	4604      	mov	r4, r0
  if(pixels)                free(pixels);
   d4bbe:	6880      	ldr	r0, [r0, #8]
   d4bc0:	b108      	cbz	r0, d4bc6 <_ZN16Adafruit_DotStarD1Ev+0xc>
   d4bc2:	f001 f975 	bl	d5eb0 <free>
  if(dataPin == USE_HW_SPI) hw_spi_end();
   d4bc6:	78a3      	ldrb	r3, [r4, #2]
   d4bc8:	2bff      	cmp	r3, #255	; 0xff
   d4bca:	d103      	bne.n	d4bd4 <_ZN16Adafruit_DotStarD1Ev+0x1a>
  SPI.end();
   d4bcc:	f7ff ffee 	bl	d4bac <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE3endEv.isra.0>
}
   d4bd0:	4620      	mov	r0, r4
   d4bd2:	bd10      	pop	{r4, pc}
  else                      sw_spi_end();
   d4bd4:	4620      	mov	r0, r4
   d4bd6:	f7ff ff33 	bl	d4a40 <_ZN16Adafruit_DotStar10sw_spi_endEv>
   d4bda:	e7f9      	b.n	d4bd0 <_ZN16Adafruit_DotStarD1Ev+0x16>

000d4bdc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>:
        return instance().setClockSpeed(value, scale);
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
   d4bdc:	b507      	push	{r0, r1, r2, lr}
   d4bde:	9001      	str	r0, [sp, #4]
        return instance().transfer(data);
   d4be0:	f7ff ffc8 	bl	d4b74 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d4be4:	9901      	ldr	r1, [sp, #4]
    }
   d4be6:	b003      	add	sp, #12
   d4be8:	f85d eb04 	ldr.w	lr, [sp], #4
        return instance().transfer(data);
   d4bec:	f001 ba9a 	b.w	d6124 <_ZN8SPIClass8transferEh>

000d4bf0 <_ZN16Adafruit_DotStar4showEv>:
void Adafruit_DotStar::show(void) {
   d4bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(!pixels) return;
   d4bf4:	6884      	ldr	r4, [r0, #8]
void Adafruit_DotStar::show(void) {
   d4bf6:	4606      	mov	r6, r0
  if(!pixels) return;
   d4bf8:	2c00      	cmp	r4, #0
   d4bfa:	d074      	beq.n	d4ce6 <_ZN16Adafruit_DotStar4showEv+0xf6>
  if(dataPin == USE_HW_SPI) {
   d4bfc:	7883      	ldrb	r3, [r0, #2]
  uint16_t n   = numLEDs;              // Counter
   d4bfe:	8805      	ldrh	r5, [r0, #0]
  uint16_t b16 = (uint16_t)brightness; // Type-convert for fixed-point math
   d4c00:	7907      	ldrb	r7, [r0, #4]
  if(dataPin == USE_HW_SPI) {
   d4c02:	2bff      	cmp	r3, #255	; 0xff
   d4c04:	d143      	bne.n	d4c8e <_ZN16Adafruit_DotStar4showEv+0x9e>
    for(i=0; i<4; i++) spi_out(0x00);    // 4 byte start-frame marker
   d4c06:	2000      	movs	r0, #0
   d4c08:	f7ff ffe8 	bl	d4bdc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
   d4c0c:	2000      	movs	r0, #0
   d4c0e:	f7ff ffe5 	bl	d4bdc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
   d4c12:	2000      	movs	r0, #0
   d4c14:	f7ff ffe2 	bl	d4bdc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
   d4c18:	2000      	movs	r0, #0
   d4c1a:	f7ff ffdf 	bl	d4bdc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
    if(brightness) {                     // Scale pixel brightness on output
   d4c1e:	7933      	ldrb	r3, [r6, #4]
   d4c20:	3403      	adds	r4, #3
   d4c22:	b1fb      	cbz	r3, d4c64 <_ZN16Adafruit_DotStar4showEv+0x74>
        spi_out(0xFF);                   //  Pixel start
   d4c24:	20ff      	movs	r0, #255	; 0xff
   d4c26:	1ee6      	subs	r6, r4, #3
   d4c28:	f7ff ffd8 	bl	d4bdc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
        for(i=0; i<3; i++) spi_out((*ptr++ * b16) >> 8); // Scale, write RGB
   d4c2c:	f816 0b01 	ldrb.w	r0, [r6], #1
   d4c30:	fb10 f007 	smulbb	r0, r0, r7
   d4c34:	0a00      	lsrs	r0, r0, #8
   d4c36:	f7ff ffd1 	bl	d4bdc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
   d4c3a:	42a6      	cmp	r6, r4
   d4c3c:	d1f6      	bne.n	d4c2c <_ZN16Adafruit_DotStar4showEv+0x3c>
      } while(--n);
   d4c3e:	3d01      	subs	r5, #1
   d4c40:	b2ad      	uxth	r5, r5
   d4c42:	3403      	adds	r4, #3
   d4c44:	2d00      	cmp	r5, #0
   d4c46:	d1ed      	bne.n	d4c24 <_ZN16Adafruit_DotStar4showEv+0x34>
    for(i=0; i<4; i++) spi_out(0xFF);
   d4c48:	20ff      	movs	r0, #255	; 0xff
   d4c4a:	f7ff ffc7 	bl	d4bdc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
   d4c4e:	20ff      	movs	r0, #255	; 0xff
   d4c50:	f7ff ffc4 	bl	d4bdc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
   d4c54:	20ff      	movs	r0, #255	; 0xff
   d4c56:	f7ff ffc1 	bl	d4bdc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
}
   d4c5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    for(i=0; i<4; i++) spi_out(0xFF);
   d4c5e:	20ff      	movs	r0, #255	; 0xff
   d4c60:	f7ff bfbc 	b.w	d4bdc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
        spi_out(0xFF);                   //  Pixel start
   d4c64:	20ff      	movs	r0, #255	; 0xff
   d4c66:	f7ff ffb9 	bl	d4bdc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
        for(i=0; i<3; i++) spi_out(*ptr++); // Write R,G,B
   d4c6a:	f814 0c03 	ldrb.w	r0, [r4, #-3]
   d4c6e:	f7ff ffb5 	bl	d4bdc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
      } while(--n);
   d4c72:	3d01      	subs	r5, #1
        for(i=0; i<3; i++) spi_out(*ptr++); // Write R,G,B
   d4c74:	f814 0c02 	ldrb.w	r0, [r4, #-2]
   d4c78:	f7ff ffb0 	bl	d4bdc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
      } while(--n);
   d4c7c:	b2ad      	uxth	r5, r5
        for(i=0; i<3; i++) spi_out(*ptr++); // Write R,G,B
   d4c7e:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   d4c82:	f7ff ffab 	bl	d4bdc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
      } while(--n);
   d4c86:	3403      	adds	r4, #3
   d4c88:	2d00      	cmp	r5, #0
   d4c8a:	d1eb      	bne.n	d4c64 <_ZN16Adafruit_DotStar4showEv+0x74>
   d4c8c:	e7dc      	b.n	d4c48 <_ZN16Adafruit_DotStar4showEv+0x58>
   d4c8e:	f04f 0804 	mov.w	r8, #4
    for(i=0; i<4; i++) sw_spi_out(0);    // Start-frame marker
   d4c92:	2100      	movs	r1, #0
   d4c94:	4630      	mov	r0, r6
   d4c96:	f108 38ff 	add.w	r8, r8, #4294967295
   d4c9a:	f7ff fedd 	bl	d4a58 <_ZN16Adafruit_DotStar10sw_spi_outEh>
   d4c9e:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
   d4ca2:	d1f6      	bne.n	d4c92 <_ZN16Adafruit_DotStar4showEv+0xa2>
    if(brightness) {                     // Scale pixel brightness on output
   d4ca4:	7933      	ldrb	r3, [r6, #4]
   d4ca6:	3403      	adds	r4, #3
   d4ca8:	b1fb      	cbz	r3, d4cea <_ZN16Adafruit_DotStar4showEv+0xfa>
        sw_spi_out(0xFF);                //  Pixel start
   d4caa:	21ff      	movs	r1, #255	; 0xff
   d4cac:	4630      	mov	r0, r6
   d4cae:	f1a4 0803 	sub.w	r8, r4, #3
   d4cb2:	f7ff fed1 	bl	d4a58 <_ZN16Adafruit_DotStar10sw_spi_outEh>
        for(i=0; i<3; i++) sw_spi_out((*ptr++ * b16) >> 8); // Scale, write
   d4cb6:	f818 1b01 	ldrb.w	r1, [r8], #1
   d4cba:	fb11 f107 	smulbb	r1, r1, r7
   d4cbe:	0a09      	lsrs	r1, r1, #8
   d4cc0:	4630      	mov	r0, r6
   d4cc2:	f7ff fec9 	bl	d4a58 <_ZN16Adafruit_DotStar10sw_spi_outEh>
   d4cc6:	45a0      	cmp	r8, r4
   d4cc8:	d1f5      	bne.n	d4cb6 <_ZN16Adafruit_DotStar4showEv+0xc6>
      } while(--n);
   d4cca:	3d01      	subs	r5, #1
   d4ccc:	b2ad      	uxth	r5, r5
   d4cce:	3403      	adds	r4, #3
   d4cd0:	2d00      	cmp	r5, #0
   d4cd2:	d1ea      	bne.n	d4caa <_ZN16Adafruit_DotStar4showEv+0xba>
   d4cd4:	2404      	movs	r4, #4
    for(i=0; i<4; i++) sw_spi_out(0xFF); // End-frame marker (see note above)
   d4cd6:	21ff      	movs	r1, #255	; 0xff
   d4cd8:	4630      	mov	r0, r6
   d4cda:	3c01      	subs	r4, #1
   d4cdc:	f7ff febc 	bl	d4a58 <_ZN16Adafruit_DotStar10sw_spi_outEh>
   d4ce0:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   d4ce4:	d1f7      	bne.n	d4cd6 <_ZN16Adafruit_DotStar4showEv+0xe6>
}
   d4ce6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        sw_spi_out(0xFF);                //  Pixel start
   d4cea:	21ff      	movs	r1, #255	; 0xff
   d4cec:	4630      	mov	r0, r6
   d4cee:	1ee7      	subs	r7, r4, #3
   d4cf0:	f7ff feb2 	bl	d4a58 <_ZN16Adafruit_DotStar10sw_spi_outEh>
        for(i=0; i<3; i++) sw_spi_out(*ptr++); // R,G,B
   d4cf4:	f817 1b01 	ldrb.w	r1, [r7], #1
   d4cf8:	4630      	mov	r0, r6
   d4cfa:	f7ff fead 	bl	d4a58 <_ZN16Adafruit_DotStar10sw_spi_outEh>
   d4cfe:	42a7      	cmp	r7, r4
   d4d00:	d1f8      	bne.n	d4cf4 <_ZN16Adafruit_DotStar4showEv+0x104>
      } while(--n);
   d4d02:	3d01      	subs	r5, #1
   d4d04:	b2ad      	uxth	r5, r5
   d4d06:	3403      	adds	r4, #3
   d4d08:	2d00      	cmp	r5, #0
   d4d0a:	d1ee      	bne.n	d4cea <_ZN16Adafruit_DotStar4showEv+0xfa>
   d4d0c:	e7e2      	b.n	d4cd4 <_ZN16Adafruit_DotStar4showEv+0xe4>

000d4d0e <_ZN16Adafruit_DotStar11hw_spi_initEv>:
void Adafruit_DotStar::hw_spi_init(void) { // Initialize hardware SPI
   d4d0e:	b508      	push	{r3, lr}
        instance().begin();
   d4d10:	f7ff ff30 	bl	d4b74 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d4d14:	f001 f952 	bl	d5fbc <_ZN8SPIClass5beginEv>
        instance().setClockDivider(divider);
   d4d18:	f7ff ff2c 	bl	d4b74 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d4d1c:	2108      	movs	r1, #8
   d4d1e:	f001 f9db 	bl	d60d8 <_ZN8SPIClass15setClockDividerEh>
        instance().setBitOrder(order);
   d4d22:	f7ff ff27 	bl	d4b74 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d4d26:	2101      	movs	r1, #1
   d4d28:	f001 f968 	bl	d5ffc <_ZN8SPIClass11setBitOrderEh>
        instance().setDataMode(mode);
   d4d2c:	f7ff ff22 	bl	d4b74 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
}
   d4d30:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4d34:	2100      	movs	r1, #0
   d4d36:	f001 b974 	b.w	d6022 <_ZN8SPIClass11setDataModeEh>

000d4d3a <_ZN16Adafruit_DotStar5beginEv>:
  if(dataPin == USE_HW_SPI) hw_spi_init();
   d4d3a:	7883      	ldrb	r3, [r0, #2]
   d4d3c:	2bff      	cmp	r3, #255	; 0xff
   d4d3e:	d101      	bne.n	d4d44 <_ZN16Adafruit_DotStar5beginEv+0xa>
   d4d40:	f7ff bfe5 	b.w	d4d0e <_ZN16Adafruit_DotStar11hw_spi_initEv>
  else                      sw_spi_init();
   d4d44:	f7ff be52 	b.w	d49ec <_ZN16Adafruit_DotStar11sw_spi_initEv>

000d4d48 <_GLOBAL__sub_I_PIN_MAP2>:
// Return pointer to the library's pixel data buffer.  Use carefully,
// much opportunity for mayhem.  It's mostly for code that needs fast
// transfers, e.g. SD card to LEDs.  Color data is in BGR order.
uint8_t *Adafruit_DotStar::getPixels(void) const {
  return pixels;
}
   d4d48:	b508      	push	{r3, lr}
  NRF5x_Pin_Info* PIN_MAP2 = HAL_Pin_Map();
   d4d4a:	f000 fddb 	bl	d5904 <HAL_Pin_Map>
   d4d4e:	4b01      	ldr	r3, [pc, #4]	; (d4d54 <_GLOBAL__sub_I_PIN_MAP2+0xc>)
   d4d50:	6018      	str	r0, [r3, #0]
}
   d4d52:	bd08      	pop	{r3, pc}
   d4d54:	2003e640 	.word	0x2003e640

000d4d58 <_ZN10HttpClientC1Ev>:
static const uint16_t TIMEOUT = 5000; // Allow maximum 5s between data packets.

/**
* Constructor.
*/
HttpClient::HttpClient()
   d4d58:	b510      	push	{r4, lr}
   d4d5a:	4604      	mov	r4, r0
   d4d5c:	f003 f9bc 	bl	d80d8 <_ZN9TCPClientC1Ev>
{

}
   d4d60:	4620      	mov	r0, r4
   d4d62:	bd10      	pop	{r4, pc}

000d4d64 <_ZN10HttpClient10sendHeaderEPKcS1_>:

/**
* Method to send a header, should only be called from within the class.
*/
void HttpClient::sendHeader(const char* aHeaderName, const char* aHeaderValue)
{
   d4d64:	b538      	push	{r3, r4, r5, lr}
   d4d66:	4604      	mov	r4, r0
   d4d68:	4615      	mov	r5, r2
    client.print(aHeaderName);
   d4d6a:	f002 fc85 	bl	d7678 <_ZN5Print5printEPKc>
    client.print(": ");
   d4d6e:	4905      	ldr	r1, [pc, #20]	; (d4d84 <_ZN10HttpClient10sendHeaderEPKcS1_+0x20>)
   d4d70:	4620      	mov	r0, r4
   d4d72:	f002 fc81 	bl	d7678 <_ZN5Print5printEPKc>
    client.println(aHeaderValue);
   d4d76:	4629      	mov	r1, r5
   d4d78:	4620      	mov	r0, r4
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
   d4d7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    client.println(aHeaderValue);
   d4d7e:	f002 bc8e 	b.w	d769e <_ZN5Print7printlnEPKc>
   d4d82:	bf00      	nop
   d4d84:	000db0a5 	.word	0x000db0a5

000d4d88 <_ZN10HttpClient10sendHeaderEPKci>:

void HttpClient::sendHeader(const char* aHeaderName, const int aHeaderValue)
{
   d4d88:	b538      	push	{r3, r4, r5, lr}
   d4d8a:	4605      	mov	r5, r0
   d4d8c:	4614      	mov	r4, r2
    client.print(aHeaderName);
   d4d8e:	f002 fc73 	bl	d7678 <_ZN5Print5printEPKc>
    client.print(": ");
   d4d92:	490b      	ldr	r1, [pc, #44]	; (d4dc0 <_ZN10HttpClient10sendHeaderEPKci+0x38>)
   d4d94:	4628      	mov	r0, r5
   d4d96:	f002 fc6f 	bl	d7678 <_ZN5Print5printEPKc>
        if (n < 0 && base == 10) {
   d4d9a:	2c00      	cmp	r4, #0
   d4d9c:	da0d      	bge.n	d4dba <_ZN10HttpClient10sendHeaderEPKci+0x32>
            t = print('-');
   d4d9e:	212d      	movs	r1, #45	; 0x2d
   d4da0:	4628      	mov	r0, r5
   d4da2:	f002 fc6d 	bl	d7680 <_ZN5Print5printEc>
            val = -n;
   d4da6:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   d4da8:	4628      	mov	r0, r5
   d4daa:	220a      	movs	r2, #10
   d4dac:	f002 fc81 	bl	d76b2 <_ZN5Print11printNumberEmh>
        n += println();
   d4db0:	4628      	mov	r0, r5
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
   d4db2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4db6:	f002 bc66 	b.w	d7686 <_ZN5Print7printlnEv>
            val = n;
   d4dba:	4621      	mov	r1, r4
   d4dbc:	e7f4      	b.n	d4da8 <_ZN10HttpClient10sendHeaderEPKci+0x20>
   d4dbe:	bf00      	nop
   d4dc0:	000db0a5 	.word	0x000db0a5

000d4dc4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>:
* Method to send an HTTP Request. Allocate variables in your application code
* in the aResponse struct and set the headers and the options in the aRequest
* struct.
*/
void HttpClient::request(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[], const char* aHttpMethod)
{
   d4dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4dc8:	460e      	mov	r6, r1
   d4dca:	b091      	sub	sp, #68	; 0x44
   d4dcc:	4698      	mov	r8, r3
    // If a proper response code isn't received it will be set to -1.
    aResponse.status = -1;
   d4dce:	f04f 33ff 	mov.w	r3, #4294967295
   d4dd2:	6013      	str	r3, [r2, #0]
{
   d4dd4:	4604      	mov	r4, r0
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d4dd6:	2100      	movs	r1, #0
   d4dd8:	4630      	mov	r0, r6
   d4dda:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
   d4dde:	4617      	mov	r7, r2
   d4de0:	f001 fa7c 	bl	d62dc <_ZNK6String6equalsEPKc>
   d4de4:	f8d6 e038 	ldr.w	lr, [r6, #56]	; 0x38

    // NOTE: The default port tertiary statement is unpredictable if the request structure is not initialised
    // http_request_t request = {0} or memset(&request, 0, sizeof(http_request_t)) should be used
    // to ensure all fields are zero
    bool connected = false;
    if(aRequest.hostname!=NULL) {
   d4de8:	4603      	mov	r3, r0
   d4dea:	b998      	cbnz	r0, d4e14 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x50>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   d4dec:	f1be 0f00 	cmp.w	lr, #0
   d4df0:	bf14      	ite	ne
   d4df2:	4672      	movne	r2, lr
   d4df4:	2250      	moveq	r2, #80	; 0x50
        connected = client.connect(aRequest.hostname.c_str(), (aRequest.port) ? aRequest.port : 80 );
   d4df6:	6831      	ldr	r1, [r6, #0]
   d4df8:	b292      	uxth	r2, r2
   d4dfa:	4620      	mov	r0, r4
   d4dfc:	f003 f980 	bl	d8100 <_ZN9TCPClient7connectEPKctm>
    }   else {
        connected = client.connect(aRequest.ip, aRequest.port);
   d4e00:	1e05      	subs	r5, r0, #0
   d4e02:	bf18      	it	ne
   d4e04:	2501      	movne	r5, #1
    } else {
        Serial.println("HttpClient>\tConnection failed.");
    }
    #endif

    if (!connected) {
   d4e06:	b9c5      	cbnz	r5, d4e3a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x76>
        client.stop();
   d4e08:	4620      	mov	r0, r4
   d4e0a:	f003 f91b 	bl	d8044 <_ZN9TCPClient4stopEv>
    }
    // Return the entire message body from bodyPos+4 till end.
    aResponse.body = "";
    aResponse.body += raw_response.substring(bodyPos+4);
    aResponse.status = atoi(statusCode.c_str());
}
   d4e0e:	b011      	add	sp, #68	; 0x44
   d4e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d4e14:	4b77      	ldr	r3, [pc, #476]	; (d4ff4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x230>)
   d4e16:	930a      	str	r3, [sp, #40]	; 0x28
   d4e18:	f106 0c14 	add.w	ip, r6, #20
   d4e1c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d4e20:	ad0b      	add	r5, sp, #44	; 0x2c
   d4e22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4e24:	f8dc 3000 	ldr.w	r3, [ip]
   d4e28:	702b      	strb	r3, [r5, #0]
        connected = client.connect(aRequest.ip, aRequest.port);
   d4e2a:	fa1f f28e 	uxth.w	r2, lr
   d4e2e:	2300      	movs	r3, #0
   d4e30:	a90a      	add	r1, sp, #40	; 0x28
   d4e32:	4620      	mov	r0, r4
   d4e34:	f003 f831 	bl	d7e9a <_ZN9TCPClient7connectE9IPAddresstm>
   d4e38:	e7e2      	b.n	d4e00 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3c>
    client.print(aHttpMethod);
   d4e3a:	4649      	mov	r1, r9
   d4e3c:	4620      	mov	r0, r4
   d4e3e:	f002 fc1b 	bl	d7678 <_ZN5Print5printEPKc>
    client.print(" ");
   d4e42:	496d      	ldr	r1, [pc, #436]	; (d4ff8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x234>)
   d4e44:	4620      	mov	r0, r4
   d4e46:	f002 fc17 	bl	d7678 <_ZN5Print5printEPKc>
    client.print(aRequest.path);
   d4e4a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   d4e4c:	4620      	mov	r0, r4
   d4e4e:	f002 fc13 	bl	d7678 <_ZN5Print5printEPKc>
    client.print(" HTTP/1.0\r\n");
   d4e52:	496a      	ldr	r1, [pc, #424]	; (d4ffc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x238>)
   d4e54:	4620      	mov	r0, r4
   d4e56:	f002 fc0f 	bl	d7678 <_ZN5Print5printEPKc>
    sendHeader("Connection", "close"); // Not supporting keep-alive for now.
   d4e5a:	4969      	ldr	r1, [pc, #420]	; (d5000 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x23c>)
   d4e5c:	4a69      	ldr	r2, [pc, #420]	; (d5004 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x240>)
   d4e5e:	4620      	mov	r0, r4
   d4e60:	f7ff ff80 	bl	d4d64 <_ZN10HttpClient10sendHeaderEPKcS1_>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d4e64:	2100      	movs	r1, #0
   d4e66:	4630      	mov	r0, r6
   d4e68:	f001 fa38 	bl	d62dc <_ZNK6String6equalsEPKc>
    if(aRequest.hostname!=NULL) {
   d4e6c:	b920      	cbnz	r0, d4e78 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xb4>
        sendHeader("HOST", aRequest.hostname.c_str());
   d4e6e:	6832      	ldr	r2, [r6, #0]
   d4e70:	4965      	ldr	r1, [pc, #404]	; (d5008 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x244>)
   d4e72:	4620      	mov	r0, r4
   d4e74:	f7ff ff76 	bl	d4d64 <_ZN10HttpClient10sendHeaderEPKcS1_>
    if (aRequest.body != NULL) {
   d4e78:	f106 0a3c 	add.w	sl, r6, #60	; 0x3c
   d4e7c:	2100      	movs	r1, #0
   d4e7e:	4650      	mov	r0, sl
   d4e80:	f001 fa2c 	bl	d62dc <_ZNK6String6equalsEPKc>
   d4e84:	b928      	cbnz	r0, d4e92 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xce>
        sendHeader("Content-Length", (aRequest.body).length());
   d4e86:	6c72      	ldr	r2, [r6, #68]	; 0x44
        sendHeader("Content-Length", 0);
   d4e88:	4960      	ldr	r1, [pc, #384]	; (d500c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x248>)
   d4e8a:	4620      	mov	r0, r4
   d4e8c:	f7ff ff7c 	bl	d4d88 <_ZN10HttpClient10sendHeaderEPKci>
   d4e90:	e006      	b.n	d4ea0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xdc>
    } else if (strcmp(aHttpMethod, HTTP_METHOD_POST) == 0) { //Check to see if its a Post method.
   d4e92:	495f      	ldr	r1, [pc, #380]	; (d5010 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x24c>)
   d4e94:	4648      	mov	r0, r9
   d4e96:	f004 f9d1 	bl	d923c <strcmp>
   d4e9a:	4602      	mov	r2, r0
   d4e9c:	2800      	cmp	r0, #0
   d4e9e:	d0f3      	beq.n	d4e88 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xc4>
    if (headers != NULL)
   d4ea0:	f1b8 0f00 	cmp.w	r8, #0
   d4ea4:	d00e      	beq.n	d4ec4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x100>
        while (headers[i].header != NULL)
   d4ea6:	f8d8 1000 	ldr.w	r1, [r8]
   d4eaa:	b159      	cbz	r1, d4ec4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x100>
            if (headers[i].value != NULL) {
   d4eac:	f8d8 2004 	ldr.w	r2, [r8, #4]
                sendHeader(headers[i].header, headers[i].value);
   d4eb0:	4620      	mov	r0, r4
            if (headers[i].value != NULL) {
   d4eb2:	b122      	cbz	r2, d4ebe <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xfa>
                sendHeader(headers[i].header, headers[i].value);
   d4eb4:	f7ff ff56 	bl	d4d64 <_ZN10HttpClient10sendHeaderEPKcS1_>
            i++;
   d4eb8:	f108 0808 	add.w	r8, r8, #8
        while (headers[i].header != NULL)
   d4ebc:	e7f3      	b.n	d4ea6 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xe2>
    client.println(aHeaderName);
   d4ebe:	f002 fbee 	bl	d769e <_ZN5Print7printlnEPKc>
}
   d4ec2:	e7f9      	b.n	d4eb8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xf4>
    client.println();
   d4ec4:	4620      	mov	r0, r4
   d4ec6:	f002 fbde 	bl	d7686 <_ZN5Print7printlnEv>
    client.flush();
   d4eca:	4620      	mov	r0, r4
   d4ecc:	f002 fed8 	bl	d7c80 <_ZN9TCPClient5flushEv>
   d4ed0:	2100      	movs	r1, #0
   d4ed2:	4650      	mov	r0, sl
   d4ed4:	f001 fa02 	bl	d62dc <_ZNK6String6equalsEPKc>
    if (aRequest.body != NULL) {
   d4ed8:	b918      	cbnz	r0, d4ee2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x11e>
        client.println(aRequest.body);
   d4eda:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
   d4edc:	4620      	mov	r0, r4
   d4ede:	f002 fbde 	bl	d769e <_ZN5Print7printlnEPKc>
    memset(&buffer[0], 0, sizeof(buffer));
   d4ee2:	f104 0b1c 	add.w	fp, r4, #28
   d4ee6:	f44f 5220 	mov.w	r2, #10240	; 0x2800
   d4eea:	2100      	movs	r1, #0
   d4eec:	4658      	mov	r0, fp
   d4eee:	f004 f979 	bl	d91e4 <memset>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4ef2:	f000 fd2f 	bl	d5954 <HAL_Timer_Get_Milli_Seconds>
   d4ef6:	9001      	str	r0, [sp, #4]
   d4ef8:	f000 fd2c 	bl	d5954 <HAL_Timer_Get_Milli_Seconds>
    bool error = false;
   d4efc:	f04f 0800 	mov.w	r8, #0
                buffer[bufferPosition] = '\0'; // Null-terminate buffer
   d4f00:	f504 5a20 	add.w	sl, r4, #10240	; 0x2800
    unsigned int bufferPosition = 0;
   d4f04:	4646      	mov	r6, r8
                buffer[bufferPosition] = '\0'; // Null-terminate buffer
   d4f06:	f10a 0a1b 	add.w	sl, sl, #27
        while (client.available()) {
   d4f0a:	4620      	mov	r0, r4
   d4f0c:	f003 f840 	bl	d7f90 <_ZN9TCPClient9availableEv>
   d4f10:	b1d8      	cbz	r0, d4f4a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x186>
            char c = client.read();
   d4f12:	4620      	mov	r0, r4
   d4f14:	f002 ff75 	bl	d7e02 <_ZN9TCPClient4readEv>
   d4f18:	4681      	mov	r9, r0
   d4f1a:	f000 fd1b 	bl	d5954 <HAL_Timer_Get_Milli_Seconds>
            if (bufferPosition < sizeof(buffer)-1) {
   d4f1e:	f242 73fe 	movw	r3, #10238	; 0x27fe
   d4f22:	429e      	cmp	r6, r3
   d4f24:	9001      	str	r0, [sp, #4]
   d4f26:	d804      	bhi.n	d4f32 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x16e>
                buffer[bufferPosition] = c;
   d4f28:	19a3      	adds	r3, r4, r6
            char c = client.read();
   d4f2a:	f883 901c 	strb.w	r9, [r3, #28]
            bufferPosition++;
   d4f2e:	3601      	adds	r6, #1
        while (client.available()) {
   d4f30:	e7eb      	b.n	d4f0a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x146>
            } else if ((bufferPosition == sizeof(buffer)-1)) {
   d4f32:	f242 73ff 	movw	r3, #10239	; 0x27ff
   d4f36:	429e      	cmp	r6, r3
   d4f38:	d1f9      	bne.n	d4f2e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x16a>
                buffer[bufferPosition] = '\0'; // Null-terminate buffer
   d4f3a:	2300      	movs	r3, #0
   d4f3c:	f88a 3000 	strb.w	r3, [sl]
                client.stop();
   d4f40:	4620      	mov	r0, r4
   d4f42:	f003 f87f 	bl	d8044 <_ZN9TCPClient4stopEv>
                error = true;
   d4f46:	46a8      	mov	r8, r5
   d4f48:	e7f1      	b.n	d4f2e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x16a>
        buffer[bufferPosition] = '\0'; // Null-terminate buffer
   d4f4a:	19a3      	adds	r3, r4, r6
   d4f4c:	7718      	strb	r0, [r3, #28]
   d4f4e:	f000 fd01 	bl	d5954 <HAL_Timer_Get_Milli_Seconds>
        timeout = millis() - lastRead > TIMEOUT;
   d4f52:	9b01      	ldr	r3, [sp, #4]
   d4f54:	eba0 0903 	sub.w	r9, r0, r3
        if (!error && !timeout) {
   d4f58:	f1b8 0f00 	cmp.w	r8, #0
   d4f5c:	d106      	bne.n	d4f6c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1a8>
   d4f5e:	f241 3388 	movw	r3, #5000	; 0x1388
   d4f62:	4599      	cmp	r9, r3
   d4f64:	d802      	bhi.n	d4f6c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1a8>
            delay(200);
   d4f66:	20c8      	movs	r0, #200	; 0xc8
   d4f68:	f002 fbda 	bl	d7720 <delay>
    } while (client.connected() && !timeout && !error);
   d4f6c:	4620      	mov	r0, r4
   d4f6e:	f002 fe88 	bl	d7c82 <_ZN9TCPClient9connectedEv>
   d4f72:	b130      	cbz	r0, d4f82 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1be>
   d4f74:	f241 3388 	movw	r3, #5000	; 0x1388
   d4f78:	4599      	cmp	r9, r3
   d4f7a:	d802      	bhi.n	d4f82 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1be>
   d4f7c:	f1b8 0f00 	cmp.w	r8, #0
   d4f80:	d0c3      	beq.n	d4f0a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x146>
    client.stop();
   d4f82:	4620      	mov	r0, r4
   d4f84:	f003 f85e 	bl	d8044 <_ZN9TCPClient4stopEv>
    String raw_response(buffer);
   d4f88:	4659      	mov	r1, fp
   d4f8a:	a802      	add	r0, sp, #8
   d4f8c:	f001 f958 	bl	d6240 <_ZN6StringC1EPKc>
    String statusCode = raw_response.substring(9,12);
   d4f90:	230c      	movs	r3, #12
   d4f92:	2209      	movs	r2, #9
   d4f94:	a902      	add	r1, sp, #8
   d4f96:	a806      	add	r0, sp, #24
   d4f98:	f001 f9c4 	bl	d6324 <_ZNK6String9substringEjj>
    int bodyPos = raw_response.indexOf("\r\n\r\n");
   d4f9c:	491d      	ldr	r1, [pc, #116]	; (d5014 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x250>)
   d4f9e:	a80a      	add	r0, sp, #40	; 0x28
   d4fa0:	f001 f94e 	bl	d6240 <_ZN6StringC1EPKc>
   d4fa4:	a90a      	add	r1, sp, #40	; 0x28
   d4fa6:	a802      	add	r0, sp, #8
   d4fa8:	f001 f9b9 	bl	d631e <_ZNK6String7indexOfERKS_>
   d4fac:	4604      	mov	r4, r0
   d4fae:	a80a      	add	r0, sp, #40	; 0x28
   d4fb0:	f001 f8fb 	bl	d61aa <_ZN6StringD1Ev>
    if (bodyPos == -1) {
   d4fb4:	1c63      	adds	r3, r4, #1
   d4fb6:	d106      	bne.n	d4fc6 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x202>
    String statusCode = raw_response.substring(9,12);
   d4fb8:	a806      	add	r0, sp, #24
   d4fba:	f001 f8f6 	bl	d61aa <_ZN6StringD1Ev>
    String raw_response(buffer);
   d4fbe:	a802      	add	r0, sp, #8
   d4fc0:	f001 f8f3 	bl	d61aa <_ZN6StringD1Ev>
   d4fc4:	e723      	b.n	d4e0e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x4a>
    aResponse.body = "";
   d4fc6:	1d3d      	adds	r5, r7, #4
   d4fc8:	4913      	ldr	r1, [pc, #76]	; (d5018 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x254>)
   d4fca:	4628      	mov	r0, r5
   d4fcc:	f001 f94c 	bl	d6268 <_ZN6StringaSEPKc>
    aResponse.body += raw_response.substring(bodyPos+4);
   d4fd0:	1d22      	adds	r2, r4, #4
   d4fd2:	a902      	add	r1, sp, #8
   d4fd4:	a80a      	add	r0, sp, #40	; 0x28
   d4fd6:	f001 f9c5 	bl	d6364 <_ZNK6String9substringEj>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   d4fda:	a90a      	add	r1, sp, #40	; 0x28
   d4fdc:	4628      	mov	r0, r5
   d4fde:	f001 f96c 	bl	d62ba <_ZN6String6concatERKS_>
   d4fe2:	a80a      	add	r0, sp, #40	; 0x28
   d4fe4:	f001 f8e1 	bl	d61aa <_ZN6StringD1Ev>
    aResponse.status = atoi(statusCode.c_str());
   d4fe8:	9806      	ldr	r0, [sp, #24]
   d4fea:	f004 f8b2 	bl	d9152 <atoi>
   d4fee:	6038      	str	r0, [r7, #0]
   d4ff0:	e7e2      	b.n	d4fb8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1f4>
   d4ff2:	bf00      	nop
   d4ff4:	000db4b8 	.word	0x000db4b8
   d4ff8:	000db0b5 	.word	0x000db0b5
   d4ffc:	000db25b 	.word	0x000db25b
   d5000:	000db26d 	.word	0x000db26d
   d5004:	000db267 	.word	0x000db267
   d5008:	000db278 	.word	0x000db278
   d500c:	000db27d 	.word	0x000db27d
   d5010:	000db28c 	.word	0x000db28c
   d5014:	000db291 	.word	0x000db291
   d5018:	000db295 	.word	0x000db295

000d501c <_ZN13JsonReferenceD1Ev>:
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {

}

JsonReference::~JsonReference() {
}
   d501c:	4770      	bx	lr

000d501e <_ZN13JsonReferenceD0Ev>:
JsonReference::~JsonReference() {
   d501e:	b510      	push	{r4, lr}
}
   d5020:	210c      	movs	r1, #12
JsonReference::~JsonReference() {
   d5022:	4604      	mov	r4, r0
}
   d5024:	f003 fa6d 	bl	d8502 <_ZdlPvj>
   d5028:	4620      	mov	r0, r4
   d502a:	bd10      	pop	{r4, pc}

000d502c <_ZN10JsonBufferD1Ev>:
JsonBuffer::~JsonBuffer() {
   d502c:	b510      	push	{r4, lr}
   d502e:	4b05      	ldr	r3, [pc, #20]	; (d5044 <_ZN10JsonBufferD1Ev+0x18>)
   d5030:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
   d5032:	7c03      	ldrb	r3, [r0, #16]
JsonBuffer::~JsonBuffer() {
   d5034:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
   d5036:	b91b      	cbnz	r3, d5040 <_ZN10JsonBufferD1Ev+0x14>
   d5038:	6840      	ldr	r0, [r0, #4]
   d503a:	b108      	cbz	r0, d5040 <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
   d503c:	f000 ff38 	bl	d5eb0 <free>
}
   d5040:	4620      	mov	r0, r4
   d5042:	bd10      	pop	{r4, pc}
   d5044:	000db2a4 	.word	0x000db2a4

000d5048 <_ZN10JsonBufferD0Ev>:
JsonBuffer::~JsonBuffer() {
   d5048:	b510      	push	{r4, lr}
   d504a:	4604      	mov	r4, r0
}
   d504c:	f7ff ffee 	bl	d502c <_ZN10JsonBufferD1Ev>
   d5050:	4620      	mov	r0, r4
   d5052:	2114      	movs	r1, #20
   d5054:	f003 fa55 	bl	d8502 <_ZdlPvj>
   d5058:	4620      	mov	r0, r4
   d505a:	bd10      	pop	{r4, pc}

000d505c <_ZN10JsonParserD1Ev>:
JsonParser::~JsonParser() {
   d505c:	b510      	push	{r4, lr}
   d505e:	4b07      	ldr	r3, [pc, #28]	; (d507c <_ZN10JsonParserD1Ev+0x20>)
   d5060:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && tokens) {
   d5062:	7c03      	ldrb	r3, [r0, #16]
JsonParser::~JsonParser() {
   d5064:	4604      	mov	r4, r0
	if (!staticBuffers && tokens) {
   d5066:	b91b      	cbnz	r3, d5070 <_ZN10JsonParserD1Ev+0x14>
   d5068:	6940      	ldr	r0, [r0, #20]
   d506a:	b108      	cbz	r0, d5070 <_ZN10JsonParserD1Ev+0x14>
		free(tokens);
   d506c:	f000 ff20 	bl	d5eb0 <free>
JsonParser::~JsonParser() {
   d5070:	4620      	mov	r0, r4
   d5072:	f7ff ffdb 	bl	d502c <_ZN10JsonBufferD1Ev>
}
   d5076:	4620      	mov	r0, r4
   d5078:	bd10      	pop	{r4, pc}
   d507a:	bf00      	nop
   d507c:	000db2b4 	.word	0x000db2b4

000d5080 <_ZN10JsonParserD0Ev>:
JsonParser::~JsonParser() {
   d5080:	b510      	push	{r4, lr}
   d5082:	4604      	mov	r4, r0
}
   d5084:	f7ff ffea 	bl	d505c <_ZN10JsonParserD1Ev>
   d5088:	4620      	mov	r0, r4
   d508a:	212c      	movs	r1, #44	; 0x2c
   d508c:	f003 fa39 	bl	d8502 <_ZdlPvj>
   d5090:	4620      	mov	r0, r4
   d5092:	bd10      	pop	{r4, pc}

000d5094 <_ZN10JsonBuffer8allocateEj>:
bool JsonBuffer::allocate(size_t len) {
   d5094:	b538      	push	{r3, r4, r5, lr}
	if (!staticBuffers) {
   d5096:	7c03      	ldrb	r3, [r0, #16]
bool JsonBuffer::allocate(size_t len) {
   d5098:	4604      	mov	r4, r0
   d509a:	460d      	mov	r5, r1
	if (!staticBuffers) {
   d509c:	b10b      	cbz	r3, d50a2 <_ZN10JsonBuffer8allocateEj+0xe>
		return false;
   d509e:	2000      	movs	r0, #0
}
   d50a0:	bd38      	pop	{r3, r4, r5, pc}
		if (buffer) {
   d50a2:	6840      	ldr	r0, [r0, #4]
   d50a4:	b138      	cbz	r0, d50b6 <_ZN10JsonBuffer8allocateEj+0x22>
			newBuffer = (char *) realloc(buffer, len);
   d50a6:	f000 ff0b 	bl	d5ec0 <realloc>
		if (newBuffer) {
   d50aa:	2800      	cmp	r0, #0
   d50ac:	d0f7      	beq.n	d509e <_ZN10JsonBuffer8allocateEj+0xa>
			bufferLen = len;
   d50ae:	e9c4 0501 	strd	r0, r5, [r4, #4]
			return true;
   d50b2:	2001      	movs	r0, #1
   d50b4:	e7f4      	b.n	d50a0 <_ZN10JsonBuffer8allocateEj+0xc>
			newBuffer = (char *) malloc(len);
   d50b6:	4608      	mov	r0, r1
   d50b8:	f000 fef2 	bl	d5ea0 <malloc>
   d50bc:	e7f5      	b.n	d50aa <_ZN10JsonBuffer8allocateEj+0x16>

000d50be <_ZN10JsonBuffer7addDataEPKcj>:
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   d50be:	b570      	push	{r4, r5, r6, lr}
   d50c0:	68c3      	ldr	r3, [r0, #12]
   d50c2:	460e      	mov	r6, r1
   d50c4:	18d1      	adds	r1, r2, r3
	if (!buffer || (offset + dataLen) > bufferLen) {
   d50c6:	6843      	ldr	r3, [r0, #4]
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   d50c8:	4604      	mov	r4, r0
   d50ca:	4615      	mov	r5, r2
	if (!buffer || (offset + dataLen) > bufferLen) {
   d50cc:	b173      	cbz	r3, d50ec <_ZN10JsonBuffer7addDataEPKcj+0x2e>
   d50ce:	6883      	ldr	r3, [r0, #8]
   d50d0:	428b      	cmp	r3, r1
   d50d2:	d30b      	bcc.n	d50ec <_ZN10JsonBuffer7addDataEPKcj+0x2e>
	memcpy(&buffer[offset], data, dataLen);
   d50d4:	6860      	ldr	r0, [r4, #4]
   d50d6:	68e3      	ldr	r3, [r4, #12]
   d50d8:	462a      	mov	r2, r5
   d50da:	4631      	mov	r1, r6
   d50dc:	4418      	add	r0, r3
   d50de:	f004 f859 	bl	d9194 <memcpy>
	offset += dataLen;
   d50e2:	68e2      	ldr	r2, [r4, #12]
   d50e4:	442a      	add	r2, r5
   d50e6:	60e2      	str	r2, [r4, #12]
	return true;
   d50e8:	2001      	movs	r0, #1
}
   d50ea:	bd70      	pop	{r4, r5, r6, pc}
		if (!allocate(offset + dataLen)) {
   d50ec:	4620      	mov	r0, r4
   d50ee:	f7ff ffd1 	bl	d5094 <_ZN10JsonBuffer8allocateEj>
   d50f2:	2800      	cmp	r0, #0
   d50f4:	d1ee      	bne.n	d50d4 <_ZN10JsonBuffer7addDataEPKcj+0x16>
   d50f6:	e7f8      	b.n	d50ea <_ZN10JsonBuffer7addDataEPKcj+0x2c>

000d50f8 <_ZN10JsonBuffer5clearEv>:
	if (buffer && bufferLen) {
   d50f8:	6843      	ldr	r3, [r0, #4]
	offset = 0;
   d50fa:	2100      	movs	r1, #0
   d50fc:	60c1      	str	r1, [r0, #12]
	if (buffer && bufferLen) {
   d50fe:	b123      	cbz	r3, d510a <_ZN10JsonBuffer5clearEv+0x12>
   d5100:	6882      	ldr	r2, [r0, #8]
   d5102:	b112      	cbz	r2, d510a <_ZN10JsonBuffer5clearEv+0x12>
		memset(buffer, 0, bufferLen);
   d5104:	4618      	mov	r0, r3
   d5106:	f004 b86d 	b.w	d91e4 <memset>
}
   d510a:	4770      	bx	lr

000d510c <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>:
JsonParser::JsonParser(char *buffer, size_t bufferLen, JsonParserGeneratorRK::jsmntok_t *tokens, size_t maxTokens) :
   d510c:	b510      	push	{r4, lr}
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   d510e:	e9c0 1201 	strd	r1, r2, [r0, #4]
   d5112:	2200      	movs	r2, #0
   d5114:	60c2      	str	r2, [r0, #12]
   d5116:	2201      	movs	r2, #1
   d5118:	7402      	strb	r2, [r0, #16]
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {
   d511a:	6143      	str	r3, [r0, #20]
   d511c:	4a02      	ldr	r2, [pc, #8]	; (d5128 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj+0x1c>)
   d511e:	9b02      	ldr	r3, [sp, #8]
   d5120:	6002      	str	r2, [r0, #0]
   d5122:	61c3      	str	r3, [r0, #28]
}
   d5124:	bd10      	pop	{r4, pc}
   d5126:	bf00      	nop
   d5128:	000db2b4 	.word	0x000db2b4

000d512c <_ZNK10JsonParser12getReferenceEv>:
	if (tokens < tokensEnd) {
   d512c:	e9d1 2305 	ldrd	r2, r3, [r1, #20]
   d5130:	429a      	cmp	r2, r3
   d5132:	4b04      	ldr	r3, [pc, #16]	; (d5144 <_ZNK10JsonParser12getReferenceEv+0x18>)

JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
   d5134:	bf38      	it	cc
   d5136:	6082      	strcc	r2, [r0, #8]
   d5138:	e9c0 3100 	strd	r3, r1, [r0]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   d513c:	bf24      	itt	cs
   d513e:	2300      	movcs	r3, #0
   d5140:	6083      	strcs	r3, [r0, #8]
}
   d5142:	4770      	bx	lr
   d5144:	000db2c4 	.word	0x000db2c4

000d5148 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>:
bool JsonParser::skipObject(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&obj) const {
   d5148:	b570      	push	{r4, r5, r6, lr}
	int curObjectEnd = obj->end;
   d514a:	6813      	ldr	r3, [r2, #0]
   d514c:	689d      	ldr	r5, [r3, #8]
	while(++obj < tokensEnd && obj->end < container->end && obj->end <= curObjectEnd) {
   d514e:	6813      	ldr	r3, [r2, #0]
   d5150:	f103 0410 	add.w	r4, r3, #16
   d5154:	6014      	str	r4, [r2, #0]
   d5156:	6986      	ldr	r6, [r0, #24]
   d5158:	42b4      	cmp	r4, r6
   d515a:	d20a      	bcs.n	d5172 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2a>
   d515c:	699b      	ldr	r3, [r3, #24]
   d515e:	688c      	ldr	r4, [r1, #8]
   d5160:	42a3      	cmp	r3, r4
   d5162:	da01      	bge.n	d5168 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x20>
   d5164:	42ab      	cmp	r3, r5
   d5166:	ddf2      	ble.n	d514e <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x6>
	if (obj >= tokensEnd || obj->end > container->end) {
   d5168:	42a3      	cmp	r3, r4
   d516a:	bfcc      	ite	gt
   d516c:	2000      	movgt	r0, #0
   d516e:	2001      	movle	r0, #1
   d5170:	e000      	b.n	d5174 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2c>
		return false;
   d5172:	2000      	movs	r0, #0
}
   d5174:	bd70      	pop	{r4, r5, r6, pc}

000d5176 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>:
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   d5176:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d517a:	9c08      	ldr	r4, [sp, #32]
   d517c:	4698      	mov	r8, r3
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   d517e:	f101 0310 	add.w	r3, r1, #16
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   d5182:	4605      	mov	r5, r0
   d5184:	4617      	mov	r7, r2
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   d5186:	9301      	str	r3, [sp, #4]
	size_t index = 0;
   d5188:	2600      	movs	r6, #0
	while(token < tokensEnd && token->end < container->end) {
   d518a:	9801      	ldr	r0, [sp, #4]
   d518c:	69ab      	ldr	r3, [r5, #24]
   d518e:	4283      	cmp	r3, r0
   d5190:	d91b      	bls.n	d51ca <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x54>
   d5192:	6882      	ldr	r2, [r0, #8]
   d5194:	688b      	ldr	r3, [r1, #8]
   d5196:	429a      	cmp	r2, r3
   d5198:	da17      	bge.n	d51ca <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x54>
		if (desiredIndex == index) {
   d519a:	42a6      	cmp	r6, r4
   d519c:	d10b      	bne.n	d51b6 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
			key = token;
   d519e:	6038      	str	r0, [r7, #0]
			if (skipObject(container, token)) {
   d51a0:	aa01      	add	r2, sp, #4
   d51a2:	4628      	mov	r0, r5
   d51a4:	f7ff ffd0 	bl	d5148 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
   d51a8:	b128      	cbz	r0, d51b6 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
				value = token;
   d51aa:	9b01      	ldr	r3, [sp, #4]
   d51ac:	f8c8 3000 	str.w	r3, [r8]
}
   d51b0:	b002      	add	sp, #8
   d51b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		skipObject(container, token);
   d51b6:	aa01      	add	r2, sp, #4
   d51b8:	4628      	mov	r0, r5
   d51ba:	f7ff ffc5 	bl	d5148 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
		skipObject(container, token);
   d51be:	aa01      	add	r2, sp, #4
   d51c0:	4628      	mov	r0, r5
		index++;
   d51c2:	3601      	adds	r6, #1
		skipObject(container, token);
   d51c4:	f7ff ffc0 	bl	d5148 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
   d51c8:	e7df      	b.n	d518a <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x14>
	return false;
   d51ca:	2000      	movs	r0, #0
   d51cc:	e7f0      	b.n	d51b0 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x3a>

000d51ce <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_>:
bool JsonParser::getValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, size_t desiredIndex, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   d51ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d51d0:	461f      	mov	r7, r3
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   d51d2:	f101 0310 	add.w	r3, r1, #16
bool JsonParser::getValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, size_t desiredIndex, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   d51d6:	4604      	mov	r4, r0
   d51d8:	4616      	mov	r6, r2
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   d51da:	9301      	str	r3, [sp, #4]
	size_t index = 0;
   d51dc:	2500      	movs	r5, #0
	while(token < tokensEnd && token->end < container->end) {
   d51de:	9b01      	ldr	r3, [sp, #4]
   d51e0:	69a2      	ldr	r2, [r4, #24]
   d51e2:	429a      	cmp	r2, r3
   d51e4:	d90f      	bls.n	d5206 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x38>
   d51e6:	6898      	ldr	r0, [r3, #8]
   d51e8:	688a      	ldr	r2, [r1, #8]
   d51ea:	4290      	cmp	r0, r2
   d51ec:	da0b      	bge.n	d5206 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x38>
		if (desiredIndex == index) {
   d51ee:	42b5      	cmp	r5, r6
   d51f0:	d103      	bne.n	d51fa <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x2c>
			value = token;
   d51f2:	603b      	str	r3, [r7, #0]
			return true;
   d51f4:	2001      	movs	r0, #1
}
   d51f6:	b003      	add	sp, #12
   d51f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		skipObject(container, token);
   d51fa:	aa01      	add	r2, sp, #4
   d51fc:	4620      	mov	r0, r4
		index++;
   d51fe:	3501      	adds	r5, #1
		skipObject(container, token);
   d5200:	f7ff ffa2 	bl	d5148 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
   d5204:	e7eb      	b.n	d51de <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x10>
	return false;
   d5206:	2000      	movs	r0, #0
   d5208:	e7f5      	b.n	d51f6 <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_+0x28>
	...

000d520c <_ZNK13JsonReference5indexEj>:
	else {
		return JsonReference(parser);
	}
}

JsonReference JsonReference::index(size_t index) const {
   d520c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d520e:	460d      	mov	r5, r1
	const JsonParserGeneratorRK::jsmntok_t *newToken;

	if (token && parser->getValueTokenByIndex(token, index, newToken)) {
   d5210:	6889      	ldr	r1, [r1, #8]
   d5212:	4e0a      	ldr	r6, [pc, #40]	; (d523c <_ZNK13JsonReference5indexEj+0x30>)
JsonReference JsonReference::index(size_t index) const {
   d5214:	4604      	mov	r4, r0
	if (token && parser->getValueTokenByIndex(token, index, newToken)) {
   d5216:	b161      	cbz	r1, d5232 <_ZNK13JsonReference5indexEj+0x26>
   d5218:	6868      	ldr	r0, [r5, #4]
   d521a:	ab01      	add	r3, sp, #4
   d521c:	f7ff ffd7 	bl	d51ce <_ZNK10JsonParser20getValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEjRS3_>
   d5220:	b138      	cbz	r0, d5232 <_ZNK13JsonReference5indexEj+0x26>
		return JsonReference(parser, newToken);
   d5222:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
   d5224:	e9c4 6300 	strd	r6, r3, [r4]
   d5228:	9b01      	ldr	r3, [sp, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   d522a:	60a3      	str	r3, [r4, #8]
	}
	else {
		return JsonReference(parser);
	}
}
   d522c:	4620      	mov	r0, r4
   d522e:	b002      	add	sp, #8
   d5230:	bd70      	pop	{r4, r5, r6, pc}
		return JsonReference(parser);
   d5232:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   d5234:	e9c4 6300 	strd	r6, r3, [r4]
   d5238:	2300      	movs	r3, #0
   d523a:	e7f6      	b.n	d522a <_ZNK13JsonReference5indexEj+0x1e>
   d523c:	000db2c4 	.word	0x000db2c4

000d5240 <_ZN16JsonParserString6appendEc>:
	if (buf && bufLen) {
		memset(buf, 0, bufLen);
	}
}

void JsonParserString::append(char ch) {
   d5240:	b510      	push	{r4, lr}
   d5242:	4604      	mov	r4, r0
	if (str) {
   d5244:	6800      	ldr	r0, [r0, #0]
void JsonParserString::append(char ch) {
   d5246:	460b      	mov	r3, r1
	if (str) {
   d5248:	b128      	cbz	r0, d5256 <_ZN16JsonParserString6appendEc+0x16>
		str->concat(ch);
   d524a:	f001 f83a 	bl	d62c2 <_ZN6String6concatEc>
	}
	else {
		if (buf && length < (bufLen - 1)) {
			buf[length] = ch;
		}
		length++;
   d524e:	68e3      	ldr	r3, [r4, #12]
   d5250:	3301      	adds	r3, #1
   d5252:	60e3      	str	r3, [r4, #12]
	}
}
   d5254:	bd10      	pop	{r4, pc}
		if (buf && length < (bufLen - 1)) {
   d5256:	6860      	ldr	r0, [r4, #4]
   d5258:	2800      	cmp	r0, #0
   d525a:	d0f8      	beq.n	d524e <_ZN16JsonParserString6appendEc+0xe>
   d525c:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
   d5260:	3a01      	subs	r2, #1
   d5262:	428a      	cmp	r2, r1
			buf[length] = ch;
   d5264:	bf88      	it	hi
   d5266:	5443      	strbhi	r3, [r0, r1]
   d5268:	e7f1      	b.n	d524e <_ZN16JsonParserString6appendEc+0xe>

000d526a <_ZN10JsonParser10appendUtf8EtR16JsonParserString>:
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
   d526a:	4603      	mov	r3, r0
	if (unicode <= 0x007f) {
   d526c:	2b7f      	cmp	r3, #127	; 0x7f
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
   d526e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5270:	4608      	mov	r0, r1
   d5272:	b2d9      	uxtb	r1, r3
	if (unicode <= 0x007f) {
   d5274:	d804      	bhi.n	d5280 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x16>
}
   d5276:	b003      	add	sp, #12
   d5278:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		str.append((char)value);
   d527c:	f7ff bfe0 	b.w	d5240 <_ZN16JsonParserString6appendEc>
	if (unicode <= 0x7ff) {
   d5280:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   d5284:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   d5288:	f343 1587 	sbfx	r5, r3, #6, #8
   d528c:	f041 0480 	orr.w	r4, r1, #128	; 0x80
   d5290:	d208      	bcs.n	d52a4 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x3a>
		value = (0b11000000 | ((unicode >> 6) & 0b11111));
   d5292:	f065 013f 	orn	r1, r5, #63	; 0x3f
		str.append((char)value);
   d5296:	b2c9      	uxtb	r1, r1
   d5298:	9001      	str	r0, [sp, #4]
		str.append((char)value);
   d529a:	f7ff ffd1 	bl	d5240 <_ZN16JsonParserString6appendEc>
		str.append((char)value);
   d529e:	9801      	ldr	r0, [sp, #4]
   d52a0:	4621      	mov	r1, r4
   d52a2:	e7e8      	b.n	d5276 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0xc>
		value = 0b11100000 | ((unicode >> 12) & 0b1111);
   d52a4:	0b1b      	lsrs	r3, r3, #12
		str.append((char)value);
   d52a6:	f043 01e0 	orr.w	r1, r3, #224	; 0xe0
   d52aa:	9001      	str	r0, [sp, #4]
   d52ac:	f7ff ffc8 	bl	d5240 <_ZN16JsonParserString6appendEc>
		value = 0b10000000 | ((unicode >> 6) & 0b111111);
   d52b0:	f005 013f 	and.w	r1, r5, #63	; 0x3f
		str.append((char)value);
   d52b4:	9801      	ldr	r0, [sp, #4]
   d52b6:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   d52ba:	e7ee      	b.n	d529a <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x30>

000d52bc <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   d52bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	bool escape = false;
   d52c0:	2400      	movs	r4, #0
	for(int ii = token->start; ii < token->end; ii++) {
   d52c2:	684e      	ldr	r6, [r1, #4]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   d52c4:	f8df a0cc 	ldr.w	sl, [pc, #204]	; d5394 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd8>
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   d52c8:	4680      	mov	r8, r0
   d52ca:	460f      	mov	r7, r1
   d52cc:	4615      	mov	r5, r2
			escape = false;
   d52ce:	46a1      	mov	r9, r4
	for(int ii = token->start; ii < token->end; ii++) {
   d52d0:	68b8      	ldr	r0, [r7, #8]
   d52d2:	42b0      	cmp	r0, r6
   d52d4:	dd5a      	ble.n	d538c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd0>
		if (escape) {
   d52d6:	f8d8 3004 	ldr.w	r3, [r8, #4]
   d52da:	5d99      	ldrb	r1, [r3, r6]
   d52dc:	199a      	adds	r2, r3, r6
   d52de:	2c00      	cmp	r4, #0
   d52e0:	d04b      	beq.n	d537a <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xbe>
			switch(buffer[ii]) {
   d52e2:	2975      	cmp	r1, #117	; 0x75
   d52e4:	d805      	bhi.n	d52f2 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
   d52e6:	296d      	cmp	r1, #109	; 0x6d
   d52e8:	d807      	bhi.n	d52fa <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x3e>
   d52ea:	2962      	cmp	r1, #98	; 0x62
   d52ec:	d01e      	beq.n	d532c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x70>
   d52ee:	2966      	cmp	r1, #102	; 0x66
   d52f0:	d01e      	beq.n	d5330 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x74>
				str.append(buffer[ii]);
   d52f2:	4628      	mov	r0, r5
   d52f4:	f7ff ffa4 	bl	d5240 <_ZN16JsonParserString6appendEc>
				break;
   d52f8:	e03d      	b.n	d5376 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
   d52fa:	f1a1 046e 	sub.w	r4, r1, #110	; 0x6e
   d52fe:	2c07      	cmp	r4, #7
   d5300:	d8f7      	bhi.n	d52f2 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
   d5302:	f20f 0c08 	addw	ip, pc, #8
   d5306:	f85c f024 	ldr.w	pc, [ip, r4, lsl #2]
   d530a:	bf00      	nop
   d530c:	000d5335 	.word	0x000d5335
   d5310:	000d52f3 	.word	0x000d52f3
   d5314:	000d52f3 	.word	0x000d52f3
   d5318:	000d52f3 	.word	0x000d52f3
   d531c:	000d5339 	.word	0x000d5339
   d5320:	000d52f3 	.word	0x000d52f3
   d5324:	000d533d 	.word	0x000d533d
   d5328:	000d5341 	.word	0x000d5341
				str.append('\b');
   d532c:	2108      	movs	r1, #8
   d532e:	e7e0      	b.n	d52f2 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\f');
   d5330:	210c      	movs	r1, #12
   d5332:	e7de      	b.n	d52f2 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\n');
   d5334:	210a      	movs	r1, #10
   d5336:	e7dc      	b.n	d52f2 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\r');
   d5338:	210d      	movs	r1, #13
   d533a:	e7da      	b.n	d52f2 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\t');
   d533c:	2109      	movs	r1, #9
   d533e:	e7d8      	b.n	d52f2 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				if ((ii + 4) < token->end) {
   d5340:	1d31      	adds	r1, r6, #4
   d5342:	4288      	cmp	r0, r1
   d5344:	dd17      	ble.n	d5376 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
   d5346:	a902      	add	r1, sp, #8
   d5348:	3304      	adds	r3, #4
   d534a:	4433      	add	r3, r6
   d534c:	4608      	mov	r0, r1
						tmp[jj] = buffer[ii + jj + 1];
   d534e:	f812 4f01 	ldrb.w	r4, [r2, #1]!
   d5352:	f801 4b01 	strb.w	r4, [r1], #1
					for(size_t jj = 0; jj < 4; jj++) {
   d5356:	429a      	cmp	r2, r3
   d5358:	d1f9      	bne.n	d534e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x92>
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   d535a:	aa01      	add	r2, sp, #4
   d535c:	4651      	mov	r1, sl
					tmp[4] = 0;
   d535e:	f88d 900c 	strb.w	r9, [sp, #12]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   d5362:	f000 fdb5 	bl	d5ed0 <sscanf>
   d5366:	2801      	cmp	r0, #1
   d5368:	d105      	bne.n	d5376 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
						appendUtf8((uint16_t)unicode, str);
   d536a:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   d536e:	4629      	mov	r1, r5
   d5370:	f7ff ff7b 	bl	d526a <_ZN10JsonParser10appendUtf8EtR16JsonParserString>
						ii += 5; // also increments in loop
   d5374:	3605      	adds	r6, #5
			escape = false;
   d5376:	2400      	movs	r4, #0
   d5378:	e004      	b.n	d5384 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
		if (buffer[ii] == '\\') {
   d537a:	295c      	cmp	r1, #92	; 0x5c
   d537c:	d004      	beq.n	d5388 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xcc>
			str.append(buffer[ii]);
   d537e:	4628      	mov	r0, r5
   d5380:	f7ff ff5e 	bl	d5240 <_ZN16JsonParserString6appendEc>
	for(int ii = token->start; ii < token->end; ii++) {
   d5384:	3601      	adds	r6, #1
   d5386:	e7a3      	b.n	d52d0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x14>
			escape = true;
   d5388:	2401      	movs	r4, #1
   d538a:	e7fb      	b.n	d5384 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
}
   d538c:	2001      	movs	r0, #1
   d538e:	b004      	add	sp, #16
   d5390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d5394:	000db296 	.word	0x000db296

000d5398 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   d5398:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d539a:	460c      	mov	r4, r1
   d539c:	4606      	mov	r6, r0
	result = "";
   d539e:	490c      	ldr	r1, [pc, #48]	; (d53d0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String+0x38>)
   d53a0:	4610      	mov	r0, r2
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   d53a2:	4615      	mov	r5, r2
	result = "";
   d53a4:	f000 ff60 	bl	d6268 <_ZN6StringaSEPKc>
	result.reserve(token->end - token->start + 1);
   d53a8:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   d53ac:	1ac9      	subs	r1, r1, r3
   d53ae:	3101      	adds	r1, #1
   d53b0:	4628      	mov	r0, r5
   d53b2:	f000 ff18 	bl	d61e6 <_ZN6String7reserveEj>
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   d53b6:	2300      	movs	r3, #0
	return getTokenValue(token, strWrapper);
   d53b8:	466a      	mov	r2, sp
   d53ba:	4621      	mov	r1, r4
   d53bc:	4630      	mov	r0, r6
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   d53be:	e9cd 3301 	strd	r3, r3, [sp, #4]
   d53c2:	9500      	str	r5, [sp, #0]
   d53c4:	9303      	str	r3, [sp, #12]
	return getTokenValue(token, strWrapper);
   d53c6:	f7ff ff79 	bl	d52bc <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>
}
   d53ca:	b004      	add	sp, #16
   d53cc:	bd70      	pop	{r4, r5, r6, pc}
   d53ce:	bf00      	nop
   d53d0:	000db295 	.word	0x000db295

000d53d4 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>:
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   d53d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d53d8:	b089      	sub	sp, #36	; 0x24
   d53da:	4605      	mov	r5, r0
   d53dc:	4688      	mov	r8, r1
	String keyName;
   d53de:	a804      	add	r0, sp, #16
   d53e0:	4912      	ldr	r1, [pc, #72]	; (d542c <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x58>)
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   d53e2:	4616      	mov	r6, r2
   d53e4:	4699      	mov	r9, r3
	String keyName;
   d53e6:	f000 ff2b 	bl	d6240 <_ZN6StringC1EPKc>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   d53ea:	2700      	movs	r7, #0
   d53ec:	9700      	str	r7, [sp, #0]
   d53ee:	464b      	mov	r3, r9
   d53f0:	aa03      	add	r2, sp, #12
   d53f2:	4641      	mov	r1, r8
   d53f4:	4628      	mov	r0, r5
   d53f6:	f7ff febe 	bl	d5176 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>
   d53fa:	4604      	mov	r4, r0
   d53fc:	b170      	cbz	r0, d541c <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x48>
		if (getTokenValue(key, keyName) && keyName == name) {
   d53fe:	9903      	ldr	r1, [sp, #12]
   d5400:	aa04      	add	r2, sp, #16
   d5402:	4628      	mov	r0, r5
   d5404:	f7ff ffc8 	bl	d5398 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
   d5408:	4604      	mov	r4, r0
   d540a:	b908      	cbnz	r0, d5410 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x3c>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   d540c:	3701      	adds	r7, #1
   d540e:	e7ed      	b.n	d53ec <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x18>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d5410:	4631      	mov	r1, r6
   d5412:	a804      	add	r0, sp, #16
   d5414:	f000 ff62 	bl	d62dc <_ZNK6String6equalsEPKc>
		if (getTokenValue(key, keyName) && keyName == name) {
   d5418:	2800      	cmp	r0, #0
   d541a:	d0f7      	beq.n	d540c <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x38>
	String keyName;
   d541c:	a804      	add	r0, sp, #16
   d541e:	f000 fec4 	bl	d61aa <_ZN6StringD1Ev>
}
   d5422:	4620      	mov	r0, r4
   d5424:	b009      	add	sp, #36	; 0x24
   d5426:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d542a:	bf00      	nop
   d542c:	000db295 	.word	0x000db295

000d5430 <_ZNK13JsonReference3keyEPKc>:
JsonReference JsonReference::key(const char *name) const {
   d5430:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5432:	460d      	mov	r5, r1
	if (token && parser->getValueTokenByKey(token, name, newToken)) {
   d5434:	6889      	ldr	r1, [r1, #8]
   d5436:	4e0a      	ldr	r6, [pc, #40]	; (d5460 <_ZNK13JsonReference3keyEPKc+0x30>)
JsonReference JsonReference::key(const char *name) const {
   d5438:	4604      	mov	r4, r0
	if (token && parser->getValueTokenByKey(token, name, newToken)) {
   d543a:	b161      	cbz	r1, d5456 <_ZNK13JsonReference3keyEPKc+0x26>
   d543c:	6868      	ldr	r0, [r5, #4]
   d543e:	ab01      	add	r3, sp, #4
   d5440:	f7ff ffc8 	bl	d53d4 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
   d5444:	b138      	cbz	r0, d5456 <_ZNK13JsonReference3keyEPKc+0x26>
		return JsonReference(parser, newToken);
   d5446:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser, const JsonParserGeneratorRK::jsmntok_t *token) : parser(parser), token(token) {
   d5448:	e9c4 6300 	strd	r6, r3, [r4]
   d544c:	9b01      	ldr	r3, [sp, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   d544e:	60a3      	str	r3, [r4, #8]
}
   d5450:	4620      	mov	r0, r4
   d5452:	b002      	add	sp, #8
   d5454:	bd70      	pop	{r4, r5, r6, pc}
		return JsonReference(parser);
   d5456:	686b      	ldr	r3, [r5, #4]
JsonReference::JsonReference(const JsonParser *parser) : parser(parser), token(0) {
   d5458:	e9c4 6300 	strd	r6, r3, [r4]
   d545c:	2300      	movs	r3, #0
   d545e:	e7f6      	b.n	d544e <_ZNK13JsonReference3keyEPKc+0x1e>
   d5460:	000db2c4 	.word	0x000db2c4

000d5464 <_ZNK13JsonReference11valueStringEv>:
String JsonReference::valueString() const {
   d5464:	b538      	push	{r3, r4, r5, lr}
   d5466:	460d      	mov	r5, r1
	String result;
   d5468:	4905      	ldr	r1, [pc, #20]	; (d5480 <_ZNK13JsonReference11valueStringEv+0x1c>)
String JsonReference::valueString() const {
   d546a:	4604      	mov	r4, r0
	String result;
   d546c:	f000 fee8 	bl	d6240 <_ZN6StringC1EPKc>
	 * There are also type-specific versions like valueBool that return the value, instead of having to pass an object
	 * to hold the value, as in this call.
	 */
	template<class T>
	bool value(T &result) const {
		if (token && parser->getTokenValue(token, result)) {
   d5470:	68a9      	ldr	r1, [r5, #8]
   d5472:	b119      	cbz	r1, d547c <_ZNK13JsonReference11valueStringEv+0x18>
   d5474:	6868      	ldr	r0, [r5, #4]
   d5476:	4622      	mov	r2, r4
   d5478:	f7ff ff8e 	bl	d5398 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
}
   d547c:	4620      	mov	r0, r4
   d547e:	bd38      	pop	{r3, r4, r5, pc}
   d5480:	000db295 	.word	0x000db295

000d5484 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>:

/**
 * Parse JSON string and fill tokens.
 */
int jsmn_parse(jsmn_parser *parser, const char *js, size_t len,
		jsmntok_t *tokens, unsigned int num_tokens) {
   d5484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int r;
	int i;
	jsmntok_t *token;
	int count = parser->toknext;
   d5488:	6844      	ldr	r4, [r0, #4]
   d548a:	f04f 0c01 	mov.w	ip, #1
	tok->start = tok->end = -1;
   d548e:	f04f 35ff 	mov.w	r5, #4294967295

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   d5492:	f8d0 e000 	ldr.w	lr, [r0]
   d5496:	4596      	cmp	lr, r2
   d5498:	f080 81c1 	bcs.w	d581e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x39a>
   d549c:	f811 800e 	ldrb.w	r8, [r1, lr]
   d54a0:	f1b8 0f00 	cmp.w	r8, #0
   d54a4:	f000 81bb 	beq.w	d581e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x39a>
		char c;
		jsmntype_t type;

		c = js[parser->pos];
		switch (c) {
   d54a8:	f1b8 0f3a 	cmp.w	r8, #58	; 0x3a
   d54ac:	f000 809b 	beq.w	d55e6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x162>
   d54b0:	d833      	bhi.n	d551a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x96>
   d54b2:	f1b8 0f22 	cmp.w	r8, #34	; 0x22
   d54b6:	f000 80ad 	beq.w	d5614 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x190>
   d54ba:	d810      	bhi.n	d54de <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x5a>
   d54bc:	f1a8 0809 	sub.w	r8, r8, #9
   d54c0:	fa5f f888 	uxtb.w	r8, r8
   d54c4:	f1b8 0f17 	cmp.w	r8, #23
   d54c8:	d80d      	bhi.n	d54e6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
   d54ca:	4fc2      	ldr	r7, [pc, #776]	; (d57d4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x350>)
   d54cc:	fa0c f808 	lsl.w	r8, ip, r8
   d54d0:	ea18 0f07 	tst.w	r8, r7
   d54d4:	d007      	beq.n	d54e6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   d54d6:	6807      	ldr	r7, [r0, #0]
   d54d8:	3701      	adds	r7, #1
   d54da:	6007      	str	r7, [r0, #0]
   d54dc:	e7d9      	b.n	d5492 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe>
		switch (c) {
   d54de:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
   d54e2:	f000 8139 	beq.w	d5758 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2d4>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   d54e6:	f8d0 8000 	ldr.w	r8, [r0]
   d54ea:	4542      	cmp	r2, r8
   d54ec:	d90e      	bls.n	d550c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
   d54ee:	f811 7008 	ldrb.w	r7, [r1, r8]
   d54f2:	b15f      	cbz	r7, d550c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
		switch (js[parser->pos]) {
   d54f4:	2f3a      	cmp	r7, #58	; 0x3a
   d54f6:	f200 8171 	bhi.w	d57dc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x358>
   d54fa:	2f1f      	cmp	r7, #31
   d54fc:	f200 8155 	bhi.w	d57aa <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x326>
   d5500:	2f0a      	cmp	r7, #10
   d5502:	f200 8164 	bhi.w	d57ce <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34a>
   d5506:	2f08      	cmp	r7, #8
   d5508:	f240 815a 	bls.w	d57c0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x33c>
	if (tokens == NULL) {
   d550c:	2b00      	cmp	r3, #0
   d550e:	f040 816a 	bne.w	d57e6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x362>
		parser->pos--;
   d5512:	f108 37ff 	add.w	r7, r8, #4294967295
	parser->pos--;
   d5516:	6007      	str	r7, [r0, #0]
   d5518:	e0ac      	b.n	d5674 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1f0>
		switch (c) {
   d551a:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   d551e:	d03a      	beq.n	d5596 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x112>
   d5520:	d80a      	bhi.n	d5538 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xb4>
   d5522:	f1b8 0f5b 	cmp.w	r8, #91	; 0x5b
   d5526:	d036      	beq.n	d5596 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x112>
   d5528:	f1b8 0f5d 	cmp.w	r8, #93	; 0x5d
   d552c:	d1db      	bne.n	d54e6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
				token->start = parser->pos;
				parser->toksuper = parser->toknext - 1;
				break;
			case '}': case ']':
				if (tokens == NULL)
   d552e:	2b00      	cmp	r3, #0
   d5530:	d0d1      	beq.n	d54d6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					break;
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   d5532:	f04f 0b02 	mov.w	fp, #2
   d5536:	e006      	b.n	d5546 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xc2>
		switch (c) {
   d5538:	f1b8 0f7d 	cmp.w	r8, #125	; 0x7d
   d553c:	d1d3      	bne.n	d54e6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
				if (tokens == NULL)
   d553e:	2b00      	cmp	r3, #0
   d5540:	d0c9      	beq.n	d54d6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   d5542:	f04f 0b01 	mov.w	fp, #1
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
   d5546:	6847      	ldr	r7, [r0, #4]
   d5548:	f107 38ff 	add.w	r8, r7, #4294967295
   d554c:	eb03 1907 	add.w	r9, r3, r7, lsl #4
   d5550:	f1b8 0f00 	cmp.w	r8, #0
   d5554:	db4f      	blt.n	d55f6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x172>
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   d5556:	f859 7c0c 	ldr.w	r7, [r9, #-12]
   d555a:	3701      	adds	r7, #1
   d555c:	f1a9 0a10 	sub.w	sl, r9, #16
   d5560:	d045      	beq.n	d55ee <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x16a>
   d5562:	f859 7c08 	ldr.w	r7, [r9, #-8]
   d5566:	1c7e      	adds	r6, r7, #1
   d5568:	d141      	bne.n	d55ee <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x16a>
						if (token->type != type) {
   d556a:	f89a 9000 	ldrb.w	r9, [sl]
   d556e:	45d9      	cmp	r9, fp
   d5570:	d145      	bne.n	d55fe <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x17a>
							return JSMN_ERROR_INVAL;
						}
						parser->toksuper = -1;
   d5572:	6087      	str	r7, [r0, #8]
						token->end = parser->pos + 1;
   d5574:	f10e 0701 	add.w	r7, lr, #1
   d5578:	f8ca 7008 	str.w	r7, [sl, #8]
						break;
					}
				}
				/* Error if unmatched closing bracket */
				if (i == -1) return JSMN_ERROR_INVAL;
   d557c:	eb03 1e08 	add.w	lr, r3, r8, lsl #4
				for (; i >= 0; i--) {
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   d5580:	f8de 7004 	ldr.w	r7, [lr, #4]
   d5584:	3701      	adds	r7, #1
   d5586:	d03d      	beq.n	d5604 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x180>
   d5588:	f8de 7008 	ldr.w	r7, [lr, #8]
   d558c:	3701      	adds	r7, #1
   d558e:	d139      	bne.n	d5604 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x180>
					parser->toksuper = tokens[parser->toksuper].parent;
#else
					for (i = parser->toknext - 1; i >= 0; i--) {
						if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
							if (tokens[i].start != -1 && tokens[i].end == -1) {
								parser->toksuper = i;
   d5590:	f8c0 8008 	str.w	r8, [r0, #8]
								break;
   d5594:	e79f      	b.n	d54d6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
				count++;
   d5596:	3401      	adds	r4, #1
				if (tokens == NULL) {
   d5598:	2b00      	cmp	r3, #0
   d559a:	d09c      	beq.n	d54d6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
	if (parser->toknext >= num_tokens) {
   d559c:	6847      	ldr	r7, [r0, #4]
   d559e:	9e09      	ldr	r6, [sp, #36]	; 0x24
   d55a0:	42be      	cmp	r6, r7
   d55a2:	d94e      	bls.n	d5642 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1be>
	tok = &tokens[parser->toknext++];
   d55a4:	f107 0e01 	add.w	lr, r7, #1
   d55a8:	f8c0 e004 	str.w	lr, [r0, #4]
   d55ac:	eb03 1e07 	add.w	lr, r3, r7, lsl #4
	tok->start = tok->end = -1;
   d55b0:	e9ce 5501 	strd	r5, r5, [lr, #4]
	tok->size = 0;
   d55b4:	2600      	movs	r6, #0
   d55b6:	f8ce 600c 	str.w	r6, [lr, #12]
	tok = &tokens[parser->toknext++];
   d55ba:	ea4f 1a07 	mov.w	sl, r7, lsl #4
				if (parser->toksuper != -1) {
   d55be:	6887      	ldr	r7, [r0, #8]
   d55c0:	1c7e      	adds	r6, r7, #1
					tokens[parser->toksuper].size++;
   d55c2:	bf1f      	itttt	ne
   d55c4:	eb03 1907 	addne.w	r9, r3, r7, lsl #4
   d55c8:	f8d9 700c 	ldrne.w	r7, [r9, #12]
   d55cc:	3701      	addne	r7, #1
   d55ce:	f8c9 700c 	strne.w	r7, [r9, #12]
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
   d55d2:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   d55d6:	bf0c      	ite	eq
   d55d8:	2701      	moveq	r7, #1
   d55da:	2702      	movne	r7, #2
   d55dc:	f803 700a 	strb.w	r7, [r3, sl]
				token->start = parser->pos;
   d55e0:	6807      	ldr	r7, [r0, #0]
   d55e2:	f8ce 7004 	str.w	r7, [lr, #4]
				parser->toksuper = parser->toknext - 1;
   d55e6:	6847      	ldr	r7, [r0, #4]
   d55e8:	3f01      	subs	r7, #1
   d55ea:	6087      	str	r7, [r0, #8]
				break;
   d55ec:	e773      	b.n	d54d6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
				for (i = parser->toknext - 1; i >= 0; i--) {
   d55ee:	f108 38ff 	add.w	r8, r8, #4294967295
   d55f2:	46d1      	mov	r9, sl
   d55f4:	e7ac      	b.n	d5550 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xcc>
				if (i == -1) return JSMN_ERROR_INVAL;
   d55f6:	f1b8 3fff 	cmp.w	r8, #4294967295
   d55fa:	f47f af6c 	bne.w	d54d6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
							return JSMN_ERROR_INVAL;
   d55fe:	f06f 0401 	mvn.w	r4, #1
   d5602:	e020      	b.n	d5646 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1c2>
				for (; i >= 0; i--) {
   d5604:	f108 38ff 	add.w	r8, r8, #4294967295
   d5608:	f1b8 3fff 	cmp.w	r8, #4294967295
   d560c:	f1ae 0e10 	sub.w	lr, lr, #16
   d5610:	d1b6      	bne.n	d5580 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xfc>
   d5612:	e760      	b.n	d54d6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
	parser->pos++;
   d5614:	f10e 0901 	add.w	r9, lr, #1
   d5618:	f8c0 9000 	str.w	r9, [r0]
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   d561c:	f8d0 8000 	ldr.w	r8, [r0]
   d5620:	4542      	cmp	r2, r8
   d5622:	f240 8094 	bls.w	d574e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ca>
   d5626:	f811 7008 	ldrb.w	r7, [r1, r8]
   d562a:	2f00      	cmp	r7, #0
   d562c:	f000 808f 	beq.w	d574e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ca>
		if (c == '\"') {
   d5630:	2f22      	cmp	r7, #34	; 0x22
   d5632:	d130      	bne.n	d5696 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x212>
			if (tokens == NULL) {
   d5634:	b1f3      	cbz	r3, d5674 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1f0>
	if (parser->toknext >= num_tokens) {
   d5636:	6847      	ldr	r7, [r0, #4]
   d5638:	9e09      	ldr	r6, [sp, #36]	; 0x24
   d563a:	42be      	cmp	r6, r7
   d563c:	d806      	bhi.n	d564c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1c8>
		parser->pos = start;
   d563e:	f8c0 e000 	str.w	lr, [r0]
					return JSMN_ERROR_NOMEM;
   d5642:	f04f 34ff 	mov.w	r4, #4294967295
			}
		}
	}

	return count;
}
   d5646:	4620      	mov	r0, r4
   d5648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	tok = &tokens[parser->toknext++];
   d564c:	f107 0e01 	add.w	lr, r7, #1
   d5650:	ea4f 1807 	mov.w	r8, r7, lsl #4
   d5654:	eb03 1707 	add.w	r7, r3, r7, lsl #4
   d5658:	f8c0 e004 	str.w	lr, [r0, #4]
	tok->start = tok->end = -1;
   d565c:	e9c7 5501 	strd	r5, r5, [r7, #4]
	tok->size = 0;
   d5660:	2600      	movs	r6, #0
   d5662:	60fe      	str	r6, [r7, #12]
			jsmn_fill_token(token, JSMN_STRING, start+1, parser->pos);
   d5664:	f8d0 e000 	ldr.w	lr, [r0]
	token->type = type;
   d5668:	f04f 0a03 	mov.w	sl, #3
   d566c:	f803 a008 	strb.w	sl, [r3, r8]
	token->end = end;
   d5670:	e9c7 9e01 	strd	r9, lr, [r7, #4]
				if (parser->toksuper != -1 && tokens != NULL)
   d5674:	6887      	ldr	r7, [r0, #8]
   d5676:	1c7e      	adds	r6, r7, #1
				count++;
   d5678:	f104 0401 	add.w	r4, r4, #1
				if (parser->toksuper != -1 && tokens != NULL)
   d567c:	f43f af2b 	beq.w	d54d6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
   d5680:	2b00      	cmp	r3, #0
   d5682:	f43f af28 	beq.w	d54d6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					tokens[parser->toksuper].size++;
   d5686:	eb03 1e07 	add.w	lr, r3, r7, lsl #4
   d568a:	f8de 700c 	ldr.w	r7, [lr, #12]
   d568e:	3701      	adds	r7, #1
   d5690:	f8ce 700c 	str.w	r7, [lr, #12]
   d5694:	e71f      	b.n	d54d6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
		if (c == '\\' && parser->pos + 1 < len) {
   d5696:	2f5c      	cmp	r7, #92	; 0x5c
   d5698:	d111      	bne.n	d56be <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x23a>
   d569a:	f108 0701 	add.w	r7, r8, #1
   d569e:	42ba      	cmp	r2, r7
   d56a0:	d90d      	bls.n	d56be <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x23a>
			parser->pos++;
   d56a2:	6007      	str	r7, [r0, #0]
			switch (js[parser->pos]) {
   d56a4:	5dcf      	ldrb	r7, [r1, r7]
   d56a6:	2f75      	cmp	r7, #117	; 0x75
   d56a8:	d82c      	bhi.n	d5704 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x280>
   d56aa:	2f6d      	cmp	r7, #109	; 0x6d
   d56ac:	d80b      	bhi.n	d56c6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x242>
   d56ae:	2f66      	cmp	r7, #102	; 0x66
   d56b0:	d828      	bhi.n	d5704 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x280>
   d56b2:	2f5b      	cmp	r7, #91	; 0x5b
   d56b4:	d81e      	bhi.n	d56f4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   d56b6:	2f22      	cmp	r7, #34	; 0x22
   d56b8:	d001      	beq.n	d56be <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x23a>
   d56ba:	2f2f      	cmp	r7, #47	; 0x2f
   d56bc:	d122      	bne.n	d5704 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x280>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   d56be:	6807      	ldr	r7, [r0, #0]
   d56c0:	3701      	adds	r7, #1
   d56c2:	6007      	str	r7, [r0, #0]
   d56c4:	e7aa      	b.n	d561c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x198>
   d56c6:	3f6e      	subs	r7, #110	; 0x6e
   d56c8:	2f07      	cmp	r7, #7
   d56ca:	d81b      	bhi.n	d5704 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x280>
   d56cc:	a601      	add	r6, pc, #4	; (adr r6, d56d4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x250>)
   d56ce:	f856 f027 	ldr.w	pc, [r6, r7, lsl #2]
   d56d2:	bf00      	nop
   d56d4:	000d56bf 	.word	0x000d56bf
   d56d8:	000d5705 	.word	0x000d5705
   d56dc:	000d5705 	.word	0x000d5705
   d56e0:	000d5705 	.word	0x000d5705
   d56e4:	000d56bf 	.word	0x000d56bf
   d56e8:	000d5705 	.word	0x000d5705
   d56ec:	000d56bf 	.word	0x000d56bf
   d56f0:	000d570b 	.word	0x000d570b
   d56f4:	3f5c      	subs	r7, #92	; 0x5c
   d56f6:	b2ff      	uxtb	r7, r7
   d56f8:	fa0c f707 	lsl.w	r7, ip, r7
   d56fc:	f240 4641 	movw	r6, #1089	; 0x441
   d5700:	4237      	tst	r7, r6
   d5702:	d1dc      	bne.n	d56be <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x23a>
			parser->pos = start;
   d5704:	f8c0 e000 	str.w	lr, [r0]
				if (r < 0) return r;
   d5708:	e779      	b.n	d55fe <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x17a>
					parser->pos++;
   d570a:	f108 0702 	add.w	r7, r8, #2
   d570e:	6007      	str	r7, [r0, #0]
   d5710:	f04f 0a04 	mov.w	sl, #4
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   d5714:	f8d0 8000 	ldr.w	r8, [r0]
   d5718:	4542      	cmp	r2, r8
   d571a:	d803      	bhi.n	d5724 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2a0>
					parser->pos--;
   d571c:	6807      	ldr	r7, [r0, #0]
   d571e:	3f01      	subs	r7, #1
   d5720:	6007      	str	r7, [r0, #0]
					break;
   d5722:	e7cc      	b.n	d56be <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x23a>
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   d5724:	f811 7008 	ldrb.w	r7, [r1, r8]
   d5728:	2f00      	cmp	r7, #0
   d572a:	d0f7      	beq.n	d571c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x298>
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || /* 0-9 */
   d572c:	f1a7 0b30 	sub.w	fp, r7, #48	; 0x30
   d5730:	f1bb 0f09 	cmp.w	fp, #9
   d5734:	d904      	bls.n	d5740 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2bc>
   d5736:	f027 0720 	bic.w	r7, r7, #32
   d573a:	3f41      	subs	r7, #65	; 0x41
   d573c:	2f05      	cmp	r7, #5
   d573e:	d8e1      	bhi.n	d5704 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x280>
						parser->pos++;
   d5740:	f108 0701 	add.w	r7, r8, #1
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   d5744:	f1ba 0a01 	subs.w	sl, sl, #1
						parser->pos++;
   d5748:	6007      	str	r7, [r0, #0]
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   d574a:	d1e3      	bne.n	d5714 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x290>
   d574c:	e7e6      	b.n	d571c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x298>
	parser->pos = start;
   d574e:	f8c0 e000 	str.w	lr, [r0]
				return JSMN_ERROR_PART;
   d5752:	f06f 0402 	mvn.w	r4, #2
   d5756:	e776      	b.n	d5646 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1c2>
				if (tokens != NULL && parser->toksuper != -1 &&
   d5758:	2b00      	cmp	r3, #0
   d575a:	f43f aebc 	beq.w	d54d6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
   d575e:	6887      	ldr	r7, [r0, #8]
   d5760:	1c7e      	adds	r6, r7, #1
   d5762:	f43f aeb8 	beq.w	d54d6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
						tokens[parser->toksuper].type != JSMN_ARRAY &&
   d5766:	013f      	lsls	r7, r7, #4
   d5768:	5ddf      	ldrb	r7, [r3, r7]
   d576a:	3f01      	subs	r7, #1
   d576c:	2f01      	cmp	r7, #1
   d576e:	f67f aeb2 	bls.w	d54d6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					for (i = parser->toknext - 1; i >= 0; i--) {
   d5772:	6847      	ldr	r7, [r0, #4]
   d5774:	f107 38ff 	add.w	r8, r7, #4294967295
   d5778:	eb03 1e07 	add.w	lr, r3, r7, lsl #4
   d577c:	f1b8 0f00 	cmp.w	r8, #0
   d5780:	f6ff aea9 	blt.w	d54d6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
						if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
   d5784:	f81e 7c10 	ldrb.w	r7, [lr, #-16]
   d5788:	3f01      	subs	r7, #1
   d578a:	2f01      	cmp	r7, #1
   d578c:	d808      	bhi.n	d57a0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x31c>
							if (tokens[i].start != -1 && tokens[i].end == -1) {
   d578e:	f85e 7c0c 	ldr.w	r7, [lr, #-12]
   d5792:	3701      	adds	r7, #1
   d5794:	d004      	beq.n	d57a0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x31c>
   d5796:	f85e 7c08 	ldr.w	r7, [lr, #-8]
   d579a:	3701      	adds	r7, #1
   d579c:	f43f aef8 	beq.w	d5590 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10c>
					for (i = parser->toknext - 1; i >= 0; i--) {
   d57a0:	f108 38ff 	add.w	r8, r8, #4294967295
   d57a4:	f1ae 0e10 	sub.w	lr, lr, #16
   d57a8:	e7e8      	b.n	d577c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2f8>
   d57aa:	f1a7 0920 	sub.w	r9, r7, #32
   d57ae:	4e0a      	ldr	r6, [pc, #40]	; (d57d8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x354>)
   d57b0:	fa5f f989 	uxtb.w	r9, r9
   d57b4:	fa0c f909 	lsl.w	r9, ip, r9
   d57b8:	ea19 0f06 	tst.w	r9, r6
   d57bc:	f47f aea6 	bne.w	d550c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
		if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
   d57c0:	3f20      	subs	r7, #32
   d57c2:	2f5e      	cmp	r7, #94	; 0x5e
   d57c4:	d89e      	bhi.n	d5704 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x280>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   d57c6:	f108 0701 	add.w	r7, r8, #1
   d57ca:	6007      	str	r7, [r0, #0]
   d57cc:	e68b      	b.n	d54e6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
		switch (js[parser->pos]) {
   d57ce:	2f0d      	cmp	r7, #13
   d57d0:	d1f6      	bne.n	d57c0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x33c>
   d57d2:	e69b      	b.n	d550c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
   d57d4:	00800013 	.word	0x00800013
   d57d8:	04001001 	.word	0x04001001
   d57dc:	f007 09df 	and.w	r9, r7, #223	; 0xdf
   d57e0:	f1b9 0f5d 	cmp.w	r9, #93	; 0x5d
   d57e4:	e7f4      	b.n	d57d0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>
	if (parser->toknext >= num_tokens) {
   d57e6:	6847      	ldr	r7, [r0, #4]
   d57e8:	9e09      	ldr	r6, [sp, #36]	; 0x24
   d57ea:	42be      	cmp	r6, r7
   d57ec:	f67f af27 	bls.w	d563e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ba>
	tok = &tokens[parser->toknext++];
   d57f0:	f107 0801 	add.w	r8, r7, #1
   d57f4:	ea4f 1907 	mov.w	r9, r7, lsl #4
   d57f8:	eb03 1707 	add.w	r7, r3, r7, lsl #4
   d57fc:	f8c0 8004 	str.w	r8, [r0, #4]
	tok->start = tok->end = -1;
   d5800:	e9c7 5501 	strd	r5, r5, [r7, #4]
	tok->size = 0;
   d5804:	2600      	movs	r6, #0
   d5806:	60fe      	str	r6, [r7, #12]
	jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
   d5808:	f8d0 8000 	ldr.w	r8, [r0]
	token->type = type;
   d580c:	f04f 0a04 	mov.w	sl, #4
   d5810:	f803 a009 	strb.w	sl, [r3, r9]
	token->end = end;
   d5814:	e9c7 e801 	strd	lr, r8, [r7, #4]
	parser->pos--;
   d5818:	6807      	ldr	r7, [r0, #0]
   d581a:	3f01      	subs	r7, #1
   d581c:	e67b      	b.n	d5516 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x92>
	if (tokens != NULL) {
   d581e:	2b00      	cmp	r3, #0
   d5820:	f43f af11 	beq.w	d5646 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1c2>
		for (i = parser->toknext - 1; i >= 0; i--) {
   d5824:	6842      	ldr	r2, [r0, #4]
   d5826:	1e51      	subs	r1, r2, #1
   d5828:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   d582c:	2900      	cmp	r1, #0
   d582e:	f6ff af0a 	blt.w	d5646 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1c2>
			if (tokens[i].start != -1 && tokens[i].end == -1) {
   d5832:	f853 2c0c 	ldr.w	r2, [r3, #-12]
   d5836:	3201      	adds	r2, #1
   d5838:	d003      	beq.n	d5842 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3be>
   d583a:	f853 2c08 	ldr.w	r2, [r3, #-8]
   d583e:	3201      	adds	r2, #1
   d5840:	d087      	beq.n	d5752 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ce>
		for (i = parser->toknext - 1; i >= 0; i--) {
   d5842:	3901      	subs	r1, #1
   d5844:	3b10      	subs	r3, #16
   d5846:	e7f1      	b.n	d582c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3a8>

000d5848 <_ZN10JsonParser5parseEv>:
bool JsonParser::parse() {
   d5848:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (offset == 0) {
   d584a:	68c2      	ldr	r2, [r0, #12]
bool JsonParser::parse() {
   d584c:	4604      	mov	r4, r0
	if (offset == 0) {
   d584e:	b912      	cbnz	r2, d5856 <_ZN10JsonParser5parseEv+0xe>
		return false;
   d5850:	2000      	movs	r0, #0
}
   d5852:	b003      	add	sp, #12
   d5854:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (tokens) {
   d5856:	6943      	ldr	r3, [r0, #20]
   d5858:	f100 0620 	add.w	r6, r0, #32
   d585c:	b1ab      	cbz	r3, d588a <_ZN10JsonParser5parseEv+0x42>
/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
	parser->pos = 0;
   d585e:	2100      	movs	r1, #0
	parser->toknext = 0;
   d5860:	e9c0 1108 	strd	r1, r1, [r0, #32]
	parser->toksuper = -1;
   d5864:	f04f 31ff 	mov.w	r1, #4294967295
   d5868:	6281      	str	r1, [r0, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   d586a:	69c1      	ldr	r1, [r0, #28]
   d586c:	9100      	str	r1, [sp, #0]
   d586e:	6841      	ldr	r1, [r0, #4]
   d5870:	4630      	mov	r0, r6
   d5872:	f7ff fe07 	bl	d5484 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
		if (result == JsonParserGeneratorRK::JSMN_ERROR_NOMEM) {
   d5876:	1c43      	adds	r3, r0, #1
   d5878:	d128      	bne.n	d58cc <_ZN10JsonParser5parseEv+0x84>
			if (staticBuffers) {
   d587a:	7c25      	ldrb	r5, [r4, #16]
   d587c:	2d00      	cmp	r5, #0
   d587e:	d1e7      	bne.n	d5850 <_ZN10JsonParser5parseEv+0x8>
			free(tokens);
   d5880:	6960      	ldr	r0, [r4, #20]
   d5882:	f000 fb15 	bl	d5eb0 <free>
			tokens = 0;
   d5886:	6165      	str	r5, [r4, #20]
			maxTokens = 0;
   d5888:	61e5      	str	r5, [r4, #28]
	parser->pos = 0;
   d588a:	2500      	movs	r5, #0
	parser->toksuper = -1;
   d588c:	f04f 37ff 	mov.w	r7, #4294967295
	parser->toknext = 0;
   d5890:	e9c4 5508 	strd	r5, r5, [r4, #32]
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   d5894:	68e2      	ldr	r2, [r4, #12]
   d5896:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
   d5898:	62a7      	str	r7, [r4, #40]	; 0x28
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   d589a:	9500      	str	r5, [sp, #0]
   d589c:	462b      	mov	r3, r5
   d589e:	4630      	mov	r0, r6
   d58a0:	f7ff fdf0 	bl	d5484 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
	if (result < 0) {
   d58a4:	2800      	cmp	r0, #0
   d58a6:	dbd3      	blt.n	d5850 <_ZN10JsonParser5parseEv+0x8>
	maxTokens = (size_t) result;
   d58a8:	61e0      	str	r0, [r4, #28]
	if (maxTokens > 0) {
   d58aa:	d017      	beq.n	d58dc <_ZN10JsonParser5parseEv+0x94>
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   d58ac:	0100      	lsls	r0, r0, #4
   d58ae:	f000 faf7 	bl	d5ea0 <malloc>
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   d58b2:	69e2      	ldr	r2, [r4, #28]
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   d58b4:	6160      	str	r0, [r4, #20]
   d58b6:	4603      	mov	r3, r0
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   d58b8:	9200      	str	r2, [sp, #0]
	parser->toknext = 0;
   d58ba:	e9c4 5508 	strd	r5, r5, [r4, #32]
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   d58be:	68e2      	ldr	r2, [r4, #12]
   d58c0:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
   d58c2:	62a7      	str	r7, [r4, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   d58c4:	4630      	mov	r0, r6
   d58c6:	f7ff fddd 	bl	d5484 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
   d58ca:	e001      	b.n	d58d0 <_ZN10JsonParser5parseEv+0x88>
		if (result < 0) {
   d58cc:	2800      	cmp	r0, #0
   d58ce:	dbbf      	blt.n	d5850 <_ZN10JsonParser5parseEv+0x8>
		tokensEnd = &tokens[result];
   d58d0:	6963      	ldr	r3, [r4, #20]
   d58d2:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   d58d6:	61a0      	str	r0, [r4, #24]
	return true;
   d58d8:	2001      	movs	r0, #1
   d58da:	e7ba      	b.n	d5852 <_ZN10JsonParser5parseEv+0xa>
		tokensEnd = tokens;
   d58dc:	6963      	ldr	r3, [r4, #20]
   d58de:	61a3      	str	r3, [r4, #24]
   d58e0:	e7fa      	b.n	d58d8 <_ZN10JsonParser5parseEv+0x90>
	...

000d58e4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d58e4:	b508      	push	{r3, lr}
   d58e6:	4b02      	ldr	r3, [pc, #8]	; (d58f0 <netdb_freeaddrinfo+0xc>)
   d58e8:	681b      	ldr	r3, [r3, #0]
   d58ea:	689b      	ldr	r3, [r3, #8]
   d58ec:	9301      	str	r3, [sp, #4]
   d58ee:	bd08      	pop	{r3, pc}
   d58f0:	00030268 	.word	0x00030268

000d58f4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d58f4:	b508      	push	{r3, lr}
   d58f6:	4b02      	ldr	r3, [pc, #8]	; (d5900 <netdb_getaddrinfo+0xc>)
   d58f8:	681b      	ldr	r3, [r3, #0]
   d58fa:	68db      	ldr	r3, [r3, #12]
   d58fc:	9301      	str	r3, [sp, #4]
   d58fe:	bd08      	pop	{r3, pc}
   d5900:	00030268 	.word	0x00030268

000d5904 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d5904:	b508      	push	{r3, lr}
   d5906:	4b02      	ldr	r3, [pc, #8]	; (d5910 <HAL_Pin_Map+0xc>)
   d5908:	681b      	ldr	r3, [r3, #0]
   d590a:	681b      	ldr	r3, [r3, #0]
   d590c:	9301      	str	r3, [sp, #4]
   d590e:	bd08      	pop	{r3, pc}
   d5910:	0003022c 	.word	0x0003022c

000d5914 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5914:	b508      	push	{r3, lr}
   d5916:	4b02      	ldr	r3, [pc, #8]	; (d5920 <HAL_Pin_Mode+0xc>)
   d5918:	681b      	ldr	r3, [r3, #0]
   d591a:	689b      	ldr	r3, [r3, #8]
   d591c:	9301      	str	r3, [sp, #4]
   d591e:	bd08      	pop	{r3, pc}
   d5920:	0003022c 	.word	0x0003022c

000d5924 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d5924:	b508      	push	{r3, lr}
   d5926:	4b02      	ldr	r3, [pc, #8]	; (d5930 <if_index_to_name+0xc>)
   d5928:	681b      	ldr	r3, [r3, #0]
   d592a:	695b      	ldr	r3, [r3, #20]
   d592c:	9301      	str	r3, [sp, #4]
   d592e:	bd08      	pop	{r3, pc}
   d5930:	0003026c 	.word	0x0003026c

000d5934 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5934:	b508      	push	{r3, lr}
   d5936:	4b02      	ldr	r3, [pc, #8]	; (d5940 <HAL_RNG_GetRandomNumber+0xc>)
   d5938:	681b      	ldr	r3, [r3, #0]
   d593a:	685b      	ldr	r3, [r3, #4]
   d593c:	9301      	str	r3, [sp, #4]
   d593e:	bd08      	pop	{r3, pc}
   d5940:	00030218 	.word	0x00030218

000d5944 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d5944:	b508      	push	{r3, lr}
   d5946:	4b02      	ldr	r3, [pc, #8]	; (d5950 <HAL_Delay_Microseconds+0xc>)
   d5948:	681b      	ldr	r3, [r3, #0]
   d594a:	68db      	ldr	r3, [r3, #12]
   d594c:	9301      	str	r3, [sp, #4]
   d594e:	bd08      	pop	{r3, pc}
   d5950:	00030218 	.word	0x00030218

000d5954 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5954:	b508      	push	{r3, lr}
   d5956:	4b02      	ldr	r3, [pc, #8]	; (d5960 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5958:	681b      	ldr	r3, [r3, #0]
   d595a:	695b      	ldr	r3, [r3, #20]
   d595c:	9301      	str	r3, [sp, #4]
   d595e:	bd08      	pop	{r3, pc}
   d5960:	00030218 	.word	0x00030218

000d5964 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   d5964:	b508      	push	{r3, lr}
   d5966:	4b02      	ldr	r3, [pc, #8]	; (d5970 <hal_ble_stack_init+0xc>)
   d5968:	681b      	ldr	r3, [r3, #0]
   d596a:	689b      	ldr	r3, [r3, #8]
   d596c:	9301      	str	r3, [sp, #4]
   d596e:	bd08      	pop	{r3, pc}
   d5970:	00030278 	.word	0x00030278

000d5974 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   d5974:	b508      	push	{r3, lr}
   d5976:	4b02      	ldr	r3, [pc, #8]	; (d5980 <hal_ble_gap_set_advertising_data+0xc>)
   d5978:	681b      	ldr	r3, [r3, #0]
   d597a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d597c:	9301      	str	r3, [sp, #4]
   d597e:	bd08      	pop	{r3, pc}
   d5980:	00030278 	.word	0x00030278

000d5984 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   d5984:	b508      	push	{r3, lr}
   d5986:	4b02      	ldr	r3, [pc, #8]	; (d5990 <hal_ble_gap_set_scan_response_data+0xc>)
   d5988:	681b      	ldr	r3, [r3, #0]
   d598a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d598c:	9301      	str	r3, [sp, #4]
   d598e:	bd08      	pop	{r3, pc}
   d5990:	00030278 	.word	0x00030278

000d5994 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   d5994:	b508      	push	{r3, lr}
   d5996:	4b02      	ldr	r3, [pc, #8]	; (d59a0 <hal_ble_gap_start_advertising+0xc>)
   d5998:	681b      	ldr	r3, [r3, #0]
   d599a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   d599c:	9301      	str	r3, [sp, #4]
   d599e:	bd08      	pop	{r3, pc}
   d59a0:	00030278 	.word	0x00030278

000d59a4 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   d59a4:	b508      	push	{r3, lr}
   d59a6:	4b03      	ldr	r3, [pc, #12]	; (d59b4 <hal_ble_gap_disconnect+0x10>)
   d59a8:	681b      	ldr	r3, [r3, #0]
   d59aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d59ae:	9301      	str	r3, [sp, #4]
   d59b0:	bd08      	pop	{r3, pc}
   d59b2:	0000      	.short	0x0000
   d59b4:	00030278 	.word	0x00030278

000d59b8 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   d59b8:	b508      	push	{r3, lr}
   d59ba:	4b03      	ldr	r3, [pc, #12]	; (d59c8 <hal_ble_gatt_server_add_service+0x10>)
   d59bc:	681b      	ldr	r3, [r3, #0]
   d59be:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d59c2:	9301      	str	r3, [sp, #4]
   d59c4:	bd08      	pop	{r3, pc}
   d59c6:	0000      	.short	0x0000
   d59c8:	00030278 	.word	0x00030278

000d59cc <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d59cc:	b508      	push	{r3, lr}
   d59ce:	4b03      	ldr	r3, [pc, #12]	; (d59dc <hal_ble_gatt_server_set_characteristic_value+0x10>)
   d59d0:	681b      	ldr	r3, [r3, #0]
   d59d2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   d59d6:	9301      	str	r3, [sp, #4]
   d59d8:	bd08      	pop	{r3, pc}
   d59da:	0000      	.short	0x0000
   d59dc:	00030278 	.word	0x00030278

000d59e0 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_set_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d59e0:	b508      	push	{r3, lr}
   d59e2:	4b03      	ldr	r3, [pc, #12]	; (d59f0 <hal_ble_gatt_client_write_with_response+0x10>)
   d59e4:	681b      	ldr	r3, [r3, #0]
   d59e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   d59ea:	9301      	str	r3, [sp, #4]
   d59ec:	bd08      	pop	{r3, pc}
   d59ee:	0000      	.short	0x0000
   d59f0:	00030278 	.word	0x00030278

000d59f4 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d59f4:	b508      	push	{r3, lr}
   d59f6:	4b03      	ldr	r3, [pc, #12]	; (d5a04 <hal_ble_gatt_client_write_without_response+0x10>)
   d59f8:	681b      	ldr	r3, [r3, #0]
   d59fa:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   d59fe:	9301      	str	r3, [sp, #4]
   d5a00:	bd08      	pop	{r3, pc}
   d5a02:	0000      	.short	0x0000
   d5a04:	00030278 	.word	0x00030278

000d5a08 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   d5a08:	b508      	push	{r3, lr}
   d5a0a:	4b03      	ldr	r3, [pc, #12]	; (d5a18 <hal_ble_gatt_server_add_characteristic+0x10>)
   d5a0c:	681b      	ldr	r3, [r3, #0]
   d5a0e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   d5a12:	9301      	str	r3, [sp, #4]
   d5a14:	bd08      	pop	{r3, pc}
   d5a16:	0000      	.short	0x0000
   d5a18:	00030278 	.word	0x00030278

000d5a1c <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   d5a1c:	b508      	push	{r3, lr}
   d5a1e:	4b03      	ldr	r3, [pc, #12]	; (d5a2c <hal_ble_set_callback_on_periph_link_events+0x10>)
   d5a20:	681b      	ldr	r3, [r3, #0]
   d5a22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   d5a26:	9301      	str	r3, [sp, #4]
   d5a28:	bd08      	pop	{r3, pc}
   d5a2a:	0000      	.short	0x0000
   d5a2c:	00030278 	.word	0x00030278

000d5a30 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d5a30:	b508      	push	{r3, lr}
   d5a32:	4b03      	ldr	r3, [pc, #12]	; (d5a40 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   d5a34:	681b      	ldr	r3, [r3, #0]
   d5a36:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   d5a3a:	9301      	str	r3, [sp, #4]
   d5a3c:	bd08      	pop	{r3, pc}
   d5a3e:	0000      	.short	0x0000
   d5a40:	00030278 	.word	0x00030278

000d5a44 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d5a44:	b508      	push	{r3, lr}
   d5a46:	4b03      	ldr	r3, [pc, #12]	; (d5a54 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   d5a48:	681b      	ldr	r3, [r3, #0]
   d5a4a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   d5a4e:	9301      	str	r3, [sp, #4]
   d5a50:	bd08      	pop	{r3, pc}
   d5a52:	0000      	.short	0x0000
   d5a54:	00030278 	.word	0x00030278

000d5a58 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5a58:	b508      	push	{r3, lr}
   d5a5a:	4b02      	ldr	r3, [pc, #8]	; (d5a64 <os_mutex_recursive_create+0xc>)
   d5a5c:	681b      	ldr	r3, [r3, #0]
   d5a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5a60:	9301      	str	r3, [sp, #4]
   d5a62:	bd08      	pop	{r3, pc}
   d5a64:	00030248 	.word	0x00030248

000d5a68 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d5a68:	b508      	push	{r3, lr}
   d5a6a:	4b02      	ldr	r3, [pc, #8]	; (d5a74 <os_mutex_recursive_destroy+0xc>)
   d5a6c:	681b      	ldr	r3, [r3, #0]
   d5a6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5a70:	9301      	str	r3, [sp, #4]
   d5a72:	bd08      	pop	{r3, pc}
   d5a74:	00030248 	.word	0x00030248

000d5a78 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d5a78:	b508      	push	{r3, lr}
   d5a7a:	4b02      	ldr	r3, [pc, #8]	; (d5a84 <os_mutex_recursive_lock+0xc>)
   d5a7c:	681b      	ldr	r3, [r3, #0]
   d5a7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5a80:	9301      	str	r3, [sp, #4]
   d5a82:	bd08      	pop	{r3, pc}
   d5a84:	00030248 	.word	0x00030248

000d5a88 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d5a88:	b508      	push	{r3, lr}
   d5a8a:	4b02      	ldr	r3, [pc, #8]	; (d5a94 <os_mutex_recursive_unlock+0xc>)
   d5a8c:	681b      	ldr	r3, [r3, #0]
   d5a8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d5a90:	9301      	str	r3, [sp, #4]
   d5a92:	bd08      	pop	{r3, pc}
   d5a94:	00030248 	.word	0x00030248

000d5a98 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5a98:	b508      	push	{r3, lr}
   d5a9a:	4b02      	ldr	r3, [pc, #8]	; (d5aa4 <inet_inet_ntop+0xc>)
   d5a9c:	681b      	ldr	r3, [r3, #0]
   d5a9e:	695b      	ldr	r3, [r3, #20]
   d5aa0:	9301      	str	r3, [sp, #4]
   d5aa2:	bd08      	pop	{r3, pc}
   d5aa4:	00030264 	.word	0x00030264

000d5aa8 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d5aa8:	b508      	push	{r3, lr}
   d5aaa:	4b02      	ldr	r3, [pc, #8]	; (d5ab4 <inet_htonl+0xc>)
   d5aac:	681b      	ldr	r3, [r3, #0]
   d5aae:	6a1b      	ldr	r3, [r3, #32]
   d5ab0:	9301      	str	r3, [sp, #4]
   d5ab2:	bd08      	pop	{r3, pc}
   d5ab4:	00030264 	.word	0x00030264

000d5ab8 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d5ab8:	b508      	push	{r3, lr}
   d5aba:	4b02      	ldr	r3, [pc, #8]	; (d5ac4 <inet_htons+0xc>)
   d5abc:	681b      	ldr	r3, [r3, #0]
   d5abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5ac0:	9301      	str	r3, [sp, #4]
   d5ac2:	bd08      	pop	{r3, pc}
   d5ac4:	00030264 	.word	0x00030264

000d5ac8 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d5ac8:	b508      	push	{r3, lr}
   d5aca:	4b02      	ldr	r3, [pc, #8]	; (d5ad4 <hal_usart_init+0xc>)
   d5acc:	681b      	ldr	r3, [r3, #0]
   d5ace:	681b      	ldr	r3, [r3, #0]
   d5ad0:	9301      	str	r3, [sp, #4]
   d5ad2:	bd08      	pop	{r3, pc}
   d5ad4:	0003023c 	.word	0x0003023c

000d5ad8 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d5ad8:	b508      	push	{r3, lr}
   d5ada:	4b02      	ldr	r3, [pc, #8]	; (d5ae4 <hal_usart_write+0xc>)
   d5adc:	681b      	ldr	r3, [r3, #0]
   d5ade:	68db      	ldr	r3, [r3, #12]
   d5ae0:	9301      	str	r3, [sp, #4]
   d5ae2:	bd08      	pop	{r3, pc}
   d5ae4:	0003023c 	.word	0x0003023c

000d5ae8 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d5ae8:	b508      	push	{r3, lr}
   d5aea:	4b02      	ldr	r3, [pc, #8]	; (d5af4 <hal_usart_available+0xc>)
   d5aec:	681b      	ldr	r3, [r3, #0]
   d5aee:	691b      	ldr	r3, [r3, #16]
   d5af0:	9301      	str	r3, [sp, #4]
   d5af2:	bd08      	pop	{r3, pc}
   d5af4:	0003023c 	.word	0x0003023c

000d5af8 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d5af8:	b508      	push	{r3, lr}
   d5afa:	4b02      	ldr	r3, [pc, #8]	; (d5b04 <hal_usart_read+0xc>)
   d5afc:	681b      	ldr	r3, [r3, #0]
   d5afe:	695b      	ldr	r3, [r3, #20]
   d5b00:	9301      	str	r3, [sp, #4]
   d5b02:	bd08      	pop	{r3, pc}
   d5b04:	0003023c 	.word	0x0003023c

000d5b08 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d5b08:	b508      	push	{r3, lr}
   d5b0a:	4b02      	ldr	r3, [pc, #8]	; (d5b14 <hal_usart_peek+0xc>)
   d5b0c:	681b      	ldr	r3, [r3, #0]
   d5b0e:	699b      	ldr	r3, [r3, #24]
   d5b10:	9301      	str	r3, [sp, #4]
   d5b12:	bd08      	pop	{r3, pc}
   d5b14:	0003023c 	.word	0x0003023c

000d5b18 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d5b18:	b508      	push	{r3, lr}
   d5b1a:	4b02      	ldr	r3, [pc, #8]	; (d5b24 <hal_usart_flush+0xc>)
   d5b1c:	681b      	ldr	r3, [r3, #0]
   d5b1e:	69db      	ldr	r3, [r3, #28]
   d5b20:	9301      	str	r3, [sp, #4]
   d5b22:	bd08      	pop	{r3, pc}
   d5b24:	0003023c 	.word	0x0003023c

000d5b28 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d5b28:	b508      	push	{r3, lr}
   d5b2a:	4b02      	ldr	r3, [pc, #8]	; (d5b34 <hal_usart_is_enabled+0xc>)
   d5b2c:	681b      	ldr	r3, [r3, #0]
   d5b2e:	6a1b      	ldr	r3, [r3, #32]
   d5b30:	9301      	str	r3, [sp, #4]
   d5b32:	bd08      	pop	{r3, pc}
   d5b34:	0003023c 	.word	0x0003023c

000d5b38 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d5b38:	b508      	push	{r3, lr}
   d5b3a:	4b02      	ldr	r3, [pc, #8]	; (d5b44 <hal_usart_available_data_for_write+0xc>)
   d5b3c:	681b      	ldr	r3, [r3, #0]
   d5b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5b40:	9301      	str	r3, [sp, #4]
   d5b42:	bd08      	pop	{r3, pc}
   d5b44:	0003023c 	.word	0x0003023c

000d5b48 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d5b48:	b508      	push	{r3, lr}
   d5b4a:	4b02      	ldr	r3, [pc, #8]	; (d5b54 <hal_i2c_begin+0xc>)
   d5b4c:	681b      	ldr	r3, [r3, #0]
   d5b4e:	68db      	ldr	r3, [r3, #12]
   d5b50:	9301      	str	r3, [sp, #4]
   d5b52:	bd08      	pop	{r3, pc}
   d5b54:	00030228 	.word	0x00030228

000d5b58 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d5b58:	b508      	push	{r3, lr}
   d5b5a:	4b02      	ldr	r3, [pc, #8]	; (d5b64 <hal_i2c_begin_transmission+0xc>)
   d5b5c:	681b      	ldr	r3, [r3, #0]
   d5b5e:	699b      	ldr	r3, [r3, #24]
   d5b60:	9301      	str	r3, [sp, #4]
   d5b62:	bd08      	pop	{r3, pc}
   d5b64:	00030228 	.word	0x00030228

000d5b68 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d5b68:	b508      	push	{r3, lr}
   d5b6a:	4b02      	ldr	r3, [pc, #8]	; (d5b74 <hal_i2c_end_transmission+0xc>)
   d5b6c:	681b      	ldr	r3, [r3, #0]
   d5b6e:	69db      	ldr	r3, [r3, #28]
   d5b70:	9301      	str	r3, [sp, #4]
   d5b72:	bd08      	pop	{r3, pc}
   d5b74:	00030228 	.word	0x00030228

000d5b78 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d5b78:	b508      	push	{r3, lr}
   d5b7a:	4b02      	ldr	r3, [pc, #8]	; (d5b84 <hal_i2c_write+0xc>)
   d5b7c:	681b      	ldr	r3, [r3, #0]
   d5b7e:	6a1b      	ldr	r3, [r3, #32]
   d5b80:	9301      	str	r3, [sp, #4]
   d5b82:	bd08      	pop	{r3, pc}
   d5b84:	00030228 	.word	0x00030228

000d5b88 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d5b88:	b508      	push	{r3, lr}
   d5b8a:	4b02      	ldr	r3, [pc, #8]	; (d5b94 <hal_i2c_available+0xc>)
   d5b8c:	681b      	ldr	r3, [r3, #0]
   d5b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5b90:	9301      	str	r3, [sp, #4]
   d5b92:	bd08      	pop	{r3, pc}
   d5b94:	00030228 	.word	0x00030228

000d5b98 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d5b98:	b508      	push	{r3, lr}
   d5b9a:	4b02      	ldr	r3, [pc, #8]	; (d5ba4 <hal_i2c_read+0xc>)
   d5b9c:	681b      	ldr	r3, [r3, #0]
   d5b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5ba0:	9301      	str	r3, [sp, #4]
   d5ba2:	bd08      	pop	{r3, pc}
   d5ba4:	00030228 	.word	0x00030228

000d5ba8 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d5ba8:	b508      	push	{r3, lr}
   d5baa:	4b02      	ldr	r3, [pc, #8]	; (d5bb4 <hal_i2c_peek+0xc>)
   d5bac:	681b      	ldr	r3, [r3, #0]
   d5bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5bb0:	9301      	str	r3, [sp, #4]
   d5bb2:	bd08      	pop	{r3, pc}
   d5bb4:	00030228 	.word	0x00030228

000d5bb8 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d5bb8:	b508      	push	{r3, lr}
   d5bba:	4b02      	ldr	r3, [pc, #8]	; (d5bc4 <hal_i2c_flush+0xc>)
   d5bbc:	681b      	ldr	r3, [r3, #0]
   d5bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5bc0:	9301      	str	r3, [sp, #4]
   d5bc2:	bd08      	pop	{r3, pc}
   d5bc4:	00030228 	.word	0x00030228

000d5bc8 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d5bc8:	b508      	push	{r3, lr}
   d5bca:	4b02      	ldr	r3, [pc, #8]	; (d5bd4 <hal_i2c_is_enabled+0xc>)
   d5bcc:	681b      	ldr	r3, [r3, #0]
   d5bce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5bd0:	9301      	str	r3, [sp, #4]
   d5bd2:	bd08      	pop	{r3, pc}
   d5bd4:	00030228 	.word	0x00030228

000d5bd8 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d5bd8:	b508      	push	{r3, lr}
   d5bda:	4b02      	ldr	r3, [pc, #8]	; (d5be4 <hal_i2c_init+0xc>)
   d5bdc:	681b      	ldr	r3, [r3, #0]
   d5bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5be0:	9301      	str	r3, [sp, #4]
   d5be2:	bd08      	pop	{r3, pc}
   d5be4:	00030228 	.word	0x00030228

000d5be8 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d5be8:	b508      	push	{r3, lr}
   d5bea:	4b02      	ldr	r3, [pc, #8]	; (d5bf4 <sock_setsockopt+0xc>)
   d5bec:	681b      	ldr	r3, [r3, #0]
   d5bee:	699b      	ldr	r3, [r3, #24]
   d5bf0:	9301      	str	r3, [sp, #4]
   d5bf2:	bd08      	pop	{r3, pc}
   d5bf4:	00030238 	.word	0x00030238

000d5bf8 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d5bf8:	b508      	push	{r3, lr}
   d5bfa:	4b02      	ldr	r3, [pc, #8]	; (d5c04 <sock_close+0xc>)
   d5bfc:	681b      	ldr	r3, [r3, #0]
   d5bfe:	69db      	ldr	r3, [r3, #28]
   d5c00:	9301      	str	r3, [sp, #4]
   d5c02:	bd08      	pop	{r3, pc}
   d5c04:	00030238 	.word	0x00030238

000d5c08 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d5c08:	b508      	push	{r3, lr}
   d5c0a:	4b02      	ldr	r3, [pc, #8]	; (d5c14 <sock_connect+0xc>)
   d5c0c:	681b      	ldr	r3, [r3, #0]
   d5c0e:	6a1b      	ldr	r3, [r3, #32]
   d5c10:	9301      	str	r3, [sp, #4]
   d5c12:	bd08      	pop	{r3, pc}
   d5c14:	00030238 	.word	0x00030238

000d5c18 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d5c18:	b508      	push	{r3, lr}
   d5c1a:	4b02      	ldr	r3, [pc, #8]	; (d5c24 <sock_recv+0xc>)
   d5c1c:	681b      	ldr	r3, [r3, #0]
   d5c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5c20:	9301      	str	r3, [sp, #4]
   d5c22:	bd08      	pop	{r3, pc}
   d5c24:	00030238 	.word	0x00030238

000d5c28 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d5c28:	b508      	push	{r3, lr}
   d5c2a:	4b02      	ldr	r3, [pc, #8]	; (d5c34 <sock_send+0xc>)
   d5c2c:	681b      	ldr	r3, [r3, #0]
   d5c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5c30:	9301      	str	r3, [sp, #4]
   d5c32:	bd08      	pop	{r3, pc}
   d5c34:	00030238 	.word	0x00030238

000d5c38 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d5c38:	b508      	push	{r3, lr}
   d5c3a:	4b02      	ldr	r3, [pc, #8]	; (d5c44 <sock_socket+0xc>)
   d5c3c:	681b      	ldr	r3, [r3, #0]
   d5c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d5c40:	9301      	str	r3, [sp, #4]
   d5c42:	bd08      	pop	{r3, pc}
   d5c44:	00030238 	.word	0x00030238

000d5c48 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d5c48:	b508      	push	{r3, lr}
   d5c4a:	4b02      	ldr	r3, [pc, #8]	; (d5c54 <hal_spi_begin+0xc>)
   d5c4c:	681b      	ldr	r3, [r3, #0]
   d5c4e:	681b      	ldr	r3, [r3, #0]
   d5c50:	9301      	str	r3, [sp, #4]
   d5c52:	bd08      	pop	{r3, pc}
   d5c54:	00030230 	.word	0x00030230

000d5c58 <hal_spi_end>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
   d5c58:	b508      	push	{r3, lr}
   d5c5a:	4b02      	ldr	r3, [pc, #8]	; (d5c64 <hal_spi_end+0xc>)
   d5c5c:	681b      	ldr	r3, [r3, #0]
   d5c5e:	685b      	ldr	r3, [r3, #4]
   d5c60:	9301      	str	r3, [sp, #4]
   d5c62:	bd08      	pop	{r3, pc}
   d5c64:	00030230 	.word	0x00030230

000d5c68 <hal_spi_set_bit_order>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
   d5c68:	b508      	push	{r3, lr}
   d5c6a:	4b02      	ldr	r3, [pc, #8]	; (d5c74 <hal_spi_set_bit_order+0xc>)
   d5c6c:	681b      	ldr	r3, [r3, #0]
   d5c6e:	689b      	ldr	r3, [r3, #8]
   d5c70:	9301      	str	r3, [sp, #4]
   d5c72:	bd08      	pop	{r3, pc}
   d5c74:	00030230 	.word	0x00030230

000d5c78 <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
   d5c78:	b508      	push	{r3, lr}
   d5c7a:	4b02      	ldr	r3, [pc, #8]	; (d5c84 <hal_spi_set_data_mode+0xc>)
   d5c7c:	681b      	ldr	r3, [r3, #0]
   d5c7e:	68db      	ldr	r3, [r3, #12]
   d5c80:	9301      	str	r3, [sp, #4]
   d5c82:	bd08      	pop	{r3, pc}
   d5c84:	00030230 	.word	0x00030230

000d5c88 <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   d5c88:	b508      	push	{r3, lr}
   d5c8a:	4b02      	ldr	r3, [pc, #8]	; (d5c94 <hal_spi_set_clock_divider+0xc>)
   d5c8c:	681b      	ldr	r3, [r3, #0]
   d5c8e:	691b      	ldr	r3, [r3, #16]
   d5c90:	9301      	str	r3, [sp, #4]
   d5c92:	bd08      	pop	{r3, pc}
   d5c94:	00030230 	.word	0x00030230

000d5c98 <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d5c98:	b508      	push	{r3, lr}
   d5c9a:	4b02      	ldr	r3, [pc, #8]	; (d5ca4 <hal_spi_transfer+0xc>)
   d5c9c:	681b      	ldr	r3, [r3, #0]
   d5c9e:	695b      	ldr	r3, [r3, #20]
   d5ca0:	9301      	str	r3, [sp, #4]
   d5ca2:	bd08      	pop	{r3, pc}
   d5ca4:	00030230 	.word	0x00030230

000d5ca8 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d5ca8:	b508      	push	{r3, lr}
   d5caa:	4b02      	ldr	r3, [pc, #8]	; (d5cb4 <hal_spi_init+0xc>)
   d5cac:	681b      	ldr	r3, [r3, #0]
   d5cae:	69db      	ldr	r3, [r3, #28]
   d5cb0:	9301      	str	r3, [sp, #4]
   d5cb2:	bd08      	pop	{r3, pc}
   d5cb4:	00030230 	.word	0x00030230

000d5cb8 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d5cb8:	b508      	push	{r3, lr}
   d5cba:	4b02      	ldr	r3, [pc, #8]	; (d5cc4 <hal_spi_is_enabled+0xc>)
   d5cbc:	681b      	ldr	r3, [r3, #0]
   d5cbe:	6a1b      	ldr	r3, [r3, #32]
   d5cc0:	9301      	str	r3, [sp, #4]
   d5cc2:	bd08      	pop	{r3, pc}
   d5cc4:	00030230 	.word	0x00030230

000d5cc8 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d5cc8:	b508      	push	{r3, lr}
   d5cca:	4b02      	ldr	r3, [pc, #8]	; (d5cd4 <hal_spi_info+0xc>)
   d5ccc:	681b      	ldr	r3, [r3, #0]
   d5cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5cd0:	9301      	str	r3, [sp, #4]
   d5cd2:	bd08      	pop	{r3, pc}
   d5cd4:	00030230 	.word	0x00030230

000d5cd8 <hal_spi_acquire>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d5cd8:	b508      	push	{r3, lr}
   d5cda:	4b02      	ldr	r3, [pc, #8]	; (d5ce4 <hal_spi_acquire+0xc>)
   d5cdc:	681b      	ldr	r3, [r3, #0]
   d5cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5ce0:	9301      	str	r3, [sp, #4]
   d5ce2:	bd08      	pop	{r3, pc}
   d5ce4:	00030230 	.word	0x00030230

000d5ce8 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d5ce8:	b508      	push	{r3, lr}
   d5cea:	4b02      	ldr	r3, [pc, #8]	; (d5cf4 <hal_spi_release+0xc>)
   d5cec:	681b      	ldr	r3, [r3, #0]
   d5cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5cf0:	9301      	str	r3, [sp, #4]
   d5cf2:	bd08      	pop	{r3, pc}
   d5cf4:	00030230 	.word	0x00030230

000d5cf8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5cf8:	b508      	push	{r3, lr}
   d5cfa:	4b02      	ldr	r3, [pc, #8]	; (d5d04 <HAL_USB_USART_Init+0xc>)
   d5cfc:	681b      	ldr	r3, [r3, #0]
   d5cfe:	681b      	ldr	r3, [r3, #0]
   d5d00:	9301      	str	r3, [sp, #4]
   d5d02:	bd08      	pop	{r3, pc}
   d5d04:	0003024c 	.word	0x0003024c

000d5d08 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d5d08:	b508      	push	{r3, lr}
   d5d0a:	4b02      	ldr	r3, [pc, #8]	; (d5d14 <HAL_USB_USART_Begin+0xc>)
   d5d0c:	681b      	ldr	r3, [r3, #0]
   d5d0e:	685b      	ldr	r3, [r3, #4]
   d5d10:	9301      	str	r3, [sp, #4]
   d5d12:	bd08      	pop	{r3, pc}
   d5d14:	0003024c 	.word	0x0003024c

000d5d18 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5d18:	b508      	push	{r3, lr}
   d5d1a:	4b02      	ldr	r3, [pc, #8]	; (d5d24 <HAL_USB_USART_Available_Data+0xc>)
   d5d1c:	681b      	ldr	r3, [r3, #0]
   d5d1e:	691b      	ldr	r3, [r3, #16]
   d5d20:	9301      	str	r3, [sp, #4]
   d5d22:	bd08      	pop	{r3, pc}
   d5d24:	0003024c 	.word	0x0003024c

000d5d28 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5d28:	b508      	push	{r3, lr}
   d5d2a:	4b02      	ldr	r3, [pc, #8]	; (d5d34 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5d2c:	681b      	ldr	r3, [r3, #0]
   d5d2e:	695b      	ldr	r3, [r3, #20]
   d5d30:	9301      	str	r3, [sp, #4]
   d5d32:	bd08      	pop	{r3, pc}
   d5d34:	0003024c 	.word	0x0003024c

000d5d38 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5d38:	b508      	push	{r3, lr}
   d5d3a:	4b02      	ldr	r3, [pc, #8]	; (d5d44 <HAL_USB_USART_Receive_Data+0xc>)
   d5d3c:	681b      	ldr	r3, [r3, #0]
   d5d3e:	699b      	ldr	r3, [r3, #24]
   d5d40:	9301      	str	r3, [sp, #4]
   d5d42:	bd08      	pop	{r3, pc}
   d5d44:	0003024c 	.word	0x0003024c

000d5d48 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5d48:	b508      	push	{r3, lr}
   d5d4a:	4b02      	ldr	r3, [pc, #8]	; (d5d54 <HAL_USB_USART_Send_Data+0xc>)
   d5d4c:	681b      	ldr	r3, [r3, #0]
   d5d4e:	69db      	ldr	r3, [r3, #28]
   d5d50:	9301      	str	r3, [sp, #4]
   d5d52:	bd08      	pop	{r3, pc}
   d5d54:	0003024c 	.word	0x0003024c

000d5d58 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5d58:	b508      	push	{r3, lr}
   d5d5a:	4b02      	ldr	r3, [pc, #8]	; (d5d64 <HAL_USB_USART_Flush_Data+0xc>)
   d5d5c:	681b      	ldr	r3, [r3, #0]
   d5d5e:	6a1b      	ldr	r3, [r3, #32]
   d5d60:	9301      	str	r3, [sp, #4]
   d5d62:	bd08      	pop	{r3, pc}
   d5d64:	0003024c 	.word	0x0003024c

000d5d68 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d5d68:	b508      	push	{r3, lr}
   d5d6a:	4b02      	ldr	r3, [pc, #8]	; (d5d74 <panic_+0xc>)
   d5d6c:	681b      	ldr	r3, [r3, #0]
   d5d6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5d70:	9301      	str	r3, [sp, #4]
   d5d72:	bd08      	pop	{r3, pc}
   d5d74:	00030260 	.word	0x00030260

000d5d78 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d5d78:	b508      	push	{r3, lr}
   d5d7a:	4b02      	ldr	r3, [pc, #8]	; (d5d84 <log_message+0xc>)
   d5d7c:	681b      	ldr	r3, [r3, #0]
   d5d7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5d80:	9301      	str	r3, [sp, #4]
   d5d82:	bd08      	pop	{r3, pc}
   d5d84:	00030260 	.word	0x00030260

000d5d88 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5d88:	b508      	push	{r3, lr}
   d5d8a:	4b02      	ldr	r3, [pc, #8]	; (d5d94 <set_system_mode+0xc>)
   d5d8c:	681b      	ldr	r3, [r3, #0]
   d5d8e:	685b      	ldr	r3, [r3, #4]
   d5d90:	9301      	str	r3, [sp, #4]
   d5d92:	bd08      	pop	{r3, pc}
   d5d94:	00030220 	.word	0x00030220

000d5d98 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5d98:	b508      	push	{r3, lr}
   d5d9a:	4b02      	ldr	r3, [pc, #8]	; (d5da4 <system_delay_ms+0xc>)
   d5d9c:	681b      	ldr	r3, [r3, #0]
   d5d9e:	695b      	ldr	r3, [r3, #20]
   d5da0:	9301      	str	r3, [sp, #4]
   d5da2:	bd08      	pop	{r3, pc}
   d5da4:	00030220 	.word	0x00030220

000d5da8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5da8:	b508      	push	{r3, lr}
   d5daa:	4b03      	ldr	r3, [pc, #12]	; (d5db8 <system_ctrl_set_app_request_handler+0x10>)
   d5dac:	681b      	ldr	r3, [r3, #0]
   d5dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d5db2:	9301      	str	r3, [sp, #4]
   d5db4:	bd08      	pop	{r3, pc}
   d5db6:	0000      	.short	0x0000
   d5db8:	00030220 	.word	0x00030220

000d5dbc <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5dbc:	b508      	push	{r3, lr}
   d5dbe:	4b03      	ldr	r3, [pc, #12]	; (d5dcc <system_ctrl_set_result+0x10>)
   d5dc0:	681b      	ldr	r3, [r3, #0]
   d5dc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d5dc6:	9301      	str	r3, [sp, #4]
   d5dc8:	bd08      	pop	{r3, pc}
   d5dca:	0000      	.short	0x0000
   d5dcc:	00030220 	.word	0x00030220

000d5dd0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5dd0:	b508      	push	{r3, lr}
   d5dd2:	4b02      	ldr	r3, [pc, #8]	; (d5ddc <network_connect+0xc>)
   d5dd4:	681b      	ldr	r3, [r3, #0]
   d5dd6:	685b      	ldr	r3, [r3, #4]
   d5dd8:	9301      	str	r3, [sp, #4]
   d5dda:	bd08      	pop	{r3, pc}
   d5ddc:	00030240 	.word	0x00030240

000d5de0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5de0:	b508      	push	{r3, lr}
   d5de2:	4b02      	ldr	r3, [pc, #8]	; (d5dec <network_connecting+0xc>)
   d5de4:	681b      	ldr	r3, [r3, #0]
   d5de6:	689b      	ldr	r3, [r3, #8]
   d5de8:	9301      	str	r3, [sp, #4]
   d5dea:	bd08      	pop	{r3, pc}
   d5dec:	00030240 	.word	0x00030240

000d5df0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5df0:	b508      	push	{r3, lr}
   d5df2:	4b02      	ldr	r3, [pc, #8]	; (d5dfc <network_disconnect+0xc>)
   d5df4:	681b      	ldr	r3, [r3, #0]
   d5df6:	68db      	ldr	r3, [r3, #12]
   d5df8:	9301      	str	r3, [sp, #4]
   d5dfa:	bd08      	pop	{r3, pc}
   d5dfc:	00030240 	.word	0x00030240

000d5e00 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5e00:	b508      	push	{r3, lr}
   d5e02:	4b02      	ldr	r3, [pc, #8]	; (d5e0c <network_ready+0xc>)
   d5e04:	681b      	ldr	r3, [r3, #0]
   d5e06:	691b      	ldr	r3, [r3, #16]
   d5e08:	9301      	str	r3, [sp, #4]
   d5e0a:	bd08      	pop	{r3, pc}
   d5e0c:	00030240 	.word	0x00030240

000d5e10 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5e10:	b508      	push	{r3, lr}
   d5e12:	4b02      	ldr	r3, [pc, #8]	; (d5e1c <network_on+0xc>)
   d5e14:	681b      	ldr	r3, [r3, #0]
   d5e16:	695b      	ldr	r3, [r3, #20]
   d5e18:	9301      	str	r3, [sp, #4]
   d5e1a:	bd08      	pop	{r3, pc}
   d5e1c:	00030240 	.word	0x00030240

000d5e20 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5e20:	b508      	push	{r3, lr}
   d5e22:	4b02      	ldr	r3, [pc, #8]	; (d5e2c <network_off+0xc>)
   d5e24:	681b      	ldr	r3, [r3, #0]
   d5e26:	699b      	ldr	r3, [r3, #24]
   d5e28:	9301      	str	r3, [sp, #4]
   d5e2a:	bd08      	pop	{r3, pc}
   d5e2c:	00030240 	.word	0x00030240

000d5e30 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5e30:	b508      	push	{r3, lr}
   d5e32:	4b02      	ldr	r3, [pc, #8]	; (d5e3c <network_listen+0xc>)
   d5e34:	681b      	ldr	r3, [r3, #0]
   d5e36:	69db      	ldr	r3, [r3, #28]
   d5e38:	9301      	str	r3, [sp, #4]
   d5e3a:	bd08      	pop	{r3, pc}
   d5e3c:	00030240 	.word	0x00030240

000d5e40 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5e40:	b508      	push	{r3, lr}
   d5e42:	4b02      	ldr	r3, [pc, #8]	; (d5e4c <network_listening+0xc>)
   d5e44:	681b      	ldr	r3, [r3, #0]
   d5e46:	6a1b      	ldr	r3, [r3, #32]
   d5e48:	9301      	str	r3, [sp, #4]
   d5e4a:	bd08      	pop	{r3, pc}
   d5e4c:	00030240 	.word	0x00030240

000d5e50 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5e50:	b508      	push	{r3, lr}
   d5e52:	4b02      	ldr	r3, [pc, #8]	; (d5e5c <network_set_listen_timeout+0xc>)
   d5e54:	681b      	ldr	r3, [r3, #0]
   d5e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5e58:	9301      	str	r3, [sp, #4]
   d5e5a:	bd08      	pop	{r3, pc}
   d5e5c:	00030240 	.word	0x00030240

000d5e60 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5e60:	b508      	push	{r3, lr}
   d5e62:	4b02      	ldr	r3, [pc, #8]	; (d5e6c <network_get_listen_timeout+0xc>)
   d5e64:	681b      	ldr	r3, [r3, #0]
   d5e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5e68:	9301      	str	r3, [sp, #4]
   d5e6a:	bd08      	pop	{r3, pc}
   d5e6c:	00030240 	.word	0x00030240

000d5e70 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d5e70:	b508      	push	{r3, lr}
   d5e72:	4b02      	ldr	r3, [pc, #8]	; (d5e7c <network_is_on+0xc>)
   d5e74:	681b      	ldr	r3, [r3, #0]
   d5e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5e78:	9301      	str	r3, [sp, #4]
   d5e7a:	bd08      	pop	{r3, pc}
   d5e7c:	00030240 	.word	0x00030240

000d5e80 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d5e80:	b508      	push	{r3, lr}
   d5e82:	4b02      	ldr	r3, [pc, #8]	; (d5e8c <network_is_off+0xc>)
   d5e84:	681b      	ldr	r3, [r3, #0]
   d5e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5e88:	9301      	str	r3, [sp, #4]
   d5e8a:	bd08      	pop	{r3, pc}
   d5e8c:	00030240 	.word	0x00030240

000d5e90 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5e90:	b508      	push	{r3, lr}
   d5e92:	4b02      	ldr	r3, [pc, #8]	; (d5e9c <spark_set_random_seed_from_cloud_handler+0xc>)
   d5e94:	681b      	ldr	r3, [r3, #0]
   d5e96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5e98:	9301      	str	r3, [sp, #4]
   d5e9a:	bd08      	pop	{r3, pc}
   d5e9c:	00030244 	.word	0x00030244

000d5ea0 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5ea0:	b508      	push	{r3, lr}
   d5ea2:	4b02      	ldr	r3, [pc, #8]	; (d5eac <malloc+0xc>)
   d5ea4:	681b      	ldr	r3, [r3, #0]
   d5ea6:	681b      	ldr	r3, [r3, #0]
   d5ea8:	9301      	str	r3, [sp, #4]
   d5eaa:	bd08      	pop	{r3, pc}
   d5eac:	0003021c 	.word	0x0003021c

000d5eb0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5eb0:	b508      	push	{r3, lr}
   d5eb2:	4b02      	ldr	r3, [pc, #8]	; (d5ebc <free+0xc>)
   d5eb4:	681b      	ldr	r3, [r3, #0]
   d5eb6:	685b      	ldr	r3, [r3, #4]
   d5eb8:	9301      	str	r3, [sp, #4]
   d5eba:	bd08      	pop	{r3, pc}
   d5ebc:	0003021c 	.word	0x0003021c

000d5ec0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d5ec0:	b508      	push	{r3, lr}
   d5ec2:	4b02      	ldr	r3, [pc, #8]	; (d5ecc <realloc+0xc>)
   d5ec4:	681b      	ldr	r3, [r3, #0]
   d5ec6:	689b      	ldr	r3, [r3, #8]
   d5ec8:	9301      	str	r3, [sp, #4]
   d5eca:	bd08      	pop	{r3, pc}
   d5ecc:	0003021c 	.word	0x0003021c

000d5ed0 <sscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   d5ed0:	b508      	push	{r3, lr}
   d5ed2:	4b02      	ldr	r3, [pc, #8]	; (d5edc <sscanf+0xc>)
   d5ed4:	681b      	ldr	r3, [r3, #0]
   d5ed6:	695b      	ldr	r3, [r3, #20]
   d5ed8:	9301      	str	r3, [sp, #4]
   d5eda:	bd08      	pop	{r3, pc}
   d5edc:	0003021c 	.word	0x0003021c

000d5ee0 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d5ee0:	b508      	push	{r3, lr}
   d5ee2:	4b02      	ldr	r3, [pc, #8]	; (d5eec <abort+0xc>)
   d5ee4:	681b      	ldr	r3, [r3, #0]
   d5ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5ee8:	9301      	str	r3, [sp, #4]
   d5eea:	bd08      	pop	{r3, pc}
   d5eec:	0003021c 	.word	0x0003021c

000d5ef0 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d5ef0:	b508      	push	{r3, lr}
   d5ef2:	4b02      	ldr	r3, [pc, #8]	; (d5efc <_malloc_r+0xc>)
   d5ef4:	681b      	ldr	r3, [r3, #0]
   d5ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5ef8:	9301      	str	r3, [sp, #4]
   d5efa:	bd08      	pop	{r3, pc}
   d5efc:	0003021c 	.word	0x0003021c

000d5f00 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d5f00:	b508      	push	{r3, lr}
   d5f02:	4b02      	ldr	r3, [pc, #8]	; (d5f0c <__errno+0xc>)
   d5f04:	681b      	ldr	r3, [r3, #0]
   d5f06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5f08:	9301      	str	r3, [sp, #4]
   d5f0a:	bd08      	pop	{r3, pc}
   d5f0c:	0003021c 	.word	0x0003021c

000d5f10 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d5f10:	b508      	push	{r3, lr}
   d5f12:	4b02      	ldr	r3, [pc, #8]	; (d5f1c <newlib_impure_ptr_callback+0xc>)
   d5f14:	681b      	ldr	r3, [r3, #0]
   d5f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5f18:	9301      	str	r3, [sp, #4]
   d5f1a:	bd08      	pop	{r3, pc}
   d5f1c:	0003021c 	.word	0x0003021c

000d5f20 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5f20:	2200      	movs	r2, #0
   d5f22:	6840      	ldr	r0, [r0, #4]
   d5f24:	4611      	mov	r1, r2
   d5f26:	f7ff bf8b 	b.w	d5e40 <network_listening>

000d5f2a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d5f2a:	2200      	movs	r2, #0
   d5f2c:	6840      	ldr	r0, [r0, #4]
   d5f2e:	4611      	mov	r1, r2
   d5f30:	f7ff bf96 	b.w	d5e60 <network_get_listen_timeout>

000d5f34 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d5f34:	6840      	ldr	r0, [r0, #4]
   d5f36:	2200      	movs	r2, #0
   d5f38:	f7ff bf8a 	b.w	d5e50 <network_set_listen_timeout>

000d5f3c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d5f3c:	6840      	ldr	r0, [r0, #4]
   d5f3e:	2200      	movs	r2, #0
   d5f40:	f081 0101 	eor.w	r1, r1, #1
   d5f44:	f7ff bf74 	b.w	d5e30 <network_listen>

000d5f48 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d5f48:	2300      	movs	r3, #0
   d5f4a:	6840      	ldr	r0, [r0, #4]
   d5f4c:	461a      	mov	r2, r3
   d5f4e:	4619      	mov	r1, r3
   d5f50:	f7ff bf66 	b.w	d5e20 <network_off>

000d5f54 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d5f54:	2300      	movs	r3, #0
   d5f56:	6840      	ldr	r0, [r0, #4]
   d5f58:	461a      	mov	r2, r3
   d5f5a:	4619      	mov	r1, r3
   d5f5c:	f7ff bf58 	b.w	d5e10 <network_on>

000d5f60 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5f60:	2200      	movs	r2, #0
   d5f62:	6840      	ldr	r0, [r0, #4]
   d5f64:	4611      	mov	r1, r2
   d5f66:	f7ff bf4b 	b.w	d5e00 <network_ready>

000d5f6a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d5f6a:	2200      	movs	r2, #0
   d5f6c:	6840      	ldr	r0, [r0, #4]
   d5f6e:	4611      	mov	r1, r2
   d5f70:	f7ff bf36 	b.w	d5de0 <network_connecting>

000d5f74 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5f74:	6840      	ldr	r0, [r0, #4]
   d5f76:	2200      	movs	r2, #0
   d5f78:	2102      	movs	r1, #2
   d5f7a:	f7ff bf39 	b.w	d5df0 <network_disconnect>

000d5f7e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d5f7e:	2300      	movs	r3, #0
   d5f80:	6840      	ldr	r0, [r0, #4]
   d5f82:	461a      	mov	r2, r3
   d5f84:	f7ff bf24 	b.w	d5dd0 <network_connect>

000d5f88 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5f88:	4b02      	ldr	r3, [pc, #8]	; (d5f94 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5f8a:	2203      	movs	r2, #3
   d5f8c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5f8e:	4a02      	ldr	r2, [pc, #8]	; (d5f98 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5f90:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d5f92:	4770      	bx	lr
   d5f94:	2003e644 	.word	0x2003e644
   d5f98:	000db2d4 	.word	0x000db2d4

000d5f9c <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   d5f9c:	2100      	movs	r1, #0
   d5f9e:	f7ff be9b 	b.w	d5cd8 <hal_spi_acquire>

000d5fa2 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   d5fa2:	2100      	movs	r1, #0
   d5fa4:	f7ff bea0 	b.w	d5ce8 <hal_spi_release>

000d5fa8 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d5fa8:	b510      	push	{r4, lr}
   d5faa:	4604      	mov	r4, r0
   d5fac:	4608      	mov	r0, r1
{
    _spi = spi;
   d5fae:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d5fb0:	f7ff fe7a 	bl	d5ca8 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d5fb4:	2300      	movs	r3, #0
   d5fb6:	6063      	str	r3, [r4, #4]
}
   d5fb8:	4620      	mov	r0, r4
   d5fba:	bd10      	pop	{r4, pc}

000d5fbc <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d5fbc:	b510      	push	{r4, lr}
   d5fbe:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d5fc0:	7800      	ldrb	r0, [r0, #0]
   d5fc2:	f7ff ffeb 	bl	d5f9c <_ZN8SPIClass4lockEv.isra.0>
   d5fc6:	b948      	cbnz	r0, d5fdc <_ZN8SPIClass5beginEv+0x20>
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   d5fc8:	7820      	ldrb	r0, [r4, #0]
   d5fca:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d5fce:	f7ff fe3b 	bl	d5c48 <hal_spi_begin>
        unlock();
   d5fd2:	7820      	ldrb	r0, [r4, #0]
    }
}
   d5fd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d5fd8:	f7ff bfe3 	b.w	d5fa2 <_ZN8SPIClass6unlockEv.isra.0>
}
   d5fdc:	bd10      	pop	{r4, pc}

000d5fde <_ZN8SPIClass3endEv>:
        unlock();
    }
}

void SPIClass::end()
{
   d5fde:	b510      	push	{r4, lr}
   d5fe0:	4604      	mov	r4, r0
    if (!lock())
   d5fe2:	7800      	ldrb	r0, [r0, #0]
   d5fe4:	f7ff ffda 	bl	d5f9c <_ZN8SPIClass4lockEv.isra.0>
   d5fe8:	b938      	cbnz	r0, d5ffa <_ZN8SPIClass3endEv+0x1c>
    {
        hal_spi_end(_spi);
   d5fea:	7820      	ldrb	r0, [r4, #0]
   d5fec:	f7ff fe34 	bl	d5c58 <hal_spi_end>
        unlock();
   d5ff0:	7820      	ldrb	r0, [r4, #0]
    }
}
   d5ff2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d5ff6:	f7ff bfd4 	b.w	d5fa2 <_ZN8SPIClass6unlockEv.isra.0>
}
   d5ffa:	bd10      	pop	{r4, pc}

000d5ffc <_ZN8SPIClass11setBitOrderEh>:

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d5ffc:	b513      	push	{r0, r1, r4, lr}
   d5ffe:	4604      	mov	r4, r0
    if (!lock())
   d6000:	7800      	ldrb	r0, [r0, #0]
{
   d6002:	9101      	str	r1, [sp, #4]
    if (!lock())
   d6004:	f7ff ffca 	bl	d5f9c <_ZN8SPIClass4lockEv.isra.0>
   d6008:	9901      	ldr	r1, [sp, #4]
   d600a:	b940      	cbnz	r0, d601e <_ZN8SPIClass11setBitOrderEh+0x22>
    {
        hal_spi_set_bit_order(_spi, bitOrder);
   d600c:	7820      	ldrb	r0, [r4, #0]
   d600e:	f7ff fe2b 	bl	d5c68 <hal_spi_set_bit_order>
        unlock();
   d6012:	7820      	ldrb	r0, [r4, #0]
    }
}
   d6014:	b002      	add	sp, #8
   d6016:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d601a:	f7ff bfc2 	b.w	d5fa2 <_ZN8SPIClass6unlockEv.isra.0>
}
   d601e:	b002      	add	sp, #8
   d6020:	bd10      	pop	{r4, pc}

000d6022 <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
   d6022:	b513      	push	{r0, r1, r4, lr}
   d6024:	4604      	mov	r4, r0
    if (!lock())
   d6026:	7800      	ldrb	r0, [r0, #0]
{
   d6028:	9101      	str	r1, [sp, #4]
    if (!lock())
   d602a:	f7ff ffb7 	bl	d5f9c <_ZN8SPIClass4lockEv.isra.0>
   d602e:	9901      	ldr	r1, [sp, #4]
   d6030:	b940      	cbnz	r0, d6044 <_ZN8SPIClass11setDataModeEh+0x22>
    {
        hal_spi_set_data_mode(_spi, mode);
   d6032:	7820      	ldrb	r0, [r4, #0]
   d6034:	f7ff fe20 	bl	d5c78 <hal_spi_set_data_mode>
        unlock();
   d6038:	7820      	ldrb	r0, [r4, #0]
    }
}
   d603a:	b002      	add	sp, #8
   d603c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d6040:	f7ff bfaf 	b.w	d5fa2 <_ZN8SPIClass6unlockEv.isra.0>
}
   d6044:	b002      	add	sp, #8
   d6046:	bd10      	pop	{r4, pc}

000d6048 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d6048:	0840      	lsrs	r0, r0, #1
{
   d604a:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   d604c:	6018      	str	r0, [r3, #0]
   d604e:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d6050:	6818      	ldr	r0, [r3, #0]
   d6052:	4288      	cmp	r0, r1
   d6054:	b2e5      	uxtb	r5, r4
   d6056:	d906      	bls.n	d6066 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d6058:	3401      	adds	r4, #1
   d605a:	2c08      	cmp	r4, #8
   d605c:	d002      	beq.n	d6064 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d605e:	0840      	lsrs	r0, r0, #1
   d6060:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   d6062:	e7f5      	b.n	d6050 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d6064:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   d6066:	4b02      	ldr	r3, [pc, #8]	; (d6070 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d6068:	5d5b      	ldrb	r3, [r3, r5]
   d606a:	7013      	strb	r3, [r2, #0]
}
   d606c:	bd30      	pop	{r4, r5, pc}
   d606e:	bf00      	nop
   d6070:	000db308 	.word	0x000db308

000d6074 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d6074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6078:	b088      	sub	sp, #32
    unsigned clock = 0;
   d607a:	2300      	movs	r3, #0
{
   d607c:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d607e:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   d6080:	9302      	str	r3, [sp, #8]
{
   d6082:	460e      	mov	r6, r1
   d6084:	4617      	mov	r7, r2
    if (!lock())
   d6086:	f7ff ff89 	bl	d5f9c <_ZN8SPIClass4lockEv.isra.0>
   d608a:	4605      	mov	r5, r0
   d608c:	bb00      	cbnz	r0, d60d0 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   d608e:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   d6092:	4601      	mov	r1, r0
   d6094:	2214      	movs	r2, #20
   d6096:	a803      	add	r0, sp, #12
   d6098:	f003 f8a4 	bl	d91e4 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d609c:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d609e:	462a      	mov	r2, r5
   d60a0:	a903      	add	r1, sp, #12
   d60a2:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   d60a4:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   d60a8:	f7ff fe0e 	bl	d5cc8 <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d60ac:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   d60ae:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d60b2:	ab02      	add	r3, sp, #8
   d60b4:	f10d 0207 	add.w	r2, sp, #7
   d60b8:	fb07 f106 	mul.w	r1, r7, r6
   d60bc:	f7ff ffc4 	bl	d6048 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   d60c0:	7820      	ldrb	r0, [r4, #0]
   d60c2:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d60c6:	f7ff fddf 	bl	d5c88 <hal_spi_set_clock_divider>
        unlock();
   d60ca:	7820      	ldrb	r0, [r4, #0]
   d60cc:	f7ff ff69 	bl	d5fa2 <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   d60d0:	9802      	ldr	r0, [sp, #8]
   d60d2:	b008      	add	sp, #32
   d60d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d60d8 <_ZN8SPIClass15setClockDividerEh>:
{
   d60d8:	b538      	push	{r3, r4, r5, lr}
   d60da:	4604      	mov	r4, r0
    if (!lock())
   d60dc:	7800      	ldrb	r0, [r0, #0]
{
   d60de:	460d      	mov	r5, r1
    if (!lock())
   d60e0:	f7ff ff5c 	bl	d5f9c <_ZN8SPIClass4lockEv.isra.0>
   d60e4:	4603      	mov	r3, r0
   d60e6:	b9d0      	cbnz	r0, d611e <_ZN8SPIClass15setClockDividerEh+0x46>
        if (_dividerReference)
   d60e8:	6861      	ldr	r1, [r4, #4]
   d60ea:	b199      	cbz	r1, d6114 <_ZN8SPIClass15setClockDividerEh+0x3c>
   d60ec:	4a0c      	ldr	r2, [pc, #48]	; (d6120 <_ZN8SPIClass15setClockDividerEh+0x48>)
        if (clock_divisors[result] == divider)
   d60ee:	f812 0b01 	ldrb.w	r0, [r2], #1
   d60f2:	4285      	cmp	r5, r0
   d60f4:	d002      	beq.n	d60fc <_ZN8SPIClass15setClockDividerEh+0x24>
    for (; result < arraySize(clock_divisors); result++)
   d60f6:	3301      	adds	r3, #1
   d60f8:	2b08      	cmp	r3, #8
   d60fa:	d1f8      	bne.n	d60ee <_ZN8SPIClass15setClockDividerEh+0x16>
    return result + 1;
   d60fc:	3301      	adds	r3, #1
            unsigned targetSpeed = _dividerReference >> scale;
   d60fe:	b2db      	uxtb	r3, r3
            setClockSpeed(targetSpeed);
   d6100:	2201      	movs	r2, #1
   d6102:	40d9      	lsrs	r1, r3
   d6104:	4620      	mov	r0, r4
   d6106:	f7ff ffb5 	bl	d6074 <_ZN8SPIClass13setClockSpeedEjj>
        unlock();
   d610a:	7820      	ldrb	r0, [r4, #0]
}
   d610c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unlock();
   d6110:	f7ff bf47 	b.w	d5fa2 <_ZN8SPIClass6unlockEv.isra.0>
            hal_spi_set_clock_divider(_spi, rate);
   d6114:	7820      	ldrb	r0, [r4, #0]
   d6116:	4629      	mov	r1, r5
   d6118:	f7ff fdb6 	bl	d5c88 <hal_spi_set_clock_divider>
   d611c:	e7f5      	b.n	d610a <_ZN8SPIClass15setClockDividerEh+0x32>
}
   d611e:	bd38      	pop	{r3, r4, r5, pc}
   d6120:	000db308 	.word	0x000db308

000d6124 <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   d6124:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   d6126:	7800      	ldrb	r0, [r0, #0]
   d6128:	f7ff fdb6 	bl	d5c98 <hal_spi_transfer>
}
   d612c:	b2c0      	uxtb	r0, r0
   d612e:	bd08      	pop	{r3, pc}

000d6130 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d6130:	b510      	push	{r4, lr}
   d6132:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d6134:	6800      	ldr	r0, [r0, #0]
   d6136:	b118      	cbz	r0, d6140 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d6138:	f7ff feba 	bl	d5eb0 <free>
            wakeupSource_ = nullptr;
   d613c:	2300      	movs	r3, #0
   d613e:	6023      	str	r3, [r4, #0]
        }
    }
   d6140:	bd10      	pop	{r4, pc}

000d6142 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d6142:	b510      	push	{r4, lr}
   d6144:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d6146:	f7ff fff3 	bl	d6130 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d614a:	4620      	mov	r0, r4
   d614c:	bd10      	pop	{r4, pc}
	...

000d6150 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d6150:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d6152:	4b09      	ldr	r3, [pc, #36]	; (d6178 <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d6154:	4c09      	ldr	r4, [pc, #36]	; (d617c <_GLOBAL__sub_I_System+0x2c>)
   d6156:	2202      	movs	r2, #2
   d6158:	2000      	movs	r0, #0
   d615a:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d615c:	4b08      	ldr	r3, [pc, #32]	; (d6180 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d615e:	6020      	str	r0, [r4, #0]
   d6160:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d6162:	71a0      	strb	r0, [r4, #6]
   d6164:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d6166:	f7ff fe0f 	bl	d5d88 <set_system_mode>
SystemClass System;
   d616a:	4620      	mov	r0, r4
   d616c:	4a05      	ldr	r2, [pc, #20]	; (d6184 <_GLOBAL__sub_I_System+0x34>)
   d616e:	4906      	ldr	r1, [pc, #24]	; (d6188 <_GLOBAL__sub_I_System+0x38>)
   d6170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d6174:	f002 b9c0 	b.w	d84f8 <__aeabi_atexit>
   d6178:	2003e658 	.word	0x2003e658
   d617c:	2003e64c 	.word	0x2003e64c
   d6180:	ffff0000 	.word	0xffff0000
   d6184:	200355c4 	.word	0x200355c4
   d6188:	000d6143 	.word	0x000d6143

000d618c <_ZN9IPAddressaSIPKhEERS_T_>:
    void set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3);


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
   d618c:	b570      	push	{r4, r5, r6, lr}
   d618e:	b086      	sub	sp, #24
   d6190:	4606      	mov	r6, r0
class IPAddress : public Printable {
   d6192:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   d6194:	4668      	mov	r0, sp
   d6196:	f001 fbeb 	bl	d7970 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d619a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d619c:	1d34      	adds	r4, r6, #4
   d619e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d61a0:	682b      	ldr	r3, [r5, #0]
   d61a2:	7023      	strb	r3, [r4, #0]
    }
   d61a4:	4630      	mov	r0, r6
   d61a6:	b006      	add	sp, #24
   d61a8:	bd70      	pop	{r4, r5, r6, pc}

000d61aa <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d61aa:	b510      	push	{r4, lr}
   d61ac:	4604      	mov	r4, r0
{
	free(buffer);
   d61ae:	6800      	ldr	r0, [r0, #0]
   d61b0:	f7ff fe7e 	bl	d5eb0 <free>
}
   d61b4:	4620      	mov	r0, r4
   d61b6:	bd10      	pop	{r4, pc}

000d61b8 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d61b8:	b510      	push	{r4, lr}
   d61ba:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d61bc:	6800      	ldr	r0, [r0, #0]
   d61be:	b108      	cbz	r0, d61c4 <_ZN6String10invalidateEv+0xc>
   d61c0:	f7ff fe76 	bl	d5eb0 <free>
	buffer = NULL;
   d61c4:	2300      	movs	r3, #0
	capacity = len = 0;
   d61c6:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d61ca:	6023      	str	r3, [r4, #0]
}
   d61cc:	bd10      	pop	{r4, pc}

000d61ce <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d61ce:	b538      	push	{r3, r4, r5, lr}
   d61d0:	4604      	mov	r4, r0
   d61d2:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d61d4:	6800      	ldr	r0, [r0, #0]
   d61d6:	3101      	adds	r1, #1
   d61d8:	f7ff fe72 	bl	d5ec0 <realloc>
	if (newbuffer) {
   d61dc:	b110      	cbz	r0, d61e4 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d61de:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d61e2:	2001      	movs	r0, #1
	}
	return 0;
}
   d61e4:	bd38      	pop	{r3, r4, r5, pc}

000d61e6 <_ZN6String7reserveEj>:
{
   d61e6:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d61e8:	6803      	ldr	r3, [r0, #0]
{
   d61ea:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d61ec:	b123      	cbz	r3, d61f8 <_ZN6String7reserveEj+0x12>
   d61ee:	6843      	ldr	r3, [r0, #4]
   d61f0:	428b      	cmp	r3, r1
   d61f2:	d301      	bcc.n	d61f8 <_ZN6String7reserveEj+0x12>
   d61f4:	2001      	movs	r0, #1
}
   d61f6:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d61f8:	4620      	mov	r0, r4
   d61fa:	f7ff ffe8 	bl	d61ce <_ZN6String12changeBufferEj>
   d61fe:	2800      	cmp	r0, #0
   d6200:	d0f9      	beq.n	d61f6 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d6202:	68a3      	ldr	r3, [r4, #8]
   d6204:	2b00      	cmp	r3, #0
   d6206:	d1f5      	bne.n	d61f4 <_ZN6String7reserveEj+0xe>
   d6208:	6822      	ldr	r2, [r4, #0]
   d620a:	7013      	strb	r3, [r2, #0]
   d620c:	e7f2      	b.n	d61f4 <_ZN6String7reserveEj+0xe>

000d620e <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d620e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6210:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d6212:	4611      	mov	r1, r2
   d6214:	9201      	str	r2, [sp, #4]
{
   d6216:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d6218:	f7ff ffe5 	bl	d61e6 <_ZN6String7reserveEj>
   d621c:	9a01      	ldr	r2, [sp, #4]
   d621e:	b928      	cbnz	r0, d622c <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d6220:	4620      	mov	r0, r4
   d6222:	f7ff ffc9 	bl	d61b8 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d6226:	4620      	mov	r0, r4
   d6228:	b003      	add	sp, #12
   d622a:	bd30      	pop	{r4, r5, pc}
	len = length;
   d622c:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d622e:	4629      	mov	r1, r5
   d6230:	6820      	ldr	r0, [r4, #0]
   d6232:	f002 ffaf 	bl	d9194 <memcpy>
	buffer[len] = 0;
   d6236:	6822      	ldr	r2, [r4, #0]
   d6238:	68a3      	ldr	r3, [r4, #8]
   d623a:	2100      	movs	r1, #0
   d623c:	54d1      	strb	r1, [r2, r3]
	return *this;
   d623e:	e7f2      	b.n	d6226 <_ZN6String4copyEPKcj+0x18>

000d6240 <_ZN6StringC1EPKc>:
	buffer = NULL;
   d6240:	2300      	movs	r3, #0
String::String(const char *cstr)
   d6242:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d6244:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d6248:	4604      	mov	r4, r0
	len = 0;
   d624a:	6083      	str	r3, [r0, #8]
	flags = 0;
   d624c:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d624e:	b141      	cbz	r1, d6262 <_ZN6StringC1EPKc+0x22>
   d6250:	4608      	mov	r0, r1
   d6252:	9101      	str	r1, [sp, #4]
   d6254:	f003 f804 	bl	d9260 <strlen>
   d6258:	9901      	ldr	r1, [sp, #4]
   d625a:	4602      	mov	r2, r0
   d625c:	4620      	mov	r0, r4
   d625e:	f7ff ffd6 	bl	d620e <_ZN6String4copyEPKcj>
}
   d6262:	4620      	mov	r0, r4
   d6264:	b002      	add	sp, #8
   d6266:	bd10      	pop	{r4, pc}

000d6268 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d6268:	b513      	push	{r0, r1, r4, lr}
   d626a:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d626c:	b159      	cbz	r1, d6286 <_ZN6StringaSEPKc+0x1e>
   d626e:	4608      	mov	r0, r1
   d6270:	9101      	str	r1, [sp, #4]
   d6272:	f002 fff5 	bl	d9260 <strlen>
   d6276:	9901      	ldr	r1, [sp, #4]
   d6278:	4602      	mov	r2, r0
   d627a:	4620      	mov	r0, r4
   d627c:	f7ff ffc7 	bl	d620e <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d6280:	4620      	mov	r0, r4
   d6282:	b002      	add	sp, #8
   d6284:	bd10      	pop	{r4, pc}
	else invalidate();
   d6286:	f7ff ff97 	bl	d61b8 <_ZN6String10invalidateEv>
   d628a:	e7f9      	b.n	d6280 <_ZN6StringaSEPKc+0x18>

000d628c <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d628c:	b570      	push	{r4, r5, r6, lr}
   d628e:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d6290:	460e      	mov	r6, r1
   d6292:	b909      	cbnz	r1, d6298 <_ZN6String6concatEPKcj+0xc>
   d6294:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d6296:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d6298:	b16a      	cbz	r2, d62b6 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   d629a:	6884      	ldr	r4, [r0, #8]
   d629c:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   d629e:	4621      	mov	r1, r4
   d62a0:	f7ff ffa1 	bl	d61e6 <_ZN6String7reserveEj>
   d62a4:	2800      	cmp	r0, #0
   d62a6:	d0f5      	beq.n	d6294 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d62a8:	6828      	ldr	r0, [r5, #0]
   d62aa:	68ab      	ldr	r3, [r5, #8]
   d62ac:	4631      	mov	r1, r6
   d62ae:	4418      	add	r0, r3
   d62b0:	f002 ffce 	bl	d9250 <strcpy>
	len = newlen;
   d62b4:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   d62b6:	2001      	movs	r0, #1
   d62b8:	e7ed      	b.n	d6296 <_ZN6String6concatEPKcj+0xa>

000d62ba <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
   d62ba:	688a      	ldr	r2, [r1, #8]
   d62bc:	6809      	ldr	r1, [r1, #0]
   d62be:	f7ff bfe5 	b.w	d628c <_ZN6String6concatEPKcj>

000d62c2 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   d62c2:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d62c4:	2300      	movs	r3, #0
	buf[0] = c;
   d62c6:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   d62ca:	2201      	movs	r2, #1
   d62cc:	a901      	add	r1, sp, #4
	buf[1] = 0;
   d62ce:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   d62d2:	f7ff ffdb 	bl	d628c <_ZN6String6concatEPKcj>
}
   d62d6:	b003      	add	sp, #12
   d62d8:	f85d fb04 	ldr.w	pc, [sp], #4

000d62dc <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d62dc:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d62de:	6882      	ldr	r2, [r0, #8]
   d62e0:	b93a      	cbnz	r2, d62f2 <_ZNK6String6equalsEPKc+0x16>
   d62e2:	b121      	cbz	r1, d62ee <_ZNK6String6equalsEPKc+0x12>
   d62e4:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   d62e6:	fab0 f080 	clz	r0, r0
   d62ea:	0940      	lsrs	r0, r0, #5
   d62ec:	e000      	b.n	d62f0 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d62ee:	2001      	movs	r0, #1
}
   d62f0:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d62f2:	6800      	ldr	r0, [r0, #0]
   d62f4:	b909      	cbnz	r1, d62fa <_ZNK6String6equalsEPKc+0x1e>
   d62f6:	7800      	ldrb	r0, [r0, #0]
   d62f8:	e7f5      	b.n	d62e6 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   d62fa:	f002 ff9f 	bl	d923c <strcmp>
   d62fe:	e7f2      	b.n	d62e6 <_ZNK6String6equalsEPKc+0xa>

000d6300 <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
   d6300:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
   d6302:	6883      	ldr	r3, [r0, #8]
   d6304:	4293      	cmp	r3, r2
   d6306:	d907      	bls.n	d6318 <_ZNK6String7indexOfERKS_j+0x18>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
   d6308:	6804      	ldr	r4, [r0, #0]
   d630a:	6809      	ldr	r1, [r1, #0]
   d630c:	18a0      	adds	r0, r4, r2
   d630e:	f002 ffce 	bl	d92ae <strstr>
	if (found == NULL) return -1;
   d6312:	b108      	cbz	r0, d6318 <_ZNK6String7indexOfERKS_j+0x18>
	return found - buffer;
   d6314:	1b00      	subs	r0, r0, r4
}
   d6316:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
   d6318:	f04f 30ff 	mov.w	r0, #4294967295
   d631c:	e7fb      	b.n	d6316 <_ZNK6String7indexOfERKS_j+0x16>

000d631e <_ZNK6String7indexOfERKS_>:
	return indexOf(s2, 0);
   d631e:	2200      	movs	r2, #0
   d6320:	f7ff bfee 	b.w	d6300 <_ZNK6String7indexOfERKS_j>

000d6324 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d6324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   d6326:	429a      	cmp	r2, r3
{
   d6328:	460f      	mov	r7, r1
   d632a:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   d632c:	490c      	ldr	r1, [pc, #48]	; (d6360 <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   d632e:	bf88      	it	hi
   d6330:	4613      	movhi	r3, r2
{
   d6332:	4614      	mov	r4, r2
   d6334:	4606      	mov	r6, r0
	if (left > right) {
   d6336:	bf84      	itt	hi
   d6338:	462c      	movhi	r4, r5
   d633a:	461d      	movhi	r5, r3
	String out;
   d633c:	f7ff ff80 	bl	d6240 <_ZN6StringC1EPKc>
	if (left > len) return out;
   d6340:	68ba      	ldr	r2, [r7, #8]
   d6342:	42a2      	cmp	r2, r4
   d6344:	d30a      	bcc.n	d635c <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   d6346:	6839      	ldr	r1, [r7, #0]
   d6348:	42aa      	cmp	r2, r5
   d634a:	bf94      	ite	ls
   d634c:	ebc4 0202 	rsbls	r2, r4, r2
   d6350:	ebc4 0205 	rsbhi	r2, r4, r5
   d6354:	4421      	add	r1, r4
   d6356:	4630      	mov	r0, r6
   d6358:	f7ff ff59 	bl	d620e <_ZN6String4copyEPKcj>
	return out;
}
   d635c:	4630      	mov	r0, r6
   d635e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d6360:	000db295 	.word	0x000db295

000d6364 <_ZNK6String9substringEj>:
{
   d6364:	b510      	push	{r4, lr}
   d6366:	4604      	mov	r4, r0
	return substring(left, len);
   d6368:	688b      	ldr	r3, [r1, #8]
   d636a:	f7ff ffdb 	bl	d6324 <_ZNK6String9substringEjj>
}
   d636e:	4620      	mov	r0, r4
   d6370:	bd10      	pop	{r4, pc}
	...

000d6374 <_ZNK6String7toFloatEv>:
	return 0;
}


float String::toFloat(void) const
{
   d6374:	b508      	push	{r3, lr}
	if (buffer) return float(atof(buffer));
   d6376:	6800      	ldr	r0, [r0, #0]
   d6378:	b140      	cbz	r0, d638c <_ZNK6String7toFloatEv+0x18>
   d637a:	f002 fee7 	bl	d914c <atof>
   d637e:	ec51 0b10 	vmov	r0, r1, d0
   d6382:	f002 fe75 	bl	d9070 <__aeabi_d2f>
   d6386:	ee00 0a10 	vmov	s0, r0
	return 0;
}
   d638a:	bd08      	pop	{r3, pc}
	return 0;
   d638c:	ed9f 0a01 	vldr	s0, [pc, #4]	; d6394 <_ZNK6String7toFloatEv+0x20>
   d6390:	e7fb      	b.n	d638a <_ZNK6String7toFloatEv+0x16>
   d6392:	bf00      	nop
   d6394:	00000000 	.word	0x00000000

000d6398 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d6398:	4770      	bx	lr

000d639a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   d639a:	4770      	bx	lr

000d639c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   d639c:	4770      	bx	lr

000d639e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d639e:	4770      	bx	lr

000d63a0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d63a0:	4b06      	ldr	r3, [pc, #24]	; (d63bc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d63a2:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d63a4:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   d63a6:	f100 040c 	add.w	r4, r0, #12
	    ||
   d63aa:	d005      	beq.n	d63b8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d63ac:	4608      	mov	r0, r1
   d63ae:	f002 f8af 	bl	d8510 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d63b2:	2800      	cmp	r0, #0
	return nullptr;
   d63b4:	bf08      	it	eq
   d63b6:	2400      	moveq	r4, #0
      }
   d63b8:	4620      	mov	r0, r4
   d63ba:	bd10      	pop	{r4, pc}
   d63bc:	000db458 	.word	0x000db458

000d63c0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d63c0:	4b06      	ldr	r3, [pc, #24]	; (d63dc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d63c2:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d63c4:	b510      	push	{r4, lr}
   d63c6:	f100 040c 	add.w	r4, r0, #12
	    ||
   d63ca:	d005      	beq.n	d63d8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d63cc:	4608      	mov	r0, r1
   d63ce:	f002 f89f 	bl	d8510 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d63d2:	2800      	cmp	r0, #0
	return nullptr;
   d63d4:	bf08      	it	eq
   d63d6:	2400      	moveq	r4, #0
      }
   d63d8:	4620      	mov	r0, r4
   d63da:	bd10      	pop	{r4, pc}
   d63dc:	000db458 	.word	0x000db458

000d63e0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d63e0:	4b06      	ldr	r3, [pc, #24]	; (d63fc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d63e2:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d63e4:	b510      	push	{r4, lr}
   d63e6:	f100 040c 	add.w	r4, r0, #12
	    ||
   d63ea:	d005      	beq.n	d63f8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d63ec:	4608      	mov	r0, r1
   d63ee:	f002 f88f 	bl	d8510 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d63f2:	2800      	cmp	r0, #0
	return nullptr;
   d63f4:	bf08      	it	eq
   d63f6:	2400      	moveq	r4, #0
      }
   d63f8:	4620      	mov	r0, r4
   d63fa:	bd10      	pop	{r4, pc}
   d63fc:	000db458 	.word	0x000db458

000d6400 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d6400:	b510      	push	{r4, lr}
   d6402:	2168      	movs	r1, #104	; 0x68
   d6404:	4604      	mov	r4, r0
   d6406:	f002 f87c 	bl	d8502 <_ZdlPvj>
   d640a:	4620      	mov	r0, r4
   d640c:	bd10      	pop	{r4, pc}

000d640e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   d640e:	b510      	push	{r4, lr}
   d6410:	2128      	movs	r1, #40	; 0x28
   d6412:	4604      	mov	r4, r0
   d6414:	f002 f875 	bl	d8502 <_ZdlPvj>
   d6418:	4620      	mov	r0, r4
   d641a:	bd10      	pop	{r4, pc}

000d641c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   d641c:	b510      	push	{r4, lr}
   d641e:	2130      	movs	r1, #48	; 0x30
   d6420:	4604      	mov	r4, r0
   d6422:	f002 f86e 	bl	d8502 <_ZdlPvj>
   d6426:	4620      	mov	r0, r4
   d6428:	bd10      	pop	{r4, pc}

000d642a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d642a:	f7fd be38 	b.w	d409e <_ZdlPv>

000d642e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   d642e:	f7fd be36 	b.w	d409e <_ZdlPv>

000d6432 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   d6432:	f7fd be34 	b.w	d409e <_ZdlPv>

000d6436 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d6436:	b510      	push	{r4, lr}
          _M_dispose();
   d6438:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d643a:	4604      	mov	r4, r0
          _M_dispose();
   d643c:	689b      	ldr	r3, [r3, #8]
   d643e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d6440:	68a3      	ldr	r3, [r4, #8]
   d6442:	3b01      	subs	r3, #1
   d6444:	60a3      	str	r3, [r4, #8]
   d6446:	b92b      	cbnz	r3, d6454 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d6448:	6823      	ldr	r3, [r4, #0]
   d644a:	4620      	mov	r0, r4
   d644c:	68db      	ldr	r3, [r3, #12]
    }
   d644e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d6452:	4718      	bx	r3
    }
   d6454:	bd10      	pop	{r4, pc}

000d6456 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d6456:	b510      	push	{r4, lr}
   d6458:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d645a:	6800      	ldr	r0, [r0, #0]
   d645c:	b108      	cbz	r0, d6462 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d645e:	f7ff fb03 	bl	d5a68 <os_mutex_recursive_destroy>
    }
   d6462:	4620      	mov	r0, r4
   d6464:	bd10      	pop	{r4, pc}
	...

000d6468 <_ZN8particle3ble13WiringBleLock4lockEv.isra.0>:
    WiringBleLock(WiringBleLock&& lock) :
            locked_(lock.locked_) {
        lock.locked_ = false;
    }

    void lock() {
   d6468:	b510      	push	{r4, lr}
        mutex_.lock();
   d646a:	4b04      	ldr	r3, [pc, #16]	; (d647c <_ZN8particle3ble13WiringBleLock4lockEv.isra.0+0x14>)
    void lock() {
   d646c:	4604      	mov	r4, r0
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d646e:	6818      	ldr	r0, [r3, #0]
   d6470:	f7ff fb02 	bl	d5a78 <os_mutex_recursive_lock>
        locked_ = true;
   d6474:	2301      	movs	r3, #1
   d6476:	7023      	strb	r3, [r4, #0]
    }
   d6478:	bd10      	pop	{r4, pc}
   d647a:	bf00      	nop
   d647c:	2003e664 	.word	0x2003e664

000d6480 <_ZN8particle3ble13WiringBleLock6unlockEv.isra.0>:

    void unlock() {
   d6480:	b510      	push	{r4, lr}
        mutex_.unlock();
   d6482:	4b04      	ldr	r3, [pc, #16]	; (d6494 <_ZN8particle3ble13WiringBleLock6unlockEv.isra.0+0x14>)
    void unlock() {
   d6484:	4604      	mov	r4, r0
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d6486:	6818      	ldr	r0, [r3, #0]
   d6488:	f7ff fafe 	bl	d5a88 <os_mutex_recursive_unlock>
        locked_ = false;
   d648c:	2300      	movs	r3, #0
   d648e:	7023      	strb	r3, [r4, #0]
    }
   d6490:	bd10      	pop	{r4, pc}
   d6492:	bf00      	nop
   d6494:	2003e664 	.word	0x2003e664

000d6498 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   d6498:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d649a:	2500      	movs	r5, #0
   d649c:	1cec      	adds	r4, r5, #3
   d649e:	428c      	cmp	r4, r1
   d64a0:	d80d      	bhi.n	d64be <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   d64a2:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   d64a4:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   d64a6:	5d87      	ldrb	r7, [r0, r6]
   d64a8:	4297      	cmp	r7, r2
   d64aa:	d105      	bne.n	d64b8 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   d64ac:	4426      	add	r6, r4
   d64ae:	42b1      	cmp	r1, r6
   d64b0:	d305      	bcc.n	d64be <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   d64b2:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   d64b4:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   d64b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   d64b8:	3401      	adds	r4, #1
   d64ba:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d64bc:	e7ee      	b.n	d649c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   d64be:	2000      	movs	r0, #0
   d64c0:	e7f9      	b.n	d64b6 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>

000d64c2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d64c2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d64c6:	4604      	mov	r4, r0
   d64c8:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
   d64cc:	461e      	mov	r6, r3
   d64ce:	4689      	mov	r9, r1
   d64d0:	ab01      	add	r3, sp, #4
   d64d2:	4690      	mov	r8, r2
   d64d4:	460a      	mov	r2, r1
   d64d6:	6a01      	ldr	r1, [r0, #32]
   d64d8:	f7ff ffde 	bl	d6498 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (!force && adsLen > 0) {
   d64dc:	6a25      	ldr	r5, [r4, #32]
   d64de:	1cb3      	adds	r3, r6, #2
   d64e0:	bb17      	cbnz	r7, d6528 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x66>
   d64e2:	b308      	cbz	r0, d6528 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x66>
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d64e4:	195f      	adds	r7, r3, r5
   d64e6:	1a3f      	subs	r7, r7, r0
   d64e8:	2f1f      	cmp	r7, #31
   d64ea:	d819      	bhi.n	d6520 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5e>
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d64ec:	f8dd 9004 	ldr.w	r9, [sp, #4]
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d64f0:	f109 0a02 	add.w	sl, r9, #2
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d64f4:	eba5 0209 	sub.w	r2, r5, r9
   d64f8:	1a12      	subs	r2, r2, r0
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d64fa:	eb00 0109 	add.w	r1, r0, r9
   d64fe:	eb06 000a 	add.w	r0, r6, sl
   d6502:	b292      	uxth	r2, r2
   d6504:	4421      	add	r1, r4
   d6506:	4420      	add	r0, r4
   d6508:	f002 fe52 	bl	d91b0 <memmove>
            selfData_[offset] = len + 1;
   d650c:	1c73      	adds	r3, r6, #1
   d650e:	f804 3009 	strb.w	r3, [r4, r9]
            memcpy(&selfData_[offset + 2], buf, len);
   d6512:	4632      	mov	r2, r6
   d6514:	4641      	mov	r1, r8
   d6516:	eb04 000a 	add.w	r0, r4, sl
   d651a:	f002 fe3b 	bl	d9194 <memcpy>
            selfLen_ = staLen + len + 2;
   d651e:	6227      	str	r7, [r4, #32]
}
   d6520:	6a20      	ldr	r0, [r4, #32]
   d6522:	b002      	add	sp, #8
   d6524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d6528:	442b      	add	r3, r5
   d652a:	2b1f      	cmp	r3, #31
   d652c:	d8f8      	bhi.n	d6520 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5e>
        selfData_[selfLen_++] = len + 1;
   d652e:	1c73      	adds	r3, r6, #1
   d6530:	5563      	strb	r3, [r4, r5]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d6532:	1ca8      	adds	r0, r5, #2
   d6534:	4425      	add	r5, r4
   d6536:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   d6538:	4632      	mov	r2, r6
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d653a:	f885 9001 	strb.w	r9, [r5, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   d653e:	4641      	mov	r1, r8
   d6540:	4420      	add	r0, r4
   d6542:	f002 fe27 	bl	d9194 <memcpy>
        selfLen_ += len;
   d6546:	6a23      	ldr	r3, [r4, #32]
   d6548:	4433      	add	r3, r6
   d654a:	6223      	str	r3, [r4, #32]
   d654c:	e7e8      	b.n	d6520 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5e>
	...

000d6550 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   d6550:	4a02      	ldr	r2, [pc, #8]	; (d655c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   d6552:	2100      	movs	r1, #0
   d6554:	200a      	movs	r0, #10
   d6556:	f7ff bc07 	b.w	d5d68 <panic_>
   d655a:	bf00      	nop
   d655c:	000d5945 	.word	0x000d5945

000d6560 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d6560:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d6562:	b538      	push	{r3, r4, r5, lr}
   d6564:	4604      	mov	r4, r0
	  switch (__op)
   d6566:	d007      	beq.n	d6578 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x18>
   d6568:	2a03      	cmp	r2, #3
   d656a:	d011      	beq.n	d6590 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x30>
   d656c:	2a01      	cmp	r2, #1
   d656e:	d101      	bne.n	d6574 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d6570:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   d6572:	6023      	str	r3, [r4, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d6574:	2000      	movs	r0, #0
   d6576:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d6578:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   d657a:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d657c:	f7fd fd8b 	bl	d4096 <_Znwj>
   d6580:	4603      	mov	r3, r0
   d6582:	2800      	cmp	r0, #0
   d6584:	d0f5      	beq.n	d6572 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x12>
   d6586:	e895 0003 	ldmia.w	r5, {r0, r1}
   d658a:	e883 0003 	stmia.w	r3, {r0, r1}
   d658e:	e7f0      	b.n	d6572 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x12>
	  delete __victim._M_access<_Functor*>();
   d6590:	6800      	ldr	r0, [r0, #0]
   d6592:	2800      	cmp	r0, #0
   d6594:	d0ee      	beq.n	d6574 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x14>
   d6596:	2108      	movs	r1, #8
   d6598:	f001 ffb3 	bl	d8502 <_ZdlPvj>
   d659c:	e7ea      	b.n	d6574 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x14>

000d659e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d659e:	b430      	push	{r4, r5}
   d65a0:	460d      	mov	r5, r1
   d65a2:	4611      	mov	r1, r2
   d65a4:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   d65a6:	6803      	ldr	r3, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d65a8:	6809      	ldr	r1, [r1, #0]
   d65aa:	6828      	ldr	r0, [r5, #0]
   d65ac:	e9d3 4300 	ldrd	r4, r3, [r3]
   d65b0:	46a4      	mov	ip, r4
      {
	(*_Base::_M_get_pointer(__functor))(
	    std::forward<_ArgTypes>(__args)...);
      }
   d65b2:	bc30      	pop	{r4, r5}
   d65b4:	4760      	bx	ip

000d65b6 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d65b6:	b510      	push	{r4, lr}
      if (_M_manager)
   d65b8:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d65ba:	4604      	mov	r4, r0
      if (_M_manager)
   d65bc:	b113      	cbz	r3, d65c4 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d65be:	2203      	movs	r2, #3
   d65c0:	4601      	mov	r1, r0
   d65c2:	4798      	blx	r3
    }
   d65c4:	4620      	mov	r0, r4
   d65c6:	bd10      	pop	{r4, pc}

000d65c8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d65c8:	b510      	push	{r4, lr}
   d65ca:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d65cc:	3058      	adds	r0, #88	; 0x58
   d65ce:	f7ff fff2 	bl	d65b6 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   d65d2:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   d65d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d65da:	f7ff bde6 	b.w	d61aa <_ZN6StringD1Ev>

000d65de <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   d65de:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d65e2:	b2da      	uxtb	r2, r3
   d65e4:	2a09      	cmp	r2, #9
   d65e6:	d801      	bhi.n	d65ec <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   d65e8:	4618      	mov	r0, r3
   d65ea:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   d65ec:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d65f0:	2b05      	cmp	r3, #5
   d65f2:	d801      	bhi.n	d65f8 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   d65f4:	3857      	subs	r0, #87	; 0x57
   d65f6:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   d65f8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d65fc:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   d65fe:	bf94      	ite	ls
   d6600:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   d6602:	f04f 30ff 	movhi.w	r0, #4294967295
}
   d6606:	4770      	bx	lr

000d6608 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   d6608:	b510      	push	{r4, lr}
            locked_(false) {
   d660a:	2300      	movs	r3, #0
    WiringBleLock() :
   d660c:	4604      	mov	r4, r0
            locked_(false) {
   d660e:	7003      	strb	r3, [r0, #0]
        lock();
   d6610:	f7ff ff2a 	bl	d6468 <_ZN8particle3ble13WiringBleLock4lockEv.isra.0>
    }
   d6614:	4620      	mov	r0, r4
   d6616:	bd10      	pop	{r4, pc}

000d6618 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   d6618:	b510      	push	{r4, lr}
        if (locked_) {
   d661a:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   d661c:	4604      	mov	r4, r0
        if (locked_) {
   d661e:	b10b      	cbz	r3, d6624 <_ZN8particle3ble13WiringBleLockD1Ev+0xc>
            unlock();
   d6620:	f7ff ff2e 	bl	d6480 <_ZN8particle3ble13WiringBleLock6unlockEv.isra.0>
    }
   d6624:	4620      	mov	r0, r4
   d6626:	bd10      	pop	{r4, pc}

000d6628 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   d6628:	b082      	sub	sp, #8
   d662a:	4603      	mov	r3, r0
    address_ = addr;
   d662c:	6808      	ldr	r0, [r1, #0]
   d662e:	6849      	ldr	r1, [r1, #4]
   d6630:	466a      	mov	r2, sp
   d6632:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   d6634:	466a      	mov	r2, sp
   d6636:	ca03      	ldmia	r2!, {r0, r1}
   d6638:	6018      	str	r0, [r3, #0]
}
   d663a:	4618      	mov	r0, r3
    address_ = addr.address_;
   d663c:	6059      	str	r1, [r3, #4]
}
   d663e:	b002      	add	sp, #8
   d6640:	4770      	bx	lr

000d6642 <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   d6642:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   d6644:	7982      	ldrb	r2, [r0, #6]
   d6646:	798b      	ldrb	r3, [r1, #6]
   d6648:	429a      	cmp	r2, r3
   d664a:	d106      	bne.n	d665a <_ZNK8particle10BleAddresseqERKS0_+0x18>
   d664c:	2206      	movs	r2, #6
   d664e:	f002 fd93 	bl	d9178 <memcmp>
   d6652:	fab0 f080 	clz	r0, r0
   d6656:	0940      	lsrs	r0, r0, #5
}
   d6658:	bd08      	pop	{r3, pc}
    return false;
   d665a:	2000      	movs	r0, #0
   d665c:	e7fc      	b.n	d6658 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000d665e <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   d665e:	f04f 33ff 	mov.w	r3, #4294967295
   d6662:	6003      	str	r3, [r0, #0]
   d6664:	8083      	strh	r3, [r0, #4]
}
   d6666:	2000      	movs	r0, #0
   d6668:	4770      	bx	lr

000d666a <_ZN8particle10BleAddressC1Ev>:
        : address_{} {
   d666a:	2100      	movs	r1, #0
BleAddress::BleAddress()
   d666c:	b508      	push	{r3, lr}
        : address_{} {
   d666e:	6001      	str	r1, [r0, #0]
   d6670:	6041      	str	r1, [r0, #4]
BleAddress::BleAddress()
   d6672:	4602      	mov	r2, r0
    clear();
   d6674:	f7ff fff3 	bl	d665e <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   d6678:	7191      	strb	r1, [r2, #6]
}
   d667a:	4610      	mov	r0, r2
   d667c:	bd08      	pop	{r3, pc}
	...

000d6680 <_ZN8particle7BleUuidC1Ev>:
        : type_(BleUuidType::LONG) {
   d6680:	2201      	movs	r2, #1
   d6682:	6102      	str	r2, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d6684:	4a06      	ldr	r2, [pc, #24]	; (d66a0 <_ZN8particle7BleUuidC1Ev+0x20>)
   d6686:	6811      	ldr	r1, [r2, #0]
   d6688:	6001      	str	r1, [r0, #0]
   d668a:	6851      	ldr	r1, [r2, #4]
   d668c:	6041      	str	r1, [r0, #4]
   d668e:	8911      	ldrh	r1, [r2, #8]
   d6690:	7a92      	ldrb	r2, [r2, #10]
   d6692:	7282      	strb	r2, [r0, #10]
   d6694:	2200      	movs	r2, #0
   d6696:	8101      	strh	r1, [r0, #8]
   d6698:	f8c0 200b 	str.w	r2, [r0, #11]
   d669c:	73c2      	strb	r2, [r0, #15]
}
   d669e:	4770      	bx	lr
   d66a0:	000db460 	.word	0x000db460

000d66a4 <_ZN8particle7BleUuidC1ERKS0_>:
BleUuid::BleUuid(const BleUuid& uuid)
   d66a4:	b510      	push	{r4, lr}
        : type_(uuid.type_) {
   d66a6:	690b      	ldr	r3, [r1, #16]
   d66a8:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d66aa:	f101 0210 	add.w	r2, r1, #16
   d66ae:	4603      	mov	r3, r0
   d66b0:	f851 4b04 	ldr.w	r4, [r1], #4
   d66b4:	f843 4b04 	str.w	r4, [r3], #4
   d66b8:	4291      	cmp	r1, r2
   d66ba:	d1f9      	bne.n	d66b0 <_ZN8particle7BleUuidC1ERKS0_+0xc>
}
   d66bc:	bd10      	pop	{r4, pc}

000d66be <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d66be:	b510      	push	{r4, lr}
    if (uuid128) {
   d66c0:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d66c2:	4604      	mov	r4, r0
    if (uuid128) {
   d66c4:	b1b1      	cbz	r1, d66f4 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   d66c6:	2a01      	cmp	r2, #1
   d66c8:	f101 0210 	add.w	r2, r1, #16
   d66cc:	d10a      	bne.n	d66e4 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   d66ce:	4601      	mov	r1, r0
   d66d0:	f853 0b04 	ldr.w	r0, [r3], #4
   d66d4:	f841 0b04 	str.w	r0, [r1], #4
   d66d8:	4293      	cmp	r3, r2
   d66da:	d1f9      	bne.n	d66d0 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   d66dc:	2301      	movs	r3, #1
   d66de:	6123      	str	r3, [r4, #16]
}
   d66e0:	4620      	mov	r0, r4
   d66e2:	bd10      	pop	{r4, pc}
   d66e4:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   d66e6:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   d66ea:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   d66ee:	429a      	cmp	r2, r3
   d66f0:	d1f9      	bne.n	d66e6 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   d66f2:	e7f3      	b.n	d66dc <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   d66f4:	2210      	movs	r2, #16
   d66f6:	f002 fd75 	bl	d91e4 <memset>
   d66fa:	e7f1      	b.n	d66e0 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000d66fc <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   d66fc:	b538      	push	{r3, r4, r5, lr}
   d66fe:	4604      	mov	r4, r0
   d6700:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   d6702:	461a      	mov	r2, r3
   d6704:	f7ff ffdb 	bl	d66be <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   d6708:	81a5      	strh	r5, [r4, #12]
}
   d670a:	4620      	mov	r0, r4
   d670c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6710 <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   d6710:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   d6712:	6902      	ldr	r2, [r0, #16]
   d6714:	b922      	cbnz	r2, d6720 <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   d6716:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d6718:	3800      	subs	r0, #0
   d671a:	bf18      	it	ne
   d671c:	2001      	movne	r0, #1
}
   d671e:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d6720:	4902      	ldr	r1, [pc, #8]	; (d672c <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   d6722:	2210      	movs	r2, #16
   d6724:	f002 fd28 	bl	d9178 <memcmp>
   d6728:	e7f6      	b.n	d6718 <_ZNK8particle7BleUuid7isValidEv+0x8>
   d672a:	bf00      	nop
   d672c:	000db480 	.word	0x000db480

000d6730 <_ZNK8particle7BleUuid4typeEv>:
}
   d6730:	6900      	ldr	r0, [r0, #16]
   d6732:	4770      	bx	lr

000d6734 <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   d6734:	b538      	push	{r3, r4, r5, lr}
   d6736:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   d6738:	2214      	movs	r2, #20
   d673a:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   d673c:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   d673e:	f002 fd51 	bl	d91e4 <memset>
    if (type_ == BleUuidType::SHORT) {
   d6742:	6923      	ldr	r3, [r4, #16]
   d6744:	b93b      	cbnz	r3, d6756 <_ZN8particle7BleUuid7halUUIDEv+0x22>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   d6746:	7b62      	ldrb	r2, [r4, #13]
        uuid.type = BLE_UUID_TYPE_16BIT;
   d6748:	742b      	strb	r3, [r5, #16]
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   d674a:	7b23      	ldrb	r3, [r4, #12]
   d674c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d6750:	802b      	strh	r3, [r5, #0]
}
   d6752:	4628      	mov	r0, r5
   d6754:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   d6756:	2301      	movs	r3, #1
   d6758:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d675a:	f104 0210 	add.w	r2, r4, #16
   d675e:	462b      	mov	r3, r5
   d6760:	f854 1b04 	ldr.w	r1, [r4], #4
   d6764:	f843 1b04 	str.w	r1, [r3], #4
   d6768:	4294      	cmp	r4, r2
   d676a:	d1f9      	bne.n	d6760 <_ZN8particle7BleUuid7halUUIDEv+0x2c>
   d676c:	e7f1      	b.n	d6752 <_ZN8particle7BleUuid7halUUIDEv+0x1e>

000d676e <_ZNK8particle7BleUuid7shortedEv>:
    return ((uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8));
   d676e:	7b42      	ldrb	r2, [r0, #13]
   d6770:	7b00      	ldrb	r0, [r0, #12]
}
   d6772:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   d6776:	4770      	bx	lr

000d6778 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   d6778:	4770      	bx	lr

000d677a <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   d677a:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   d677c:	6902      	ldr	r2, [r0, #16]
   d677e:	690b      	ldr	r3, [r1, #16]
   d6780:	429a      	cmp	r2, r3
   d6782:	d106      	bne.n	d6792 <_ZNK8particle7BleUuideqERKS0_+0x18>
   d6784:	2210      	movs	r2, #16
   d6786:	f002 fcf7 	bl	d9178 <memcmp>
   d678a:	fab0 f080 	clz	r0, r0
   d678e:	0940      	lsrs	r0, r0, #5
}
   d6790:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   d6792:	2000      	movs	r0, #0
   d6794:	e7fc      	b.n	d6790 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000d6798 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   d6798:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   d679a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   d679e:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d67a0:	4b32      	ldr	r3, [pc, #200]	; (d686c <_ZN8particle7BleUuid9constructEPKc+0xd4>)
   d67a2:	681a      	ldr	r2, [r3, #0]
   d67a4:	6002      	str	r2, [r0, #0]
   d67a6:	685a      	ldr	r2, [r3, #4]
   d67a8:	6042      	str	r2, [r0, #4]
   d67aa:	2500      	movs	r5, #0
   d67ac:	891a      	ldrh	r2, [r3, #8]
   d67ae:	7a9b      	ldrb	r3, [r3, #10]
   d67b0:	8102      	strh	r2, [r0, #8]
void BleUuid::construct(const char* uuid) {
   d67b2:	4604      	mov	r4, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d67b4:	7283      	strb	r3, [r0, #10]
   d67b6:	f8c0 500b 	str.w	r5, [r0, #11]
   d67ba:	73c5      	strb	r5, [r0, #15]
    if (uuid == nullptr) {
   d67bc:	460e      	mov	r6, r1
   d67be:	b321      	cbz	r1, d680a <_ZN8particle7BleUuid9constructEPKc+0x72>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   d67c0:	2124      	movs	r1, #36	; 0x24
   d67c2:	4630      	mov	r0, r6
   d67c4:	f002 fd66 	bl	d9294 <strnlen>
   d67c8:	2804      	cmp	r0, #4
   d67ca:	d121      	bne.n	d6810 <_ZN8particle7BleUuid9constructEPKc+0x78>
        char buf[2] = {};
   d67cc:	f8ad 5004 	strh.w	r5, [sp, #4]
   d67d0:	af01      	add	r7, sp, #4
   d67d2:	1cb5      	adds	r5, r6, #2
   d67d4:	3606      	adds	r6, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d67d6:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   d67da:	f7ff ff00 	bl	d65de <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d67de:	f1b0 0800 	subs.w	r8, r0, #0
   d67e2:	db10      	blt.n	d6806 <_ZN8particle7BleUuid9constructEPKc+0x6e>
            break;
        }
        const int l = hexToNibble(*src++);
   d67e4:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   d67e8:	f7ff fef9 	bl	d65de <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d67ec:	2800      	cmp	r0, #0
   d67ee:	db0a      	blt.n	d6806 <_ZN8particle7BleUuid9constructEPKc+0x6e>
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d67f0:	3502      	adds	r5, #2
   d67f2:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   d67f6:	42ae      	cmp	r6, r5
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d67f8:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   d67fc:	d1eb      	bne.n	d67d6 <_ZN8particle7BleUuid9constructEPKc+0x3e>
            uuid128_[UUID16_LO] = buf[1];
   d67fe:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   d6802:	ba5b      	rev16	r3, r3
   d6804:	81a3      	strh	r3, [r4, #12]
        type_ = BleUuidType::SHORT;
   d6806:	2300      	movs	r3, #0
   d6808:	6123      	str	r3, [r4, #16]
}
   d680a:	b002      	add	sp, #8
   d680c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   d6810:	2710      	movs	r7, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d6812:	2124      	movs	r1, #36	; 0x24
   d6814:	4630      	mov	r0, r6
   d6816:	f002 fd3d 	bl	d9294 <strnlen>
   d681a:	42a8      	cmp	r0, r5
   d681c:	d806      	bhi.n	d682c <_ZN8particle7BleUuid9constructEPKc+0x94>
   d681e:	4427      	add	r7, r4
        uuid128_[len - 1] = 0x00;
   d6820:	2300      	movs	r3, #0
    while (len > 0) {
   d6822:	42bc      	cmp	r4, r7
   d6824:	d0f1      	beq.n	d680a <_ZN8particle7BleUuid9constructEPKc+0x72>
        uuid128_[len - 1] = 0x00;
   d6826:	f807 3d01 	strb.w	r3, [r7, #-1]!
    while (len > 0) {
   d682a:	e7fa      	b.n	d6822 <_ZN8particle7BleUuid9constructEPKc+0x8a>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d682c:	2f00      	cmp	r7, #0
   d682e:	d0ec      	beq.n	d680a <_ZN8particle7BleUuid9constructEPKc+0x72>
        int8_t hi = hexToNibble(uuid[i]);
   d6830:	5d70      	ldrb	r0, [r6, r5]
   d6832:	f7ff fed4 	bl	d65de <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   d6836:	0603      	lsls	r3, r0, #24
   d6838:	d415      	bmi.n	d6866 <_ZN8particle7BleUuid9constructEPKc+0xce>
            uuid128_[len - 1] = hi << 4;
   d683a:	0100      	lsls	r0, r0, #4
   d683c:	3f01      	subs	r7, #1
   d683e:	fa5f f880 	uxtb.w	r8, r0
   d6842:	f804 8007 	strb.w	r8, [r4, r7]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   d6846:	2124      	movs	r1, #36	; 0x24
   d6848:	4630      	mov	r0, r6
   d684a:	f002 fd23 	bl	d9294 <strnlen>
   d684e:	3501      	adds	r5, #1
   d6850:	42a8      	cmp	r0, r5
   d6852:	d908      	bls.n	d6866 <_ZN8particle7BleUuid9constructEPKc+0xce>
                int8_t lo = hexToNibble(uuid[i]);
   d6854:	5d70      	ldrb	r0, [r6, r5]
   d6856:	f7ff fec2 	bl	d65de <_ZN8particle11hexToNibbleEc>
   d685a:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   d685c:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   d685e:	bfa4      	itt	ge
   d6860:	ea40 0008 	orrge.w	r0, r0, r8
   d6864:	55e0      	strbge	r0, [r4, r7]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d6866:	3501      	adds	r5, #1
   d6868:	e7d3      	b.n	d6812 <_ZN8particle7BleUuid9constructEPKc+0x7a>
   d686a:	bf00      	nop
   d686c:	000db460 	.word	0x000db460

000d6870 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   d6870:	b513      	push	{r0, r1, r4, lr}
   d6872:	4604      	mov	r4, r0
   d6874:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   d6876:	f7ff ff03 	bl	d6680 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   d687a:	4620      	mov	r0, r4
   d687c:	9901      	ldr	r1, [sp, #4]
   d687e:	f7ff ff8b 	bl	d6798 <_ZN8particle7BleUuid9constructEPKc>
}
   d6882:	4620      	mov	r0, r4
   d6884:	b002      	add	sp, #8
   d6886:	bd10      	pop	{r4, pc}

000d6888 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d6888:	b430      	push	{r4, r5}
   d688a:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   d688e:	b912      	cbnz	r2, d6896 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0xe>
        return selfLen_;
   d6890:	6a00      	ldr	r0, [r0, #32]
}
   d6892:	bc30      	pop	{r4, r5}
   d6894:	4770      	bx	lr
   d6896:	9502      	str	r5, [sp, #8]
   d6898:	bc30      	pop	{r4, r5}
   d689a:	f7ff be12 	b.w	d64c2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>

000d689e <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   d689e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d68a0:	4604      	mov	r4, r0
          selfLen_(0) {
   d68a2:	4602      	mov	r2, r0
   d68a4:	f100 011f 	add.w	r1, r0, #31
   d68a8:	2300      	movs	r3, #0
   d68aa:	f802 3b01 	strb.w	r3, [r2], #1
   d68ae:	4291      	cmp	r1, r2
   d68b0:	d1fb      	bne.n	d68aa <_ZN8particle18BleAdvertisingDataC1Ev+0xc>
   d68b2:	6223      	str	r3, [r4, #32]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d68b4:	9300      	str	r3, [sp, #0]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d68b6:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d68b8:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d68ba:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d68be:	4619      	mov	r1, r3
   d68c0:	f10d 020f 	add.w	r2, sp, #15
   d68c4:	4620      	mov	r0, r4
   d68c6:	f7ff ffdf 	bl	d6888 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d68ca:	4620      	mov	r0, r4
   d68cc:	b004      	add	sp, #16
   d68ce:	bd10      	pop	{r4, pc}

000d68d0 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d68d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (offset == nullptr) {
   d68d2:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d68d4:	460e      	mov	r6, r1
   d68d6:	ab01      	add	r3, sp, #4
   d68d8:	6a01      	ldr	r1, [r0, #32]
   d68da:	4604      	mov	r4, r0
   d68dc:	f7ff fddc 	bl	d6498 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   d68e0:	4605      	mov	r5, r0
   d68e2:	b178      	cbz	r0, d6904 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x34>
        size_t moveLen = selfLen_ - offset - len;
   d68e4:	9801      	ldr	r0, [sp, #4]
   d68e6:	6a22      	ldr	r2, [r4, #32]
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   d68e8:	1941      	adds	r1, r0, r5
        size_t moveLen = selfLen_ - offset - len;
   d68ea:	1a12      	subs	r2, r2, r0
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   d68ec:	4421      	add	r1, r4
   d68ee:	1b52      	subs	r2, r2, r5
   d68f0:	4420      	add	r0, r4
   d68f2:	f002 fc4f 	bl	d9194 <memcpy>
        selfLen_ -= len;
   d68f6:	6a20      	ldr	r0, [r4, #32]
   d68f8:	1b40      	subs	r0, r0, r5
   d68fa:	6220      	str	r0, [r4, #32]
        remove(type);
   d68fc:	4631      	mov	r1, r6
   d68fe:	4620      	mov	r0, r4
   d6900:	f7ff ffe6 	bl	d68d0 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   d6904:	b002      	add	sp, #8
   d6906:	bd70      	pop	{r4, r5, r6, pc}

000d6908 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   d6908:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   d690a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d690e:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   d6910:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   d6912:	8043      	strh	r3, [r0, #2]
   d6914:	220e      	movs	r2, #14
   d6916:	4629      	mov	r1, r5
   d6918:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   d691a:	7105      	strb	r5, [r0, #4]
   d691c:	3006      	adds	r0, #6
   d691e:	f002 fc61 	bl	d91e4 <memset>
   d6922:	f104 0014 	add.w	r0, r4, #20
   d6926:	f7ff feab 	bl	d6680 <_ZN8particle7BleUuidC1Ev>
   d692a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d692e:	f7ff fea7 	bl	d6680 <_ZN8particle7BleUuidC1Ev>
   d6932:	4904      	ldr	r1, [pc, #16]	; (d6944 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   d6934:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d6938:	f7ff fc82 	bl	d6240 <_ZN6StringC1EPKc>
    _Function_base() : _M_manager(nullptr) { }
   d693c:	6565      	str	r5, [r4, #84]	; 0x54
    }
   d693e:	4620      	mov	r0, r4
   d6940:	bd38      	pop	{r3, r4, r5, pc}
   d6942:	bf00      	nop
   d6944:	000db295 	.word	0x000db295

000d6948 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   d6948:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d694a:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   d694e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   d6952:	4293      	cmp	r3, r2
   d6954:	4618      	mov	r0, r3
   d6956:	d006      	beq.n	d6966 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   d6958:	6804      	ldr	r4, [r0, #0]
   d695a:	8824      	ldrh	r4, [r4, #0]
   d695c:	428c      	cmp	r4, r1
   d695e:	f103 0308 	add.w	r3, r3, #8
   d6962:	d1f6      	bne.n	d6952 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   d6964:	bd10      	pop	{r4, pc}
        return nullptr;
   d6966:	2000      	movs	r0, #0
   d6968:	e7fc      	b.n	d6964 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000d696c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   d696c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d696e:	4606      	mov	r6, r0
   d6970:	b085      	sub	sp, #20
   d6972:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   d6974:	460d      	mov	r5, r1
   d6976:	2900      	cmp	r1, #0
   d6978:	d050      	beq.n	d6a1c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   d697a:	2a00      	cmp	r2, #0
   d697c:	d04e      	beq.n	d6a1c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
    void onDataReceived(void(T::*callback)(const uint8_t*, size_t, const BlePeerDevice& peer), T* instance) {
        onDataReceived((callback && instance) ? std::bind(callback, instance, _1, _2, _3) :(BleOnDataReceivedStdFunction) nullptr);
    }

    BleCharacteristicImpl* impl() const {
        return impl_.get();
   d697e:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
   d6980:	7823      	ldrb	r3, [r4, #0]
   d6982:	2af4      	cmp	r2, #244	; 0xf4
   d6984:	bf28      	it	cs
   d6986:	22f4      	movcs	r2, #244	; 0xf4
   d6988:	b343      	cbz	r3, d69dc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   d698a:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   d698c:	0798      	lsls	r0, r3, #30
   d698e:	d509      	bpl.n	d69a4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   d6990:	89a0      	ldrh	r0, [r4, #12]
   d6992:	9203      	str	r2, [sp, #12]
   d6994:	2300      	movs	r3, #0
   d6996:	f7ff f819 	bl	d59cc <hal_ble_gatt_server_set_characteristic_value>
   d699a:	2800      	cmp	r0, #0
   d699c:	9a03      	ldr	r2, [sp, #12]
   d699e:	da03      	bge.n	d69a8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d69a0:	b005      	add	sp, #20
   d69a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   d69a4:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d69a8:	6834      	ldr	r4, [r6, #0]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   d69aa:	7923      	ldrb	r3, [r4, #4]
   d69ac:	06d9      	lsls	r1, r3, #27
   d69ae:	d509      	bpl.n	d69c4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   d69b0:	2f01      	cmp	r7, #1
   d69b2:	d007      	beq.n	d69c4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d69b4:	89a0      	ldrh	r0, [r4, #12]
   d69b6:	2300      	movs	r3, #0
   d69b8:	4629      	mov	r1, r5
}
   d69ba:	b005      	add	sp, #20
   d69bc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d69c0:	f7ff b836 	b.w	d5a30 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   d69c4:	069b      	lsls	r3, r3, #26
   d69c6:	d5eb      	bpl.n	d69a0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   d69c8:	2f02      	cmp	r7, #2
   d69ca:	d0e9      	beq.n	d69a0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d69cc:	89a0      	ldrh	r0, [r4, #12]
   d69ce:	2300      	movs	r3, #0
   d69d0:	4629      	mov	r1, r5
}
   d69d2:	b005      	add	sp, #20
   d69d4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d69d8:	f7ff b834 	b.w	d5a44 <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   d69dc:	8860      	ldrh	r0, [r4, #2]
   d69de:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d69e2:	4288      	cmp	r0, r1
   d69e4:	d01c      	beq.n	d6a20 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   d69e6:	7921      	ldrb	r1, [r4, #4]
   d69e8:	074e      	lsls	r6, r1, #29
   d69ea:	d501      	bpl.n	d69f0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   d69ec:	2f01      	cmp	r7, #1
   d69ee:	d104      	bne.n	d69fa <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   d69f0:	070b      	lsls	r3, r1, #28
   d69f2:	d409      	bmi.n	d6a08 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   d69f4:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d69f8:	e7d2      	b.n	d69a0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d69fa:	89a1      	ldrh	r1, [r4, #12]
   d69fc:	9300      	str	r3, [sp, #0]
   d69fe:	4613      	mov	r3, r2
   d6a00:	462a      	mov	r2, r5
   d6a02:	f7fe fff7 	bl	d59f4 <hal_ble_gatt_client_write_without_response>
   d6a06:	e7cb      	b.n	d69a0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   d6a08:	2f02      	cmp	r7, #2
   d6a0a:	d0f3      	beq.n	d69f4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d6a0c:	2300      	movs	r3, #0
   d6a0e:	89a1      	ldrh	r1, [r4, #12]
   d6a10:	9300      	str	r3, [sp, #0]
   d6a12:	4613      	mov	r3, r2
   d6a14:	462a      	mov	r2, r5
   d6a16:	f7fe ffe3 	bl	d59e0 <hal_ble_gatt_client_write_with_response>
   d6a1a:	e7c1      	b.n	d69a0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   d6a1c:	4802      	ldr	r0, [pc, #8]	; (d6a28 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   d6a1e:	e7bf      	b.n	d69a0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   d6a20:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   d6a24:	e7bc      	b.n	d69a0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   d6a26:	bf00      	nop
   d6a28:	fffffef2 	.word	0xfffffef2

000d6a2c <_ZN8particle17BleCharacteristic8setValueEPKcNS_11BleTxRxTypeE>:

ssize_t BleCharacteristic::setValue(const String& str, BleTxRxType type) {
    return setValue(reinterpret_cast<const uint8_t*>(str.c_str()), str.length(), type);
}

ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   d6a2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6a2e:	460c      	mov	r4, r1
   d6a30:	4605      	mov	r5, r0
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   d6a32:	21f4      	movs	r1, #244	; 0xf4
   d6a34:	4620      	mov	r0, r4
ssize_t BleCharacteristic::setValue(const char* str, BleTxRxType type) {
   d6a36:	9201      	str	r2, [sp, #4]
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   d6a38:	f002 fc2c 	bl	d9294 <strnlen>
   d6a3c:	9b01      	ldr	r3, [sp, #4]
   d6a3e:	4602      	mov	r2, r0
   d6a40:	4621      	mov	r1, r4
   d6a42:	4628      	mov	r0, r5
}
   d6a44:	b003      	add	sp, #12
   d6a46:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return setValue(reinterpret_cast<const uint8_t*>(str), strnlen(str, BLE_MAX_ATTR_VALUE_PACKET_SIZE), type);
   d6a4a:	f7ff bf8f 	b.w	d696c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
	...

000d6a50 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   d6a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d6a54:	2600      	movs	r6, #0
   d6a56:	6006      	str	r6, [r0, #0]
   d6a58:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d6a5a:	2028      	movs	r0, #40	; 0x28
   d6a5c:	460c      	mov	r4, r1
   d6a5e:	f7fd fb1a 	bl	d4096 <_Znwj>
	  auto __pi = ::new (__mem)
   d6a62:	1e05      	subs	r5, r0, #0
   d6a64:	f105 080c 	add.w	r8, r5, #12
   d6a68:	d00f      	beq.n	d6a8a <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   d6a6a:	2301      	movs	r3, #1
   d6a6c:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   d6a70:	4b08      	ldr	r3, [pc, #32]	; (d6a94 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   d6a72:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   d6a74:	4640      	mov	r0, r8
   d6a76:	f7ff fe03 	bl	d6680 <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   d6a7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   d6a7c:	622e      	str	r6, [r5, #32]
   d6a7e:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   d6a82:	4646      	mov	r6, r8
   d6a84:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d6a86:	6823      	ldr	r3, [r4, #0]
   d6a88:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   d6a8a:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   d6a8e:	4638      	mov	r0, r7
   d6a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6a94:	000db428 	.word	0x000db428

000d6a98 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d6a98:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d6a9a:	2500      	movs	r5, #0
   d6a9c:	6005      	str	r5, [r0, #0]
   d6a9e:	4606      	mov	r6, r0
   d6aa0:	2030      	movs	r0, #48	; 0x30
   d6aa2:	f7fd faf8 	bl	d4096 <_Znwj>
	  auto __pi = ::new (__mem)
   d6aa6:	4604      	mov	r4, r0
   d6aa8:	b188      	cbz	r0, d6ace <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   d6aaa:	2301      	movs	r3, #1
   d6aac:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   d6ab0:	4b09      	ldr	r3, [pc, #36]	; (d6ad8 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   d6ab2:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   d6ab4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d6ab8:	8183      	strh	r3, [r0, #12]
   d6aba:	300e      	adds	r0, #14
   d6abc:	f7ff fdd5 	bl	d666a <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   d6ac0:	e9c4 5506 	strd	r5, r5, [r4, #24]
   d6ac4:	e9c4 5508 	strd	r5, r5, [r4, #32]
   d6ac8:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   d6acc:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   d6ace:	6074      	str	r4, [r6, #4]
   d6ad0:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   d6ad2:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   d6ad4:	4630      	mov	r0, r6
   d6ad6:	bd70      	pop	{r4, r5, r6, pc}
   d6ad8:	000db444 	.word	0x000db444

000d6adc <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   d6adc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6ade:	460d      	mov	r5, r1
   d6ae0:	4604      	mov	r4, r0
    WiringBleLock lk;
   d6ae2:	a801      	add	r0, sp, #4
   d6ae4:	f7ff fd90 	bl	d6608 <_ZN8particle3ble13WiringBleLockC1Ev>
    address_ = addr.address_;
   d6ae8:	682a      	ldr	r2, [r5, #0]
   d6aea:	f852 3f02 	ldr.w	r3, [r2, #2]!
   d6aee:	6023      	str	r3, [r4, #0]
   d6af0:	6853      	ldr	r3, [r2, #4]
   d6af2:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   d6af4:	a801      	add	r0, sp, #4
   d6af6:	f7ff fd8f 	bl	d6618 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   d6afa:	4620      	mov	r0, r4
   d6afc:	b003      	add	sp, #12
   d6afe:	bd30      	pop	{r4, r5, pc}

000d6b00 <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d6b00:	b530      	push	{r4, r5, lr}
   d6b02:	4605      	mov	r5, r0
   d6b04:	b087      	sub	sp, #28
   d6b06:	460c      	mov	r4, r1
    WiringBleLock lk;
   d6b08:	a801      	add	r0, sp, #4
   d6b0a:	f7ff fd7d 	bl	d6608 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d6b0e:	682a      	ldr	r2, [r5, #0]
   d6b10:	6823      	ldr	r3, [r4, #0]
   d6b12:	8812      	ldrh	r2, [r2, #0]
   d6b14:	881b      	ldrh	r3, [r3, #0]
   d6b16:	429a      	cmp	r2, r3
   d6b18:	d10d      	bne.n	d6b36 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   d6b1a:	4629      	mov	r1, r5
   d6b1c:	a802      	add	r0, sp, #8
   d6b1e:	f7ff ffdd 	bl	d6adc <_ZNK8particle13BlePeerDevice7addressEv>
   d6b22:	4621      	mov	r1, r4
   d6b24:	a804      	add	r0, sp, #16
   d6b26:	f7ff ffd9 	bl	d6adc <_ZNK8particle13BlePeerDevice7addressEv>
   d6b2a:	a904      	add	r1, sp, #16
   d6b2c:	a802      	add	r0, sp, #8
   d6b2e:	f7ff fd88 	bl	d6642 <_ZNK8particle10BleAddresseqERKS0_>
   d6b32:	4604      	mov	r4, r0
   d6b34:	b900      	cbnz	r0, d6b38 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   d6b36:	2400      	movs	r4, #0
    WiringBleLock lk;
   d6b38:	a801      	add	r0, sp, #4
   d6b3a:	f7ff fd6d 	bl	d6618 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   d6b3e:	4620      	mov	r0, r4
   d6b40:	b007      	add	sp, #28
   d6b42:	bd30      	pop	{r4, r5, pc}

000d6b44 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d6b44:	b510      	push	{r4, lr}
   d6b46:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d6b48:	2054      	movs	r0, #84	; 0x54
   d6b4a:	f7fd faa4 	bl	d4096 <_Znwj>
   d6b4e:	4601      	mov	r1, r0
   d6b50:	b160      	cbz	r0, d6b6c <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   d6b52:	2300      	movs	r3, #0
   d6b54:	e9c0 3300 	strd	r3, r3, [r0]
   d6b58:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d6b5c:	e9c0 3304 	strd	r3, r3, [r0, #16]
   d6b60:	e9c0 3306 	strd	r3, r3, [r0, #24]
   d6b64:	6203      	str	r3, [r0, #32]
   d6b66:	62c3      	str	r3, [r0, #44]	; 0x2c
   d6b68:	63c3      	str	r3, [r0, #60]	; 0x3c
   d6b6a:	64c3      	str	r3, [r0, #76]	; 0x4c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   d6b6c:	6021      	str	r1, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   d6b6e:	b919      	cbnz	r1, d6b78 <_ZN8particle14BleLocalDeviceC1Ev+0x34>
        SPARK_ASSERT(false);
   d6b70:	4a09      	ldr	r2, [pc, #36]	; (d6b98 <_ZN8particle14BleLocalDeviceC1Ev+0x54>)
   d6b72:	200a      	movs	r0, #10
   d6b74:	f7ff f8f8 	bl	d5d68 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   d6b78:	2000      	movs	r0, #0
   d6b7a:	f7fe fef3 	bl	d5964 <hal_ble_stack_init>
   d6b7e:	b120      	cbz	r0, d6b8a <_ZN8particle14BleLocalDeviceC1Ev+0x46>
   d6b80:	4a05      	ldr	r2, [pc, #20]	; (d6b98 <_ZN8particle14BleLocalDeviceC1Ev+0x54>)
   d6b82:	2100      	movs	r1, #0
   d6b84:	200a      	movs	r0, #10
   d6b86:	f7ff f8ef 	bl	d5d68 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   d6b8a:	6821      	ldr	r1, [r4, #0]
   d6b8c:	4803      	ldr	r0, [pc, #12]	; (d6b9c <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d6b8e:	2200      	movs	r2, #0
   d6b90:	f7fe ff44 	bl	d5a1c <hal_ble_set_callback_on_periph_link_events>
}
   d6b94:	4620      	mov	r0, r4
   d6b96:	bd10      	pop	{r4, pc}
   d6b98:	000d5945 	.word	0x000d5945
   d6b9c:	000d6f29 	.word	0x000d6f29

000d6ba0 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   d6ba0:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   d6ba2:	4c0b      	ldr	r4, [pc, #44]	; (d6bd0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d6ba4:	7823      	ldrb	r3, [r4, #0]
   d6ba6:	f3bf 8f5b 	dmb	ish
   d6baa:	07db      	lsls	r3, r3, #31
   d6bac:	d40e      	bmi.n	d6bcc <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>
   d6bae:	4620      	mov	r0, r4
   d6bb0:	f7fd fa77 	bl	d40a2 <__cxa_guard_acquire>
   d6bb4:	b150      	cbz	r0, d6bcc <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>
   d6bb6:	4807      	ldr	r0, [pc, #28]	; (d6bd4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d6bb8:	f7ff ffc4 	bl	d6b44 <_ZN8particle14BleLocalDeviceC1Ev>
   d6bbc:	4620      	mov	r0, r4
   d6bbe:	f7fd fa75 	bl	d40ac <__cxa_guard_release>
   d6bc2:	4a05      	ldr	r2, [pc, #20]	; (d6bd8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   d6bc4:	4905      	ldr	r1, [pc, #20]	; (d6bdc <_ZN8particle14BleLocalDevice11getInstanceEv+0x3c>)
   d6bc6:	4803      	ldr	r0, [pc, #12]	; (d6bd4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d6bc8:	f001 fc96 	bl	d84f8 <__aeabi_atexit>
    return instance;
}
   d6bcc:	4801      	ldr	r0, [pc, #4]	; (d6bd4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d6bce:	bd10      	pop	{r4, pc}
   d6bd0:	2003e65c 	.word	0x2003e65c
   d6bd4:	2003e668 	.word	0x2003e668
   d6bd8:	200355c4 	.word	0x200355c4
   d6bdc:	000d6da9 	.word	0x000d6da9

000d6be0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d6be0:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   d6be2:	6803      	ldr	r3, [r0, #0]
   d6be4:	3b09      	subs	r3, #9
   d6be6:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d6be8:	b08d      	sub	sp, #52	; 0x34
   d6bea:	4604      	mov	r4, r0
   d6bec:	460d      	mov	r5, r1
    switch (event->type) {
   d6bee:	d811      	bhi.n	d6c14 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   d6bf0:	f7ff ffd6 	bl	d6ba0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d6bf4:	88a1      	ldrh	r1, [r4, #4]
   d6bf6:	6800      	ldr	r0, [r0, #0]
   d6bf8:	f7ff fea6 	bl	d6948 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   d6bfc:	4603      	mov	r3, r0
   d6bfe:	b958      	cbnz	r0, d6c18 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   d6c00:	2220      	movs	r2, #32
   d6c02:	e9cd 2004 	strd	r2, r0, [sp, #16]
   d6c06:	4a0b      	ldr	r2, [pc, #44]	; (d6c34 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   d6c08:	9200      	str	r2, [sp, #0]
   d6c0a:	490b      	ldr	r1, [pc, #44]	; (d6c38 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   d6c0c:	aa04      	add	r2, sp, #16
   d6c0e:	2032      	movs	r0, #50	; 0x32
   d6c10:	f7ff f8b2 	bl	d5d78 <log_message>
}
   d6c14:	b00d      	add	sp, #52	; 0x34
   d6c16:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   d6c18:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   d6c1a:	2a00      	cmp	r2, #0
   d6c1c:	d0fa      	beq.n	d6c14 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   d6c1e:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6c22:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   d6c26:	e9cd 1203 	strd	r1, r2, [sp, #12]
   d6c2a:	6dac      	ldr	r4, [r5, #88]	; 0x58
   d6c2c:	aa04      	add	r2, sp, #16
   d6c2e:	a903      	add	r1, sp, #12
   d6c30:	47a0      	blx	r4
}
   d6c32:	e7ef      	b.n	d6c14 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   d6c34:	000db337 	.word	0x000db337
   d6c38:	000db310 	.word	0x000db310

000d6c3c <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   d6c3c:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   d6c3e:	2000      	movs	r0, #0
   d6c40:	f7fe fe90 	bl	d5964 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   d6c44:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   d6c48:	bd08      	pop	{r3, pc}

000d6c4a <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   d6c4a:	4608      	mov	r0, r1
   d6c4c:	b911      	cbnz	r1, d6c54 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   d6c4e:	460a      	mov	r2, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   d6c50:	f7fe be90 	b.w	d5974 <hal_ble_gap_set_advertising_data>
   d6c54:	6a09      	ldr	r1, [r1, #32]
   d6c56:	2200      	movs	r2, #0
   d6c58:	e7fa      	b.n	d6c50 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000d6c5a <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:

int BleLocalDevice::setAdvertisingData(BleAdvertisingData& advertisingData) const {
    return setAdvertisingData(&advertisingData);
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   d6c5a:	b507      	push	{r0, r1, r2, lr}
    if (scanResponse == nullptr) {
   d6c5c:	4608      	mov	r0, r1
   d6c5e:	b929      	cbnz	r1, d6c6c <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   d6c60:	460a      	mov	r2, r1
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
    }
}
   d6c62:	b003      	add	sp, #12
   d6c64:	f85d eb04 	ldr.w	lr, [sp], #4
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d6c68:	f7fe be8c 	b.w	d5984 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   d6c6c:	2101      	movs	r1, #1
   d6c6e:	9001      	str	r0, [sp, #4]
   d6c70:	f7ff fe2e 	bl	d68d0 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d6c74:	9801      	ldr	r0, [sp, #4]
   d6c76:	2200      	movs	r2, #0
   d6c78:	6a01      	ldr	r1, [r0, #32]
   d6c7a:	e7f2      	b.n	d6c62 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x8>

000d6c7c <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise() const {
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d6c7c:	b538      	push	{r3, r4, r5, lr}
   d6c7e:	4604      	mov	r4, r0
   d6c80:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   d6c82:	f7ff ffe2 	bl	d6c4a <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   d6c86:	2800      	cmp	r0, #0
   d6c88:	db0a      	blt.n	d6ca0 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   d6c8a:	4629      	mov	r1, r5
   d6c8c:	4620      	mov	r0, r4
   d6c8e:	f7ff ffe4 	bl	d6c5a <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   d6c92:	2800      	cmp	r0, #0
   d6c94:	db04      	blt.n	d6ca0 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    return advertise();
}
   d6c96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   d6c9a:	2000      	movs	r0, #0
   d6c9c:	f7fe be7a 	b.w	d5994 <hal_ble_gap_start_advertising>
}
   d6ca0:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6ca4 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   d6ca4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d6ca6:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   d6ca8:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d6caa:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6cac:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   d6cae:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6cb0:	f7fd f9f1 	bl	d4096 <_Znwj>
   d6cb4:	b118      	cbz	r0, d6cbe <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	{ }

      _Bind(const _Bind&) = default;

      _Bind(_Bind&& __b)
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
   d6cb6:	682b      	ldr	r3, [r5, #0]
   d6cb8:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d6cba:	686b      	ldr	r3, [r5, #4]
   d6cbc:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   d6cbe:	4b03      	ldr	r3, [pc, #12]	; (d6ccc <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   d6cc0:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6cc2:	4b03      	ldr	r3, [pc, #12]	; (d6cd0 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6cc4:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   d6cc6:	60a3      	str	r3, [r4, #8]
      }
   d6cc8:	4620      	mov	r0, r4
   d6cca:	bd38      	pop	{r3, r4, r5, pc}
   d6ccc:	000d659f 	.word	0x000d659f
   d6cd0:	000d6561 	.word	0x000d6561

000d6cd4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d6cd4:	680b      	ldr	r3, [r1, #0]
   d6cd6:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d6cd8:	b113      	cbz	r3, d6ce0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d6cda:	685a      	ldr	r2, [r3, #4]
   d6cdc:	3201      	adds	r2, #1
   d6cde:	605a      	str	r2, [r3, #4]
      }
   d6ce0:	4770      	bx	lr

000d6ce2 <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   d6ce2:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6ce4:	f851 3b04 	ldr.w	r3, [r1], #4
   d6ce8:	4604      	mov	r4, r0
   d6cea:	f840 3b04 	str.w	r3, [r0], #4
   d6cee:	f7ff fff1 	bl	d6cd4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   d6cf2:	6823      	ldr	r3, [r4, #0]
   d6cf4:	b90b      	cbnz	r3, d6cfa <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   d6cf6:	f7ff fc2b 	bl	d6550 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   d6cfa:	4620      	mov	r0, r4
   d6cfc:	bd10      	pop	{r4, pc}

000d6cfe <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   d6cfe:	b510      	push	{r4, lr}
   d6d00:	f851 3b04 	ldr.w	r3, [r1], #4
   d6d04:	4604      	mov	r4, r0
   d6d06:	f840 3b04 	str.w	r3, [r0], #4
   d6d0a:	f7ff ffe3 	bl	d6cd4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d6d0e:	4620      	mov	r0, r4
   d6d10:	bd10      	pop	{r4, pc}

000d6d12 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   d6d12:	b510      	push	{r4, lr}
   d6d14:	f851 3b04 	ldr.w	r3, [r1], #4
   d6d18:	4604      	mov	r4, r0
   d6d1a:	f840 3b04 	str.w	r3, [r0], #4
   d6d1e:	f7ff ffd9 	bl	d6cd4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d6d22:	4620      	mov	r0, r4
   d6d24:	bd10      	pop	{r4, pc}

000d6d26 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d6d26:	b510      	push	{r4, lr}
   d6d28:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   d6d2a:	6800      	ldr	r0, [r0, #0]
   d6d2c:	b128      	cbz	r0, d6d3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
      if (--_M_use_count == 0)
   d6d2e:	6843      	ldr	r3, [r0, #4]
   d6d30:	3b01      	subs	r3, #1
   d6d32:	6043      	str	r3, [r0, #4]
   d6d34:	b90b      	cbnz	r3, d6d3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d6d36:	f7ff fb7e 	bl	d6436 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
      }
   d6d3a:	4620      	mov	r0, r4
   d6d3c:	bd10      	pop	{r4, pc}

000d6d3e <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   d6d3e:	b510      	push	{r4, lr}
   d6d40:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   d6d42:	3004      	adds	r0, #4
   d6d44:	f7ff ffef 	bl	d6d26 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d6d48:	4620      	mov	r0, r4
   d6d4a:	bd10      	pop	{r4, pc}

000d6d4c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6d4c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d6d4e:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6d52:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d6d54:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   d6d58:	42ae      	cmp	r6, r5
   d6d5a:	d004      	beq.n	d6d66 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   d6d5c:	1d28      	adds	r0, r5, #4
   d6d5e:	f7ff ffe2 	bl	d6d26 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6d62:	3508      	adds	r5, #8
   d6d64:	e7f8      	b.n	d6d58 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d6d66:	6820      	ldr	r0, [r4, #0]
   d6d68:	f7ff f8a2 	bl	d5eb0 <free>
}
   d6d6c:	4620      	mov	r0, r4
   d6d6e:	bd70      	pop	{r4, r5, r6, pc}

000d6d70 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6d70:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d6d72:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6d76:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d6d78:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   d6d7c:	42ae      	cmp	r6, r5
   d6d7e:	d004      	beq.n	d6d8a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   d6d80:	1d28      	adds	r0, r5, #4
   d6d82:	f7ff ffd0 	bl	d6d26 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6d86:	3508      	adds	r5, #8
   d6d88:	e7f8      	b.n	d6d7c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d6d8a:	6820      	ldr	r0, [r4, #0]
   d6d8c:	f7ff f890 	bl	d5eb0 <free>
}
   d6d90:	4620      	mov	r0, r4
   d6d92:	bd70      	pop	{r4, r5, r6, pc}

000d6d94 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d6d94:	b510      	push	{r4, lr}
   d6d96:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   d6d98:	3024      	adds	r0, #36	; 0x24
   d6d9a:	f7ff ffe9 	bl	d6d70 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d6d9e:	f104 0018 	add.w	r0, r4, #24
   d6da2:	f7ff ffd3 	bl	d6d4c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   d6da6:	bd10      	pop	{r4, pc}

000d6da8 <_ZN8particle14BleLocalDeviceD1Ev>:
        return impl_.get();
    }

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   d6da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (__ptr != nullptr)
   d6daa:	6804      	ldr	r4, [r0, #0]
   d6dac:	4606      	mov	r6, r0
   d6dae:	b324      	cbz	r4, d6dfa <_ZN8particle14BleLocalDeviceD1Ev+0x52>
    class function<_Res(_ArgTypes...)>
   d6db0:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d6db4:	f7ff fbff 	bl	d65b6 <_ZNSt14_Function_baseD1Ev>
   d6db8:	f104 0034 	add.w	r0, r4, #52	; 0x34
   d6dbc:	f7ff fbfb 	bl	d65b6 <_ZNSt14_Function_baseD1Ev>
   d6dc0:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d6dc4:	f7ff fbf7 	bl	d65b6 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   d6dc8:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   d6dcc:	eb05 07c3 	add.w	r7, r5, r3, lsl #3
        for (; p != end; ++p) {
   d6dd0:	42af      	cmp	r7, r5
   d6dd2:	d004      	beq.n	d6dde <_ZN8particle14BleLocalDeviceD1Ev+0x36>
      ~__shared_ptr() = default;
   d6dd4:	1d28      	adds	r0, r5, #4
   d6dd6:	f7ff ffa6 	bl	d6d26 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6dda:	3508      	adds	r5, #8
   d6ddc:	e7f8      	b.n	d6dd0 <_ZN8particle14BleLocalDeviceD1Ev+0x28>
    ::free(ptr);
   d6dde:	69a0      	ldr	r0, [r4, #24]
   d6de0:	f7ff f866 	bl	d5eb0 <free>
    ~BleLocalDeviceImpl() = default;
   d6de4:	f104 000c 	add.w	r0, r4, #12
   d6de8:	f7ff ffc2 	bl	d6d70 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d6dec:	4620      	mov	r0, r4
   d6dee:	f7ff ffad 	bl	d6d4c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   d6df2:	2154      	movs	r1, #84	; 0x54
   d6df4:	4620      	mov	r0, r4
   d6df6:	f001 fb84 	bl	d8502 <_ZdlPvj>
   d6dfa:	4630      	mov	r0, r6
   d6dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6dfe <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   d6dfe:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d6e00:	b510      	push	{r4, lr}
      if (_M_empty())
   d6e02:	b90a      	cbnz	r2, d6e08 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   d6e04:	f001 fb81 	bl	d850a <_ZSt25__throw_bad_function_callv>
    }
   d6e08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6e0c:	68c3      	ldr	r3, [r0, #12]
   d6e0e:	4718      	bx	r3

000d6e10 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   d6e10:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d6e12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6e14:	4604      	mov	r4, r0
   d6e16:	460d      	mov	r5, r1
   d6e18:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d6e1a:	d914      	bls.n	d6e46 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d6e1c:	4290      	cmp	r0, r2
   d6e1e:	d213      	bcs.n	d6e48 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   d6e20:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   d6e24:	1a75      	subs	r5, r6, r1
   d6e26:	f1a1 0708 	sub.w	r7, r1, #8
   d6e2a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d6e2c:	42b7      	cmp	r7, r6
   d6e2e:	d018      	beq.n	d6e62 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d6e30:	b11c      	cbz	r4, d6e3a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d6e32:	4631      	mov	r1, r6
   d6e34:	4620      	mov	r0, r4
   d6e36:	f7ff ff6c 	bl	d6d12 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d6e3a:	1d30      	adds	r0, r6, #4
   d6e3c:	f7ff ff73 	bl	d6d26 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   d6e40:	3e08      	subs	r6, #8
   d6e42:	3c08      	subs	r4, #8
   d6e44:	e7f2      	b.n	d6e2c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   d6e46:	d00c      	beq.n	d6e62 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d6e48:	42b5      	cmp	r5, r6
   d6e4a:	d00a      	beq.n	d6e62 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d6e4c:	b11c      	cbz	r4, d6e56 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d6e4e:	4629      	mov	r1, r5
   d6e50:	4620      	mov	r0, r4
   d6e52:	f7ff ff5e 	bl	d6d12 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d6e56:	1d28      	adds	r0, r5, #4
   d6e58:	f7ff ff65 	bl	d6d26 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   d6e5c:	3508      	adds	r5, #8
   d6e5e:	3408      	adds	r4, #8
   d6e60:	e7f2      	b.n	d6e48 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   d6e62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6e64 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d6e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    T* const p = find(data_, data_ + size_, value);
   d6e68:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d6e6c:	4605      	mov	r5, r0
   d6e6e:	4688      	mov	r8, r1
    T* const p = find(data_, data_ + size_, value);
   d6e70:	eb04 07c3 	add.w	r7, r4, r3, lsl #3
        for (; p != end; ++p) {
   d6e74:	42a7      	cmp	r7, r4
   d6e76:	d103      	bne.n	d6e80 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x1c>
        return false;
   d6e78:	2600      	movs	r6, #0
}
   d6e7a:	4630      	mov	r0, r6
   d6e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if (*p == value) {
   d6e80:	4641      	mov	r1, r8
   d6e82:	4620      	mov	r0, r4
   d6e84:	f7ff fe3c 	bl	d6b00 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   d6e88:	4606      	mov	r6, r0
   d6e8a:	b908      	cbnz	r0, d6e90 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>
        for (; p != end; ++p) {
   d6e8c:	3408      	adds	r4, #8
   d6e8e:	e7f1      	b.n	d6e74 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x10>
    if (!p) {
   d6e90:	2c00      	cmp	r4, #0
   d6e92:	d0f1      	beq.n	d6e78 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x14>
   d6e94:	1d20      	adds	r0, r4, #4
   d6e96:	f7ff ff46 	bl	d6d26 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   d6e9a:	e9d5 3200 	ldrd	r3, r2, [r5]
   d6e9e:	f104 0108 	add.w	r1, r4, #8
   d6ea2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d6ea6:	4620      	mov	r0, r4
   d6ea8:	f7ff ffb2 	bl	d6e10 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   d6eac:	686b      	ldr	r3, [r5, #4]
   d6eae:	3b01      	subs	r3, #1
   d6eb0:	606b      	str	r3, [r5, #4]
    return true;
   d6eb2:	e7e2      	b.n	d6e7a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x16>

000d6eb4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d6eb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d6eb6:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d6eb8:	6846      	ldr	r6, [r0, #4]
   d6eba:	4668      	mov	r0, sp
   d6ebc:	f7ff ff29 	bl	d6d12 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6ec0:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   d6ec4:	429f      	cmp	r7, r3
   d6ec6:	db12      	blt.n	d6eee <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   d6ec8:	3701      	adds	r7, #1
        if (n > 0) {
   d6eca:	2f00      	cmp	r7, #0
   d6ecc:	dd29      	ble.n	d6f22 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   d6ece:	00f8      	lsls	r0, r7, #3
   d6ed0:	f7fe ffe6 	bl	d5ea0 <malloc>
            if (!d) {
   d6ed4:	4605      	mov	r5, r0
   d6ed6:	b1f0      	cbz	r0, d6f16 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   d6ed8:	e9d4 1200 	ldrd	r1, r2, [r4]
   d6edc:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d6ee0:	f7ff ff96 	bl	d6e10 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   d6ee4:	6820      	ldr	r0, [r4, #0]
   d6ee6:	f7fe ffe3 	bl	d5eb0 <free>
        data_ = d;
   d6eea:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d6eec:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   d6eee:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d6ef0:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d6ef2:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   d6ef6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d6efa:	4631      	mov	r1, r6
   d6efc:	f106 0008 	add.w	r0, r6, #8
   d6f00:	f7ff ff86 	bl	d6e10 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d6f04:	b11e      	cbz	r6, d6f0e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   d6f06:	4669      	mov	r1, sp
   d6f08:	4630      	mov	r0, r6
   d6f0a:	f7ff ff02 	bl	d6d12 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   d6f0e:	6863      	ldr	r3, [r4, #4]
   d6f10:	3301      	adds	r3, #1
   d6f12:	6063      	str	r3, [r4, #4]
    return true;
   d6f14:	2501      	movs	r5, #1
   d6f16:	a801      	add	r0, sp, #4
   d6f18:	f7ff ff05 	bl	d6d26 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d6f1c:	4628      	mov	r0, r5
   d6f1e:	b003      	add	sp, #12
   d6f20:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   d6f22:	2500      	movs	r5, #0
   d6f24:	e7de      	b.n	d6ee4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>
	...

000d6f28 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d6f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6f2c:	4605      	mov	r5, r0
   d6f2e:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   d6f30:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d6f32:	460c      	mov	r4, r1
        WiringBleLock lk;
   d6f34:	f7ff fb68 	bl	d6608 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   d6f38:	682e      	ldr	r6, [r5, #0]
   d6f3a:	2e04      	cmp	r6, #4
   d6f3c:	d06b      	beq.n	d7016 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
   d6f3e:	d807      	bhi.n	d6f50 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x28>
   d6f40:	2e03      	cmp	r6, #3
   d6f42:	d028      	beq.n	d6f96 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x6e>
        WiringBleLock lk;
   d6f44:	a803      	add	r0, sp, #12
   d6f46:	f7ff fb67 	bl	d6618 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   d6f4a:	b00e      	add	sp, #56	; 0x38
   d6f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        switch (event->type) {
   d6f50:	f1a6 030c 	sub.w	r3, r6, #12
   d6f54:	2b03      	cmp	r3, #3
   d6f56:	d8f5      	bhi.n	d6f44 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d6f58:	89a9      	ldrh	r1, [r5, #12]
   d6f5a:	4620      	mov	r0, r4
   d6f5c:	f7ff fcf4 	bl	d6948 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d6f60:	4607      	mov	r7, r0
   d6f62:	2800      	cmp	r0, #0
   d6f64:	d0ee      	beq.n	d6f44 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                    if (impl->pairingEventCallback_) {
   d6f66:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   d6f68:	2b00      	cmp	r3, #0
   d6f6a:	d0eb      	beq.n	d6f44 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                        BlePairingEvent pairingEvent = {
   d6f6c:	2210      	movs	r2, #16
   d6f6e:	2100      	movs	r1, #0
   d6f70:	a807      	add	r0, sp, #28
   d6f72:	f002 f937 	bl	d91e4 <memset>
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY) {
   d6f76:	2e0d      	cmp	r6, #13
                        };
   d6f78:	9706      	str	r7, [sp, #24]
                            .type = static_cast<BlePairingEventType>(event->type)
   d6f7a:	f88d 601c 	strb.w	r6, [sp, #28]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY) {
   d6f7e:	f040 8092 	bne.w	d70a6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17e>
                            pairingEvent.payload.passkey = event->params.passkey_display.passkey;
   d6f82:	686b      	ldr	r3, [r5, #4]
   d6f84:	9309      	str	r3, [sp, #36]	; 0x24
                            pairingEvent.payloadLen = BLE_PAIRING_PASSKEY_LEN;
   d6f86:	2306      	movs	r3, #6
                            pairingEvent.payloadLen = sizeof(BlePairingStatus);
   d6f88:	9308      	str	r3, [sp, #32]
   d6f8a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   d6f8c:	a906      	add	r1, sp, #24
   d6f8e:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d6f92:	4798      	blx	r3
   d6f94:	e7d6      	b.n	d6f44 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                BlePeerDevice peer;
   d6f96:	a804      	add	r0, sp, #16
   d6f98:	f7ff fd7e 	bl	d6a98 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   d6f9c:	9b04      	ldr	r3, [sp, #16]
   d6f9e:	89aa      	ldrh	r2, [r5, #12]
   d6fa0:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   d6fa2:	6869      	ldr	r1, [r5, #4]
   d6fa4:	9804      	ldr	r0, [sp, #16]
   d6fa6:	3108      	adds	r1, #8
   d6fa8:	3002      	adds	r0, #2
   d6faa:	f7ff fb3d 	bl	d6628 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   d6fae:	a904      	add	r1, sp, #16
   d6fb0:	a806      	add	r0, sp, #24
   d6fb2:	f7ff feae 	bl	d6d12 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   d6fb6:	a906      	add	r1, sp, #24
   d6fb8:	f104 0018 	add.w	r0, r4, #24
   d6fbc:	f7ff ff7a 	bl	d6eb4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d6fc0:	4605      	mov	r5, r0
   d6fc2:	a807      	add	r0, sp, #28
   d6fc4:	f7ff feaf 	bl	d6d26 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6fc8:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   d6fca:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   d6fcc:	b98d      	cbnz	r5, d6ff2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xca>
                    LOG(ERROR, "Failed to append peer Central device.");
   d6fce:	4b3e      	ldr	r3, [pc, #248]	; (d70c8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a0>)
   d6fd0:	493e      	ldr	r1, [pc, #248]	; (d70cc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a4>)
   d6fd2:	9300      	str	r3, [sp, #0]
   d6fd4:	2032      	movs	r0, #50	; 0x32
   d6fd6:	462b      	mov	r3, r5
   d6fd8:	aa06      	add	r2, sp, #24
   d6fda:	9507      	str	r5, [sp, #28]
   d6fdc:	f7fe fecc 	bl	d5d78 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   d6fe0:	9b04      	ldr	r3, [sp, #16]
   d6fe2:	4629      	mov	r1, r5
   d6fe4:	8818      	ldrh	r0, [r3, #0]
   d6fe6:	f7fe fcdd 	bl	d59a4 <hal_ble_gap_disconnect>
   d6fea:	a805      	add	r0, sp, #20
   d6fec:	f7ff fe9b 	bl	d6d26 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6ff0:	e7a8      	b.n	d6f44 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                LOG(TRACE, "Connected by Central device.");
   d6ff2:	4a37      	ldr	r2, [pc, #220]	; (d70d0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a8>)
   d6ff4:	9200      	str	r2, [sp, #0]
   d6ff6:	2300      	movs	r3, #0
   d6ff8:	4934      	ldr	r1, [pc, #208]	; (d70cc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a4>)
   d6ffa:	9307      	str	r3, [sp, #28]
   d6ffc:	aa06      	add	r2, sp, #24
   d6ffe:	2001      	movs	r0, #1
   d7000:	f7fe feba 	bl	d5d78 <log_message>
                if (impl->connectedCallback_) {
   d7004:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d7006:	2b00      	cmp	r3, #0
   d7008:	d0ef      	beq.n	d6fea <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xc2>
                    impl->connectedCallback_(peer);
   d700a:	a904      	add	r1, sp, #16
   d700c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d7010:	f7ff fef5 	bl	d6dfe <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   d7014:	e7e9      	b.n	d6fea <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xc2>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d7016:	89a9      	ldrh	r1, [r5, #12]
   d7018:	4620      	mov	r0, r4
   d701a:	f7ff fc95 	bl	d6948 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d701e:	4606      	mov	r6, r0
   d7020:	2800      	cmp	r0, #0
   d7022:	d08f      	beq.n	d6f44 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
        return impl_.get();
   d7024:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   d7026:	e9d5 3106 	ldrd	r3, r1, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   d702a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d702e:	802a      	strh	r2, [r5, #0]
   d7030:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
        for (auto& characteristic : characteristics()) {
   d7034:	4299      	cmp	r1, r3
   d7036:	d003      	beq.n	d7040 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x118>
        return impl_.get();
   d7038:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d703c:	8042      	strh	r2, [r0, #2]
        for (auto& characteristic : characteristics()) {
   d703e:	e7f9      	b.n	d7034 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10c>
    destruct(data_, data_ + size_);
   d7040:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   d7044:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   d7048:	45b8      	cmp	r8, r7
   d704a:	d004      	beq.n	d7056 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12e>
   d704c:	1d38      	adds	r0, r7, #4
   d704e:	f7ff fe6a 	bl	d6d26 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7052:	3708      	adds	r7, #8
   d7054:	e7f8      	b.n	d7048 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x120>
    size_ = 0;
   d7056:	2300      	movs	r3, #0
   d7058:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   d705a:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   d705e:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   d7062:	45b8      	cmp	r8, r7
   d7064:	d004      	beq.n	d7070 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x148>
   d7066:	1d38      	adds	r0, r7, #4
   d7068:	f7ff fe5d 	bl	d6d26 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d706c:	3708      	adds	r7, #8
   d706e:	e7f8      	b.n	d7062 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13a>
    size_ = 0;
   d7070:	2300      	movs	r3, #0
   d7072:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   d7074:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   d7076:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d7078:	b123      	cbz	r3, d7084 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x15c>
                        impl->disconnectedCallback_(*peer);
   d707a:	4631      	mov	r1, r6
   d707c:	f104 0034 	add.w	r0, r4, #52	; 0x34
   d7080:	f7ff febd 	bl	d6dfe <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   d7084:	2300      	movs	r3, #0
   d7086:	2220      	movs	r2, #32
   d7088:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d708c:	4a11      	ldr	r2, [pc, #68]	; (d70d4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ac>)
   d708e:	9200      	str	r2, [sp, #0]
   d7090:	490e      	ldr	r1, [pc, #56]	; (d70cc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a4>)
   d7092:	aa06      	add	r2, sp, #24
   d7094:	2001      	movs	r0, #1
   d7096:	f7fe fe6f 	bl	d5d78 <log_message>
                    impl->peers_.removeOne(*peer);
   d709a:	4631      	mov	r1, r6
   d709c:	f104 0018 	add.w	r0, r4, #24
   d70a0:	f7ff fee0 	bl	d6e64 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
   d70a4:	e74e      	b.n	d6f44 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   d70a6:	2e0f      	cmp	r6, #15
   d70a8:	f47f af6f 	bne.w	d6f8a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x62>
                            pairingEvent.payload.status.status = event->params.pairing_status.status;
   d70ac:	686b      	ldr	r3, [r5, #4]
   d70ae:	9309      	str	r3, [sp, #36]	; 0x24
                            pairingEvent.payload.status.bonded = event->params.pairing_status.bonded;
   d70b0:	7a2b      	ldrb	r3, [r5, #8]
   d70b2:	f003 0201 	and.w	r2, r3, #1
                            pairingEvent.payload.status.lesc = event->params.pairing_status.lesc;
   d70b6:	f3c3 0340 	ubfx	r3, r3, #1, #1
   d70ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
                            pairingEvent.payload.status.bonded = event->params.pairing_status.bonded;
   d70be:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
                            pairingEvent.payloadLen = sizeof(BlePairingStatus);
   d70c2:	2308      	movs	r3, #8
   d70c4:	e760      	b.n	d6f88 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x60>
   d70c6:	bf00      	nop
   d70c8:	000db34f 	.word	0x000db34f
   d70cc:	000db310 	.word	0x000db310
   d70d0:	000db375 	.word	0x000db375
   d70d4:	000db392 	.word	0x000db392

000d70d8 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_>:
      operator=(__shared_ptr&& __r) noexcept
   d70d8:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   d70da:	2300      	movs	r3, #0
      operator=(__shared_ptr&& __r) noexcept
   d70dc:	4604      	mov	r4, r0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d70de:	e9d1 0200 	ldrd	r0, r2, [r1]
	__r._M_ptr = 0;
   d70e2:	e9c1 3300 	strd	r3, r3, [r1]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d70e6:	6823      	ldr	r3, [r4, #0]
   d70e8:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d70ea:	6020      	str	r0, [r4, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d70ec:	6863      	ldr	r3, [r4, #4]
	__r._M_pi = _M_pi;
   d70ee:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
   d70f0:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   d70f2:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   d70f4:	f7ff fe17 	bl	d6d26 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   d70f8:	4620      	mov	r0, r4
   d70fa:	b002      	add	sp, #8
   d70fc:	bd10      	pop	{r4, pc}

000d70fe <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d70fe:	b513      	push	{r0, r1, r4, lr}
   d7100:	460b      	mov	r3, r1
   d7102:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7104:	e9d0 0100 	ldrd	r0, r1, [r0]
   d7108:	466c      	mov	r4, sp
   d710a:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d710e:	e893 0003 	ldmia.w	r3, {r0, r1}
   d7112:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d7116:	e894 0003 	ldmia.w	r4, {r0, r1}
   d711a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d711e:	b002      	add	sp, #8
   d7120:	bd10      	pop	{r4, pc}

000d7122 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   d7122:	b538      	push	{r3, r4, r5, lr}
   d7124:	4605      	mov	r5, r0
   d7126:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   d7128:	f7ff ffe9 	bl	d70fe <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d712c:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   d712e:	68a2      	ldr	r2, [r4, #8]
   d7130:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7132:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7134:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   d7136:	68e2      	ldr	r2, [r4, #12]
   d7138:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d713a:	60e3      	str	r3, [r4, #12]
      }
   d713c:	bd38      	pop	{r3, r4, r5, pc}

000d713e <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSEOS7_>:
      operator=(function&& __x) noexcept
   d713e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    _Function_base() : _M_manager(nullptr) { }
   d7140:	2300      	movs	r3, #0
      operator=(function&& __x) noexcept
   d7142:	4604      	mov	r4, r0
   d7144:	4608      	mov	r0, r1
	__x.swap(*this);
   d7146:	4669      	mov	r1, sp
    _Function_base() : _M_manager(nullptr) { }
   d7148:	9302      	str	r3, [sp, #8]
	__x.swap(*this);
   d714a:	f7ff ffea 	bl	d7122 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   d714e:	4621      	mov	r1, r4
   d7150:	4668      	mov	r0, sp
   d7152:	f7ff ffe6 	bl	d7122 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   d7156:	4668      	mov	r0, sp
   d7158:	f7ff fa2d 	bl	d65b6 <_ZNSt14_Function_baseD1Ev>
      }
   d715c:	4620      	mov	r0, r4
   d715e:	b004      	add	sp, #16
   d7160:	bd10      	pop	{r4, pc}

000d7162 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   d7162:	b570      	push	{r4, r5, r6, lr}
   d7164:	460e      	mov	r6, r1
   d7166:	b088      	sub	sp, #32
   d7168:	4604      	mov	r4, r0
   d716a:	9201      	str	r2, [sp, #4]
   d716c:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   d716e:	f7ff fbcb 	bl	d6908 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   d7172:	7833      	ldrb	r3, [r6, #0]
        description_ = desc;
   d7174:	9901      	ldr	r1, [sp, #4]
        properties_ = properties;
   d7176:	7123      	strb	r3, [r4, #4]
        description_ = desc;
   d7178:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d717c:	f7ff f874 	bl	d6268 <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   d7180:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   d7184:	b185      	cbz	r5, d71a8 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x46>
   d7186:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d7188:	9502      	str	r5, [sp, #8]
   d718a:	a902      	add	r1, sp, #8
   d718c:	a804      	add	r0, sp, #16
   d718e:	9303      	str	r3, [sp, #12]
   d7190:	f7ff fd88 	bl	d6ca4 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
   d7194:	a904      	add	r1, sp, #16
   d7196:	4630      	mov	r0, r6
   d7198:	f7ff ffd1 	bl	d713e <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSEOS7_>
    class function<_Res(_ArgTypes...)>
   d719c:	a804      	add	r0, sp, #16
   d719e:	f7ff fa0a 	bl	d65b6 <_ZNSt14_Function_baseD1Ev>
    }
   d71a2:	4620      	mov	r0, r4
   d71a4:	b008      	add	sp, #32
   d71a6:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   d71a8:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   d71aa:	e7f3      	b.n	d7194 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x32>

000d71ac <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   d71ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d71b0:	b086      	sub	sp, #24
   d71b2:	4607      	mov	r7, r0
   d71b4:	461d      	mov	r5, r3
   d71b6:	2068      	movs	r0, #104	; 0x68
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d71b8:	2300      	movs	r3, #0
   d71ba:	4689      	mov	r9, r1
   d71bc:	4692      	mov	sl, r2
   d71be:	9304      	str	r3, [sp, #16]
   d71c0:	f7fc ff69 	bl	d4096 <_Znwj>
	  auto __pi = ::new (__mem)
   d71c4:	1e06      	subs	r6, r0, #0
   d71c6:	f106 080c 	add.w	r8, r6, #12
   d71ca:	d01d      	beq.n	d7208 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   d71cc:	2301      	movs	r3, #1
	: _M_impl(__a)
   d71ce:	4634      	mov	r4, r6
      : _M_use_count(1), _M_weak_count(1) { }
   d71d0:	e9c6 3301 	strd	r3, r3, [r6, #4]
	: _M_impl(__a)
   d71d4:	4b15      	ldr	r3, [pc, #84]	; (d722c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x80>)
   d71d6:	f844 3b20 	str.w	r3, [r4], #32
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
	noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
   d71da:	f89a 3000 	ldrb.w	r3, [sl]
    value_ = flags.value_;
   d71de:	f88d 300c 	strb.w	r3, [sp, #12]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   d71e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d71e4:	9300      	str	r3, [sp, #0]
   d71e6:	464a      	mov	r2, r9
   d71e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d71ea:	a903      	add	r1, sp, #12
   d71ec:	4640      	mov	r0, r8
   d71ee:	f7ff ffb8 	bl	d7162 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   d71f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d71f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d71f6:	682b      	ldr	r3, [r5, #0]
        svcUuid_ = svcUuid;
   d71f8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
        charUuid_ = charUuid;
   d71fa:	6023      	str	r3, [r4, #0]
        svcUuid_ = svcUuid;
   d71fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d71fe:	f106 0434 	add.w	r4, r6, #52	; 0x34
   d7202:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7204:	682b      	ldr	r3, [r5, #0]
   d7206:	6023      	str	r3, [r4, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   d7208:	a904      	add	r1, sp, #16
   d720a:	4638      	mov	r0, r7
	  __p = __pi->_M_ptr();
   d720c:	e9cd 8604 	strd	r8, r6, [sp, #16]
   d7210:	f7ff ff62 	bl	d70d8 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_>
      ~__shared_ptr() = default;
   d7214:	a805      	add	r0, sp, #20
   d7216:	f7ff fd86 	bl	d6d26 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   d721a:	6839      	ldr	r1, [r7, #0]
   d721c:	b919      	cbnz	r1, d7226 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x7a>
        SPARK_ASSERT(false);
   d721e:	4a04      	ldr	r2, [pc, #16]	; (d7230 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>)
   d7220:	200a      	movs	r0, #10
   d7222:	f7fe fda1 	bl	d5d68 <panic_>
}
   d7226:	b006      	add	sp, #24
   d7228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d722c:	000db40c 	.word	0x000db40c
   d7230:	000d5945 	.word	0x000d5945

000d7234 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   d7234:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d7236:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7238:	4604      	mov	r4, r0
   d723a:	460d      	mov	r5, r1
   d723c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d723e:	d914      	bls.n	d726a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d7240:	4290      	cmp	r0, r2
   d7242:	d213      	bcs.n	d726c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   d7244:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   d7248:	1a75      	subs	r5, r6, r1
   d724a:	f1a1 0708 	sub.w	r7, r1, #8
   d724e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d7250:	42b7      	cmp	r7, r6
   d7252:	d018      	beq.n	d7286 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d7254:	b11c      	cbz	r4, d725e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default;
   d7256:	4631      	mov	r1, r6
   d7258:	4620      	mov	r0, r4
   d725a:	f7ff fd50 	bl	d6cfe <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d725e:	1d30      	adds	r0, r6, #4
   d7260:	f7ff fd61 	bl	d6d26 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   d7264:	3e08      	subs	r6, #8
   d7266:	3c08      	subs	r4, #8
   d7268:	e7f2      	b.n	d7250 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   d726a:	d00c      	beq.n	d7286 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d726c:	42b5      	cmp	r5, r6
   d726e:	d00a      	beq.n	d7286 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d7270:	b11c      	cbz	r4, d727a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d7272:	4629      	mov	r1, r5
   d7274:	4620      	mov	r0, r4
   d7276:	f7ff fd42 	bl	d6cfe <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d727a:	1d28      	adds	r0, r5, #4
   d727c:	f7ff fd53 	bl	d6d26 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   d7280:	3508      	adds	r5, #8
   d7282:	3408      	adds	r4, #8
   d7284:	e7f2      	b.n	d726c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   d7286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7288 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   d7288:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   d728a:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   d728c:	4605      	mov	r5, r0
        if (n > 0) {
   d728e:	dd11      	ble.n	d72b4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   d7290:	00f0      	lsls	r0, r6, #3
   d7292:	f7fe fe05 	bl	d5ea0 <malloc>
            if (!d) {
   d7296:	4604      	mov	r4, r0
   d7298:	b158      	cbz	r0, d72b2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   d729a:	e9d5 1200 	ldrd	r1, r2, [r5]
   d729e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d72a2:	f7ff ffc7 	bl	d7234 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   d72a6:	6828      	ldr	r0, [r5, #0]
   d72a8:	f7fe fe02 	bl	d5eb0 <free>
        data_ = d;
   d72ac:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d72ae:	60ae      	str	r6, [r5, #8]
        return true;
   d72b0:	2001      	movs	r0, #1
    }
   d72b2:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   d72b4:	2400      	movs	r4, #0
   d72b6:	e7f6      	b.n	d72a6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000d72b8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d72b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d72ba:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d72bc:	6845      	ldr	r5, [r0, #4]
   d72be:	4668      	mov	r0, sp
   d72c0:	f7ff fd1d 	bl	d6cfe <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d72c4:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   d72c8:	4299      	cmp	r1, r3
   d72ca:	da10      	bge.n	d72ee <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   d72cc:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d72ce:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d72d0:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d72d4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d72d8:	4629      	mov	r1, r5
   d72da:	f105 0008 	add.w	r0, r5, #8
   d72de:	f7ff ffa9 	bl	d7234 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d72e2:	b98d      	cbnz	r5, d7308 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   d72e4:	6863      	ldr	r3, [r4, #4]
   d72e6:	3301      	adds	r3, #1
   d72e8:	6063      	str	r3, [r4, #4]
    return true;
   d72ea:	2601      	movs	r6, #1
   d72ec:	e006      	b.n	d72fc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d72ee:	3101      	adds	r1, #1
   d72f0:	4620      	mov	r0, r4
   d72f2:	f7ff ffc9 	bl	d7288 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d72f6:	4606      	mov	r6, r0
   d72f8:	2800      	cmp	r0, #0
   d72fa:	d1e7      	bne.n	d72cc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   d72fc:	a801      	add	r0, sp, #4
   d72fe:	f7ff fd12 	bl	d6d26 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d7302:	4630      	mov	r0, r6
   d7304:	b002      	add	sp, #8
   d7306:	bd70      	pop	{r4, r5, r6, pc}
   d7308:	4669      	mov	r1, sp
   d730a:	4628      	mov	r0, r5
   d730c:	f7ff fcf7 	bl	d6cfe <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d7310:	e7e8      	b.n	d72e4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000d7312 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   d7312:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d7314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7316:	4604      	mov	r4, r0
   d7318:	460d      	mov	r5, r1
   d731a:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d731c:	d914      	bls.n	d7348 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d731e:	4290      	cmp	r0, r2
   d7320:	d213      	bcs.n	d734a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   d7322:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   d7326:	1a75      	subs	r5, r6, r1
   d7328:	f1a1 0708 	sub.w	r7, r1, #8
   d732c:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d732e:	42b7      	cmp	r7, r6
   d7330:	d018      	beq.n	d7364 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d7332:	b11c      	cbz	r4, d733c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   d7334:	4631      	mov	r1, r6
   d7336:	4620      	mov	r0, r4
   d7338:	f7ff fcd3 	bl	d6ce2 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d733c:	1d30      	adds	r0, r6, #4
   d733e:	f7ff fcf2 	bl	d6d26 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   d7342:	3e08      	subs	r6, #8
   d7344:	3c08      	subs	r4, #8
   d7346:	e7f2      	b.n	d732e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   d7348:	d00c      	beq.n	d7364 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d734a:	42b5      	cmp	r5, r6
   d734c:	d00a      	beq.n	d7364 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d734e:	b11c      	cbz	r4, d7358 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d7350:	4629      	mov	r1, r5
   d7352:	4620      	mov	r0, r4
   d7354:	f7ff fcc5 	bl	d6ce2 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d7358:	1d28      	adds	r0, r5, #4
   d735a:	f7ff fce4 	bl	d6d26 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   d735e:	3508      	adds	r5, #8
   d7360:	3408      	adds	r4, #8
   d7362:	e7f2      	b.n	d734a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   d7364:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7366 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   d7366:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   d7368:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   d736a:	4605      	mov	r5, r0
        if (n > 0) {
   d736c:	dd11      	ble.n	d7392 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   d736e:	00f0      	lsls	r0, r6, #3
   d7370:	f7fe fd96 	bl	d5ea0 <malloc>
            if (!d) {
   d7374:	4604      	mov	r4, r0
   d7376:	b158      	cbz	r0, d7390 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   d7378:	e9d5 1200 	ldrd	r1, r2, [r5]
   d737c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d7380:	f7ff ffc7 	bl	d7312 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   d7384:	6828      	ldr	r0, [r5, #0]
   d7386:	f7fe fd93 	bl	d5eb0 <free>
        data_ = d;
   d738a:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d738c:	60ae      	str	r6, [r5, #8]
        return true;
   d738e:	2001      	movs	r0, #1
    }
   d7390:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   d7392:	2400      	movs	r4, #0
   d7394:	e7f6      	b.n	d7384 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000d7396 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d7396:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d7398:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d739a:	6845      	ldr	r5, [r0, #4]
   d739c:	4668      	mov	r0, sp
   d739e:	f7ff fca0 	bl	d6ce2 <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d73a2:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   d73a6:	4299      	cmp	r1, r3
   d73a8:	da10      	bge.n	d73cc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   d73aa:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d73ac:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d73ae:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d73b2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d73b6:	4629      	mov	r1, r5
   d73b8:	f105 0008 	add.w	r0, r5, #8
   d73bc:	f7ff ffa9 	bl	d7312 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d73c0:	b98d      	cbnz	r5, d73e6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   d73c2:	6863      	ldr	r3, [r4, #4]
   d73c4:	3301      	adds	r3, #1
   d73c6:	6063      	str	r3, [r4, #4]
    return true;
   d73c8:	2601      	movs	r6, #1
   d73ca:	e006      	b.n	d73da <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d73cc:	3101      	adds	r1, #1
   d73ce:	4620      	mov	r0, r4
   d73d0:	f7ff ffc9 	bl	d7366 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d73d4:	4606      	mov	r6, r0
   d73d6:	2800      	cmp	r0, #0
   d73d8:	d1e7      	bne.n	d73aa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   d73da:	a801      	add	r0, sp, #4
   d73dc:	f7ff fca3 	bl	d6d26 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d73e0:	4630      	mov	r0, r6
   d73e2:	b002      	add	sp, #8
   d73e4:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   d73e6:	4669      	mov	r1, sp
   d73e8:	4628      	mov	r0, r5
   d73ea:	f7ff fc7a 	bl	d6ce2 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d73ee:	e7e8      	b.n	d73c2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000d73f0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   d73f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d73f4:	4617      	mov	r7, r2
   d73f6:	b0a1      	sub	sp, #132	; 0x84
   d73f8:	4680      	mov	r8, r0
    WiringBleLock lk;
   d73fa:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   d73fc:	460e      	mov	r6, r1
    WiringBleLock lk;
   d73fe:	f7ff f903 	bl	d6608 <_ZN8particle3ble13WiringBleLockC1Ev>
   d7402:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   d7404:	7923      	ldrb	r3, [r4, #4]
   d7406:	b953      	cbnz	r3, d741e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   d7408:	4639      	mov	r1, r7
   d740a:	4640      	mov	r0, r8
   d740c:	f7ff fc69 	bl	d6ce2 <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   d7410:	a80a      	add	r0, sp, #40	; 0x28
   d7412:	f7ff f901 	bl	d6618 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   d7416:	4640      	mov	r0, r8
   d7418:	b021      	add	sp, #132	; 0x84
   d741a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d741e:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   d7420:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   d7424:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   d7428:	9303      	str	r3, [sp, #12]
   d742a:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   d742e:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   d7432:	9b03      	ldr	r3, [sp, #12]
   d7434:	429d      	cmp	r5, r3
   d7436:	d021      	beq.n	d747c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   d7438:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   d743c:	4658      	mov	r0, fp
   d743e:	f109 0114 	add.w	r1, r9, #20
   d7442:	f7ff f99a 	bl	d677a <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   d7446:	b1b8      	cbz	r0, d7478 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   d7448:	f109 0128 	add.w	r1, r9, #40	; 0x28
   d744c:	4650      	mov	r0, sl
   d744e:	f7ff f994 	bl	d677a <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   d7452:	b188      	cbz	r0, d7478 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   d7454:	6823      	ldr	r3, [r4, #0]
   d7456:	f8d9 2000 	ldr.w	r2, [r9]
   d745a:	4053      	eors	r3, r2
   d745c:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   d7460:	d10a      	bne.n	d7478 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   d7462:	2220      	movs	r2, #32
   d7464:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   d7468:	4a5e      	ldr	r2, [pc, #376]	; (d75e4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   d746a:	9200      	str	r2, [sp, #0]
   d746c:	aa15      	add	r2, sp, #84	; 0x54
   d746e:	495e      	ldr	r1, [pc, #376]	; (d75e8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   d7470:	2032      	movs	r0, #50	; 0x32
   d7472:	f7fe fc81 	bl	d5d78 <log_message>
   d7476:	e7c7      	b.n	d7408 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   d7478:	3508      	adds	r5, #8
   d747a:	e7da      	b.n	d7432 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   d747c:	4650      	mov	r0, sl
   d747e:	f7ff f947 	bl	d6710 <_ZNK8particle7BleUuid7isValidEv>
   d7482:	b960      	cbnz	r0, d749e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
        return *this = BleUuid(uuid);
   d7484:	4959      	ldr	r1, [pc, #356]	; (d75ec <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   d7486:	2201      	movs	r2, #1
   d7488:	a815      	add	r0, sp, #84	; 0x54
   d748a:	ad15      	add	r5, sp, #84	; 0x54
   d748c:	f7ff f917 	bl	d66be <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   d7490:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7492:	46d4      	mov	ip, sl
   d7494:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   d7498:	682b      	ldr	r3, [r5, #0]
   d749a:	f8cc 3000 	str.w	r3, [ip]
   d749e:	6833      	ldr	r3, [r6, #0]
   d74a0:	e9d3 5300 	ldrd	r5, r3, [r3]
   d74a4:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   d74a8:	455d      	cmp	r5, fp
   d74aa:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   d74ac:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   d74ae:	d06e      	beq.n	d758e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   d74b0:	f855 0b08 	ldr.w	r0, [r5], #8
   d74b4:	f7ff f961 	bl	d677a <_ZNK8particle7BleUuideqERKS0_>
   d74b8:	2800      	cmp	r0, #0
   d74ba:	d0f5      	beq.n	d74a8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   d74bc:	f104 0a14 	add.w	sl, r4, #20
   d74c0:	4650      	mov	r0, sl
   d74c2:	f7ff f925 	bl	d6710 <_ZNK8particle7BleUuid7isValidEv>
   d74c6:	b988      	cbnz	r0, d74ec <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   d74c8:	4b49      	ldr	r3, [pc, #292]	; (d75f0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d74ca:	4948      	ldr	r1, [pc, #288]	; (d75ec <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   d74cc:	881a      	ldrh	r2, [r3, #0]
   d74ce:	3201      	adds	r2, #1
   d74d0:	b292      	uxth	r2, r2
   d74d2:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d74d4:	a815      	add	r0, sp, #84	; 0x54
   d74d6:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   d74d8:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d74da:	f7ff f90f 	bl	d66fc <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   d74de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d74e0:	46d4      	mov	ip, sl
   d74e2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   d74e6:	682b      	ldr	r3, [r5, #0]
   d74e8:	f8cc 3000 	str.w	r3, [ip]
    hal_ble_char_init_t charInit = {};
   d74ec:	2228      	movs	r2, #40	; 0x28
   d74ee:	2100      	movs	r1, #0
   d74f0:	a816      	add	r0, sp, #88	; 0x58
   d74f2:	f001 fe77 	bl	d91e4 <memset>
    charInit.version = BLE_API_VERSION;
   d74f6:	4b3f      	ldr	r3, [pc, #252]	; (d75f4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   d74f8:	9315      	str	r3, [sp, #84]	; 0x54
    charInit.uuid = charImpl->charUUID().halUUID();
   d74fa:	4651      	mov	r1, sl
   d74fc:	a804      	add	r0, sp, #16
   d74fe:	f7ff f919 	bl	d6734 <_ZN8particle7BleUuid7halUUIDEv>
   d7502:	ab04      	add	r3, sp, #16
   d7504:	aa18      	add	r2, sp, #96	; 0x60
   d7506:	f10d 0c20 	add.w	ip, sp, #32
   d750a:	6818      	ldr	r0, [r3, #0]
   d750c:	6859      	ldr	r1, [r3, #4]
   d750e:	4615      	mov	r5, r2
   d7510:	c503      	stmia	r5!, {r0, r1}
   d7512:	3308      	adds	r3, #8
   d7514:	4563      	cmp	r3, ip
   d7516:	462a      	mov	r2, r5
   d7518:	d1f7      	bne.n	d750a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   d751a:	6818      	ldr	r0, [r3, #0]
   d751c:	6028      	str	r0, [r5, #0]
    charInit.properties = charImpl->properties().value();
   d751e:	7923      	ldrb	r3, [r4, #4]
   d7520:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   d7524:	f8d9 3000 	ldr.w	r3, [r9]
   d7528:	8a9b      	ldrh	r3, [r3, #20]
   d752a:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   d752e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d7530:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   d7532:	4b31      	ldr	r3, [pc, #196]	; (d75f8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d7534:	2200      	movs	r2, #0
   d7536:	1da1      	adds	r1, r4, #6
   d7538:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   d753a:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d753e:	f7fe fa63 	bl	d5a08 <hal_ble_gatt_server_add_characteristic>
   d7542:	2800      	cmp	r0, #0
   d7544:	f47f af60 	bne.w	d7408 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   d7548:	2301      	movs	r3, #1
   d754a:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   d754c:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   d754e:	4639      	mov	r1, r7
        return characteristics_;
   d7550:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   d7552:	a80d      	add	r0, sp, #52	; 0x34
   d7554:	f7ff fbc5 	bl	d6ce2 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d7558:	4620      	mov	r0, r4
   d755a:	a90d      	add	r1, sp, #52	; 0x34
   d755c:	f7ff ff1b 	bl	d7396 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   d7560:	4604      	mov	r4, r0
   d7562:	a80e      	add	r0, sp, #56	; 0x38
   d7564:	f7ff fbdf 	bl	d6d26 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7568:	2c00      	cmp	r4, #0
   d756a:	f47f af4d 	bne.w	d7408 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   d756e:	2320      	movs	r3, #32
   d7570:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   d7574:	4b21      	ldr	r3, [pc, #132]	; (d75fc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   d7576:	9300      	str	r3, [sp, #0]
   d7578:	aa0d      	add	r2, sp, #52	; 0x34
   d757a:	4623      	mov	r3, r4
   d757c:	e777      	b.n	d746e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   d757e:	4639      	mov	r1, r7
   d7580:	4640      	mov	r0, r8
   d7582:	f7ff fbae 	bl	d6ce2 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d7586:	a80c      	add	r0, sp, #48	; 0x30
   d7588:	f7ff fbcd 	bl	d6d26 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d758c:	e740      	b.n	d7410 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   d758e:	a80b      	add	r0, sp, #44	; 0x2c
   d7590:	f7ff fa5e 	bl	d6a50 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   d7594:	4651      	mov	r1, sl
   d7596:	a815      	add	r0, sp, #84	; 0x54
   d7598:	f7ff f8cc 	bl	d6734 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   d759c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d759e:	2300      	movs	r3, #0
   d75a0:	3214      	adds	r2, #20
   d75a2:	a915      	add	r1, sp, #84	; 0x54
   d75a4:	2001      	movs	r0, #1
   d75a6:	f7fe fa07 	bl	d59b8 <hal_ble_gatt_server_add_service>
   d75aa:	2800      	cmp	r0, #0
   d75ac:	d1e7      	bne.n	d757e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   d75ae:	6835      	ldr	r5, [r6, #0]
   d75b0:	a90b      	add	r1, sp, #44	; 0x2c
   d75b2:	a80d      	add	r0, sp, #52	; 0x34
   d75b4:	f7ff fba3 	bl	d6cfe <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   d75b8:	4628      	mov	r0, r5
   d75ba:	a90d      	add	r1, sp, #52	; 0x34
   d75bc:	f7ff fe7c 	bl	d72b8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   d75c0:	4605      	mov	r5, r0
   d75c2:	a80e      	add	r0, sp, #56	; 0x38
   d75c4:	f7ff fbaf 	bl	d6d26 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d75c8:	2d00      	cmp	r5, #0
   d75ca:	d0d8      	beq.n	d757e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   d75cc:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   d75ce:	6853      	ldr	r3, [r2, #4]
   d75d0:	6812      	ldr	r2, [r2, #0]
   d75d2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   d75d6:	3b01      	subs	r3, #1
   d75d8:	a80c      	add	r0, sp, #48	; 0x30
   d75da:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   d75de:	f7ff fba2 	bl	d6d26 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d75e2:	e76b      	b.n	d74bc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   d75e4:	000db3b1 	.word	0x000db3b1
   d75e8:	000db310 	.word	0x000db310
   d75ec:	000db470 	.word	0x000db470
   d75f0:	2003e660 	.word	0x2003e660
   d75f4:	002c0001 	.word	0x002c0001
   d75f8:	000d6be1 	.word	0x000d6be1
   d75fc:	000db3dc 	.word	0x000db3dc

000d7600 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d7600:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d7602:	4c06      	ldr	r4, [pc, #24]	; (d761c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d7604:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d7606:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d7608:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d760a:	f7fe fa25 	bl	d5a58 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d760e:	4620      	mov	r0, r4
   d7610:	4a03      	ldr	r2, [pc, #12]	; (d7620 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d7612:	4904      	ldr	r1, [pc, #16]	; (d7624 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d7614:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d7618:	f000 bf6e 	b.w	d84f8 <__aeabi_atexit>
   d761c:	2003e664 	.word	0x2003e664
   d7620:	200355c4 	.word	0x200355c4
   d7624:	000d6457 	.word	0x000d6457

000d7628 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d7628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d762a:	4606      	mov	r6, r0
   d762c:	460d      	mov	r5, r1
  size_t n = 0;
   d762e:	188f      	adds	r7, r1, r2
   d7630:	2400      	movs	r4, #0
  while (size--) {
   d7632:	42bd      	cmp	r5, r7
   d7634:	d00c      	beq.n	d7650 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d7636:	6833      	ldr	r3, [r6, #0]
   d7638:	f815 1b01 	ldrb.w	r1, [r5], #1
   d763c:	689b      	ldr	r3, [r3, #8]
   d763e:	4630      	mov	r0, r6
   d7640:	4798      	blx	r3
     if (chunk>=0)
   d7642:	1e03      	subs	r3, r0, #0
   d7644:	db01      	blt.n	d764a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d7646:	441c      	add	r4, r3
  while (size--) {
   d7648:	e7f3      	b.n	d7632 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d764a:	2c00      	cmp	r4, #0
   d764c:	bf08      	it	eq
   d764e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d7650:	4620      	mov	r0, r4
   d7652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7654 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d7654:	b513      	push	{r0, r1, r4, lr}
   d7656:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d7658:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d765a:	b159      	cbz	r1, d7674 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d765c:	9101      	str	r1, [sp, #4]
   d765e:	f001 fdff 	bl	d9260 <strlen>
   d7662:	6823      	ldr	r3, [r4, #0]
   d7664:	9901      	ldr	r1, [sp, #4]
   d7666:	68db      	ldr	r3, [r3, #12]
   d7668:	4602      	mov	r2, r0
   d766a:	4620      	mov	r0, r4
    }
   d766c:	b002      	add	sp, #8
   d766e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d7672:	4718      	bx	r3
    }
   d7674:	b002      	add	sp, #8
   d7676:	bd10      	pop	{r4, pc}

000d7678 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d7678:	b508      	push	{r3, lr}
  return write(str);
   d767a:	f7ff ffeb 	bl	d7654 <_ZN5Print5writeEPKc>
}
   d767e:	bd08      	pop	{r3, pc}

000d7680 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d7680:	6803      	ldr	r3, [r0, #0]
   d7682:	689b      	ldr	r3, [r3, #8]
   d7684:	4718      	bx	r3

000d7686 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d7686:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d7688:	210d      	movs	r1, #13
{
   d768a:	4605      	mov	r5, r0
  size_t n = print('\r');
   d768c:	f7ff fff8 	bl	d7680 <_ZN5Print5printEc>
  n += print('\n');
   d7690:	210a      	movs	r1, #10
  size_t n = print('\r');
   d7692:	4604      	mov	r4, r0
  n += print('\n');
   d7694:	4628      	mov	r0, r5
   d7696:	f7ff fff3 	bl	d7680 <_ZN5Print5printEc>
  return n;
}
   d769a:	4420      	add	r0, r4
   d769c:	bd38      	pop	{r3, r4, r5, pc}

000d769e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d769e:	b538      	push	{r3, r4, r5, lr}
   d76a0:	4605      	mov	r5, r0
  return write(str);
   d76a2:	f7ff ffd7 	bl	d7654 <_ZN5Print5writeEPKc>
   d76a6:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d76a8:	4628      	mov	r0, r5
   d76aa:	f7ff ffec 	bl	d7686 <_ZN5Print7printlnEv>
  return n;
}
   d76ae:	4420      	add	r0, r4
   d76b0:	bd38      	pop	{r3, r4, r5, pc}

000d76b2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d76b2:	b530      	push	{r4, r5, lr}
   d76b4:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d76b6:	2300      	movs	r3, #0
   d76b8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d76bc:	2a01      	cmp	r2, #1
   d76be:	bf98      	it	ls
   d76c0:	220a      	movls	r2, #10
   d76c2:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d76c4:	460d      	mov	r5, r1
   d76c6:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d76ca:	fb01 5312 	mls	r3, r1, r2, r5
   d76ce:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d76d2:	2b09      	cmp	r3, #9
   d76d4:	bf94      	ite	ls
   d76d6:	3330      	addls	r3, #48	; 0x30
   d76d8:	3337      	addhi	r3, #55	; 0x37
   d76da:	b2db      	uxtb	r3, r3
  } while(n);
   d76dc:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d76de:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d76e2:	d9ef      	bls.n	d76c4 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d76e4:	4621      	mov	r1, r4
   d76e6:	f7ff ffb5 	bl	d7654 <_ZN5Print5writeEPKc>
}
   d76ea:	b00b      	add	sp, #44	; 0x2c
   d76ec:	bd30      	pop	{r4, r5, pc}

000d76ee <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d76ee:	2300      	movs	r3, #0
   d76f0:	6840      	ldr	r0, [r0, #4]
   d76f2:	461a      	mov	r2, r3
   d76f4:	4619      	mov	r1, r3
   d76f6:	f7fe bb8b 	b.w	d5e10 <network_on>
	...

000d76fc <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d76fc:	4b01      	ldr	r3, [pc, #4]	; (d7704 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d76fe:	4a02      	ldr	r2, [pc, #8]	; (d7708 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d7700:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d7702:	4770      	bx	lr
   d7704:	2003e66c 	.word	0x2003e66c
   d7708:	000db490 	.word	0x000db490

000d770c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d770c:	4b02      	ldr	r3, [pc, #8]	; (d7718 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d770e:	681a      	ldr	r2, [r3, #0]
   d7710:	4b02      	ldr	r3, [pc, #8]	; (d771c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d7712:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d7714:	4770      	bx	lr
   d7716:	bf00      	nop
   d7718:	200353ec 	.word	0x200353ec
   d771c:	2003e670 	.word	0x2003e670

000d7720 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d7720:	2100      	movs	r1, #0
   d7722:	f7fe bb39 	b.w	d5d98 <system_delay_ms>

000d7726 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d7726:	b510      	push	{r4, lr}
   d7728:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   d772a:	f7fe ff44 	bl	d65b6 <_ZNSt14_Function_baseD1Ev>
   d772e:	4620      	mov	r0, r4
   d7730:	bd10      	pop	{r4, pc}
	...

000d7734 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d7734:	4803      	ldr	r0, [pc, #12]	; (d7744 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d7736:	4a04      	ldr	r2, [pc, #16]	; (d7748 <_GLOBAL__sub_I_RGB+0x14>)
   d7738:	4904      	ldr	r1, [pc, #16]	; (d774c <_GLOBAL__sub_I_RGB+0x18>)
   d773a:	2300      	movs	r3, #0
   d773c:	6083      	str	r3, [r0, #8]
   d773e:	f000 bedb 	b.w	d84f8 <__aeabi_atexit>
   d7742:	bf00      	nop
   d7744:	2003e674 	.word	0x2003e674
   d7748:	200355c4 	.word	0x200355c4
   d774c:	000d7727 	.word	0x000d7727

000d7750 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d7750:	4b01      	ldr	r3, [pc, #4]	; (d7758 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d7752:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d7754:	4770      	bx	lr
   d7756:	bf00      	nop
   d7758:	200353f0 	.word	0x200353f0

000d775c <serialEventRun>:
{
   d775c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d775e:	4b0b      	ldr	r3, [pc, #44]	; (d778c <serialEventRun+0x30>)
   d7760:	b143      	cbz	r3, d7774 <serialEventRun+0x18>
   d7762:	f000 f971 	bl	d7a48 <_Z16_fetch_usbserialv>
   d7766:	6803      	ldr	r3, [r0, #0]
   d7768:	691b      	ldr	r3, [r3, #16]
   d776a:	4798      	blx	r3
   d776c:	2800      	cmp	r0, #0
   d776e:	dd01      	ble.n	d7774 <serialEventRun+0x18>
        serialEvent();
   d7770:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d7774:	4b06      	ldr	r3, [pc, #24]	; (d7790 <serialEventRun+0x34>)
   d7776:	b143      	cbz	r3, d778a <serialEventRun+0x2e>
   d7778:	f000 f9e4 	bl	d7b44 <_Z22__fetch_global_Serial1v>
   d777c:	6803      	ldr	r3, [r0, #0]
   d777e:	691b      	ldr	r3, [r3, #16]
   d7780:	4798      	blx	r3
   d7782:	2800      	cmp	r0, #0
   d7784:	dd01      	ble.n	d778a <serialEventRun+0x2e>
        serialEvent1();
   d7786:	f3af 8000 	nop.w
}
   d778a:	bd08      	pop	{r3, pc}
	...

000d7794 <_post_loop>:
{
   d7794:	b508      	push	{r3, lr}
	serialEventRun();
   d7796:	f7ff ffe1 	bl	d775c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d779a:	f7fe f8db 	bl	d5954 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d779e:	4b01      	ldr	r3, [pc, #4]	; (d77a4 <_post_loop+0x10>)
   d77a0:	6018      	str	r0, [r3, #0]
}
   d77a2:	bd08      	pop	{r3, pc}
   d77a4:	2003e7d4 	.word	0x2003e7d4

000d77a8 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d77a8:	4802      	ldr	r0, [pc, #8]	; (d77b4 <_Z33system_initialize_user_backup_ramv+0xc>)
   d77aa:	4a03      	ldr	r2, [pc, #12]	; (d77b8 <_Z33system_initialize_user_backup_ramv+0x10>)
   d77ac:	4903      	ldr	r1, [pc, #12]	; (d77bc <_Z33system_initialize_user_backup_ramv+0x14>)
   d77ae:	1a12      	subs	r2, r2, r0
   d77b0:	f001 bcf0 	b.w	d9194 <memcpy>
   d77b4:	2003f400 	.word	0x2003f400
   d77b8:	2003f404 	.word	0x2003f404
   d77bc:	000db9e0 	.word	0x000db9e0

000d77c0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d77c0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d77c2:	2300      	movs	r3, #0
   d77c4:	9300      	str	r3, [sp, #0]
   d77c6:	461a      	mov	r2, r3
   d77c8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d77cc:	f7fe faf6 	bl	d5dbc <system_ctrl_set_result>
}
   d77d0:	b003      	add	sp, #12
   d77d2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d77d8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d77d8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d77da:	8843      	ldrh	r3, [r0, #2]
   d77dc:	2b0a      	cmp	r3, #10
   d77de:	d008      	beq.n	d77f2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d77e0:	2b50      	cmp	r3, #80	; 0x50
   d77e2:	d10b      	bne.n	d77fc <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d77e4:	4b09      	ldr	r3, [pc, #36]	; (d780c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d77e6:	681b      	ldr	r3, [r3, #0]
   d77e8:	b14b      	cbz	r3, d77fe <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d77ea:	b003      	add	sp, #12
   d77ec:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d77f0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d77f2:	f7ff ffe5 	bl	d77c0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d77f6:	b003      	add	sp, #12
   d77f8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d77fc:	2300      	movs	r3, #0
   d77fe:	9300      	str	r3, [sp, #0]
   d7800:	461a      	mov	r2, r3
   d7802:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7806:	f7fe fad9 	bl	d5dbc <system_ctrl_set_result>
}
   d780a:	e7f4      	b.n	d77f6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d780c:	2003e688 	.word	0x2003e688

000d7810 <module_user_init_hook>:
{
   d7810:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d7812:	4c12      	ldr	r4, [pc, #72]	; (d785c <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d7814:	4812      	ldr	r0, [pc, #72]	; (d7860 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d7816:	4d13      	ldr	r5, [pc, #76]	; (d7864 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d7818:	2100      	movs	r1, #0
   d781a:	f7fe fb79 	bl	d5f10 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d781e:	6823      	ldr	r3, [r4, #0]
   d7820:	42ab      	cmp	r3, r5
   d7822:	4b11      	ldr	r3, [pc, #68]	; (d7868 <module_user_init_hook+0x58>)
   d7824:	bf0c      	ite	eq
   d7826:	2201      	moveq	r2, #1
   d7828:	2200      	movne	r2, #0
   d782a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d782c:	d002      	beq.n	d7834 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d782e:	f7ff ffbb 	bl	d77a8 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d7832:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d7834:	f7fe f87e 	bl	d5934 <HAL_RNG_GetRandomNumber>
   d7838:	4604      	mov	r4, r0
    srand(seed);
   d783a:	f001 fcdb 	bl	d91f4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d783e:	4b0b      	ldr	r3, [pc, #44]	; (d786c <module_user_init_hook+0x5c>)
   d7840:	b113      	cbz	r3, d7848 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d7842:	4620      	mov	r0, r4
   d7844:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d7848:	2100      	movs	r1, #0
   d784a:	4808      	ldr	r0, [pc, #32]	; (d786c <module_user_init_hook+0x5c>)
   d784c:	f7fe fb20 	bl	d5e90 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d7850:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7854:	4806      	ldr	r0, [pc, #24]	; (d7870 <module_user_init_hook+0x60>)
   d7856:	2100      	movs	r1, #0
   d7858:	f7fe baa6 	b.w	d5da8 <system_ctrl_set_app_request_handler>
   d785c:	2003f400 	.word	0x2003f400
   d7860:	000d7751 	.word	0x000d7751
   d7864:	9a271c1e 	.word	0x9a271c1e
   d7868:	2003e684 	.word	0x2003e684
   d786c:	00000000 	.word	0x00000000
   d7870:	000d77d9 	.word	0x000d77d9

000d7874 <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
   d7874:	4770      	bx	lr

000d7876 <_ZN9IPAddressD0Ev>:
   d7876:	b510      	push	{r4, lr}
   d7878:	2118      	movs	r1, #24
   d787a:	4604      	mov	r4, r0
   d787c:	f000 fe41 	bl	d8502 <_ZdlPvj>
   d7880:	4620      	mov	r0, r4
   d7882:	bd10      	pop	{r4, pc}

000d7884 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d7884:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d7886:	7d03      	ldrb	r3, [r0, #20]
   d7888:	2b06      	cmp	r3, #6
{
   d788a:	b08d      	sub	sp, #52	; 0x34
   d788c:	460e      	mov	r6, r1
   d788e:	f100 0704 	add.w	r7, r0, #4
   d7892:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d7896:	d012      	beq.n	d78be <_ZNK9IPAddress7printToER5Print+0x3a>
   d7898:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d789c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d78a0:	220a      	movs	r2, #10
   d78a2:	4630      	mov	r0, r6
   d78a4:	f7ff ff05 	bl	d76b2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d78a8:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d78aa:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d78ac:	d019      	beq.n	d78e2 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d78ae:	2c00      	cmp	r4, #0
   d78b0:	d0f4      	beq.n	d789c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d78b2:	212e      	movs	r1, #46	; 0x2e
   d78b4:	4630      	mov	r0, r6
   d78b6:	f7ff fee3 	bl	d7680 <_ZN5Print5printEc>
   d78ba:	4404      	add	r4, r0
   d78bc:	e7ee      	b.n	d789c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d78be:	232f      	movs	r3, #47	; 0x2f
   d78c0:	466a      	mov	r2, sp
   d78c2:	4639      	mov	r1, r7
   d78c4:	200a      	movs	r0, #10
		buf[0] = 0;
   d78c6:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d78ca:	f7fe f8e5 	bl	d5a98 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d78ce:	4668      	mov	r0, sp
   d78d0:	f001 fcc6 	bl	d9260 <strlen>
   d78d4:	6833      	ldr	r3, [r6, #0]
   d78d6:	4602      	mov	r2, r0
   d78d8:	68db      	ldr	r3, [r3, #12]
   d78da:	4669      	mov	r1, sp
   d78dc:	4630      	mov	r0, r6
   d78de:	4798      	blx	r3
   d78e0:	4604      	mov	r4, r0
    }
    return n;
}
   d78e2:	4620      	mov	r0, r4
   d78e4:	b00d      	add	sp, #52	; 0x34
   d78e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d78e8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d78e8:	b510      	push	{r4, lr}
   d78ea:	4b05      	ldr	r3, [pc, #20]	; (d7900 <_ZN9IPAddressC1Ev+0x18>)
   d78ec:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d78ee:	2211      	movs	r2, #17
   d78f0:	f840 3b04 	str.w	r3, [r0], #4
   d78f4:	2100      	movs	r1, #0
   d78f6:	f001 fc75 	bl	d91e4 <memset>
}
   d78fa:	4620      	mov	r0, r4
   d78fc:	bd10      	pop	{r4, pc}
   d78fe:	bf00      	nop
   d7900:	000db4b8 	.word	0x000db4b8

000d7904 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d7904:	4603      	mov	r3, r0
   d7906:	4a07      	ldr	r2, [pc, #28]	; (d7924 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d7908:	b510      	push	{r4, lr}
   d790a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d790e:	f101 0210 	add.w	r2, r1, #16
   d7912:	f851 4b04 	ldr.w	r4, [r1], #4
   d7916:	f843 4b04 	str.w	r4, [r3], #4
   d791a:	4291      	cmp	r1, r2
   d791c:	d1f9      	bne.n	d7912 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d791e:	780a      	ldrb	r2, [r1, #0]
   d7920:	701a      	strb	r2, [r3, #0]
}
   d7922:	bd10      	pop	{r4, pc}
   d7924:	000db4b8 	.word	0x000db4b8

000d7928 <_ZNK9IPAddresscvbEv>:
    if (version() == 4) {
   d7928:	7d03      	ldrb	r3, [r0, #20]
   d792a:	2b04      	cmp	r3, #4
   d792c:	d104      	bne.n	d7938 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   d792e:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d7930:	3800      	subs	r0, #0
   d7932:	bf18      	it	ne
   d7934:	2001      	movne	r0, #1
   d7936:	4770      	bx	lr
    } else if (version() == 6) {
   d7938:	2b06      	cmp	r3, #6
   d793a:	d107      	bne.n	d794c <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d793c:	6843      	ldr	r3, [r0, #4]
   d793e:	b93b      	cbnz	r3, d7950 <_ZNK9IPAddresscvbEv+0x28>
   d7940:	6883      	ldr	r3, [r0, #8]
   d7942:	b92b      	cbnz	r3, d7950 <_ZNK9IPAddresscvbEv+0x28>
   d7944:	68c3      	ldr	r3, [r0, #12]
   d7946:	b91b      	cbnz	r3, d7950 <_ZNK9IPAddresscvbEv+0x28>
   d7948:	6900      	ldr	r0, [r0, #16]
   d794a:	e7f1      	b.n	d7930 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   d794c:	2000      	movs	r0, #0
   d794e:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d7950:	2001      	movs	r0, #1
}
   d7952:	4770      	bx	lr

000d7954 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d7954:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d7956:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d795a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d795e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d7962:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d7966:	2304      	movs	r3, #4
   d7968:	6041      	str	r1, [r0, #4]
   d796a:	7503      	strb	r3, [r0, #20]
}
   d796c:	bd10      	pop	{r4, pc}
	...

000d7970 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d7970:	b513      	push	{r0, r1, r4, lr}
   d7972:	4b05      	ldr	r3, [pc, #20]	; (d7988 <_ZN9IPAddressC1EPKh+0x18>)
   d7974:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d7976:	78cb      	ldrb	r3, [r1, #3]
   d7978:	9300      	str	r3, [sp, #0]
   d797a:	788b      	ldrb	r3, [r1, #2]
   d797c:	784a      	ldrb	r2, [r1, #1]
   d797e:	7809      	ldrb	r1, [r1, #0]
   d7980:	f7ff ffe8 	bl	d7954 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d7984:	b002      	add	sp, #8
   d7986:	bd10      	pop	{r4, pc}
   d7988:	000db4b8 	.word	0x000db4b8

000d798c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d798c:	7441      	strb	r1, [r0, #17]
}
   d798e:	4770      	bx	lr

000d7990 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d7990:	4770      	bx	lr

000d7992 <_ZN9USBSerial4readEv>:
{
   d7992:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d7994:	2100      	movs	r1, #0
   d7996:	7c00      	ldrb	r0, [r0, #16]
   d7998:	f7fe f9ce 	bl	d5d38 <HAL_USB_USART_Receive_Data>
}
   d799c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d79a0:	bd08      	pop	{r3, pc}

000d79a2 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d79a2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d79a4:	2101      	movs	r1, #1
   d79a6:	7c00      	ldrb	r0, [r0, #16]
   d79a8:	f7fe f9c6 	bl	d5d38 <HAL_USB_USART_Receive_Data>
}
   d79ac:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d79b0:	bd08      	pop	{r3, pc}

000d79b2 <_ZN9USBSerial17availableForWriteEv>:
{
   d79b2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d79b4:	7c00      	ldrb	r0, [r0, #16]
   d79b6:	f7fe f9b7 	bl	d5d28 <HAL_USB_USART_Available_Data_For_Write>
}
   d79ba:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d79be:	bd08      	pop	{r3, pc}

000d79c0 <_ZN9USBSerial9availableEv>:
{
   d79c0:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d79c2:	7c00      	ldrb	r0, [r0, #16]
   d79c4:	f7fe f9a8 	bl	d5d18 <HAL_USB_USART_Available_Data>
}
   d79c8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d79cc:	bd08      	pop	{r3, pc}

000d79ce <_ZN9USBSerial5writeEh>:
{
   d79ce:	b513      	push	{r0, r1, r4, lr}
   d79d0:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d79d2:	7c00      	ldrb	r0, [r0, #16]
{
   d79d4:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d79d6:	f7fe f9a7 	bl	d5d28 <HAL_USB_USART_Available_Data_For_Write>
   d79da:	2800      	cmp	r0, #0
   d79dc:	9901      	ldr	r1, [sp, #4]
   d79de:	dc01      	bgt.n	d79e4 <_ZN9USBSerial5writeEh+0x16>
   d79e0:	7c60      	ldrb	r0, [r4, #17]
   d79e2:	b120      	cbz	r0, d79ee <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d79e4:	7c20      	ldrb	r0, [r4, #16]
   d79e6:	f7fe f9af 	bl	d5d48 <HAL_USB_USART_Send_Data>
   d79ea:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d79ee:	b002      	add	sp, #8
   d79f0:	bd10      	pop	{r4, pc}

000d79f2 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d79f2:	7c00      	ldrb	r0, [r0, #16]
   d79f4:	f7fe b9b0 	b.w	d5d58 <HAL_USB_USART_Flush_Data>

000d79f8 <_ZN9USBSerialD0Ev>:
   d79f8:	b510      	push	{r4, lr}
   d79fa:	2114      	movs	r1, #20
   d79fc:	4604      	mov	r4, r0
   d79fe:	f000 fd80 	bl	d8502 <_ZdlPvj>
   d7a02:	4620      	mov	r0, r4
   d7a04:	bd10      	pop	{r4, pc}
	...

000d7a08 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7a08:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d7a0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7a0e:	4604      	mov	r4, r0
   d7a10:	4608      	mov	r0, r1
   d7a12:	2100      	movs	r1, #0
   d7a14:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d7a18:	4b04      	ldr	r3, [pc, #16]	; (d7a2c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d7a1a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d7a1c:	2301      	movs	r3, #1
  _serial = serial;
   d7a1e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d7a20:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d7a22:	4611      	mov	r1, r2
   d7a24:	f7fe f968 	bl	d5cf8 <HAL_USB_USART_Init>
}
   d7a28:	4620      	mov	r0, r4
   d7a2a:	bd10      	pop	{r4, pc}
   d7a2c:	000db4cc 	.word	0x000db4cc

000d7a30 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d7a30:	7c00      	ldrb	r0, [r0, #16]
   d7a32:	2200      	movs	r2, #0
   d7a34:	f7fe b968 	b.w	d5d08 <HAL_USB_USART_Begin>

000d7a38 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7a38:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d7a3a:	2214      	movs	r2, #20
{
   d7a3c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d7a3e:	2100      	movs	r1, #0
   d7a40:	f001 fbd0 	bl	d91e4 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d7a44:	4620      	mov	r0, r4
   d7a46:	bd10      	pop	{r4, pc}

000d7a48 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d7a48:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7a4a:	4c10      	ldr	r4, [pc, #64]	; (d7a8c <_Z16_fetch_usbserialv+0x44>)
{
   d7a4c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d7a4e:	a803      	add	r0, sp, #12
   d7a50:	f7ff fff2 	bl	d7a38 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7a54:	7821      	ldrb	r1, [r4, #0]
   d7a56:	f3bf 8f5b 	dmb	ish
   d7a5a:	f011 0101 	ands.w	r1, r1, #1
   d7a5e:	d111      	bne.n	d7a84 <_Z16_fetch_usbserialv+0x3c>
   d7a60:	4620      	mov	r0, r4
   d7a62:	9101      	str	r1, [sp, #4]
   d7a64:	f7fc fb1d 	bl	d40a2 <__cxa_guard_acquire>
   d7a68:	9901      	ldr	r1, [sp, #4]
   d7a6a:	b158      	cbz	r0, d7a84 <_Z16_fetch_usbserialv+0x3c>
   d7a6c:	aa03      	add	r2, sp, #12
   d7a6e:	4808      	ldr	r0, [pc, #32]	; (d7a90 <_Z16_fetch_usbserialv+0x48>)
   d7a70:	f7ff ffca 	bl	d7a08 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d7a74:	4620      	mov	r0, r4
   d7a76:	f7fc fb19 	bl	d40ac <__cxa_guard_release>
   d7a7a:	4a06      	ldr	r2, [pc, #24]	; (d7a94 <_Z16_fetch_usbserialv+0x4c>)
   d7a7c:	4906      	ldr	r1, [pc, #24]	; (d7a98 <_Z16_fetch_usbserialv+0x50>)
   d7a7e:	4804      	ldr	r0, [pc, #16]	; (d7a90 <_Z16_fetch_usbserialv+0x48>)
   d7a80:	f000 fd3a 	bl	d84f8 <__aeabi_atexit>
	return _usbserial;
}
   d7a84:	4802      	ldr	r0, [pc, #8]	; (d7a90 <_Z16_fetch_usbserialv+0x48>)
   d7a86:	b008      	add	sp, #32
   d7a88:	bd10      	pop	{r4, pc}
   d7a8a:	bf00      	nop
   d7a8c:	2003e68c 	.word	0x2003e68c
   d7a90:	2003e690 	.word	0x2003e690
   d7a94:	200355c4 	.word	0x200355c4
   d7a98:	000d7991 	.word	0x000d7991

000d7a9c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d7a9c:	4770      	bx	lr

000d7a9e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7a9e:	7441      	strb	r1, [r0, #17]
}
   d7aa0:	4770      	bx	lr

000d7aa2 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d7aa2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d7aa4:	7c00      	ldrb	r0, [r0, #16]
   d7aa6:	f7fe f847 	bl	d5b38 <hal_usart_available_data_for_write>
}
   d7aaa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7aae:	bd08      	pop	{r3, pc}

000d7ab0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d7ab0:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d7ab2:	7c00      	ldrb	r0, [r0, #16]
   d7ab4:	f7fe f818 	bl	d5ae8 <hal_usart_available>
}
   d7ab8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7abc:	bd08      	pop	{r3, pc}

000d7abe <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d7abe:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d7ac0:	7c00      	ldrb	r0, [r0, #16]
   d7ac2:	f7fe f821 	bl	d5b08 <hal_usart_peek>
}
   d7ac6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7aca:	bd08      	pop	{r3, pc}

000d7acc <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d7acc:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d7ace:	7c00      	ldrb	r0, [r0, #16]
   d7ad0:	f7fe f812 	bl	d5af8 <hal_usart_read>
}
   d7ad4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7ad8:	bd08      	pop	{r3, pc}

000d7ada <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d7ada:	7c00      	ldrb	r0, [r0, #16]
   d7adc:	f7fe b81c 	b.w	d5b18 <hal_usart_flush>

000d7ae0 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d7ae0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d7ae2:	7c45      	ldrb	r5, [r0, #17]
{
   d7ae4:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d7ae6:	b12d      	cbz	r5, d7af4 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d7ae8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d7aea:	b003      	add	sp, #12
   d7aec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d7af0:	f7fd bff2 	b.w	d5ad8 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d7af4:	7c00      	ldrb	r0, [r0, #16]
   d7af6:	9101      	str	r1, [sp, #4]
   d7af8:	f7fe f81e 	bl	d5b38 <hal_usart_available_data_for_write>
   d7afc:	2800      	cmp	r0, #0
   d7afe:	9901      	ldr	r1, [sp, #4]
   d7b00:	dcf2      	bgt.n	d7ae8 <_ZN11USARTSerial5writeEh+0x8>
}
   d7b02:	4628      	mov	r0, r5
   d7b04:	b003      	add	sp, #12
   d7b06:	bd30      	pop	{r4, r5, pc}

000d7b08 <_ZN11USARTSerialD0Ev>:
   d7b08:	b510      	push	{r4, lr}
   d7b0a:	2114      	movs	r1, #20
   d7b0c:	4604      	mov	r4, r0
   d7b0e:	f000 fcf8 	bl	d8502 <_ZdlPvj>
   d7b12:	4620      	mov	r0, r4
   d7b14:	bd10      	pop	{r4, pc}
	...

000d7b18 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d7b18:	b510      	push	{r4, lr}
   d7b1a:	f04f 0c00 	mov.w	ip, #0
   d7b1e:	4604      	mov	r4, r0
   d7b20:	4608      	mov	r0, r1
   d7b22:	4611      	mov	r1, r2
   d7b24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7b28:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d7b2c:	4a04      	ldr	r2, [pc, #16]	; (d7b40 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d7b2e:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d7b30:	2201      	movs	r2, #1
  _serial = serial;
   d7b32:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d7b34:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d7b36:	461a      	mov	r2, r3
   d7b38:	f7fd ffc6 	bl	d5ac8 <hal_usart_init>
}
   d7b3c:	4620      	mov	r0, r4
   d7b3e:	bd10      	pop	{r4, pc}
   d7b40:	000db4fc 	.word	0x000db4fc

000d7b44 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d7b44:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d7b46:	4c0e      	ldr	r4, [pc, #56]	; (d7b80 <_Z22__fetch_global_Serial1v+0x3c>)
   d7b48:	7821      	ldrb	r1, [r4, #0]
   d7b4a:	f3bf 8f5b 	dmb	ish
   d7b4e:	f011 0101 	ands.w	r1, r1, #1
   d7b52:	d112      	bne.n	d7b7a <_Z22__fetch_global_Serial1v+0x36>
   d7b54:	4620      	mov	r0, r4
   d7b56:	9101      	str	r1, [sp, #4]
   d7b58:	f7fc faa3 	bl	d40a2 <__cxa_guard_acquire>
   d7b5c:	9901      	ldr	r1, [sp, #4]
   d7b5e:	b160      	cbz	r0, d7b7a <_Z22__fetch_global_Serial1v+0x36>
   d7b60:	4a08      	ldr	r2, [pc, #32]	; (d7b84 <_Z22__fetch_global_Serial1v+0x40>)
   d7b62:	4b09      	ldr	r3, [pc, #36]	; (d7b88 <_Z22__fetch_global_Serial1v+0x44>)
   d7b64:	4809      	ldr	r0, [pc, #36]	; (d7b8c <_Z22__fetch_global_Serial1v+0x48>)
   d7b66:	f7ff ffd7 	bl	d7b18 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d7b6a:	4620      	mov	r0, r4
   d7b6c:	f7fc fa9e 	bl	d40ac <__cxa_guard_release>
   d7b70:	4a07      	ldr	r2, [pc, #28]	; (d7b90 <_Z22__fetch_global_Serial1v+0x4c>)
   d7b72:	4908      	ldr	r1, [pc, #32]	; (d7b94 <_Z22__fetch_global_Serial1v+0x50>)
   d7b74:	4805      	ldr	r0, [pc, #20]	; (d7b8c <_Z22__fetch_global_Serial1v+0x48>)
   d7b76:	f000 fcbf 	bl	d84f8 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d7b7a:	4804      	ldr	r0, [pc, #16]	; (d7b8c <_Z22__fetch_global_Serial1v+0x48>)
   d7b7c:	b002      	add	sp, #8
   d7b7e:	bd10      	pop	{r4, pc}
   d7b80:	2003e6a4 	.word	0x2003e6a4
   d7b84:	2003e6a8 	.word	0x2003e6a8
   d7b88:	2003e72c 	.word	0x2003e72c
   d7b8c:	2003e7b0 	.word	0x2003e7b0
   d7b90:	200355c4 	.word	0x200355c4
   d7b94:	000d7a9d 	.word	0x000d7a9d

000d7b98 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d7b98:	4770      	bx	lr

000d7b9a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d7b9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7b9c:	4606      	mov	r6, r0
   d7b9e:	4615      	mov	r5, r2
   d7ba0:	460c      	mov	r4, r1
   d7ba2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d7ba4:	42bc      	cmp	r4, r7
   d7ba6:	d006      	beq.n	d7bb6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d7ba8:	6833      	ldr	r3, [r6, #0]
   d7baa:	f814 1b01 	ldrb.w	r1, [r4], #1
   d7bae:	689b      	ldr	r3, [r3, #8]
   d7bb0:	4630      	mov	r0, r6
   d7bb2:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d7bb4:	e7f6      	b.n	d7ba4 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d7bb6:	4628      	mov	r0, r5
   d7bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7bba <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d7bba:	7c00      	ldrb	r0, [r0, #16]
   d7bbc:	2200      	movs	r2, #0
   d7bbe:	f7fd bfdb 	b.w	d5b78 <hal_i2c_write>

000d7bc2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d7bc2:	7c00      	ldrb	r0, [r0, #16]
   d7bc4:	2100      	movs	r1, #0
   d7bc6:	f7fd bfdf 	b.w	d5b88 <hal_i2c_available>

000d7bca <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d7bca:	7c00      	ldrb	r0, [r0, #16]
   d7bcc:	2100      	movs	r1, #0
   d7bce:	f7fd bfe3 	b.w	d5b98 <hal_i2c_read>

000d7bd2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d7bd2:	7c00      	ldrb	r0, [r0, #16]
   d7bd4:	2100      	movs	r1, #0
   d7bd6:	f7fd bfe7 	b.w	d5ba8 <hal_i2c_peek>

000d7bda <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d7bda:	7c00      	ldrb	r0, [r0, #16]
   d7bdc:	2100      	movs	r1, #0
   d7bde:	f7fd bfeb 	b.w	d5bb8 <hal_i2c_flush>

000d7be2 <_ZN7TwoWireD0Ev>:
   d7be2:	b510      	push	{r4, lr}
   d7be4:	2114      	movs	r1, #20
   d7be6:	4604      	mov	r4, r0
   d7be8:	f000 fc8b 	bl	d8502 <_ZdlPvj>
   d7bec:	4620      	mov	r0, r4
   d7bee:	bd10      	pop	{r4, pc}

000d7bf0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d7bf0:	b510      	push	{r4, lr}
   d7bf2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7bf6:	4604      	mov	r4, r0
   d7bf8:	4608      	mov	r0, r1
   d7bfa:	2100      	movs	r1, #0
   d7bfc:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d7c00:	4b03      	ldr	r3, [pc, #12]	; (d7c10 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d7c02:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d7c04:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d7c06:	4611      	mov	r1, r2
   d7c08:	f7fd ffe6 	bl	d5bd8 <hal_i2c_init>
}
   d7c0c:	4620      	mov	r0, r4
   d7c0e:	bd10      	pop	{r4, pc}
   d7c10:	000db52c 	.word	0x000db52c

000d7c14 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d7c14:	2300      	movs	r3, #0
   d7c16:	7c00      	ldrb	r0, [r0, #16]
   d7c18:	461a      	mov	r2, r3
   d7c1a:	4619      	mov	r1, r3
   d7c1c:	f7fd bf94 	b.w	d5b48 <hal_i2c_begin>

000d7c20 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d7c20:	7c00      	ldrb	r0, [r0, #16]
   d7c22:	2200      	movs	r2, #0
   d7c24:	f7fd bf98 	b.w	d5b58 <hal_i2c_begin_transmission>

000d7c28 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d7c28:	b2c9      	uxtb	r1, r1
   d7c2a:	f7ff bff9 	b.w	d7c20 <_ZN7TwoWire17beginTransmissionEh>

000d7c2e <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d7c2e:	7c00      	ldrb	r0, [r0, #16]
   d7c30:	2200      	movs	r2, #0
   d7c32:	f7fd bf99 	b.w	d5b68 <hal_i2c_end_transmission>

000d7c36 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d7c36:	2101      	movs	r1, #1
   d7c38:	f7ff bff9 	b.w	d7c2e <_ZN7TwoWire15endTransmissionEh>

000d7c3c <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d7c3c:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d7c3e:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   d7c40:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d7c44:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d7c46:	2201      	movs	r2, #1
   d7c48:	f04f 33ff 	mov.w	r3, #4294967295
   d7c4c:	f10d 0107 	add.w	r1, sp, #7
   d7c50:	47a0      	blx	r4
}
   d7c52:	b002      	add	sp, #8
   d7c54:	bd10      	pop	{r4, pc}

000d7c56 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d7c56:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d7c58:	6803      	ldr	r3, [r0, #0]
   d7c5a:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d7c5c:	f04f 33ff 	mov.w	r3, #4294967295
   d7c60:	46a4      	mov	ip, r4
}
   d7c62:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d7c66:	4760      	bx	ip

000d7c68 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d7c68:	b513      	push	{r0, r1, r4, lr}
   d7c6a:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   d7c6c:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d7c6e:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   d7c72:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d7c74:	f10d 0107 	add.w	r1, sp, #7
   d7c78:	2201      	movs	r2, #1
   d7c7a:	47a0      	blx	r4
}
   d7c7c:	b002      	add	sp, #8
   d7c7e:	bd10      	pop	{r4, pc}

000d7c80 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   d7c80:	4770      	bx	lr

000d7c82 <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d7c82:	b538      	push	{r3, r4, r5, lr}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d7c84:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d7c86:	681a      	ldr	r2, [r3, #0]
   d7c88:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   d7c8a:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   d7c8c:	da10      	bge.n	d7cb0 <_ZN9TCPClient9connectedEv+0x2e>
   d7c8e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7c92:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7c96:	429a      	cmp	r2, r3
   d7c98:	d10a      	bne.n	d7cb0 <_ZN9TCPClient9connectedEv+0x2e>
    if (!rv) {
        rv = available();
   d7c9a:	6803      	ldr	r3, [r0, #0]
   d7c9c:	691b      	ldr	r3, [r3, #16]
   d7c9e:	4798      	blx	r3
        if (!rv) {
   d7ca0:	4604      	mov	r4, r0
   d7ca2:	b928      	cbnz	r0, d7cb0 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   d7ca4:	682b      	ldr	r3, [r5, #0]
   d7ca6:	4628      	mov	r0, r5
   d7ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7caa:	4798      	blx	r3
        rv = available();
   d7cac:	4620      	mov	r0, r4
        }
    }
    return rv;
}
   d7cae:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   d7cb0:	2001      	movs	r0, #1
   d7cb2:	e7fc      	b.n	d7cae <_ZN9TCPClient9connectedEv+0x2c>

000d7cb4 <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d7cb4:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   d7cb6:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   d7cb8:	43c0      	mvns	r0, r0
   d7cba:	0fc0      	lsrs	r0, r0, #31
   d7cbc:	4770      	bx	lr

000d7cbe <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d7cbe:	4770      	bx	lr

000d7cc0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d7cc0:	4b06      	ldr	r3, [pc, #24]	; (d7cdc <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d7cc2:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d7cc4:	b510      	push	{r4, lr}
   d7cc6:	f100 040c 	add.w	r4, r0, #12
	    ||
   d7cca:	d005      	beq.n	d7cd8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d7ccc:	4608      	mov	r0, r1
   d7cce:	f000 fc1f 	bl	d8510 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d7cd2:	2800      	cmp	r0, #0
	return nullptr;
   d7cd4:	bf08      	it	eq
   d7cd6:	2400      	moveq	r4, #0
      }
   d7cd8:	4620      	mov	r0, r4
   d7cda:	bd10      	pop	{r4, pc}
   d7cdc:	000db458 	.word	0x000db458

000d7ce0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d7ce0:	b510      	push	{r4, lr}
   d7ce2:	21ac      	movs	r1, #172	; 0xac
   d7ce4:	4604      	mov	r4, r0
   d7ce6:	f000 fc0c 	bl	d8502 <_ZdlPvj>
   d7cea:	4620      	mov	r0, r4
   d7cec:	bd10      	pop	{r4, pc}

000d7cee <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	::operator delete(__p);
   d7cee:	f7fc b9d6 	b.w	d409e <_ZdlPv>

000d7cf2 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d7cf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   d7cf6:	f04f 0800 	mov.w	r8, #0
   d7cfa:	b086      	sub	sp, #24
   d7cfc:	461d      	mov	r5, r3
   d7cfe:	f8c0 8004 	str.w	r8, [r0, #4]
   d7d02:	4604      	mov	r4, r0
   d7d04:	460e      	mov	r6, r1
   d7d06:	4617      	mov	r7, r2
    struct timeval tv = {};
   d7d08:	4641      	mov	r1, r8
   d7d0a:	2210      	movs	r2, #16
   d7d0c:	a802      	add	r0, sp, #8
   d7d0e:	f001 fa69 	bl	d91e4 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   d7d12:	1c6b      	adds	r3, r5, #1
   d7d14:	d009      	beq.n	d7d2a <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   d7d16:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d7d1a:	fbb5 f3f0 	udiv	r3, r5, r0
   d7d1e:	e9cd 3802 	strd	r3, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d7d22:	fb00 5313 	mls	r3, r0, r3, r5
   d7d26:	4358      	muls	r0, r3
   d7d28:	9004      	str	r0, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d7d2a:	6960      	ldr	r0, [r4, #20]
   d7d2c:	2310      	movs	r3, #16
   d7d2e:	9300      	str	r3, [sp, #0]
   d7d30:	6800      	ldr	r0, [r0, #0]
   d7d32:	ab02      	add	r3, sp, #8
   d7d34:	f241 0205 	movw	r2, #4101	; 0x1005
   d7d38:	f640 71ff 	movw	r1, #4095	; 0xfff
   d7d3c:	f7fd ff54 	bl	d5be8 <sock_setsockopt>
    if (ret < 0) {
   d7d40:	2800      	cmp	r0, #0
   d7d42:	da07      	bge.n	d7d54 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   d7d44:	f7fe f8dc 	bl	d5f00 <__errno>
   d7d48:	6803      	ldr	r3, [r0, #0]
   d7d4a:	6063      	str	r3, [r4, #4]
        return 0;
   d7d4c:	2000      	movs	r0, #0
}
   d7d4e:	b006      	add	sp, #24
   d7d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   d7d54:	6960      	ldr	r0, [r4, #20]
   d7d56:	2300      	movs	r3, #0
   d7d58:	6800      	ldr	r0, [r0, #0]
   d7d5a:	463a      	mov	r2, r7
   d7d5c:	4631      	mov	r1, r6
   d7d5e:	f7fd ff63 	bl	d5c28 <sock_send>
    if (ret < 0) {
   d7d62:	1e03      	subs	r3, r0, #0
   d7d64:	dbee      	blt.n	d7d44 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   d7d66:	4618      	mov	r0, r3
   d7d68:	e7f1      	b.n	d7d4e <_ZN9TCPClient5writeEPKhjm+0x5c>
	...

000d7d6c <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d7d6c:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   d7d6e:	6984      	ldr	r4, [r0, #24]
   d7d70:	4b0a      	ldr	r3, [pc, #40]	; (d7d9c <_ZN9TCPClientD1Ev+0x30>)
   d7d72:	6003      	str	r3, [r0, #0]
   d7d74:	4605      	mov	r5, r0
   d7d76:	b17c      	cbz	r4, d7d98 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   d7d78:	6863      	ldr	r3, [r4, #4]
   d7d7a:	3b01      	subs	r3, #1
   d7d7c:	6063      	str	r3, [r4, #4]
   d7d7e:	b95b      	cbnz	r3, d7d98 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   d7d80:	6823      	ldr	r3, [r4, #0]
   d7d82:	4620      	mov	r0, r4
   d7d84:	689b      	ldr	r3, [r3, #8]
   d7d86:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d7d88:	68a3      	ldr	r3, [r4, #8]
   d7d8a:	3b01      	subs	r3, #1
   d7d8c:	60a3      	str	r3, [r4, #8]
   d7d8e:	b91b      	cbnz	r3, d7d98 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d7d90:	6823      	ldr	r3, [r4, #0]
   d7d92:	4620      	mov	r0, r4
   d7d94:	68db      	ldr	r3, [r3, #12]
   d7d96:	4798      	blx	r3
   d7d98:	4628      	mov	r0, r5
   d7d9a:	bd38      	pop	{r3, r4, r5, pc}
   d7d9c:	000db588 	.word	0x000db588

000d7da0 <_ZN9TCPClientD0Ev>:
   d7da0:	b510      	push	{r4, lr}
   d7da2:	4604      	mov	r4, r0
   d7da4:	f7ff ffe2 	bl	d7d6c <_ZN9TCPClientD1Ev>
   d7da8:	4620      	mov	r0, r4
   d7daa:	211c      	movs	r1, #28
   d7dac:	f000 fba9 	bl	d8502 <_ZdlPvj>
   d7db0:	4620      	mov	r0, r4
   d7db2:	bd10      	pop	{r4, pc}

000d7db4 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   d7db4:	b570      	push	{r4, r5, r6, lr}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d7db6:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   d7db8:	4b05      	ldr	r3, [pc, #20]	; (d7dd0 <_ZN9TCPClient8remoteIPEv+0x1c>)
   d7dba:	4604      	mov	r4, r0
   d7dbc:	358c      	adds	r5, #140	; 0x8c
   d7dbe:	f844 3b04 	str.w	r3, [r4], #4
   d7dc2:	4606      	mov	r6, r0
   d7dc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7dc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7dc8:	682b      	ldr	r3, [r5, #0]
   d7dca:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d7dcc:	4630      	mov	r0, r6
   d7dce:	bd70      	pop	{r4, r5, r6, pc}
   d7dd0:	000db4b8 	.word	0x000db4b8

000d7dd4 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   d7dd4:	b510      	push	{r4, lr}
   d7dd6:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d7dd8:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7ddc:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7de0:	429a      	cmp	r2, r3
int TCPClient::peek() {
   d7de2:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d7de4:	d005      	beq.n	d7df2 <_ZN9TCPClient4peekEv+0x1e>
   d7de6:	6963      	ldr	r3, [r4, #20]
   d7de8:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d7dec:	4413      	add	r3, r2
   d7dee:	7918      	ldrb	r0, [r3, #4]
}
   d7df0:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d7df2:	6803      	ldr	r3, [r0, #0]
   d7df4:	691b      	ldr	r3, [r3, #16]
   d7df6:	4798      	blx	r3
   d7df8:	2800      	cmp	r0, #0
   d7dfa:	d1f4      	bne.n	d7de6 <_ZN9TCPClient4peekEv+0x12>
   d7dfc:	f04f 30ff 	mov.w	r0, #4294967295
   d7e00:	e7f6      	b.n	d7df0 <_ZN9TCPClient4peekEv+0x1c>

000d7e02 <_ZN9TCPClient4readEv>:
int TCPClient::read() {
   d7e02:	b510      	push	{r4, lr}
   d7e04:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d7e06:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7e0a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7e0e:	429a      	cmp	r2, r3
int TCPClient::read() {
   d7e10:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d7e12:	d008      	beq.n	d7e26 <_ZN9TCPClient4readEv+0x24>
   d7e14:	6963      	ldr	r3, [r4, #20]
   d7e16:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d7e1a:	1c51      	adds	r1, r2, #1
   d7e1c:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   d7e20:	4413      	add	r3, r2
   d7e22:	7918      	ldrb	r0, [r3, #4]
}
   d7e24:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d7e26:	6803      	ldr	r3, [r0, #0]
   d7e28:	691b      	ldr	r3, [r3, #16]
   d7e2a:	4798      	blx	r3
   d7e2c:	2800      	cmp	r0, #0
   d7e2e:	d1f1      	bne.n	d7e14 <_ZN9TCPClient4readEv+0x12>
   d7e30:	f04f 30ff 	mov.w	r0, #4294967295
   d7e34:	e7f6      	b.n	d7e24 <_ZN9TCPClient4readEv+0x22>

000d7e36 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   d7e36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7e38:	6943      	ldr	r3, [r0, #20]
   d7e3a:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   d7e3c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7e40:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7e44:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   d7e46:	4605      	mov	r5, r0
   d7e48:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   d7e4a:	d016      	beq.n	d7e7a <_ZN9TCPClient4readEPhj+0x44>
   d7e4c:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   d7e4e:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d7e52:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d7e56:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d7e58:	42bc      	cmp	r4, r7
   d7e5a:	bf28      	it	cs
   d7e5c:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d7e5e:	3304      	adds	r3, #4
   d7e60:	4622      	mov	r2, r4
   d7e62:	4419      	add	r1, r3
   d7e64:	4630      	mov	r0, r6
   d7e66:	f001 f995 	bl	d9194 <memcpy>
   d7e6a:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d7e6c:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d7e70:	4423      	add	r3, r4
   d7e72:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   d7e76:	4620      	mov	r0, r4
   d7e78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   d7e7a:	6803      	ldr	r3, [r0, #0]
   d7e7c:	691b      	ldr	r3, [r3, #16]
   d7e7e:	4798      	blx	r3
   d7e80:	2800      	cmp	r0, #0
   d7e82:	d1e3      	bne.n	d7e4c <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   d7e84:	f04f 34ff 	mov.w	r4, #4294967295
   d7e88:	e7f5      	b.n	d7e76 <_ZN9TCPClient4readEPhj+0x40>

000d7e8a <_ZN9TCPClient12flush_bufferEv>:
   d7e8a:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d7e8c:	2300      	movs	r3, #0
   d7e8e:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d7e92:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d7e94:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   d7e98:	4770      	bx	lr

000d7e9a <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d7e9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7e9e:	461f      	mov	r7, r3
    stop();
   d7ea0:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d7ea2:	460c      	mov	r4, r1
    stop();
   d7ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d7ea6:	b08a      	sub	sp, #40	; 0x28
   d7ea8:	4605      	mov	r5, r0
   d7eaa:	4616      	mov	r6, r2
    stop();
   d7eac:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d7eae:	7d23      	ldrb	r3, [r4, #20]
   d7eb0:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d7eb4:	2b04      	cmp	r3, #4
   d7eb6:	bf0c      	ite	eq
   d7eb8:	2002      	moveq	r0, #2
   d7eba:	200a      	movne	r0, #10
   d7ebc:	2206      	movs	r2, #6
   d7ebe:	2101      	movs	r1, #1
   d7ec0:	f7fd feba 	bl	d5c38 <sock_socket>
   d7ec4:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d7ec8:	696b      	ldr	r3, [r5, #20]
   d7eca:	681b      	ldr	r3, [r3, #0]
   d7ecc:	2b00      	cmp	r3, #0
   d7ece:	da08      	bge.n	d7ee2 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   d7ed0:	682b      	ldr	r3, [r5, #0]
   d7ed2:	4628      	mov	r0, r5
   d7ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d7ed6:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   d7ed8:	4798      	blx	r3
}
   d7eda:	4620      	mov	r0, r4
   d7edc:	b00a      	add	sp, #40	; 0x28
   d7ede:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   d7ee2:	4628      	mov	r0, r5
   d7ee4:	f7ff ffd1 	bl	d7e8a <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   d7ee8:	b1b7      	cbz	r7, d7f18 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   d7eea:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d7eec:	a903      	add	r1, sp, #12
   d7eee:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   d7ef0:	9303      	str	r3, [sp, #12]
   d7ef2:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d7ef6:	f7fd fd15 	bl	d5924 <if_index_to_name>
   d7efa:	2800      	cmp	r0, #0
   d7efc:	d1e8      	bne.n	d7ed0 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d7efe:	6968      	ldr	r0, [r5, #20]
   d7f00:	2306      	movs	r3, #6
   d7f02:	9300      	str	r3, [sp, #0]
   d7f04:	6800      	ldr	r0, [r0, #0]
   d7f06:	ab03      	add	r3, sp, #12
   d7f08:	f241 020b 	movw	r2, #4107	; 0x100b
   d7f0c:	f640 71ff 	movw	r1, #4095	; 0xfff
   d7f10:	f7fd fe6a 	bl	d5be8 <sock_setsockopt>
   d7f14:	2800      	cmp	r0, #0
   d7f16:	d1db      	bne.n	d7ed0 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   d7f18:	221c      	movs	r2, #28
   d7f1a:	2100      	movs	r1, #0
   d7f1c:	a803      	add	r0, sp, #12
   d7f1e:	f001 f961 	bl	d91e4 <memset>
    if (ip.version() == 4) {
   d7f22:	7d23      	ldrb	r3, [r4, #20]
   d7f24:	2b04      	cmp	r3, #4
   d7f26:	d11d      	bne.n	d7f64 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   d7f28:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   d7f2c:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   d7f2e:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   d7f32:	f7fd fdc1 	bl	d5ab8 <inet_htons>
   d7f36:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d7f3a:	6860      	ldr	r0, [r4, #4]
   d7f3c:	f7fd fdb4 	bl	d5aa8 <inet_htonl>
   d7f40:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d7f42:	696b      	ldr	r3, [r5, #20]
   d7f44:	221c      	movs	r2, #28
   d7f46:	6818      	ldr	r0, [r3, #0]
   d7f48:	a903      	add	r1, sp, #12
   d7f4a:	f7fd fe5d 	bl	d5c08 <sock_connect>
   d7f4e:	2800      	cmp	r0, #0
   d7f50:	d1be      	bne.n	d7ed0 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   d7f52:	3404      	adds	r4, #4
   d7f54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d7f56:	696d      	ldr	r5, [r5, #20]
   d7f58:	358c      	adds	r5, #140	; 0x8c
   d7f5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d7f5c:	6823      	ldr	r3, [r4, #0]
   d7f5e:	702b      	strb	r3, [r5, #0]
    return 1; // success
   d7f60:	2401      	movs	r4, #1
   d7f62:	e7ba      	b.n	d7eda <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   d7f64:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   d7f68:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   d7f6a:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   d7f6e:	f7fd fda3 	bl	d5ab8 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d7f72:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   d7f74:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d7f78:	1d23      	adds	r3, r4, #4
   d7f7a:	f104 0714 	add.w	r7, r4, #20
   d7f7e:	6818      	ldr	r0, [r3, #0]
   d7f80:	6859      	ldr	r1, [r3, #4]
   d7f82:	4632      	mov	r2, r6
   d7f84:	c203      	stmia	r2!, {r0, r1}
   d7f86:	3308      	adds	r3, #8
   d7f88:	42bb      	cmp	r3, r7
   d7f8a:	4616      	mov	r6, r2
   d7f8c:	d1f7      	bne.n	d7f7e <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   d7f8e:	e7d8      	b.n	d7f42 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>

000d7f90 <_ZN9TCPClient9availableEv>:
{
   d7f90:	b530      	push	{r4, r5, lr}
   d7f92:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   d7f94:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   d7f98:	b08b      	sub	sp, #44	; 0x2c
   d7f9a:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   d7f9c:	b12b      	cbz	r3, d7faa <_ZN9TCPClient9availableEv+0x1a>
   d7f9e:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d7fa2:	429a      	cmp	r2, r3
   d7fa4:	d101      	bne.n	d7faa <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   d7fa6:	f7ff ff70 	bl	d7e8a <_ZN9TCPClient12flush_bufferEv>
   d7faa:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   d7fac:	6808      	ldr	r0, [r1, #0]
   d7fae:	2800      	cmp	r0, #0
   d7fb0:	db18      	blt.n	d7fe4 <_ZN9TCPClient9availableEv+0x54>
   d7fb2:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
        if (d_->total < arraySize(d_->buffer)) {
   d7fb6:	2d7f      	cmp	r5, #127	; 0x7f
   d7fb8:	d814      	bhi.n	d7fe4 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d7fba:	3104      	adds	r1, #4
   d7fbc:	2308      	movs	r3, #8
   d7fbe:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d7fc2:	4429      	add	r1, r5
   d7fc4:	f7fd fe28 	bl	d5c18 <sock_recv>
            if (ret > 0) {
   d7fc8:	2800      	cmp	r0, #0
   d7fca:	dd13      	ble.n	d7ff4 <_ZN9TCPClient9availableEv+0x64>
   d7fcc:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d7fce:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7fd2:	b90a      	cbnz	r2, d7fd8 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   d7fd4:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d7fd8:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   d7fda:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7fde:	4410      	add	r0, r2
   d7fe0:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   d7fe4:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   d7fe6:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   d7fea:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   d7fee:	1ac0      	subs	r0, r0, r3
   d7ff0:	b00b      	add	sp, #44	; 0x2c
   d7ff2:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d7ff4:	f7fd ff84 	bl	d5f00 <__errno>
   d7ff8:	6803      	ldr	r3, [r0, #0]
   d7ffa:	2b0b      	cmp	r3, #11
   d7ffc:	d0f2      	beq.n	d7fe4 <_ZN9TCPClient9availableEv+0x54>
   d7ffe:	f7fd ff7f 	bl	d5f00 <__errno>
   d8002:	6803      	ldr	r3, [r0, #0]
   d8004:	2b0b      	cmp	r3, #11
   d8006:	d0ed      	beq.n	d7fe4 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   d8008:	2320      	movs	r3, #32
   d800a:	2500      	movs	r5, #0
   d800c:	e9cd 3502 	strd	r3, r5, [sp, #8]
   d8010:	f7fd ff76 	bl	d5f00 <__errno>
   d8014:	6803      	ldr	r3, [r0, #0]
   d8016:	9301      	str	r3, [sp, #4]
   d8018:	4b08      	ldr	r3, [pc, #32]	; (d803c <_ZN9TCPClient9availableEv+0xac>)
   d801a:	4909      	ldr	r1, [pc, #36]	; (d8040 <_ZN9TCPClient9availableEv+0xb0>)
   d801c:	9300      	str	r3, [sp, #0]
   d801e:	aa02      	add	r2, sp, #8
   d8020:	462b      	mov	r3, r5
   d8022:	2032      	movs	r0, #50	; 0x32
   d8024:	f7fd fea8 	bl	d5d78 <log_message>
                    sock_close(d_->sock);
   d8028:	6963      	ldr	r3, [r4, #20]
   d802a:	6818      	ldr	r0, [r3, #0]
   d802c:	f7fd fde4 	bl	d5bf8 <sock_close>
   d8030:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d8032:	f04f 32ff 	mov.w	r2, #4294967295
   d8036:	601a      	str	r2, [r3, #0]
   d8038:	e7d4      	b.n	d7fe4 <_ZN9TCPClient9availableEv+0x54>
   d803a:	bf00      	nop
   d803c:	000db553 	.word	0x000db553
   d8040:	000db54c 	.word	0x000db54c

000d8044 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   d8044:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d8046:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   d8048:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d804a:	6818      	ldr	r0, [r3, #0]
   d804c:	2800      	cmp	r0, #0
   d804e:	db01      	blt.n	d8054 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d8050:	f7fd fdd2 	bl	d5bf8 <sock_close>
   d8054:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   d8056:	f04f 32ff 	mov.w	r2, #4294967295
   d805a:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   d805c:	6960      	ldr	r0, [r4, #20]
   d805e:	2211      	movs	r2, #17
   d8060:	2100      	movs	r1, #0
   d8062:	308c      	adds	r0, #140	; 0x8c
   d8064:	f001 f8be 	bl	d91e4 <memset>
    flush_buffer();
   d8068:	4620      	mov	r0, r4
}
   d806a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   d806e:	f7ff bf0c 	b.w	d7e8a <_ZN9TCPClient12flush_bufferEv>

000d8072 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   d8072:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d8074:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   d8076:	4604      	mov	r4, r0
          total(0) {
   d8078:	6001      	str	r1, [r0, #0]
   d807a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   d807e:	3088      	adds	r0, #136	; 0x88
   d8080:	f7ff fc32 	bl	d78e8 <_ZN9IPAddressC1Ev>
}
   d8084:	4620      	mov	r0, r4
   d8086:	bd10      	pop	{r4, pc}

000d8088 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   d8088:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d808a:	2300      	movs	r3, #0
   d808c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d8090:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   d8094:	4a0e      	ldr	r2, [pc, #56]	; (d80d0 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   d8096:	6103      	str	r3, [r0, #16]
   d8098:	6002      	str	r2, [r0, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d809a:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   d809c:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d809e:	20ac      	movs	r0, #172	; 0xac
   d80a0:	9101      	str	r1, [sp, #4]
   d80a2:	f7fb fff8 	bl	d4096 <_Znwj>
	  auto __pi = ::new (__mem)
   d80a6:	1e05      	subs	r5, r0, #0
   d80a8:	f105 060c 	add.w	r6, r5, #12
   d80ac:	d008      	beq.n	d80c0 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   d80ae:	2301      	movs	r3, #1
   d80b0:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   d80b4:	4b07      	ldr	r3, [pc, #28]	; (d80d4 <_ZN9TCPClientC1Ei+0x4c>)
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d80b6:	9901      	ldr	r1, [sp, #4]
   d80b8:	602b      	str	r3, [r5, #0]
   d80ba:	4630      	mov	r0, r6
   d80bc:	f7ff ffd9 	bl	d8072 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   d80c0:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   d80c2:	e9c4 6505 	strd	r6, r5, [r4, #20]
   d80c6:	f7ff fee0 	bl	d7e8a <_ZN9TCPClient12flush_bufferEv>
}
   d80ca:	b002      	add	sp, #8
   d80cc:	bd70      	pop	{r4, r5, r6, pc}
   d80ce:	bf00      	nop
   d80d0:	000db588 	.word	0x000db588
   d80d4:	000db56c 	.word	0x000db56c

000d80d8 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   d80d8:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d80da:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   d80de:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d80e0:	f7ff ffd2 	bl	d8088 <_ZN9TCPClientC1Ei>
}
   d80e4:	4620      	mov	r0, r4
   d80e6:	bd10      	pop	{r4, pc}

000d80e8 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   d80e8:	b510      	push	{r4, lr}
   d80ea:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d80ec:	6800      	ldr	r0, [r0, #0]
   d80ee:	2800      	cmp	r0, #0
   d80f0:	db01      	blt.n	d80f6 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d80f2:	f7fd fd81 	bl	d5bf8 <sock_close>
    }
}
   d80f6:	4620      	mov	r0, r4
   d80f8:	bd10      	pop	{r4, pc}

000d80fa <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
   d80fa:	300c      	adds	r0, #12
   d80fc:	f7ff bff4 	b.w	d80e8 <_ZN9TCPClient4DataD1Ev>

000d8100 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d8100:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d8104:	4698      	mov	r8, r3
    stop();
   d8106:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d8108:	b093      	sub	sp, #76	; 0x4c
   d810a:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   d810c:	2400      	movs	r4, #0
    stop();
   d810e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d8110:	4606      	mov	r6, r0
   d8112:	4617      	mov	r7, r2
    stop();
   d8114:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d8116:	4628      	mov	r0, r5
   d8118:	466b      	mov	r3, sp
   d811a:	4622      	mov	r2, r4
   d811c:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   d811e:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d8120:	f7fd fbe8 	bl	d58f4 <netdb_getaddrinfo>
   d8124:	4605      	mov	r5, r0
   d8126:	2800      	cmp	r0, #0
   d8128:	d163      	bne.n	d81f2 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   d812a:	9b00      	ldr	r3, [sp, #0]
   d812c:	2b00      	cmp	r3, #0
   d812e:	d04b      	beq.n	d81c8 <_ZN9TCPClient7connectEPKctm+0xc8>
   d8130:	695b      	ldr	r3, [r3, #20]
   d8132:	2b00      	cmp	r3, #0
   d8134:	d048      	beq.n	d81c8 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   d8136:	a806      	add	r0, sp, #24
   d8138:	f7ff fbd6 	bl	d78e8 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d813c:	9b00      	ldr	r3, [sp, #0]
   d813e:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d8140:	7863      	ldrb	r3, [r4, #1]
   d8142:	2b02      	cmp	r3, #2
   d8144:	d104      	bne.n	d8150 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d8146:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d8148:	a806      	add	r0, sp, #24
   d814a:	f7fe f81f 	bl	d618c <_ZN9IPAddressaSIPKhEERS_T_>
        }
        if (port) {
   d814e:	e026      	b.n	d819e <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   d8150:	2b0a      	cmp	r3, #10
   d8152:	d124      	bne.n	d819e <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   d8154:	2211      	movs	r2, #17
   d8156:	4629      	mov	r1, r5
   d8158:	a801      	add	r0, sp, #4
   d815a:	f001 f843 	bl	d91e4 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d815e:	68a3      	ldr	r3, [r4, #8]
   d8160:	2b00      	cmp	r3, #0
   d8162:	d038      	beq.n	d81d6 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d8164:	f104 0308 	add.w	r3, r4, #8
   d8168:	f10d 0c04 	add.w	ip, sp, #4
   d816c:	3418      	adds	r4, #24
   d816e:	6818      	ldr	r0, [r3, #0]
   d8170:	6859      	ldr	r1, [r3, #4]
   d8172:	4662      	mov	r2, ip
   d8174:	c203      	stmia	r2!, {r0, r1}
   d8176:	3308      	adds	r3, #8
   d8178:	42a3      	cmp	r3, r4
   d817a:	4694      	mov	ip, r2
   d817c:	d1f7      	bne.n	d816e <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   d817e:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d8180:	a901      	add	r1, sp, #4
   d8182:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   d8184:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d8188:	f7ff fbbc 	bl	d7904 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
class IPAddress : public Printable {
   d818c:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   d8190:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d8194:	ac07      	add	r4, sp, #28
   d8196:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8198:	f8dc 3000 	ldr.w	r3, [ip]
   d819c:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   d819e:	a806      	add	r0, sp, #24
   d81a0:	f7ff fbc2 	bl	d7928 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d81a4:	b180      	cbz	r0, d81c8 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   d81a6:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   d81a8:	ad07      	add	r5, sp, #28
   d81aa:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d81ae:	4b12      	ldr	r3, [pc, #72]	; (d81f8 <_ZN9TCPClient7connectEPKctm+0xf8>)
   d81b0:	930c      	str	r3, [sp, #48]	; 0x30
   d81b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d81b4:	ac0d      	add	r4, sp, #52	; 0x34
   d81b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d81b8:	682b      	ldr	r3, [r5, #0]
   d81ba:	7023      	strb	r3, [r4, #0]
   d81bc:	463a      	mov	r2, r7
   d81be:	4643      	mov	r3, r8
   d81c0:	a90c      	add	r1, sp, #48	; 0x30
   d81c2:	4630      	mov	r0, r6
   d81c4:	47c8      	blx	r9
   d81c6:	4605      	mov	r5, r0
    SCOPE_GUARD({
   d81c8:	9800      	ldr	r0, [sp, #0]
   d81ca:	f7fd fb8b 	bl	d58e4 <netdb_freeaddrinfo>
}
   d81ce:	4628      	mov	r0, r5
   d81d0:	b013      	add	sp, #76	; 0x4c
   d81d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d81d6:	68e3      	ldr	r3, [r4, #12]
   d81d8:	2b00      	cmp	r3, #0
   d81da:	d1c3      	bne.n	d8164 <_ZN9TCPClient7connectEPKctm+0x64>
   d81dc:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d81e0:	f8d4 9010 	ldr.w	r9, [r4, #16]
   d81e4:	f7fd fc60 	bl	d5aa8 <inet_htonl>
   d81e8:	4581      	cmp	r9, r0
   d81ea:	d1bb      	bne.n	d8164 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   d81ec:	f104 0114 	add.w	r1, r4, #20
   d81f0:	e7aa      	b.n	d8148 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d81f2:	4625      	mov	r5, r4
   d81f4:	e7e8      	b.n	d81c8 <_ZN9TCPClient7connectEPKctm+0xc8>
   d81f6:	bf00      	nop
   d81f8:	000db4b8 	.word	0x000db4b8

000d81fc <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d81fc:	2200      	movs	r2, #0
   d81fe:	6840      	ldr	r0, [r0, #4]
   d8200:	4611      	mov	r1, r2
   d8202:	f7fd bdfd 	b.w	d5e00 <network_ready>

000d8206 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d8206:	2200      	movs	r2, #0
   d8208:	6840      	ldr	r0, [r0, #4]
   d820a:	4611      	mov	r1, r2
   d820c:	f7fd be18 	b.w	d5e40 <network_listening>

000d8210 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d8210:	2200      	movs	r2, #0
   d8212:	6840      	ldr	r0, [r0, #4]
   d8214:	4611      	mov	r1, r2
   d8216:	f7fd be23 	b.w	d5e60 <network_get_listen_timeout>

000d821a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d821a:	6840      	ldr	r0, [r0, #4]
   d821c:	2200      	movs	r2, #0
   d821e:	f7fd be17 	b.w	d5e50 <network_set_listen_timeout>

000d8222 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d8222:	6840      	ldr	r0, [r0, #4]
   d8224:	2200      	movs	r2, #0
   d8226:	f081 0101 	eor.w	r1, r1, #1
   d822a:	f7fd be01 	b.w	d5e30 <network_listen>

000d822e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d822e:	2300      	movs	r3, #0
   d8230:	6840      	ldr	r0, [r0, #4]
   d8232:	461a      	mov	r2, r3
   d8234:	4619      	mov	r1, r3
   d8236:	f7fd bdf3 	b.w	d5e20 <network_off>

000d823a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d823a:	2200      	movs	r2, #0
   d823c:	6840      	ldr	r0, [r0, #4]
   d823e:	4611      	mov	r1, r2
   d8240:	f7fd bdce 	b.w	d5de0 <network_connecting>

000d8244 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d8244:	6840      	ldr	r0, [r0, #4]
   d8246:	2200      	movs	r2, #0
   d8248:	2102      	movs	r1, #2
   d824a:	f7fd bdd1 	b.w	d5df0 <network_disconnect>

000d824e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d824e:	2300      	movs	r3, #0
   d8250:	6840      	ldr	r0, [r0, #4]
   d8252:	461a      	mov	r2, r3
   d8254:	f7fd bdbc 	b.w	d5dd0 <network_connect>

000d8258 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d8258:	4b02      	ldr	r3, [pc, #8]	; (d8264 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d825a:	2204      	movs	r2, #4
   d825c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d825e:	4a02      	ldr	r2, [pc, #8]	; (d8268 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d8260:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d8262:	4770      	bx	lr
   d8264:	2003e7c4 	.word	0x2003e7c4
   d8268:	000db5d4 	.word	0x000db5d4

000d826c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d826c:	2300      	movs	r3, #0
   d826e:	6840      	ldr	r0, [r0, #4]
   d8270:	461a      	mov	r2, r3
   d8272:	f7fd bdad 	b.w	d5dd0 <network_connect>

000d8276 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d8276:	6840      	ldr	r0, [r0, #4]
   d8278:	2200      	movs	r2, #0
   d827a:	2102      	movs	r1, #2
   d827c:	f7fd bdb8 	b.w	d5df0 <network_disconnect>

000d8280 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d8280:	2200      	movs	r2, #0
   d8282:	6840      	ldr	r0, [r0, #4]
   d8284:	4611      	mov	r1, r2
   d8286:	f7fd bdab 	b.w	d5de0 <network_connecting>

000d828a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d828a:	2200      	movs	r2, #0
   d828c:	6840      	ldr	r0, [r0, #4]
   d828e:	4611      	mov	r1, r2
   d8290:	f7fd bdb6 	b.w	d5e00 <network_ready>

000d8294 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d8294:	2300      	movs	r3, #0
   d8296:	6840      	ldr	r0, [r0, #4]
   d8298:	461a      	mov	r2, r3
   d829a:	4619      	mov	r1, r3
   d829c:	f7fd bdb8 	b.w	d5e10 <network_on>

000d82a0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d82a0:	2300      	movs	r3, #0
   d82a2:	6840      	ldr	r0, [r0, #4]
   d82a4:	461a      	mov	r2, r3
   d82a6:	4619      	mov	r1, r3
   d82a8:	f7fd bdba 	b.w	d5e20 <network_off>

000d82ac <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d82ac:	6840      	ldr	r0, [r0, #4]
   d82ae:	2100      	movs	r1, #0
   d82b0:	f7fd bdde 	b.w	d5e70 <network_is_on>

000d82b4 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d82b4:	6840      	ldr	r0, [r0, #4]
   d82b6:	2100      	movs	r1, #0
   d82b8:	f7fd bde2 	b.w	d5e80 <network_is_off>

000d82bc <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d82bc:	6840      	ldr	r0, [r0, #4]
   d82be:	2200      	movs	r2, #0
   d82c0:	f081 0101 	eor.w	r1, r1, #1
   d82c4:	f7fd bdb4 	b.w	d5e30 <network_listen>

000d82c8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d82c8:	6840      	ldr	r0, [r0, #4]
   d82ca:	2200      	movs	r2, #0
   d82cc:	f7fd bdc0 	b.w	d5e50 <network_set_listen_timeout>

000d82d0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d82d0:	2200      	movs	r2, #0
   d82d2:	6840      	ldr	r0, [r0, #4]
   d82d4:	4611      	mov	r1, r2
   d82d6:	f7fd bdc3 	b.w	d5e60 <network_get_listen_timeout>

000d82da <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d82da:	2200      	movs	r2, #0
   d82dc:	6840      	ldr	r0, [r0, #4]
   d82de:	4611      	mov	r1, r2
   d82e0:	f7fd bdae 	b.w	d5e40 <network_listening>

000d82e4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d82e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d82e8:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d82ea:	b095      	sub	sp, #84	; 0x54
   d82ec:	4616      	mov	r6, r2
   d82ee:	460d      	mov	r5, r1
   d82f0:	4607      	mov	r7, r0
    IPAddress addr;
   d82f2:	f7ff faf9 	bl	d78e8 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d82f6:	4621      	mov	r1, r4
   d82f8:	2218      	movs	r2, #24
   d82fa:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d82fc:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d82fe:	f000 ff71 	bl	d91e4 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d8302:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d8304:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d8308:	4621      	mov	r1, r4
   d830a:	466b      	mov	r3, sp
   d830c:	aa0c      	add	r2, sp, #48	; 0x30
   d830e:	4630      	mov	r0, r6
   d8310:	f7fd faf0 	bl	d58f4 <netdb_getaddrinfo>
    if (!r) {
   d8314:	4604      	mov	r4, r0
   d8316:	2800      	cmp	r0, #0
   d8318:	d14c      	bne.n	d83b4 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d831a:	4602      	mov	r2, r0
   d831c:	2101      	movs	r1, #1
   d831e:	6868      	ldr	r0, [r5, #4]
   d8320:	f7fd fd6e 	bl	d5e00 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8324:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d8326:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8328:	4622      	mov	r2, r4
   d832a:	6868      	ldr	r0, [r5, #4]
   d832c:	f7fd fd68 	bl	d5e00 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8330:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8332:	4681      	mov	r9, r0
        bool ok = false;
   d8334:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8336:	2e00      	cmp	r6, #0
   d8338:	d03c      	beq.n	d83b4 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d833a:	2900      	cmp	r1, #0
   d833c:	d13a      	bne.n	d83b4 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d833e:	6873      	ldr	r3, [r6, #4]
   d8340:	2b02      	cmp	r3, #2
   d8342:	d003      	beq.n	d834c <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d8344:	2b0a      	cmp	r3, #10
   d8346:	d011      	beq.n	d836c <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8348:	69f6      	ldr	r6, [r6, #28]
   d834a:	e7f4      	b.n	d8336 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d834c:	f1b8 0f00 	cmp.w	r8, #0
   d8350:	d00a      	beq.n	d8368 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d8352:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d8354:	a806      	add	r0, sp, #24
   d8356:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d8358:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d835a:	f7ff fb09 	bl	d7970 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d835e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8360:	1d3c      	adds	r4, r7, #4
   d8362:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8364:	682b      	ldr	r3, [r5, #0]
   d8366:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d8368:	4641      	mov	r1, r8
   d836a:	e7ed      	b.n	d8348 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d836c:	f1b9 0f00 	cmp.w	r9, #0
   d8370:	d101      	bne.n	d8376 <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d8372:	4649      	mov	r1, r9
   d8374:	e7e8      	b.n	d8348 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d8376:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d8378:	2210      	movs	r2, #16
   d837a:	a801      	add	r0, sp, #4
   d837c:	f000 ff32 	bl	d91e4 <memset>
                    a.v = 6;
   d8380:	2306      	movs	r3, #6
   d8382:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d8386:	ad01      	add	r5, sp, #4
   d8388:	f104 0308 	add.w	r3, r4, #8
   d838c:	3418      	adds	r4, #24
   d838e:	6818      	ldr	r0, [r3, #0]
   d8390:	6859      	ldr	r1, [r3, #4]
   d8392:	462a      	mov	r2, r5
   d8394:	c203      	stmia	r2!, {r0, r1}
   d8396:	3308      	adds	r3, #8
   d8398:	42a3      	cmp	r3, r4
   d839a:	4615      	mov	r5, r2
   d839c:	d1f7      	bne.n	d838e <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d839e:	a901      	add	r1, sp, #4
   d83a0:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d83a2:	ad07      	add	r5, sp, #28
   d83a4:	f7ff faae 	bl	d7904 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d83a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d83aa:	1d3c      	adds	r4, r7, #4
   d83ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d83ae:	682b      	ldr	r3, [r5, #0]
   d83b0:	7023      	strb	r3, [r4, #0]
   d83b2:	e7de      	b.n	d8372 <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d83b4:	9800      	ldr	r0, [sp, #0]
   d83b6:	f7fd fa95 	bl	d58e4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d83ba:	4638      	mov	r0, r7
   d83bc:	b015      	add	sp, #84	; 0x54
   d83be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d83c4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d83c4:	4b02      	ldr	r3, [pc, #8]	; (d83d0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d83c6:	4a03      	ldr	r2, [pc, #12]	; (d83d4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d83c8:	601a      	str	r2, [r3, #0]
   d83ca:	2200      	movs	r2, #0
   d83cc:	605a      	str	r2, [r3, #4]

} // spark
   d83ce:	4770      	bx	lr
   d83d0:	2003e7cc 	.word	0x2003e7cc
   d83d4:	000db610 	.word	0x000db610

000d83d8 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d83d8:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d83da:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d83dc:	d902      	bls.n	d83e4 <pinAvailable+0xc>
    return false;
   d83de:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d83e0:	b002      	add	sp, #8
   d83e2:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d83e4:	f1a0 030b 	sub.w	r3, r0, #11
   d83e8:	2b02      	cmp	r3, #2
   d83ea:	d81a      	bhi.n	d8422 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d83ec:	4c17      	ldr	r4, [pc, #92]	; (d844c <pinAvailable+0x74>)
   d83ee:	7821      	ldrb	r1, [r4, #0]
   d83f0:	f3bf 8f5b 	dmb	ish
   d83f4:	f011 0101 	ands.w	r1, r1, #1
   d83f8:	d10b      	bne.n	d8412 <pinAvailable+0x3a>
   d83fa:	4620      	mov	r0, r4
   d83fc:	9101      	str	r1, [sp, #4]
   d83fe:	f7fb fe50 	bl	d40a2 <__cxa_guard_acquire>
   d8402:	9901      	ldr	r1, [sp, #4]
   d8404:	b128      	cbz	r0, d8412 <pinAvailable+0x3a>
   d8406:	4812      	ldr	r0, [pc, #72]	; (d8450 <pinAvailable+0x78>)
   d8408:	f7fd fdce 	bl	d5fa8 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d840c:	4620      	mov	r0, r4
   d840e:	f7fb fe4d 	bl	d40ac <__cxa_guard_release>
   d8412:	4b0f      	ldr	r3, [pc, #60]	; (d8450 <pinAvailable+0x78>)
   d8414:	7818      	ldrb	r0, [r3, #0]
   d8416:	f7fd fc4f 	bl	d5cb8 <hal_spi_is_enabled>
   d841a:	2800      	cmp	r0, #0
   d841c:	d1df      	bne.n	d83de <pinAvailable+0x6>
  return true; // 'pin' is available
   d841e:	2001      	movs	r0, #1
   d8420:	e7de      	b.n	d83e0 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d8422:	2801      	cmp	r0, #1
   d8424:	d809      	bhi.n	d843a <pinAvailable+0x62>
   d8426:	f000 f83f 	bl	d84a8 <_Z19__fetch_global_Wirev>
   d842a:	2100      	movs	r1, #0
   d842c:	7c00      	ldrb	r0, [r0, #16]
   d842e:	f7fd fbcb 	bl	d5bc8 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d8432:	f080 0001 	eor.w	r0, r0, #1
   d8436:	b2c0      	uxtb	r0, r0
   d8438:	e7d2      	b.n	d83e0 <pinAvailable+0x8>
   d843a:	3809      	subs	r0, #9
   d843c:	2801      	cmp	r0, #1
   d843e:	d8ee      	bhi.n	d841e <pinAvailable+0x46>
   d8440:	f7ff fb80 	bl	d7b44 <_Z22__fetch_global_Serial1v>
   d8444:	7c00      	ldrb	r0, [r0, #16]
   d8446:	f7fd fb6f 	bl	d5b28 <hal_usart_is_enabled>
   d844a:	e7f2      	b.n	d8432 <pinAvailable+0x5a>
   d844c:	2003e634 	.word	0x2003e634
   d8450:	2003e638 	.word	0x2003e638

000d8454 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d8454:	2823      	cmp	r0, #35	; 0x23
{
   d8456:	b538      	push	{r3, r4, r5, lr}
   d8458:	4604      	mov	r4, r0
   d845a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d845c:	d80a      	bhi.n	d8474 <pinMode+0x20>
   d845e:	29ff      	cmp	r1, #255	; 0xff
   d8460:	d008      	beq.n	d8474 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d8462:	f7ff ffb9 	bl	d83d8 <pinAvailable>
   d8466:	b128      	cbz	r0, d8474 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d8468:	4629      	mov	r1, r5
   d846a:	4620      	mov	r0, r4
}
   d846c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d8470:	f7fd ba50 	b.w	d5914 <HAL_Pin_Mode>
}
   d8474:	bd38      	pop	{r3, r4, r5, pc}
	...

000d8478 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d8478:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d847a:	2300      	movs	r3, #0
   d847c:	2520      	movs	r5, #32
   d847e:	8043      	strh	r3, [r0, #2]
   d8480:	2314      	movs	r3, #20
{
   d8482:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d8484:	8003      	strh	r3, [r0, #0]
   d8486:	6085      	str	r5, [r0, #8]
   d8488:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d848a:	4906      	ldr	r1, [pc, #24]	; (d84a4 <_Z17acquireWireBufferv+0x2c>)
   d848c:	4628      	mov	r0, r5
   d848e:	f000 f83a 	bl	d8506 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d8492:	4904      	ldr	r1, [pc, #16]	; (d84a4 <_Z17acquireWireBufferv+0x2c>)
	};
   d8494:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d8496:	4628      	mov	r0, r5
   d8498:	f000 f835 	bl	d8506 <_ZnajRKSt9nothrow_t>
	};
   d849c:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d849e:	4620      	mov	r0, r4
   d84a0:	bd38      	pop	{r3, r4, r5, pc}
   d84a2:	bf00      	nop
   d84a4:	000db644 	.word	0x000db644

000d84a8 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d84a8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d84aa:	4d0f      	ldr	r5, [pc, #60]	; (d84e8 <_Z19__fetch_global_Wirev+0x40>)
   d84ac:	7829      	ldrb	r1, [r5, #0]
   d84ae:	f3bf 8f5b 	dmb	ish
   d84b2:	f011 0401 	ands.w	r4, r1, #1
{
   d84b6:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d84b8:	d113      	bne.n	d84e2 <_Z19__fetch_global_Wirev+0x3a>
   d84ba:	4628      	mov	r0, r5
   d84bc:	f7fb fdf1 	bl	d40a2 <__cxa_guard_acquire>
   d84c0:	b178      	cbz	r0, d84e2 <_Z19__fetch_global_Wirev+0x3a>
   d84c2:	a801      	add	r0, sp, #4
   d84c4:	f7ff ffd8 	bl	d8478 <_Z17acquireWireBufferv>
   d84c8:	aa01      	add	r2, sp, #4
   d84ca:	4621      	mov	r1, r4
   d84cc:	4807      	ldr	r0, [pc, #28]	; (d84ec <_Z19__fetch_global_Wirev+0x44>)
   d84ce:	f7ff fb8f 	bl	d7bf0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d84d2:	4628      	mov	r0, r5
   d84d4:	f7fb fdea 	bl	d40ac <__cxa_guard_release>
   d84d8:	4a05      	ldr	r2, [pc, #20]	; (d84f0 <_Z19__fetch_global_Wirev+0x48>)
   d84da:	4906      	ldr	r1, [pc, #24]	; (d84f4 <_Z19__fetch_global_Wirev+0x4c>)
   d84dc:	4803      	ldr	r0, [pc, #12]	; (d84ec <_Z19__fetch_global_Wirev+0x44>)
   d84de:	f000 f80b 	bl	d84f8 <__aeabi_atexit>
	return wire;
}
   d84e2:	4802      	ldr	r0, [pc, #8]	; (d84ec <_Z19__fetch_global_Wirev+0x44>)
   d84e4:	b007      	add	sp, #28
   d84e6:	bd30      	pop	{r4, r5, pc}
   d84e8:	2003e7d8 	.word	0x2003e7d8
   d84ec:	2003e7dc 	.word	0x2003e7dc
   d84f0:	200355c4 	.word	0x200355c4
   d84f4:	000d7b99 	.word	0x000d7b99

000d84f8 <__aeabi_atexit>:
   d84f8:	460b      	mov	r3, r1
   d84fa:	4601      	mov	r1, r0
   d84fc:	4618      	mov	r0, r3
   d84fe:	f000 be2d 	b.w	d915c <__cxa_atexit>

000d8502 <_ZdlPvj>:
   d8502:	f7fb bdcc 	b.w	d409e <_ZdlPv>

000d8506 <_ZnajRKSt9nothrow_t>:
   d8506:	f7fb bdc8 	b.w	d409a <_Znaj>

000d850a <_ZSt25__throw_bad_function_callv>:
   d850a:	b508      	push	{r3, lr}
   d850c:	f7fd fce8 	bl	d5ee0 <abort>

000d8510 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   d8510:	4901      	ldr	r1, [pc, #4]	; (d8518 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   d8512:	f000 b8f9 	b.w	d8708 <_ZNKSt9type_infoeqERKS_>
   d8516:	bf00      	nop
   d8518:	000db660 	.word	0x000db660

000d851c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   d851c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d851e:	2400      	movs	r4, #0
   d8520:	2310      	movs	r3, #16
   d8522:	e9cd 3402 	strd	r3, r4, [sp, #8]
   d8526:	6803      	ldr	r3, [r0, #0]
   d8528:	9400      	str	r4, [sp, #0]
   d852a:	699e      	ldr	r6, [r3, #24]
   d852c:	f88d 4004 	strb.w	r4, [sp, #4]
   d8530:	4615      	mov	r5, r2
   d8532:	466b      	mov	r3, sp
   d8534:	6812      	ldr	r2, [r2, #0]
   d8536:	47b0      	blx	r6
   d8538:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d853c:	f003 0306 	and.w	r3, r3, #6
   d8540:	2b06      	cmp	r3, #6
   d8542:	bf03      	ittte	eq
   d8544:	9b00      	ldreq	r3, [sp, #0]
   d8546:	602b      	streq	r3, [r5, #0]
   d8548:	2001      	moveq	r0, #1
   d854a:	4620      	movne	r0, r4
   d854c:	b004      	add	sp, #16
   d854e:	bd70      	pop	{r4, r5, r6, pc}

000d8550 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   d8550:	9800      	ldr	r0, [sp, #0]
   d8552:	4290      	cmp	r0, r2
   d8554:	bf14      	ite	ne
   d8556:	2001      	movne	r0, #1
   d8558:	2006      	moveq	r0, #6
   d855a:	4770      	bx	lr

000d855c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   d855c:	b510      	push	{r4, lr}
   d855e:	4b03      	ldr	r3, [pc, #12]	; (d856c <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   d8560:	6003      	str	r3, [r0, #0]
   d8562:	4604      	mov	r4, r0
   d8564:	f000 f8cd 	bl	d8702 <_ZNSt9type_infoD1Ev>
   d8568:	4620      	mov	r0, r4
   d856a:	bd10      	pop	{r4, pc}
   d856c:	000db6a0 	.word	0x000db6a0

000d8570 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   d8570:	b510      	push	{r4, lr}
   d8572:	4604      	mov	r4, r0
   d8574:	f7ff fff2 	bl	d855c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d8578:	4620      	mov	r0, r4
   d857a:	2108      	movs	r1, #8
   d857c:	f7ff ffc1 	bl	d8502 <_ZdlPvj>
   d8580:	4620      	mov	r0, r4
   d8582:	bd10      	pop	{r4, pc}

000d8584 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   d8584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8588:	461f      	mov	r7, r3
   d858a:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   d858e:	f8dd 8018 	ldr.w	r8, [sp, #24]
   d8592:	4598      	cmp	r8, r3
   d8594:	4606      	mov	r6, r0
   d8596:	4615      	mov	r5, r2
   d8598:	d107      	bne.n	d85aa <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d859a:	9907      	ldr	r1, [sp, #28]
   d859c:	f000 f8b4 	bl	d8708 <_ZNKSt9type_infoeqERKS_>
   d85a0:	b118      	cbz	r0, d85aa <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d85a2:	7165      	strb	r5, [r4, #5]
   d85a4:	2000      	movs	r0, #0
   d85a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d85aa:	4639      	mov	r1, r7
   d85ac:	4630      	mov	r0, r6
   d85ae:	f000 f8ab 	bl	d8708 <_ZNKSt9type_infoeqERKS_>
   d85b2:	2800      	cmp	r0, #0
   d85b4:	d0f6      	beq.n	d85a4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   d85b6:	2301      	movs	r3, #1
   d85b8:	f8c4 8000 	str.w	r8, [r4]
   d85bc:	7125      	strb	r5, [r4, #4]
   d85be:	71a3      	strb	r3, [r4, #6]
   d85c0:	e7f0      	b.n	d85a4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000d85c2 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   d85c2:	b538      	push	{r3, r4, r5, lr}
   d85c4:	4615      	mov	r5, r2
   d85c6:	461c      	mov	r4, r3
   d85c8:	f000 f89e 	bl	d8708 <_ZNKSt9type_infoeqERKS_>
   d85cc:	b120      	cbz	r0, d85d8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   d85ce:	2308      	movs	r3, #8
   d85d0:	60e3      	str	r3, [r4, #12]
   d85d2:	2306      	movs	r3, #6
   d85d4:	6025      	str	r5, [r4, #0]
   d85d6:	7123      	strb	r3, [r4, #4]
   d85d8:	bd38      	pop	{r3, r4, r5, pc}

000d85da <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   d85da:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d85dc:	4605      	mov	r5, r0
   d85de:	460c      	mov	r4, r1
   d85e0:	9201      	str	r2, [sp, #4]
   d85e2:	461e      	mov	r6, r3
   d85e4:	f000 f890 	bl	d8708 <_ZNKSt9type_infoeqERKS_>
   d85e8:	b950      	cbnz	r0, d8600 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d85ea:	2e03      	cmp	r6, #3
   d85ec:	d808      	bhi.n	d8600 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d85ee:	6823      	ldr	r3, [r4, #0]
   d85f0:	9a01      	ldr	r2, [sp, #4]
   d85f2:	695b      	ldr	r3, [r3, #20]
   d85f4:	4629      	mov	r1, r5
   d85f6:	4620      	mov	r0, r4
   d85f8:	b002      	add	sp, #8
   d85fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d85fe:	4718      	bx	r3
   d8600:	b002      	add	sp, #8
   d8602:	bd70      	pop	{r4, r5, r6, pc}

000d8604 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   d8604:	b510      	push	{r4, lr}
   d8606:	4b03      	ldr	r3, [pc, #12]	; (d8614 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   d8608:	6003      	str	r3, [r0, #0]
   d860a:	4604      	mov	r4, r0
   d860c:	f7ff ffa6 	bl	d855c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d8610:	4620      	mov	r0, r4
   d8612:	bd10      	pop	{r4, pc}
   d8614:	000db700 	.word	0x000db700

000d8618 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   d8618:	b510      	push	{r4, lr}
   d861a:	4604      	mov	r4, r0
   d861c:	f7ff fff2 	bl	d8604 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   d8620:	4620      	mov	r0, r4
   d8622:	210c      	movs	r1, #12
   d8624:	f7ff ff6d 	bl	d8502 <_ZdlPvj>
   d8628:	4620      	mov	r0, r4
   d862a:	bd10      	pop	{r4, pc}

000d862c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   d862c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d862e:	9f08      	ldr	r7, [sp, #32]
   d8630:	4297      	cmp	r7, r2
   d8632:	4605      	mov	r5, r0
   d8634:	460e      	mov	r6, r1
   d8636:	4614      	mov	r4, r2
   d8638:	d00a      	beq.n	d8650 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   d863a:	68a8      	ldr	r0, [r5, #8]
   d863c:	6802      	ldr	r2, [r0, #0]
   d863e:	9708      	str	r7, [sp, #32]
   d8640:	6a15      	ldr	r5, [r2, #32]
   d8642:	4631      	mov	r1, r6
   d8644:	4622      	mov	r2, r4
   d8646:	46ac      	mov	ip, r5
   d8648:	b003      	add	sp, #12
   d864a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d864e:	4760      	bx	ip
   d8650:	4619      	mov	r1, r3
   d8652:	9301      	str	r3, [sp, #4]
   d8654:	f000 f858 	bl	d8708 <_ZNKSt9type_infoeqERKS_>
   d8658:	9b01      	ldr	r3, [sp, #4]
   d865a:	2800      	cmp	r0, #0
   d865c:	d0ed      	beq.n	d863a <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   d865e:	2006      	movs	r0, #6
   d8660:	b003      	add	sp, #12
   d8662:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d8664 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   d8664:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8668:	460d      	mov	r5, r1
   d866a:	4619      	mov	r1, r3
   d866c:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   d8670:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   d8674:	4681      	mov	r9, r0
   d8676:	4617      	mov	r7, r2
   d8678:	4698      	mov	r8, r3
   d867a:	f000 f845 	bl	d8708 <_ZNKSt9type_infoeqERKS_>
   d867e:	b190      	cbz	r0, d86a6 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   d8680:	2d00      	cmp	r5, #0
   d8682:	6034      	str	r4, [r6, #0]
   d8684:	7137      	strb	r7, [r6, #4]
   d8686:	db09      	blt.n	d869c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   d8688:	1961      	adds	r1, r4, r5
   d868a:	458a      	cmp	sl, r1
   d868c:	bf0c      	ite	eq
   d868e:	2106      	moveq	r1, #6
   d8690:	2101      	movne	r1, #1
   d8692:	71b1      	strb	r1, [r6, #6]
   d8694:	2000      	movs	r0, #0
   d8696:	b001      	add	sp, #4
   d8698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d869c:	3502      	adds	r5, #2
   d869e:	d1f9      	bne.n	d8694 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d86a0:	2301      	movs	r3, #1
   d86a2:	71b3      	strb	r3, [r6, #6]
   d86a4:	e7f6      	b.n	d8694 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d86a6:	4554      	cmp	r4, sl
   d86a8:	d106      	bne.n	d86b8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d86aa:	4659      	mov	r1, fp
   d86ac:	4648      	mov	r0, r9
   d86ae:	f000 f82b 	bl	d8708 <_ZNKSt9type_infoeqERKS_>
   d86b2:	b108      	cbz	r0, d86b8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d86b4:	7177      	strb	r7, [r6, #5]
   d86b6:	e7ed      	b.n	d8694 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d86b8:	f8d9 0008 	ldr.w	r0, [r9, #8]
   d86bc:	6803      	ldr	r3, [r0, #0]
   d86be:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   d86c2:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   d86c6:	69dc      	ldr	r4, [r3, #28]
   d86c8:	463a      	mov	r2, r7
   d86ca:	4643      	mov	r3, r8
   d86cc:	4629      	mov	r1, r5
   d86ce:	46a4      	mov	ip, r4
   d86d0:	b001      	add	sp, #4
   d86d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d86d6:	4760      	bx	ip

000d86d8 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   d86d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d86dc:	4607      	mov	r7, r0
   d86de:	460c      	mov	r4, r1
   d86e0:	4615      	mov	r5, r2
   d86e2:	461e      	mov	r6, r3
   d86e4:	f7ff ff6d 	bl	d85c2 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   d86e8:	b948      	cbnz	r0, d86fe <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   d86ea:	68b8      	ldr	r0, [r7, #8]
   d86ec:	6803      	ldr	r3, [r0, #0]
   d86ee:	699f      	ldr	r7, [r3, #24]
   d86f0:	462a      	mov	r2, r5
   d86f2:	4633      	mov	r3, r6
   d86f4:	4621      	mov	r1, r4
   d86f6:	46bc      	mov	ip, r7
   d86f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d86fc:	4760      	bx	ip
   d86fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d8702 <_ZNSt9type_infoD1Ev>:
   d8702:	4770      	bx	lr

000d8704 <_ZNKSt9type_info14__is_pointer_pEv>:
   d8704:	2000      	movs	r0, #0
   d8706:	4770      	bx	lr

000d8708 <_ZNKSt9type_infoeqERKS_>:
   d8708:	4281      	cmp	r1, r0
   d870a:	b508      	push	{r3, lr}
   d870c:	d00e      	beq.n	d872c <_ZNKSt9type_infoeqERKS_+0x24>
   d870e:	6840      	ldr	r0, [r0, #4]
   d8710:	7803      	ldrb	r3, [r0, #0]
   d8712:	2b2a      	cmp	r3, #42	; 0x2a
   d8714:	d00c      	beq.n	d8730 <_ZNKSt9type_infoeqERKS_+0x28>
   d8716:	6849      	ldr	r1, [r1, #4]
   d8718:	780b      	ldrb	r3, [r1, #0]
   d871a:	2b2a      	cmp	r3, #42	; 0x2a
   d871c:	bf08      	it	eq
   d871e:	3101      	addeq	r1, #1
   d8720:	f000 fd8c 	bl	d923c <strcmp>
   d8724:	fab0 f080 	clz	r0, r0
   d8728:	0940      	lsrs	r0, r0, #5
   d872a:	bd08      	pop	{r3, pc}
   d872c:	2001      	movs	r0, #1
   d872e:	e7fc      	b.n	d872a <_ZNKSt9type_infoeqERKS_+0x22>
   d8730:	2000      	movs	r0, #0
   d8732:	e7fa      	b.n	d872a <_ZNKSt9type_infoeqERKS_+0x22>

000d8734 <__aeabi_drsub>:
   d8734:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d8738:	e002      	b.n	d8740 <__adddf3>
   d873a:	bf00      	nop

000d873c <__aeabi_dsub>:
   d873c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d8740 <__adddf3>:
   d8740:	b530      	push	{r4, r5, lr}
   d8742:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d8746:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d874a:	ea94 0f05 	teq	r4, r5
   d874e:	bf08      	it	eq
   d8750:	ea90 0f02 	teqeq	r0, r2
   d8754:	bf1f      	itttt	ne
   d8756:	ea54 0c00 	orrsne.w	ip, r4, r0
   d875a:	ea55 0c02 	orrsne.w	ip, r5, r2
   d875e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d8762:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8766:	f000 80e2 	beq.w	d892e <__adddf3+0x1ee>
   d876a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d876e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d8772:	bfb8      	it	lt
   d8774:	426d      	neglt	r5, r5
   d8776:	dd0c      	ble.n	d8792 <__adddf3+0x52>
   d8778:	442c      	add	r4, r5
   d877a:	ea80 0202 	eor.w	r2, r0, r2
   d877e:	ea81 0303 	eor.w	r3, r1, r3
   d8782:	ea82 0000 	eor.w	r0, r2, r0
   d8786:	ea83 0101 	eor.w	r1, r3, r1
   d878a:	ea80 0202 	eor.w	r2, r0, r2
   d878e:	ea81 0303 	eor.w	r3, r1, r3
   d8792:	2d36      	cmp	r5, #54	; 0x36
   d8794:	bf88      	it	hi
   d8796:	bd30      	pophi	{r4, r5, pc}
   d8798:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d879c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d87a0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d87a4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d87a8:	d002      	beq.n	d87b0 <__adddf3+0x70>
   d87aa:	4240      	negs	r0, r0
   d87ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d87b0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d87b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d87b8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d87bc:	d002      	beq.n	d87c4 <__adddf3+0x84>
   d87be:	4252      	negs	r2, r2
   d87c0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d87c4:	ea94 0f05 	teq	r4, r5
   d87c8:	f000 80a7 	beq.w	d891a <__adddf3+0x1da>
   d87cc:	f1a4 0401 	sub.w	r4, r4, #1
   d87d0:	f1d5 0e20 	rsbs	lr, r5, #32
   d87d4:	db0d      	blt.n	d87f2 <__adddf3+0xb2>
   d87d6:	fa02 fc0e 	lsl.w	ip, r2, lr
   d87da:	fa22 f205 	lsr.w	r2, r2, r5
   d87de:	1880      	adds	r0, r0, r2
   d87e0:	f141 0100 	adc.w	r1, r1, #0
   d87e4:	fa03 f20e 	lsl.w	r2, r3, lr
   d87e8:	1880      	adds	r0, r0, r2
   d87ea:	fa43 f305 	asr.w	r3, r3, r5
   d87ee:	4159      	adcs	r1, r3
   d87f0:	e00e      	b.n	d8810 <__adddf3+0xd0>
   d87f2:	f1a5 0520 	sub.w	r5, r5, #32
   d87f6:	f10e 0e20 	add.w	lr, lr, #32
   d87fa:	2a01      	cmp	r2, #1
   d87fc:	fa03 fc0e 	lsl.w	ip, r3, lr
   d8800:	bf28      	it	cs
   d8802:	f04c 0c02 	orrcs.w	ip, ip, #2
   d8806:	fa43 f305 	asr.w	r3, r3, r5
   d880a:	18c0      	adds	r0, r0, r3
   d880c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d8810:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8814:	d507      	bpl.n	d8826 <__adddf3+0xe6>
   d8816:	f04f 0e00 	mov.w	lr, #0
   d881a:	f1dc 0c00 	rsbs	ip, ip, #0
   d881e:	eb7e 0000 	sbcs.w	r0, lr, r0
   d8822:	eb6e 0101 	sbc.w	r1, lr, r1
   d8826:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d882a:	d31b      	bcc.n	d8864 <__adddf3+0x124>
   d882c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d8830:	d30c      	bcc.n	d884c <__adddf3+0x10c>
   d8832:	0849      	lsrs	r1, r1, #1
   d8834:	ea5f 0030 	movs.w	r0, r0, rrx
   d8838:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d883c:	f104 0401 	add.w	r4, r4, #1
   d8840:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d8844:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d8848:	f080 809a 	bcs.w	d8980 <__adddf3+0x240>
   d884c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d8850:	bf08      	it	eq
   d8852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8856:	f150 0000 	adcs.w	r0, r0, #0
   d885a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d885e:	ea41 0105 	orr.w	r1, r1, r5
   d8862:	bd30      	pop	{r4, r5, pc}
   d8864:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d8868:	4140      	adcs	r0, r0
   d886a:	eb41 0101 	adc.w	r1, r1, r1
   d886e:	3c01      	subs	r4, #1
   d8870:	bf28      	it	cs
   d8872:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d8876:	d2e9      	bcs.n	d884c <__adddf3+0x10c>
   d8878:	f091 0f00 	teq	r1, #0
   d887c:	bf04      	itt	eq
   d887e:	4601      	moveq	r1, r0
   d8880:	2000      	moveq	r0, #0
   d8882:	fab1 f381 	clz	r3, r1
   d8886:	bf08      	it	eq
   d8888:	3320      	addeq	r3, #32
   d888a:	f1a3 030b 	sub.w	r3, r3, #11
   d888e:	f1b3 0220 	subs.w	r2, r3, #32
   d8892:	da0c      	bge.n	d88ae <__adddf3+0x16e>
   d8894:	320c      	adds	r2, #12
   d8896:	dd08      	ble.n	d88aa <__adddf3+0x16a>
   d8898:	f102 0c14 	add.w	ip, r2, #20
   d889c:	f1c2 020c 	rsb	r2, r2, #12
   d88a0:	fa01 f00c 	lsl.w	r0, r1, ip
   d88a4:	fa21 f102 	lsr.w	r1, r1, r2
   d88a8:	e00c      	b.n	d88c4 <__adddf3+0x184>
   d88aa:	f102 0214 	add.w	r2, r2, #20
   d88ae:	bfd8      	it	le
   d88b0:	f1c2 0c20 	rsble	ip, r2, #32
   d88b4:	fa01 f102 	lsl.w	r1, r1, r2
   d88b8:	fa20 fc0c 	lsr.w	ip, r0, ip
   d88bc:	bfdc      	itt	le
   d88be:	ea41 010c 	orrle.w	r1, r1, ip
   d88c2:	4090      	lslle	r0, r2
   d88c4:	1ae4      	subs	r4, r4, r3
   d88c6:	bfa2      	ittt	ge
   d88c8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d88cc:	4329      	orrge	r1, r5
   d88ce:	bd30      	popge	{r4, r5, pc}
   d88d0:	ea6f 0404 	mvn.w	r4, r4
   d88d4:	3c1f      	subs	r4, #31
   d88d6:	da1c      	bge.n	d8912 <__adddf3+0x1d2>
   d88d8:	340c      	adds	r4, #12
   d88da:	dc0e      	bgt.n	d88fa <__adddf3+0x1ba>
   d88dc:	f104 0414 	add.w	r4, r4, #20
   d88e0:	f1c4 0220 	rsb	r2, r4, #32
   d88e4:	fa20 f004 	lsr.w	r0, r0, r4
   d88e8:	fa01 f302 	lsl.w	r3, r1, r2
   d88ec:	ea40 0003 	orr.w	r0, r0, r3
   d88f0:	fa21 f304 	lsr.w	r3, r1, r4
   d88f4:	ea45 0103 	orr.w	r1, r5, r3
   d88f8:	bd30      	pop	{r4, r5, pc}
   d88fa:	f1c4 040c 	rsb	r4, r4, #12
   d88fe:	f1c4 0220 	rsb	r2, r4, #32
   d8902:	fa20 f002 	lsr.w	r0, r0, r2
   d8906:	fa01 f304 	lsl.w	r3, r1, r4
   d890a:	ea40 0003 	orr.w	r0, r0, r3
   d890e:	4629      	mov	r1, r5
   d8910:	bd30      	pop	{r4, r5, pc}
   d8912:	fa21 f004 	lsr.w	r0, r1, r4
   d8916:	4629      	mov	r1, r5
   d8918:	bd30      	pop	{r4, r5, pc}
   d891a:	f094 0f00 	teq	r4, #0
   d891e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d8922:	bf06      	itte	eq
   d8924:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d8928:	3401      	addeq	r4, #1
   d892a:	3d01      	subne	r5, #1
   d892c:	e74e      	b.n	d87cc <__adddf3+0x8c>
   d892e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d8932:	bf18      	it	ne
   d8934:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8938:	d029      	beq.n	d898e <__adddf3+0x24e>
   d893a:	ea94 0f05 	teq	r4, r5
   d893e:	bf08      	it	eq
   d8940:	ea90 0f02 	teqeq	r0, r2
   d8944:	d005      	beq.n	d8952 <__adddf3+0x212>
   d8946:	ea54 0c00 	orrs.w	ip, r4, r0
   d894a:	bf04      	itt	eq
   d894c:	4619      	moveq	r1, r3
   d894e:	4610      	moveq	r0, r2
   d8950:	bd30      	pop	{r4, r5, pc}
   d8952:	ea91 0f03 	teq	r1, r3
   d8956:	bf1e      	ittt	ne
   d8958:	2100      	movne	r1, #0
   d895a:	2000      	movne	r0, #0
   d895c:	bd30      	popne	{r4, r5, pc}
   d895e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d8962:	d105      	bne.n	d8970 <__adddf3+0x230>
   d8964:	0040      	lsls	r0, r0, #1
   d8966:	4149      	adcs	r1, r1
   d8968:	bf28      	it	cs
   d896a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d896e:	bd30      	pop	{r4, r5, pc}
   d8970:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d8974:	bf3c      	itt	cc
   d8976:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d897a:	bd30      	popcc	{r4, r5, pc}
   d897c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8980:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d8984:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8988:	f04f 0000 	mov.w	r0, #0
   d898c:	bd30      	pop	{r4, r5, pc}
   d898e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d8992:	bf1a      	itte	ne
   d8994:	4619      	movne	r1, r3
   d8996:	4610      	movne	r0, r2
   d8998:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d899c:	bf1c      	itt	ne
   d899e:	460b      	movne	r3, r1
   d89a0:	4602      	movne	r2, r0
   d89a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d89a6:	bf06      	itte	eq
   d89a8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d89ac:	ea91 0f03 	teqeq	r1, r3
   d89b0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d89b4:	bd30      	pop	{r4, r5, pc}
   d89b6:	bf00      	nop

000d89b8 <__aeabi_ui2d>:
   d89b8:	f090 0f00 	teq	r0, #0
   d89bc:	bf04      	itt	eq
   d89be:	2100      	moveq	r1, #0
   d89c0:	4770      	bxeq	lr
   d89c2:	b530      	push	{r4, r5, lr}
   d89c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d89c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d89cc:	f04f 0500 	mov.w	r5, #0
   d89d0:	f04f 0100 	mov.w	r1, #0
   d89d4:	e750      	b.n	d8878 <__adddf3+0x138>
   d89d6:	bf00      	nop

000d89d8 <__aeabi_i2d>:
   d89d8:	f090 0f00 	teq	r0, #0
   d89dc:	bf04      	itt	eq
   d89de:	2100      	moveq	r1, #0
   d89e0:	4770      	bxeq	lr
   d89e2:	b530      	push	{r4, r5, lr}
   d89e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d89e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d89ec:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d89f0:	bf48      	it	mi
   d89f2:	4240      	negmi	r0, r0
   d89f4:	f04f 0100 	mov.w	r1, #0
   d89f8:	e73e      	b.n	d8878 <__adddf3+0x138>
   d89fa:	bf00      	nop

000d89fc <__aeabi_f2d>:
   d89fc:	0042      	lsls	r2, r0, #1
   d89fe:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d8a02:	ea4f 0131 	mov.w	r1, r1, rrx
   d8a06:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d8a0a:	bf1f      	itttt	ne
   d8a0c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d8a10:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8a14:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d8a18:	4770      	bxne	lr
   d8a1a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d8a1e:	bf08      	it	eq
   d8a20:	4770      	bxeq	lr
   d8a22:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d8a26:	bf04      	itt	eq
   d8a28:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d8a2c:	4770      	bxeq	lr
   d8a2e:	b530      	push	{r4, r5, lr}
   d8a30:	f44f 7460 	mov.w	r4, #896	; 0x380
   d8a34:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8a38:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8a3c:	e71c      	b.n	d8878 <__adddf3+0x138>
   d8a3e:	bf00      	nop

000d8a40 <__aeabi_ul2d>:
   d8a40:	ea50 0201 	orrs.w	r2, r0, r1
   d8a44:	bf08      	it	eq
   d8a46:	4770      	bxeq	lr
   d8a48:	b530      	push	{r4, r5, lr}
   d8a4a:	f04f 0500 	mov.w	r5, #0
   d8a4e:	e00a      	b.n	d8a66 <__aeabi_l2d+0x16>

000d8a50 <__aeabi_l2d>:
   d8a50:	ea50 0201 	orrs.w	r2, r0, r1
   d8a54:	bf08      	it	eq
   d8a56:	4770      	bxeq	lr
   d8a58:	b530      	push	{r4, r5, lr}
   d8a5a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d8a5e:	d502      	bpl.n	d8a66 <__aeabi_l2d+0x16>
   d8a60:	4240      	negs	r0, r0
   d8a62:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8a66:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8a6a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8a6e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d8a72:	f43f aed8 	beq.w	d8826 <__adddf3+0xe6>
   d8a76:	f04f 0203 	mov.w	r2, #3
   d8a7a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8a7e:	bf18      	it	ne
   d8a80:	3203      	addne	r2, #3
   d8a82:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8a86:	bf18      	it	ne
   d8a88:	3203      	addne	r2, #3
   d8a8a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d8a8e:	f1c2 0320 	rsb	r3, r2, #32
   d8a92:	fa00 fc03 	lsl.w	ip, r0, r3
   d8a96:	fa20 f002 	lsr.w	r0, r0, r2
   d8a9a:	fa01 fe03 	lsl.w	lr, r1, r3
   d8a9e:	ea40 000e 	orr.w	r0, r0, lr
   d8aa2:	fa21 f102 	lsr.w	r1, r1, r2
   d8aa6:	4414      	add	r4, r2
   d8aa8:	e6bd      	b.n	d8826 <__adddf3+0xe6>
   d8aaa:	bf00      	nop

000d8aac <__aeabi_dmul>:
   d8aac:	b570      	push	{r4, r5, r6, lr}
   d8aae:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8ab2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8ab6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8aba:	bf1d      	ittte	ne
   d8abc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8ac0:	ea94 0f0c 	teqne	r4, ip
   d8ac4:	ea95 0f0c 	teqne	r5, ip
   d8ac8:	f000 f8de 	bleq	d8c88 <__aeabi_dmul+0x1dc>
   d8acc:	442c      	add	r4, r5
   d8ace:	ea81 0603 	eor.w	r6, r1, r3
   d8ad2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d8ad6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d8ada:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d8ade:	bf18      	it	ne
   d8ae0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d8ae4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8ae8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d8aec:	d038      	beq.n	d8b60 <__aeabi_dmul+0xb4>
   d8aee:	fba0 ce02 	umull	ip, lr, r0, r2
   d8af2:	f04f 0500 	mov.w	r5, #0
   d8af6:	fbe1 e502 	umlal	lr, r5, r1, r2
   d8afa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d8afe:	fbe0 e503 	umlal	lr, r5, r0, r3
   d8b02:	f04f 0600 	mov.w	r6, #0
   d8b06:	fbe1 5603 	umlal	r5, r6, r1, r3
   d8b0a:	f09c 0f00 	teq	ip, #0
   d8b0e:	bf18      	it	ne
   d8b10:	f04e 0e01 	orrne.w	lr, lr, #1
   d8b14:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d8b18:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d8b1c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d8b20:	d204      	bcs.n	d8b2c <__aeabi_dmul+0x80>
   d8b22:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d8b26:	416d      	adcs	r5, r5
   d8b28:	eb46 0606 	adc.w	r6, r6, r6
   d8b2c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d8b30:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d8b34:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d8b38:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d8b3c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d8b40:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8b44:	bf88      	it	hi
   d8b46:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8b4a:	d81e      	bhi.n	d8b8a <__aeabi_dmul+0xde>
   d8b4c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d8b50:	bf08      	it	eq
   d8b52:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d8b56:	f150 0000 	adcs.w	r0, r0, #0
   d8b5a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8b5e:	bd70      	pop	{r4, r5, r6, pc}
   d8b60:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d8b64:	ea46 0101 	orr.w	r1, r6, r1
   d8b68:	ea40 0002 	orr.w	r0, r0, r2
   d8b6c:	ea81 0103 	eor.w	r1, r1, r3
   d8b70:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d8b74:	bfc2      	ittt	gt
   d8b76:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8b7a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8b7e:	bd70      	popgt	{r4, r5, r6, pc}
   d8b80:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8b84:	f04f 0e00 	mov.w	lr, #0
   d8b88:	3c01      	subs	r4, #1
   d8b8a:	f300 80ab 	bgt.w	d8ce4 <__aeabi_dmul+0x238>
   d8b8e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d8b92:	bfde      	ittt	le
   d8b94:	2000      	movle	r0, #0
   d8b96:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d8b9a:	bd70      	pople	{r4, r5, r6, pc}
   d8b9c:	f1c4 0400 	rsb	r4, r4, #0
   d8ba0:	3c20      	subs	r4, #32
   d8ba2:	da35      	bge.n	d8c10 <__aeabi_dmul+0x164>
   d8ba4:	340c      	adds	r4, #12
   d8ba6:	dc1b      	bgt.n	d8be0 <__aeabi_dmul+0x134>
   d8ba8:	f104 0414 	add.w	r4, r4, #20
   d8bac:	f1c4 0520 	rsb	r5, r4, #32
   d8bb0:	fa00 f305 	lsl.w	r3, r0, r5
   d8bb4:	fa20 f004 	lsr.w	r0, r0, r4
   d8bb8:	fa01 f205 	lsl.w	r2, r1, r5
   d8bbc:	ea40 0002 	orr.w	r0, r0, r2
   d8bc0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d8bc4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8bc8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8bcc:	fa21 f604 	lsr.w	r6, r1, r4
   d8bd0:	eb42 0106 	adc.w	r1, r2, r6
   d8bd4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8bd8:	bf08      	it	eq
   d8bda:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8bde:	bd70      	pop	{r4, r5, r6, pc}
   d8be0:	f1c4 040c 	rsb	r4, r4, #12
   d8be4:	f1c4 0520 	rsb	r5, r4, #32
   d8be8:	fa00 f304 	lsl.w	r3, r0, r4
   d8bec:	fa20 f005 	lsr.w	r0, r0, r5
   d8bf0:	fa01 f204 	lsl.w	r2, r1, r4
   d8bf4:	ea40 0002 	orr.w	r0, r0, r2
   d8bf8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8bfc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8c00:	f141 0100 	adc.w	r1, r1, #0
   d8c04:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8c08:	bf08      	it	eq
   d8c0a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8c0e:	bd70      	pop	{r4, r5, r6, pc}
   d8c10:	f1c4 0520 	rsb	r5, r4, #32
   d8c14:	fa00 f205 	lsl.w	r2, r0, r5
   d8c18:	ea4e 0e02 	orr.w	lr, lr, r2
   d8c1c:	fa20 f304 	lsr.w	r3, r0, r4
   d8c20:	fa01 f205 	lsl.w	r2, r1, r5
   d8c24:	ea43 0302 	orr.w	r3, r3, r2
   d8c28:	fa21 f004 	lsr.w	r0, r1, r4
   d8c2c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8c30:	fa21 f204 	lsr.w	r2, r1, r4
   d8c34:	ea20 0002 	bic.w	r0, r0, r2
   d8c38:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d8c3c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8c40:	bf08      	it	eq
   d8c42:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8c46:	bd70      	pop	{r4, r5, r6, pc}
   d8c48:	f094 0f00 	teq	r4, #0
   d8c4c:	d10f      	bne.n	d8c6e <__aeabi_dmul+0x1c2>
   d8c4e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d8c52:	0040      	lsls	r0, r0, #1
   d8c54:	eb41 0101 	adc.w	r1, r1, r1
   d8c58:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8c5c:	bf08      	it	eq
   d8c5e:	3c01      	subeq	r4, #1
   d8c60:	d0f7      	beq.n	d8c52 <__aeabi_dmul+0x1a6>
   d8c62:	ea41 0106 	orr.w	r1, r1, r6
   d8c66:	f095 0f00 	teq	r5, #0
   d8c6a:	bf18      	it	ne
   d8c6c:	4770      	bxne	lr
   d8c6e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d8c72:	0052      	lsls	r2, r2, #1
   d8c74:	eb43 0303 	adc.w	r3, r3, r3
   d8c78:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d8c7c:	bf08      	it	eq
   d8c7e:	3d01      	subeq	r5, #1
   d8c80:	d0f7      	beq.n	d8c72 <__aeabi_dmul+0x1c6>
   d8c82:	ea43 0306 	orr.w	r3, r3, r6
   d8c86:	4770      	bx	lr
   d8c88:	ea94 0f0c 	teq	r4, ip
   d8c8c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8c90:	bf18      	it	ne
   d8c92:	ea95 0f0c 	teqne	r5, ip
   d8c96:	d00c      	beq.n	d8cb2 <__aeabi_dmul+0x206>
   d8c98:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8c9c:	bf18      	it	ne
   d8c9e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8ca2:	d1d1      	bne.n	d8c48 <__aeabi_dmul+0x19c>
   d8ca4:	ea81 0103 	eor.w	r1, r1, r3
   d8ca8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8cac:	f04f 0000 	mov.w	r0, #0
   d8cb0:	bd70      	pop	{r4, r5, r6, pc}
   d8cb2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8cb6:	bf06      	itte	eq
   d8cb8:	4610      	moveq	r0, r2
   d8cba:	4619      	moveq	r1, r3
   d8cbc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8cc0:	d019      	beq.n	d8cf6 <__aeabi_dmul+0x24a>
   d8cc2:	ea94 0f0c 	teq	r4, ip
   d8cc6:	d102      	bne.n	d8cce <__aeabi_dmul+0x222>
   d8cc8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d8ccc:	d113      	bne.n	d8cf6 <__aeabi_dmul+0x24a>
   d8cce:	ea95 0f0c 	teq	r5, ip
   d8cd2:	d105      	bne.n	d8ce0 <__aeabi_dmul+0x234>
   d8cd4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d8cd8:	bf1c      	itt	ne
   d8cda:	4610      	movne	r0, r2
   d8cdc:	4619      	movne	r1, r3
   d8cde:	d10a      	bne.n	d8cf6 <__aeabi_dmul+0x24a>
   d8ce0:	ea81 0103 	eor.w	r1, r1, r3
   d8ce4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8ce8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8cec:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8cf0:	f04f 0000 	mov.w	r0, #0
   d8cf4:	bd70      	pop	{r4, r5, r6, pc}
   d8cf6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8cfa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d8cfe:	bd70      	pop	{r4, r5, r6, pc}

000d8d00 <__aeabi_ddiv>:
   d8d00:	b570      	push	{r4, r5, r6, lr}
   d8d02:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8d06:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8d0a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8d0e:	bf1d      	ittte	ne
   d8d10:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8d14:	ea94 0f0c 	teqne	r4, ip
   d8d18:	ea95 0f0c 	teqne	r5, ip
   d8d1c:	f000 f8a7 	bleq	d8e6e <__aeabi_ddiv+0x16e>
   d8d20:	eba4 0405 	sub.w	r4, r4, r5
   d8d24:	ea81 0e03 	eor.w	lr, r1, r3
   d8d28:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8d2c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8d30:	f000 8088 	beq.w	d8e44 <__aeabi_ddiv+0x144>
   d8d34:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8d38:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d8d3c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d8d40:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d8d44:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d8d48:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d8d4c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d8d50:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d8d54:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d8d58:	429d      	cmp	r5, r3
   d8d5a:	bf08      	it	eq
   d8d5c:	4296      	cmpeq	r6, r2
   d8d5e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d8d62:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d8d66:	d202      	bcs.n	d8d6e <__aeabi_ddiv+0x6e>
   d8d68:	085b      	lsrs	r3, r3, #1
   d8d6a:	ea4f 0232 	mov.w	r2, r2, rrx
   d8d6e:	1ab6      	subs	r6, r6, r2
   d8d70:	eb65 0503 	sbc.w	r5, r5, r3
   d8d74:	085b      	lsrs	r3, r3, #1
   d8d76:	ea4f 0232 	mov.w	r2, r2, rrx
   d8d7a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d8d7e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d8d82:	ebb6 0e02 	subs.w	lr, r6, r2
   d8d86:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8d8a:	bf22      	ittt	cs
   d8d8c:	1ab6      	subcs	r6, r6, r2
   d8d8e:	4675      	movcs	r5, lr
   d8d90:	ea40 000c 	orrcs.w	r0, r0, ip
   d8d94:	085b      	lsrs	r3, r3, #1
   d8d96:	ea4f 0232 	mov.w	r2, r2, rrx
   d8d9a:	ebb6 0e02 	subs.w	lr, r6, r2
   d8d9e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8da2:	bf22      	ittt	cs
   d8da4:	1ab6      	subcs	r6, r6, r2
   d8da6:	4675      	movcs	r5, lr
   d8da8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d8dac:	085b      	lsrs	r3, r3, #1
   d8dae:	ea4f 0232 	mov.w	r2, r2, rrx
   d8db2:	ebb6 0e02 	subs.w	lr, r6, r2
   d8db6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8dba:	bf22      	ittt	cs
   d8dbc:	1ab6      	subcs	r6, r6, r2
   d8dbe:	4675      	movcs	r5, lr
   d8dc0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d8dc4:	085b      	lsrs	r3, r3, #1
   d8dc6:	ea4f 0232 	mov.w	r2, r2, rrx
   d8dca:	ebb6 0e02 	subs.w	lr, r6, r2
   d8dce:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8dd2:	bf22      	ittt	cs
   d8dd4:	1ab6      	subcs	r6, r6, r2
   d8dd6:	4675      	movcs	r5, lr
   d8dd8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d8ddc:	ea55 0e06 	orrs.w	lr, r5, r6
   d8de0:	d018      	beq.n	d8e14 <__aeabi_ddiv+0x114>
   d8de2:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d8de6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d8dea:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d8dee:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d8df2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d8df6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d8dfa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d8dfe:	d1c0      	bne.n	d8d82 <__aeabi_ddiv+0x82>
   d8e00:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8e04:	d10b      	bne.n	d8e1e <__aeabi_ddiv+0x11e>
   d8e06:	ea41 0100 	orr.w	r1, r1, r0
   d8e0a:	f04f 0000 	mov.w	r0, #0
   d8e0e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d8e12:	e7b6      	b.n	d8d82 <__aeabi_ddiv+0x82>
   d8e14:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8e18:	bf04      	itt	eq
   d8e1a:	4301      	orreq	r1, r0
   d8e1c:	2000      	moveq	r0, #0
   d8e1e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8e22:	bf88      	it	hi
   d8e24:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8e28:	f63f aeaf 	bhi.w	d8b8a <__aeabi_dmul+0xde>
   d8e2c:	ebb5 0c03 	subs.w	ip, r5, r3
   d8e30:	bf04      	itt	eq
   d8e32:	ebb6 0c02 	subseq.w	ip, r6, r2
   d8e36:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8e3a:	f150 0000 	adcs.w	r0, r0, #0
   d8e3e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8e42:	bd70      	pop	{r4, r5, r6, pc}
   d8e44:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d8e48:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d8e4c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d8e50:	bfc2      	ittt	gt
   d8e52:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8e56:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8e5a:	bd70      	popgt	{r4, r5, r6, pc}
   d8e5c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8e60:	f04f 0e00 	mov.w	lr, #0
   d8e64:	3c01      	subs	r4, #1
   d8e66:	e690      	b.n	d8b8a <__aeabi_dmul+0xde>
   d8e68:	ea45 0e06 	orr.w	lr, r5, r6
   d8e6c:	e68d      	b.n	d8b8a <__aeabi_dmul+0xde>
   d8e6e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8e72:	ea94 0f0c 	teq	r4, ip
   d8e76:	bf08      	it	eq
   d8e78:	ea95 0f0c 	teqeq	r5, ip
   d8e7c:	f43f af3b 	beq.w	d8cf6 <__aeabi_dmul+0x24a>
   d8e80:	ea94 0f0c 	teq	r4, ip
   d8e84:	d10a      	bne.n	d8e9c <__aeabi_ddiv+0x19c>
   d8e86:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8e8a:	f47f af34 	bne.w	d8cf6 <__aeabi_dmul+0x24a>
   d8e8e:	ea95 0f0c 	teq	r5, ip
   d8e92:	f47f af25 	bne.w	d8ce0 <__aeabi_dmul+0x234>
   d8e96:	4610      	mov	r0, r2
   d8e98:	4619      	mov	r1, r3
   d8e9a:	e72c      	b.n	d8cf6 <__aeabi_dmul+0x24a>
   d8e9c:	ea95 0f0c 	teq	r5, ip
   d8ea0:	d106      	bne.n	d8eb0 <__aeabi_ddiv+0x1b0>
   d8ea2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8ea6:	f43f aefd 	beq.w	d8ca4 <__aeabi_dmul+0x1f8>
   d8eaa:	4610      	mov	r0, r2
   d8eac:	4619      	mov	r1, r3
   d8eae:	e722      	b.n	d8cf6 <__aeabi_dmul+0x24a>
   d8eb0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8eb4:	bf18      	it	ne
   d8eb6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8eba:	f47f aec5 	bne.w	d8c48 <__aeabi_dmul+0x19c>
   d8ebe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d8ec2:	f47f af0d 	bne.w	d8ce0 <__aeabi_dmul+0x234>
   d8ec6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d8eca:	f47f aeeb 	bne.w	d8ca4 <__aeabi_dmul+0x1f8>
   d8ece:	e712      	b.n	d8cf6 <__aeabi_dmul+0x24a>

000d8ed0 <__gedf2>:
   d8ed0:	f04f 3cff 	mov.w	ip, #4294967295
   d8ed4:	e006      	b.n	d8ee4 <__cmpdf2+0x4>
   d8ed6:	bf00      	nop

000d8ed8 <__ledf2>:
   d8ed8:	f04f 0c01 	mov.w	ip, #1
   d8edc:	e002      	b.n	d8ee4 <__cmpdf2+0x4>
   d8ede:	bf00      	nop

000d8ee0 <__cmpdf2>:
   d8ee0:	f04f 0c01 	mov.w	ip, #1
   d8ee4:	f84d cd04 	str.w	ip, [sp, #-4]!
   d8ee8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8eec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8ef0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8ef4:	bf18      	it	ne
   d8ef6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d8efa:	d01b      	beq.n	d8f34 <__cmpdf2+0x54>
   d8efc:	b001      	add	sp, #4
   d8efe:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d8f02:	bf0c      	ite	eq
   d8f04:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d8f08:	ea91 0f03 	teqne	r1, r3
   d8f0c:	bf02      	ittt	eq
   d8f0e:	ea90 0f02 	teqeq	r0, r2
   d8f12:	2000      	moveq	r0, #0
   d8f14:	4770      	bxeq	lr
   d8f16:	f110 0f00 	cmn.w	r0, #0
   d8f1a:	ea91 0f03 	teq	r1, r3
   d8f1e:	bf58      	it	pl
   d8f20:	4299      	cmppl	r1, r3
   d8f22:	bf08      	it	eq
   d8f24:	4290      	cmpeq	r0, r2
   d8f26:	bf2c      	ite	cs
   d8f28:	17d8      	asrcs	r0, r3, #31
   d8f2a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d8f2e:	f040 0001 	orr.w	r0, r0, #1
   d8f32:	4770      	bx	lr
   d8f34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8f38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8f3c:	d102      	bne.n	d8f44 <__cmpdf2+0x64>
   d8f3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d8f42:	d107      	bne.n	d8f54 <__cmpdf2+0x74>
   d8f44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8f48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8f4c:	d1d6      	bne.n	d8efc <__cmpdf2+0x1c>
   d8f4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d8f52:	d0d3      	beq.n	d8efc <__cmpdf2+0x1c>
   d8f54:	f85d 0b04 	ldr.w	r0, [sp], #4
   d8f58:	4770      	bx	lr
   d8f5a:	bf00      	nop

000d8f5c <__aeabi_cdrcmple>:
   d8f5c:	4684      	mov	ip, r0
   d8f5e:	4610      	mov	r0, r2
   d8f60:	4662      	mov	r2, ip
   d8f62:	468c      	mov	ip, r1
   d8f64:	4619      	mov	r1, r3
   d8f66:	4663      	mov	r3, ip
   d8f68:	e000      	b.n	d8f6c <__aeabi_cdcmpeq>
   d8f6a:	bf00      	nop

000d8f6c <__aeabi_cdcmpeq>:
   d8f6c:	b501      	push	{r0, lr}
   d8f6e:	f7ff ffb7 	bl	d8ee0 <__cmpdf2>
   d8f72:	2800      	cmp	r0, #0
   d8f74:	bf48      	it	mi
   d8f76:	f110 0f00 	cmnmi.w	r0, #0
   d8f7a:	bd01      	pop	{r0, pc}

000d8f7c <__aeabi_dcmpeq>:
   d8f7c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8f80:	f7ff fff4 	bl	d8f6c <__aeabi_cdcmpeq>
   d8f84:	bf0c      	ite	eq
   d8f86:	2001      	moveq	r0, #1
   d8f88:	2000      	movne	r0, #0
   d8f8a:	f85d fb08 	ldr.w	pc, [sp], #8
   d8f8e:	bf00      	nop

000d8f90 <__aeabi_dcmplt>:
   d8f90:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8f94:	f7ff ffea 	bl	d8f6c <__aeabi_cdcmpeq>
   d8f98:	bf34      	ite	cc
   d8f9a:	2001      	movcc	r0, #1
   d8f9c:	2000      	movcs	r0, #0
   d8f9e:	f85d fb08 	ldr.w	pc, [sp], #8
   d8fa2:	bf00      	nop

000d8fa4 <__aeabi_dcmple>:
   d8fa4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8fa8:	f7ff ffe0 	bl	d8f6c <__aeabi_cdcmpeq>
   d8fac:	bf94      	ite	ls
   d8fae:	2001      	movls	r0, #1
   d8fb0:	2000      	movhi	r0, #0
   d8fb2:	f85d fb08 	ldr.w	pc, [sp], #8
   d8fb6:	bf00      	nop

000d8fb8 <__aeabi_dcmpge>:
   d8fb8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8fbc:	f7ff ffce 	bl	d8f5c <__aeabi_cdrcmple>
   d8fc0:	bf94      	ite	ls
   d8fc2:	2001      	movls	r0, #1
   d8fc4:	2000      	movhi	r0, #0
   d8fc6:	f85d fb08 	ldr.w	pc, [sp], #8
   d8fca:	bf00      	nop

000d8fcc <__aeabi_dcmpgt>:
   d8fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8fd0:	f7ff ffc4 	bl	d8f5c <__aeabi_cdrcmple>
   d8fd4:	bf34      	ite	cc
   d8fd6:	2001      	movcc	r0, #1
   d8fd8:	2000      	movcs	r0, #0
   d8fda:	f85d fb08 	ldr.w	pc, [sp], #8
   d8fde:	bf00      	nop

000d8fe0 <__aeabi_d2iz>:
   d8fe0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d8fe4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d8fe8:	d215      	bcs.n	d9016 <__aeabi_d2iz+0x36>
   d8fea:	d511      	bpl.n	d9010 <__aeabi_d2iz+0x30>
   d8fec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d8ff0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d8ff4:	d912      	bls.n	d901c <__aeabi_d2iz+0x3c>
   d8ff6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8ffa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d8ffe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d9002:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d9006:	fa23 f002 	lsr.w	r0, r3, r2
   d900a:	bf18      	it	ne
   d900c:	4240      	negne	r0, r0
   d900e:	4770      	bx	lr
   d9010:	f04f 0000 	mov.w	r0, #0
   d9014:	4770      	bx	lr
   d9016:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d901a:	d105      	bne.n	d9028 <__aeabi_d2iz+0x48>
   d901c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d9020:	bf08      	it	eq
   d9022:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d9026:	4770      	bx	lr
   d9028:	f04f 0000 	mov.w	r0, #0
   d902c:	4770      	bx	lr
   d902e:	bf00      	nop

000d9030 <__aeabi_d2uiz>:
   d9030:	004a      	lsls	r2, r1, #1
   d9032:	d211      	bcs.n	d9058 <__aeabi_d2uiz+0x28>
   d9034:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d9038:	d211      	bcs.n	d905e <__aeabi_d2uiz+0x2e>
   d903a:	d50d      	bpl.n	d9058 <__aeabi_d2uiz+0x28>
   d903c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d9040:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d9044:	d40e      	bmi.n	d9064 <__aeabi_d2uiz+0x34>
   d9046:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d904a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d904e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d9052:	fa23 f002 	lsr.w	r0, r3, r2
   d9056:	4770      	bx	lr
   d9058:	f04f 0000 	mov.w	r0, #0
   d905c:	4770      	bx	lr
   d905e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d9062:	d102      	bne.n	d906a <__aeabi_d2uiz+0x3a>
   d9064:	f04f 30ff 	mov.w	r0, #4294967295
   d9068:	4770      	bx	lr
   d906a:	f04f 0000 	mov.w	r0, #0
   d906e:	4770      	bx	lr

000d9070 <__aeabi_d2f>:
   d9070:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d9074:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d9078:	bf24      	itt	cs
   d907a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d907e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d9082:	d90d      	bls.n	d90a0 <__aeabi_d2f+0x30>
   d9084:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d9088:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d908c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d9090:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d9094:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d9098:	bf08      	it	eq
   d909a:	f020 0001 	biceq.w	r0, r0, #1
   d909e:	4770      	bx	lr
   d90a0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d90a4:	d121      	bne.n	d90ea <__aeabi_d2f+0x7a>
   d90a6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d90aa:	bfbc      	itt	lt
   d90ac:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d90b0:	4770      	bxlt	lr
   d90b2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d90b6:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d90ba:	f1c2 0218 	rsb	r2, r2, #24
   d90be:	f1c2 0c20 	rsb	ip, r2, #32
   d90c2:	fa10 f30c 	lsls.w	r3, r0, ip
   d90c6:	fa20 f002 	lsr.w	r0, r0, r2
   d90ca:	bf18      	it	ne
   d90cc:	f040 0001 	orrne.w	r0, r0, #1
   d90d0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d90d4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d90d8:	fa03 fc0c 	lsl.w	ip, r3, ip
   d90dc:	ea40 000c 	orr.w	r0, r0, ip
   d90e0:	fa23 f302 	lsr.w	r3, r3, r2
   d90e4:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d90e8:	e7cc      	b.n	d9084 <__aeabi_d2f+0x14>
   d90ea:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d90ee:	d107      	bne.n	d9100 <__aeabi_d2f+0x90>
   d90f0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d90f4:	bf1e      	ittt	ne
   d90f6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d90fa:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d90fe:	4770      	bxne	lr
   d9100:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d9104:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d9108:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d910c:	4770      	bx	lr
   d910e:	bf00      	nop

000d9110 <__aeabi_d2ulz>:
   d9110:	b5d0      	push	{r4, r6, r7, lr}
   d9112:	4b0c      	ldr	r3, [pc, #48]	; (d9144 <__aeabi_d2ulz+0x34>)
   d9114:	2200      	movs	r2, #0
   d9116:	4606      	mov	r6, r0
   d9118:	460f      	mov	r7, r1
   d911a:	f7ff fcc7 	bl	d8aac <__aeabi_dmul>
   d911e:	f7ff ff87 	bl	d9030 <__aeabi_d2uiz>
   d9122:	4604      	mov	r4, r0
   d9124:	f7ff fc48 	bl	d89b8 <__aeabi_ui2d>
   d9128:	4b07      	ldr	r3, [pc, #28]	; (d9148 <__aeabi_d2ulz+0x38>)
   d912a:	2200      	movs	r2, #0
   d912c:	f7ff fcbe 	bl	d8aac <__aeabi_dmul>
   d9130:	4602      	mov	r2, r0
   d9132:	460b      	mov	r3, r1
   d9134:	4630      	mov	r0, r6
   d9136:	4639      	mov	r1, r7
   d9138:	f7ff fb00 	bl	d873c <__aeabi_dsub>
   d913c:	f7ff ff78 	bl	d9030 <__aeabi_d2uiz>
   d9140:	4621      	mov	r1, r4
   d9142:	bdd0      	pop	{r4, r6, r7, pc}
   d9144:	3df00000 	.word	0x3df00000
   d9148:	41f00000 	.word	0x41f00000

000d914c <atof>:
   d914c:	2100      	movs	r1, #0
   d914e:	f000 beed 	b.w	d9f2c <strtod>

000d9152 <atoi>:
   d9152:	220a      	movs	r2, #10
   d9154:	2100      	movs	r1, #0
   d9156:	f000 bf6f 	b.w	da038 <strtol>
	...

000d915c <__cxa_atexit>:
   d915c:	b510      	push	{r4, lr}
   d915e:	4c05      	ldr	r4, [pc, #20]	; (d9174 <__cxa_atexit+0x18>)
   d9160:	4613      	mov	r3, r2
   d9162:	b12c      	cbz	r4, d9170 <__cxa_atexit+0x14>
   d9164:	460a      	mov	r2, r1
   d9166:	4601      	mov	r1, r0
   d9168:	2002      	movs	r0, #2
   d916a:	f3af 8000 	nop.w
   d916e:	bd10      	pop	{r4, pc}
   d9170:	4620      	mov	r0, r4
   d9172:	e7fc      	b.n	d916e <__cxa_atexit+0x12>
   d9174:	00000000 	.word	0x00000000

000d9178 <memcmp>:
   d9178:	b530      	push	{r4, r5, lr}
   d917a:	3901      	subs	r1, #1
   d917c:	2400      	movs	r4, #0
   d917e:	42a2      	cmp	r2, r4
   d9180:	d101      	bne.n	d9186 <memcmp+0xe>
   d9182:	2000      	movs	r0, #0
   d9184:	e005      	b.n	d9192 <memcmp+0x1a>
   d9186:	5d03      	ldrb	r3, [r0, r4]
   d9188:	3401      	adds	r4, #1
   d918a:	5d0d      	ldrb	r5, [r1, r4]
   d918c:	42ab      	cmp	r3, r5
   d918e:	d0f6      	beq.n	d917e <memcmp+0x6>
   d9190:	1b58      	subs	r0, r3, r5
   d9192:	bd30      	pop	{r4, r5, pc}

000d9194 <memcpy>:
   d9194:	440a      	add	r2, r1
   d9196:	4291      	cmp	r1, r2
   d9198:	f100 33ff 	add.w	r3, r0, #4294967295
   d919c:	d100      	bne.n	d91a0 <memcpy+0xc>
   d919e:	4770      	bx	lr
   d91a0:	b510      	push	{r4, lr}
   d91a2:	f811 4b01 	ldrb.w	r4, [r1], #1
   d91a6:	f803 4f01 	strb.w	r4, [r3, #1]!
   d91aa:	4291      	cmp	r1, r2
   d91ac:	d1f9      	bne.n	d91a2 <memcpy+0xe>
   d91ae:	bd10      	pop	{r4, pc}

000d91b0 <memmove>:
   d91b0:	4288      	cmp	r0, r1
   d91b2:	b510      	push	{r4, lr}
   d91b4:	eb01 0402 	add.w	r4, r1, r2
   d91b8:	d902      	bls.n	d91c0 <memmove+0x10>
   d91ba:	4284      	cmp	r4, r0
   d91bc:	4623      	mov	r3, r4
   d91be:	d807      	bhi.n	d91d0 <memmove+0x20>
   d91c0:	1e43      	subs	r3, r0, #1
   d91c2:	42a1      	cmp	r1, r4
   d91c4:	d008      	beq.n	d91d8 <memmove+0x28>
   d91c6:	f811 2b01 	ldrb.w	r2, [r1], #1
   d91ca:	f803 2f01 	strb.w	r2, [r3, #1]!
   d91ce:	e7f8      	b.n	d91c2 <memmove+0x12>
   d91d0:	4402      	add	r2, r0
   d91d2:	4601      	mov	r1, r0
   d91d4:	428a      	cmp	r2, r1
   d91d6:	d100      	bne.n	d91da <memmove+0x2a>
   d91d8:	bd10      	pop	{r4, pc}
   d91da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d91de:	f802 4d01 	strb.w	r4, [r2, #-1]!
   d91e2:	e7f7      	b.n	d91d4 <memmove+0x24>

000d91e4 <memset>:
   d91e4:	4402      	add	r2, r0
   d91e6:	4603      	mov	r3, r0
   d91e8:	4293      	cmp	r3, r2
   d91ea:	d100      	bne.n	d91ee <memset+0xa>
   d91ec:	4770      	bx	lr
   d91ee:	f803 1b01 	strb.w	r1, [r3], #1
   d91f2:	e7f9      	b.n	d91e8 <memset+0x4>

000d91f4 <srand>:
   d91f4:	b538      	push	{r3, r4, r5, lr}
   d91f6:	4b0d      	ldr	r3, [pc, #52]	; (d922c <srand+0x38>)
   d91f8:	681d      	ldr	r5, [r3, #0]
   d91fa:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d91fc:	4604      	mov	r4, r0
   d91fe:	b97b      	cbnz	r3, d9220 <srand+0x2c>
   d9200:	2018      	movs	r0, #24
   d9202:	f7fc fe4d 	bl	d5ea0 <malloc>
   d9206:	4a0a      	ldr	r2, [pc, #40]	; (d9230 <srand+0x3c>)
   d9208:	4b0a      	ldr	r3, [pc, #40]	; (d9234 <srand+0x40>)
   d920a:	63a8      	str	r0, [r5, #56]	; 0x38
   d920c:	e9c0 2300 	strd	r2, r3, [r0]
   d9210:	4b09      	ldr	r3, [pc, #36]	; (d9238 <srand+0x44>)
   d9212:	6083      	str	r3, [r0, #8]
   d9214:	230b      	movs	r3, #11
   d9216:	8183      	strh	r3, [r0, #12]
   d9218:	2201      	movs	r2, #1
   d921a:	2300      	movs	r3, #0
   d921c:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d9220:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d9222:	2200      	movs	r2, #0
   d9224:	611c      	str	r4, [r3, #16]
   d9226:	615a      	str	r2, [r3, #20]
   d9228:	bd38      	pop	{r3, r4, r5, pc}
   d922a:	bf00      	nop
   d922c:	200353f0 	.word	0x200353f0
   d9230:	abcd330e 	.word	0xabcd330e
   d9234:	e66d1234 	.word	0xe66d1234
   d9238:	0005deec 	.word	0x0005deec

000d923c <strcmp>:
   d923c:	f810 2b01 	ldrb.w	r2, [r0], #1
   d9240:	f811 3b01 	ldrb.w	r3, [r1], #1
   d9244:	2a01      	cmp	r2, #1
   d9246:	bf28      	it	cs
   d9248:	429a      	cmpcs	r2, r3
   d924a:	d0f7      	beq.n	d923c <strcmp>
   d924c:	1ad0      	subs	r0, r2, r3
   d924e:	4770      	bx	lr

000d9250 <strcpy>:
   d9250:	4603      	mov	r3, r0
   d9252:	f811 2b01 	ldrb.w	r2, [r1], #1
   d9256:	f803 2b01 	strb.w	r2, [r3], #1
   d925a:	2a00      	cmp	r2, #0
   d925c:	d1f9      	bne.n	d9252 <strcpy+0x2>
   d925e:	4770      	bx	lr

000d9260 <strlen>:
   d9260:	4603      	mov	r3, r0
   d9262:	f813 2b01 	ldrb.w	r2, [r3], #1
   d9266:	2a00      	cmp	r2, #0
   d9268:	d1fb      	bne.n	d9262 <strlen+0x2>
   d926a:	1a18      	subs	r0, r3, r0
   d926c:	3801      	subs	r0, #1
   d926e:	4770      	bx	lr

000d9270 <strncmp>:
   d9270:	b510      	push	{r4, lr}
   d9272:	b16a      	cbz	r2, d9290 <strncmp+0x20>
   d9274:	3901      	subs	r1, #1
   d9276:	1884      	adds	r4, r0, r2
   d9278:	f810 3b01 	ldrb.w	r3, [r0], #1
   d927c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   d9280:	4293      	cmp	r3, r2
   d9282:	d103      	bne.n	d928c <strncmp+0x1c>
   d9284:	42a0      	cmp	r0, r4
   d9286:	d001      	beq.n	d928c <strncmp+0x1c>
   d9288:	2b00      	cmp	r3, #0
   d928a:	d1f5      	bne.n	d9278 <strncmp+0x8>
   d928c:	1a98      	subs	r0, r3, r2
   d928e:	bd10      	pop	{r4, pc}
   d9290:	4610      	mov	r0, r2
   d9292:	e7fc      	b.n	d928e <strncmp+0x1e>

000d9294 <strnlen>:
   d9294:	b510      	push	{r4, lr}
   d9296:	4602      	mov	r2, r0
   d9298:	4401      	add	r1, r0
   d929a:	428a      	cmp	r2, r1
   d929c:	4613      	mov	r3, r2
   d929e:	d101      	bne.n	d92a4 <strnlen+0x10>
   d92a0:	1a18      	subs	r0, r3, r0
   d92a2:	bd10      	pop	{r4, pc}
   d92a4:	781c      	ldrb	r4, [r3, #0]
   d92a6:	3201      	adds	r2, #1
   d92a8:	2c00      	cmp	r4, #0
   d92aa:	d1f6      	bne.n	d929a <strnlen+0x6>
   d92ac:	e7f8      	b.n	d92a0 <strnlen+0xc>

000d92ae <strstr>:
   d92ae:	b5f0      	push	{r4, r5, r6, r7, lr}
   d92b0:	780c      	ldrb	r4, [r1, #0]
   d92b2:	b164      	cbz	r4, d92ce <strstr+0x20>
   d92b4:	4603      	mov	r3, r0
   d92b6:	781a      	ldrb	r2, [r3, #0]
   d92b8:	4618      	mov	r0, r3
   d92ba:	1c5e      	adds	r6, r3, #1
   d92bc:	b90a      	cbnz	r2, d92c2 <strstr+0x14>
   d92be:	4610      	mov	r0, r2
   d92c0:	e005      	b.n	d92ce <strstr+0x20>
   d92c2:	4294      	cmp	r4, r2
   d92c4:	d108      	bne.n	d92d8 <strstr+0x2a>
   d92c6:	460d      	mov	r5, r1
   d92c8:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   d92cc:	b902      	cbnz	r2, d92d0 <strstr+0x22>
   d92ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d92d0:	f813 7f01 	ldrb.w	r7, [r3, #1]!
   d92d4:	4297      	cmp	r7, r2
   d92d6:	d0f7      	beq.n	d92c8 <strstr+0x1a>
   d92d8:	4633      	mov	r3, r6
   d92da:	e7ec      	b.n	d92b6 <strstr+0x8>

000d92dc <sulp>:
   d92dc:	b570      	push	{r4, r5, r6, lr}
   d92de:	4604      	mov	r4, r0
   d92e0:	460d      	mov	r5, r1
   d92e2:	ec45 4b10 	vmov	d0, r4, r5
   d92e6:	4616      	mov	r6, r2
   d92e8:	f001 fd1c 	bl	dad24 <__ulp>
   d92ec:	ec51 0b10 	vmov	r0, r1, d0
   d92f0:	b17e      	cbz	r6, d9312 <sulp+0x36>
   d92f2:	f3c5 530a 	ubfx	r3, r5, #20, #11
   d92f6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d92fa:	2b00      	cmp	r3, #0
   d92fc:	dd09      	ble.n	d9312 <sulp+0x36>
   d92fe:	051b      	lsls	r3, r3, #20
   d9300:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   d9304:	2400      	movs	r4, #0
   d9306:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   d930a:	4622      	mov	r2, r4
   d930c:	462b      	mov	r3, r5
   d930e:	f7ff fbcd 	bl	d8aac <__aeabi_dmul>
   d9312:	bd70      	pop	{r4, r5, r6, pc}
   d9314:	0000      	movs	r0, r0
	...

000d9318 <_strtod_l>:
   d9318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d931c:	b0a3      	sub	sp, #140	; 0x8c
   d931e:	461f      	mov	r7, r3
   d9320:	2300      	movs	r3, #0
   d9322:	931e      	str	r3, [sp, #120]	; 0x78
   d9324:	4ba4      	ldr	r3, [pc, #656]	; (d95b8 <_strtod_l+0x2a0>)
   d9326:	9219      	str	r2, [sp, #100]	; 0x64
   d9328:	681b      	ldr	r3, [r3, #0]
   d932a:	9307      	str	r3, [sp, #28]
   d932c:	4604      	mov	r4, r0
   d932e:	4618      	mov	r0, r3
   d9330:	4688      	mov	r8, r1
   d9332:	f7ff ff95 	bl	d9260 <strlen>
   d9336:	f04f 0a00 	mov.w	sl, #0
   d933a:	4605      	mov	r5, r0
   d933c:	f04f 0b00 	mov.w	fp, #0
   d9340:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   d9344:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9346:	781a      	ldrb	r2, [r3, #0]
   d9348:	2a2b      	cmp	r2, #43	; 0x2b
   d934a:	d04c      	beq.n	d93e6 <_strtod_l+0xce>
   d934c:	d839      	bhi.n	d93c2 <_strtod_l+0xaa>
   d934e:	2a0d      	cmp	r2, #13
   d9350:	d832      	bhi.n	d93b8 <_strtod_l+0xa0>
   d9352:	2a08      	cmp	r2, #8
   d9354:	d832      	bhi.n	d93bc <_strtod_l+0xa4>
   d9356:	2a00      	cmp	r2, #0
   d9358:	d03c      	beq.n	d93d4 <_strtod_l+0xbc>
   d935a:	2300      	movs	r3, #0
   d935c:	930e      	str	r3, [sp, #56]	; 0x38
   d935e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
   d9360:	7833      	ldrb	r3, [r6, #0]
   d9362:	2b30      	cmp	r3, #48	; 0x30
   d9364:	f040 80b4 	bne.w	d94d0 <_strtod_l+0x1b8>
   d9368:	7873      	ldrb	r3, [r6, #1]
   d936a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   d936e:	2b58      	cmp	r3, #88	; 0x58
   d9370:	d16c      	bne.n	d944c <_strtod_l+0x134>
   d9372:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d9374:	9301      	str	r3, [sp, #4]
   d9376:	ab1e      	add	r3, sp, #120	; 0x78
   d9378:	9702      	str	r7, [sp, #8]
   d937a:	9300      	str	r3, [sp, #0]
   d937c:	4a8f      	ldr	r2, [pc, #572]	; (d95bc <_strtod_l+0x2a4>)
   d937e:	ab1f      	add	r3, sp, #124	; 0x7c
   d9380:	a91d      	add	r1, sp, #116	; 0x74
   d9382:	4620      	mov	r0, r4
   d9384:	f000 feca 	bl	da11c <__gethex>
   d9388:	f010 0707 	ands.w	r7, r0, #7
   d938c:	4605      	mov	r5, r0
   d938e:	d005      	beq.n	d939c <_strtod_l+0x84>
   d9390:	2f06      	cmp	r7, #6
   d9392:	d12a      	bne.n	d93ea <_strtod_l+0xd2>
   d9394:	3601      	adds	r6, #1
   d9396:	2300      	movs	r3, #0
   d9398:	961d      	str	r6, [sp, #116]	; 0x74
   d939a:	930e      	str	r3, [sp, #56]	; 0x38
   d939c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   d939e:	2b00      	cmp	r3, #0
   d93a0:	f040 8596 	bne.w	d9ed0 <_strtod_l+0xbb8>
   d93a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d93a6:	b1db      	cbz	r3, d93e0 <_strtod_l+0xc8>
   d93a8:	4652      	mov	r2, sl
   d93aa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   d93ae:	ec43 2b10 	vmov	d0, r2, r3
   d93b2:	b023      	add	sp, #140	; 0x8c
   d93b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d93b8:	2a20      	cmp	r2, #32
   d93ba:	d1ce      	bne.n	d935a <_strtod_l+0x42>
   d93bc:	3301      	adds	r3, #1
   d93be:	931d      	str	r3, [sp, #116]	; 0x74
   d93c0:	e7c0      	b.n	d9344 <_strtod_l+0x2c>
   d93c2:	2a2d      	cmp	r2, #45	; 0x2d
   d93c4:	d1c9      	bne.n	d935a <_strtod_l+0x42>
   d93c6:	2201      	movs	r2, #1
   d93c8:	920e      	str	r2, [sp, #56]	; 0x38
   d93ca:	1c5a      	adds	r2, r3, #1
   d93cc:	921d      	str	r2, [sp, #116]	; 0x74
   d93ce:	785b      	ldrb	r3, [r3, #1]
   d93d0:	2b00      	cmp	r3, #0
   d93d2:	d1c4      	bne.n	d935e <_strtod_l+0x46>
   d93d4:	9b19      	ldr	r3, [sp, #100]	; 0x64
   d93d6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   d93da:	2b00      	cmp	r3, #0
   d93dc:	f040 8576 	bne.w	d9ecc <_strtod_l+0xbb4>
   d93e0:	4652      	mov	r2, sl
   d93e2:	465b      	mov	r3, fp
   d93e4:	e7e3      	b.n	d93ae <_strtod_l+0x96>
   d93e6:	2200      	movs	r2, #0
   d93e8:	e7ee      	b.n	d93c8 <_strtod_l+0xb0>
   d93ea:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   d93ec:	b13a      	cbz	r2, d93fe <_strtod_l+0xe6>
   d93ee:	2135      	movs	r1, #53	; 0x35
   d93f0:	a820      	add	r0, sp, #128	; 0x80
   d93f2:	f001 fd96 	bl	daf22 <__copybits>
   d93f6:	991e      	ldr	r1, [sp, #120]	; 0x78
   d93f8:	4620      	mov	r0, r4
   d93fa:	f001 f9cb 	bl	da794 <_Bfree>
   d93fe:	3f01      	subs	r7, #1
   d9400:	2f05      	cmp	r7, #5
   d9402:	d807      	bhi.n	d9414 <_strtod_l+0xfc>
   d9404:	e8df f007 	tbb	[pc, r7]
   d9408:	1d180b0e 	.word	0x1d180b0e
   d940c:	030e      	.short	0x030e
   d940e:	f04f 0b00 	mov.w	fp, #0
   d9412:	46da      	mov	sl, fp
   d9414:	0728      	lsls	r0, r5, #28
   d9416:	d5c1      	bpl.n	d939c <_strtod_l+0x84>
   d9418:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   d941c:	e7be      	b.n	d939c <_strtod_l+0x84>
   d941e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
   d9422:	e7f7      	b.n	d9414 <_strtod_l+0xfc>
   d9424:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
   d9428:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   d942a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   d942e:	f202 4233 	addw	r2, r2, #1075	; 0x433
   d9432:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   d9436:	e7ed      	b.n	d9414 <_strtod_l+0xfc>
   d9438:	f8df b184 	ldr.w	fp, [pc, #388]	; d95c0 <_strtod_l+0x2a8>
   d943c:	f04f 0a00 	mov.w	sl, #0
   d9440:	e7e8      	b.n	d9414 <_strtod_l+0xfc>
   d9442:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   d9446:	f04f 3aff 	mov.w	sl, #4294967295
   d944a:	e7e3      	b.n	d9414 <_strtod_l+0xfc>
   d944c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d944e:	1c5a      	adds	r2, r3, #1
   d9450:	921d      	str	r2, [sp, #116]	; 0x74
   d9452:	785b      	ldrb	r3, [r3, #1]
   d9454:	2b30      	cmp	r3, #48	; 0x30
   d9456:	d0f9      	beq.n	d944c <_strtod_l+0x134>
   d9458:	2b00      	cmp	r3, #0
   d945a:	d09f      	beq.n	d939c <_strtod_l+0x84>
   d945c:	2301      	movs	r3, #1
   d945e:	f04f 0900 	mov.w	r9, #0
   d9462:	9304      	str	r3, [sp, #16]
   d9464:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9466:	930a      	str	r3, [sp, #40]	; 0x28
   d9468:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   d946c:	464f      	mov	r7, r9
   d946e:	220a      	movs	r2, #10
   d9470:	981d      	ldr	r0, [sp, #116]	; 0x74
   d9472:	7806      	ldrb	r6, [r0, #0]
   d9474:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   d9478:	b2d9      	uxtb	r1, r3
   d947a:	2909      	cmp	r1, #9
   d947c:	d92a      	bls.n	d94d4 <_strtod_l+0x1bc>
   d947e:	9907      	ldr	r1, [sp, #28]
   d9480:	462a      	mov	r2, r5
   d9482:	f7ff fef5 	bl	d9270 <strncmp>
   d9486:	b398      	cbz	r0, d94f0 <_strtod_l+0x1d8>
   d9488:	2000      	movs	r0, #0
   d948a:	4633      	mov	r3, r6
   d948c:	463d      	mov	r5, r7
   d948e:	9007      	str	r0, [sp, #28]
   d9490:	4602      	mov	r2, r0
   d9492:	2b65      	cmp	r3, #101	; 0x65
   d9494:	d001      	beq.n	d949a <_strtod_l+0x182>
   d9496:	2b45      	cmp	r3, #69	; 0x45
   d9498:	d118      	bne.n	d94cc <_strtod_l+0x1b4>
   d949a:	b91d      	cbnz	r5, d94a4 <_strtod_l+0x18c>
   d949c:	9b04      	ldr	r3, [sp, #16]
   d949e:	4303      	orrs	r3, r0
   d94a0:	d098      	beq.n	d93d4 <_strtod_l+0xbc>
   d94a2:	2500      	movs	r5, #0
   d94a4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
   d94a8:	f108 0301 	add.w	r3, r8, #1
   d94ac:	931d      	str	r3, [sp, #116]	; 0x74
   d94ae:	f898 3001 	ldrb.w	r3, [r8, #1]
   d94b2:	2b2b      	cmp	r3, #43	; 0x2b
   d94b4:	d075      	beq.n	d95a2 <_strtod_l+0x28a>
   d94b6:	2b2d      	cmp	r3, #45	; 0x2d
   d94b8:	d07b      	beq.n	d95b2 <_strtod_l+0x29a>
   d94ba:	f04f 0c00 	mov.w	ip, #0
   d94be:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   d94c2:	2909      	cmp	r1, #9
   d94c4:	f240 8082 	bls.w	d95cc <_strtod_l+0x2b4>
   d94c8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   d94cc:	2600      	movs	r6, #0
   d94ce:	e09d      	b.n	d960c <_strtod_l+0x2f4>
   d94d0:	2300      	movs	r3, #0
   d94d2:	e7c4      	b.n	d945e <_strtod_l+0x146>
   d94d4:	2f08      	cmp	r7, #8
   d94d6:	bfd8      	it	le
   d94d8:	9909      	ldrle	r1, [sp, #36]	; 0x24
   d94da:	f100 0001 	add.w	r0, r0, #1
   d94de:	bfda      	itte	le
   d94e0:	fb02 3301 	mlale	r3, r2, r1, r3
   d94e4:	9309      	strle	r3, [sp, #36]	; 0x24
   d94e6:	fb02 3909 	mlagt	r9, r2, r9, r3
   d94ea:	3701      	adds	r7, #1
   d94ec:	901d      	str	r0, [sp, #116]	; 0x74
   d94ee:	e7bf      	b.n	d9470 <_strtod_l+0x158>
   d94f0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d94f2:	195a      	adds	r2, r3, r5
   d94f4:	921d      	str	r2, [sp, #116]	; 0x74
   d94f6:	5d5b      	ldrb	r3, [r3, r5]
   d94f8:	2f00      	cmp	r7, #0
   d94fa:	d037      	beq.n	d956c <_strtod_l+0x254>
   d94fc:	9007      	str	r0, [sp, #28]
   d94fe:	463d      	mov	r5, r7
   d9500:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   d9504:	2a09      	cmp	r2, #9
   d9506:	d912      	bls.n	d952e <_strtod_l+0x216>
   d9508:	2201      	movs	r2, #1
   d950a:	e7c2      	b.n	d9492 <_strtod_l+0x17a>
   d950c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d950e:	1c5a      	adds	r2, r3, #1
   d9510:	921d      	str	r2, [sp, #116]	; 0x74
   d9512:	785b      	ldrb	r3, [r3, #1]
   d9514:	3001      	adds	r0, #1
   d9516:	2b30      	cmp	r3, #48	; 0x30
   d9518:	d0f8      	beq.n	d950c <_strtod_l+0x1f4>
   d951a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   d951e:	2a08      	cmp	r2, #8
   d9520:	f200 84db 	bhi.w	d9eda <_strtod_l+0xbc2>
   d9524:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   d9526:	9007      	str	r0, [sp, #28]
   d9528:	2000      	movs	r0, #0
   d952a:	920a      	str	r2, [sp, #40]	; 0x28
   d952c:	4605      	mov	r5, r0
   d952e:	3b30      	subs	r3, #48	; 0x30
   d9530:	f100 0201 	add.w	r2, r0, #1
   d9534:	d014      	beq.n	d9560 <_strtod_l+0x248>
   d9536:	9907      	ldr	r1, [sp, #28]
   d9538:	4411      	add	r1, r2
   d953a:	9107      	str	r1, [sp, #28]
   d953c:	462a      	mov	r2, r5
   d953e:	eb00 0e05 	add.w	lr, r0, r5
   d9542:	210a      	movs	r1, #10
   d9544:	4572      	cmp	r2, lr
   d9546:	d113      	bne.n	d9570 <_strtod_l+0x258>
   d9548:	182a      	adds	r2, r5, r0
   d954a:	2a08      	cmp	r2, #8
   d954c:	f105 0501 	add.w	r5, r5, #1
   d9550:	4405      	add	r5, r0
   d9552:	dc1c      	bgt.n	d958e <_strtod_l+0x276>
   d9554:	9909      	ldr	r1, [sp, #36]	; 0x24
   d9556:	220a      	movs	r2, #10
   d9558:	fb02 3301 	mla	r3, r2, r1, r3
   d955c:	9309      	str	r3, [sp, #36]	; 0x24
   d955e:	2200      	movs	r2, #0
   d9560:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9562:	1c59      	adds	r1, r3, #1
   d9564:	911d      	str	r1, [sp, #116]	; 0x74
   d9566:	785b      	ldrb	r3, [r3, #1]
   d9568:	4610      	mov	r0, r2
   d956a:	e7c9      	b.n	d9500 <_strtod_l+0x1e8>
   d956c:	4638      	mov	r0, r7
   d956e:	e7d2      	b.n	d9516 <_strtod_l+0x1fe>
   d9570:	2a08      	cmp	r2, #8
   d9572:	dc04      	bgt.n	d957e <_strtod_l+0x266>
   d9574:	9e09      	ldr	r6, [sp, #36]	; 0x24
   d9576:	434e      	muls	r6, r1
   d9578:	9609      	str	r6, [sp, #36]	; 0x24
   d957a:	3201      	adds	r2, #1
   d957c:	e7e2      	b.n	d9544 <_strtod_l+0x22c>
   d957e:	f102 0c01 	add.w	ip, r2, #1
   d9582:	f1bc 0f10 	cmp.w	ip, #16
   d9586:	bfd8      	it	le
   d9588:	fb01 f909 	mulle.w	r9, r1, r9
   d958c:	e7f5      	b.n	d957a <_strtod_l+0x262>
   d958e:	2d10      	cmp	r5, #16
   d9590:	bfdc      	itt	le
   d9592:	220a      	movle	r2, #10
   d9594:	fb02 3909 	mlale	r9, r2, r9, r3
   d9598:	e7e1      	b.n	d955e <_strtod_l+0x246>
   d959a:	2300      	movs	r3, #0
   d959c:	9307      	str	r3, [sp, #28]
   d959e:	2201      	movs	r2, #1
   d95a0:	e77c      	b.n	d949c <_strtod_l+0x184>
   d95a2:	f04f 0c00 	mov.w	ip, #0
   d95a6:	f108 0302 	add.w	r3, r8, #2
   d95aa:	931d      	str	r3, [sp, #116]	; 0x74
   d95ac:	f898 3002 	ldrb.w	r3, [r8, #2]
   d95b0:	e785      	b.n	d94be <_strtod_l+0x1a6>
   d95b2:	f04f 0c01 	mov.w	ip, #1
   d95b6:	e7f6      	b.n	d95a6 <_strtod_l+0x28e>
   d95b8:	000db89c 	.word	0x000db89c
   d95bc:	000db748 	.word	0x000db748
   d95c0:	7ff00000 	.word	0x7ff00000
   d95c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d95c6:	1c59      	adds	r1, r3, #1
   d95c8:	911d      	str	r1, [sp, #116]	; 0x74
   d95ca:	785b      	ldrb	r3, [r3, #1]
   d95cc:	2b30      	cmp	r3, #48	; 0x30
   d95ce:	d0f9      	beq.n	d95c4 <_strtod_l+0x2ac>
   d95d0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
   d95d4:	2908      	cmp	r1, #8
   d95d6:	f63f af79 	bhi.w	d94cc <_strtod_l+0x1b4>
   d95da:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   d95de:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d95e0:	9308      	str	r3, [sp, #32]
   d95e2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d95e4:	1c59      	adds	r1, r3, #1
   d95e6:	911d      	str	r1, [sp, #116]	; 0x74
   d95e8:	785b      	ldrb	r3, [r3, #1]
   d95ea:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   d95ee:	2e09      	cmp	r6, #9
   d95f0:	d937      	bls.n	d9662 <_strtod_l+0x34a>
   d95f2:	9e08      	ldr	r6, [sp, #32]
   d95f4:	1b89      	subs	r1, r1, r6
   d95f6:	2908      	cmp	r1, #8
   d95f8:	f644 661f 	movw	r6, #19999	; 0x4e1f
   d95fc:	dc02      	bgt.n	d9604 <_strtod_l+0x2ec>
   d95fe:	4576      	cmp	r6, lr
   d9600:	bfa8      	it	ge
   d9602:	4676      	movge	r6, lr
   d9604:	f1bc 0f00 	cmp.w	ip, #0
   d9608:	d000      	beq.n	d960c <_strtod_l+0x2f4>
   d960a:	4276      	negs	r6, r6
   d960c:	2d00      	cmp	r5, #0
   d960e:	d14f      	bne.n	d96b0 <_strtod_l+0x398>
   d9610:	9904      	ldr	r1, [sp, #16]
   d9612:	4301      	orrs	r1, r0
   d9614:	f47f aec2 	bne.w	d939c <_strtod_l+0x84>
   d9618:	2a00      	cmp	r2, #0
   d961a:	f47f aedb 	bne.w	d93d4 <_strtod_l+0xbc>
   d961e:	2b69      	cmp	r3, #105	; 0x69
   d9620:	d027      	beq.n	d9672 <_strtod_l+0x35a>
   d9622:	dc24      	bgt.n	d966e <_strtod_l+0x356>
   d9624:	2b49      	cmp	r3, #73	; 0x49
   d9626:	d024      	beq.n	d9672 <_strtod_l+0x35a>
   d9628:	2b4e      	cmp	r3, #78	; 0x4e
   d962a:	f47f aed3 	bne.w	d93d4 <_strtod_l+0xbc>
   d962e:	499e      	ldr	r1, [pc, #632]	; (d98a8 <_strtod_l+0x590>)
   d9630:	a81d      	add	r0, sp, #116	; 0x74
   d9632:	f000 ffb9 	bl	da5a8 <__match>
   d9636:	2800      	cmp	r0, #0
   d9638:	f43f aecc 	beq.w	d93d4 <_strtod_l+0xbc>
   d963c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d963e:	781b      	ldrb	r3, [r3, #0]
   d9640:	2b28      	cmp	r3, #40	; 0x28
   d9642:	d12d      	bne.n	d96a0 <_strtod_l+0x388>
   d9644:	4999      	ldr	r1, [pc, #612]	; (d98ac <_strtod_l+0x594>)
   d9646:	aa20      	add	r2, sp, #128	; 0x80
   d9648:	a81d      	add	r0, sp, #116	; 0x74
   d964a:	f000 ffc1 	bl	da5d0 <__hexnan>
   d964e:	2805      	cmp	r0, #5
   d9650:	d126      	bne.n	d96a0 <_strtod_l+0x388>
   d9652:	9b21      	ldr	r3, [sp, #132]	; 0x84
   d9654:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
   d9658:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   d965c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   d9660:	e69c      	b.n	d939c <_strtod_l+0x84>
   d9662:	210a      	movs	r1, #10
   d9664:	fb01 3e0e 	mla	lr, r1, lr, r3
   d9668:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   d966c:	e7b9      	b.n	d95e2 <_strtod_l+0x2ca>
   d966e:	2b6e      	cmp	r3, #110	; 0x6e
   d9670:	e7db      	b.n	d962a <_strtod_l+0x312>
   d9672:	498f      	ldr	r1, [pc, #572]	; (d98b0 <_strtod_l+0x598>)
   d9674:	a81d      	add	r0, sp, #116	; 0x74
   d9676:	f000 ff97 	bl	da5a8 <__match>
   d967a:	2800      	cmp	r0, #0
   d967c:	f43f aeaa 	beq.w	d93d4 <_strtod_l+0xbc>
   d9680:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9682:	498c      	ldr	r1, [pc, #560]	; (d98b4 <_strtod_l+0x59c>)
   d9684:	3b01      	subs	r3, #1
   d9686:	a81d      	add	r0, sp, #116	; 0x74
   d9688:	931d      	str	r3, [sp, #116]	; 0x74
   d968a:	f000 ff8d 	bl	da5a8 <__match>
   d968e:	b910      	cbnz	r0, d9696 <_strtod_l+0x37e>
   d9690:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9692:	3301      	adds	r3, #1
   d9694:	931d      	str	r3, [sp, #116]	; 0x74
   d9696:	f8df b22c 	ldr.w	fp, [pc, #556]	; d98c4 <_strtod_l+0x5ac>
   d969a:	f04f 0a00 	mov.w	sl, #0
   d969e:	e67d      	b.n	d939c <_strtod_l+0x84>
   d96a0:	4885      	ldr	r0, [pc, #532]	; (d98b8 <_strtod_l+0x5a0>)
   d96a2:	f001 fc91 	bl	dafc8 <nan>
   d96a6:	ed8d 0b04 	vstr	d0, [sp, #16]
   d96aa:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   d96ae:	e675      	b.n	d939c <_strtod_l+0x84>
   d96b0:	9b07      	ldr	r3, [sp, #28]
   d96b2:	9809      	ldr	r0, [sp, #36]	; 0x24
   d96b4:	1af3      	subs	r3, r6, r3
   d96b6:	2f00      	cmp	r7, #0
   d96b8:	bf08      	it	eq
   d96ba:	462f      	moveq	r7, r5
   d96bc:	2d10      	cmp	r5, #16
   d96be:	9308      	str	r3, [sp, #32]
   d96c0:	46a8      	mov	r8, r5
   d96c2:	bfa8      	it	ge
   d96c4:	f04f 0810 	movge.w	r8, #16
   d96c8:	f7ff f976 	bl	d89b8 <__aeabi_ui2d>
   d96cc:	2d09      	cmp	r5, #9
   d96ce:	4682      	mov	sl, r0
   d96d0:	468b      	mov	fp, r1
   d96d2:	dd13      	ble.n	d96fc <_strtod_l+0x3e4>
   d96d4:	4b79      	ldr	r3, [pc, #484]	; (d98bc <_strtod_l+0x5a4>)
   d96d6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   d96da:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   d96de:	f7ff f9e5 	bl	d8aac <__aeabi_dmul>
   d96e2:	4682      	mov	sl, r0
   d96e4:	4648      	mov	r0, r9
   d96e6:	468b      	mov	fp, r1
   d96e8:	f7ff f966 	bl	d89b8 <__aeabi_ui2d>
   d96ec:	4602      	mov	r2, r0
   d96ee:	460b      	mov	r3, r1
   d96f0:	4650      	mov	r0, sl
   d96f2:	4659      	mov	r1, fp
   d96f4:	f7ff f824 	bl	d8740 <__adddf3>
   d96f8:	4682      	mov	sl, r0
   d96fa:	468b      	mov	fp, r1
   d96fc:	2d0f      	cmp	r5, #15
   d96fe:	dc38      	bgt.n	d9772 <_strtod_l+0x45a>
   d9700:	9b08      	ldr	r3, [sp, #32]
   d9702:	2b00      	cmp	r3, #0
   d9704:	f43f ae4a 	beq.w	d939c <_strtod_l+0x84>
   d9708:	dd24      	ble.n	d9754 <_strtod_l+0x43c>
   d970a:	2b16      	cmp	r3, #22
   d970c:	dc0b      	bgt.n	d9726 <_strtod_l+0x40e>
   d970e:	4d6b      	ldr	r5, [pc, #428]	; (d98bc <_strtod_l+0x5a4>)
   d9710:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
   d9714:	e9d5 0100 	ldrd	r0, r1, [r5]
   d9718:	4652      	mov	r2, sl
   d971a:	465b      	mov	r3, fp
   d971c:	f7ff f9c6 	bl	d8aac <__aeabi_dmul>
   d9720:	4682      	mov	sl, r0
   d9722:	468b      	mov	fp, r1
   d9724:	e63a      	b.n	d939c <_strtod_l+0x84>
   d9726:	9a08      	ldr	r2, [sp, #32]
   d9728:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   d972c:	4293      	cmp	r3, r2
   d972e:	db20      	blt.n	d9772 <_strtod_l+0x45a>
   d9730:	4c62      	ldr	r4, [pc, #392]	; (d98bc <_strtod_l+0x5a4>)
   d9732:	f1c5 050f 	rsb	r5, r5, #15
   d9736:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   d973a:	4652      	mov	r2, sl
   d973c:	465b      	mov	r3, fp
   d973e:	e9d1 0100 	ldrd	r0, r1, [r1]
   d9742:	f7ff f9b3 	bl	d8aac <__aeabi_dmul>
   d9746:	9b08      	ldr	r3, [sp, #32]
   d9748:	1b5d      	subs	r5, r3, r5
   d974a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   d974e:	e9d4 2300 	ldrd	r2, r3, [r4]
   d9752:	e7e3      	b.n	d971c <_strtod_l+0x404>
   d9754:	9b08      	ldr	r3, [sp, #32]
   d9756:	3316      	adds	r3, #22
   d9758:	db0b      	blt.n	d9772 <_strtod_l+0x45a>
   d975a:	9b07      	ldr	r3, [sp, #28]
   d975c:	4a57      	ldr	r2, [pc, #348]	; (d98bc <_strtod_l+0x5a4>)
   d975e:	1b9e      	subs	r6, r3, r6
   d9760:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
   d9764:	e9d6 2300 	ldrd	r2, r3, [r6]
   d9768:	4650      	mov	r0, sl
   d976a:	4659      	mov	r1, fp
   d976c:	f7ff fac8 	bl	d8d00 <__aeabi_ddiv>
   d9770:	e7d6      	b.n	d9720 <_strtod_l+0x408>
   d9772:	9b08      	ldr	r3, [sp, #32]
   d9774:	eba5 0808 	sub.w	r8, r5, r8
   d9778:	4498      	add	r8, r3
   d977a:	f1b8 0f00 	cmp.w	r8, #0
   d977e:	dd71      	ble.n	d9864 <_strtod_l+0x54c>
   d9780:	f018 030f 	ands.w	r3, r8, #15
   d9784:	d00a      	beq.n	d979c <_strtod_l+0x484>
   d9786:	494d      	ldr	r1, [pc, #308]	; (d98bc <_strtod_l+0x5a4>)
   d9788:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   d978c:	4652      	mov	r2, sl
   d978e:	465b      	mov	r3, fp
   d9790:	e9d1 0100 	ldrd	r0, r1, [r1]
   d9794:	f7ff f98a 	bl	d8aac <__aeabi_dmul>
   d9798:	4682      	mov	sl, r0
   d979a:	468b      	mov	fp, r1
   d979c:	f038 080f 	bics.w	r8, r8, #15
   d97a0:	d04d      	beq.n	d983e <_strtod_l+0x526>
   d97a2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   d97a6:	dd22      	ble.n	d97ee <_strtod_l+0x4d6>
   d97a8:	2500      	movs	r5, #0
   d97aa:	462e      	mov	r6, r5
   d97ac:	9509      	str	r5, [sp, #36]	; 0x24
   d97ae:	9507      	str	r5, [sp, #28]
   d97b0:	2322      	movs	r3, #34	; 0x22
   d97b2:	f8df b110 	ldr.w	fp, [pc, #272]	; d98c4 <_strtod_l+0x5ac>
   d97b6:	6023      	str	r3, [r4, #0]
   d97b8:	f04f 0a00 	mov.w	sl, #0
   d97bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d97be:	2b00      	cmp	r3, #0
   d97c0:	f43f adec 	beq.w	d939c <_strtod_l+0x84>
   d97c4:	991e      	ldr	r1, [sp, #120]	; 0x78
   d97c6:	4620      	mov	r0, r4
   d97c8:	f000 ffe4 	bl	da794 <_Bfree>
   d97cc:	9907      	ldr	r1, [sp, #28]
   d97ce:	4620      	mov	r0, r4
   d97d0:	f000 ffe0 	bl	da794 <_Bfree>
   d97d4:	4631      	mov	r1, r6
   d97d6:	4620      	mov	r0, r4
   d97d8:	f000 ffdc 	bl	da794 <_Bfree>
   d97dc:	9909      	ldr	r1, [sp, #36]	; 0x24
   d97de:	4620      	mov	r0, r4
   d97e0:	f000 ffd8 	bl	da794 <_Bfree>
   d97e4:	4629      	mov	r1, r5
   d97e6:	4620      	mov	r0, r4
   d97e8:	f000 ffd4 	bl	da794 <_Bfree>
   d97ec:	e5d6      	b.n	d939c <_strtod_l+0x84>
   d97ee:	2300      	movs	r3, #0
   d97f0:	ea4f 1828 	mov.w	r8, r8, asr #4
   d97f4:	4650      	mov	r0, sl
   d97f6:	4659      	mov	r1, fp
   d97f8:	4699      	mov	r9, r3
   d97fa:	f1b8 0f01 	cmp.w	r8, #1
   d97fe:	dc21      	bgt.n	d9844 <_strtod_l+0x52c>
   d9800:	b10b      	cbz	r3, d9806 <_strtod_l+0x4ee>
   d9802:	4682      	mov	sl, r0
   d9804:	468b      	mov	fp, r1
   d9806:	4b2e      	ldr	r3, [pc, #184]	; (d98c0 <_strtod_l+0x5a8>)
   d9808:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   d980c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   d9810:	4652      	mov	r2, sl
   d9812:	465b      	mov	r3, fp
   d9814:	e9d9 0100 	ldrd	r0, r1, [r9]
   d9818:	f7ff f948 	bl	d8aac <__aeabi_dmul>
   d981c:	4b29      	ldr	r3, [pc, #164]	; (d98c4 <_strtod_l+0x5ac>)
   d981e:	460a      	mov	r2, r1
   d9820:	400b      	ands	r3, r1
   d9822:	4929      	ldr	r1, [pc, #164]	; (d98c8 <_strtod_l+0x5b0>)
   d9824:	428b      	cmp	r3, r1
   d9826:	4682      	mov	sl, r0
   d9828:	d8be      	bhi.n	d97a8 <_strtod_l+0x490>
   d982a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   d982e:	428b      	cmp	r3, r1
   d9830:	bf86      	itte	hi
   d9832:	f8df b098 	ldrhi.w	fp, [pc, #152]	; d98cc <_strtod_l+0x5b4>
   d9836:	f04f 3aff 	movhi.w	sl, #4294967295
   d983a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   d983e:	2300      	movs	r3, #0
   d9840:	9304      	str	r3, [sp, #16]
   d9842:	e081      	b.n	d9948 <_strtod_l+0x630>
   d9844:	f018 0f01 	tst.w	r8, #1
   d9848:	d007      	beq.n	d985a <_strtod_l+0x542>
   d984a:	4b1d      	ldr	r3, [pc, #116]	; (d98c0 <_strtod_l+0x5a8>)
   d984c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   d9850:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9854:	f7ff f92a 	bl	d8aac <__aeabi_dmul>
   d9858:	2301      	movs	r3, #1
   d985a:	f109 0901 	add.w	r9, r9, #1
   d985e:	ea4f 0868 	mov.w	r8, r8, asr #1
   d9862:	e7ca      	b.n	d97fa <_strtod_l+0x4e2>
   d9864:	d0eb      	beq.n	d983e <_strtod_l+0x526>
   d9866:	f1c8 0800 	rsb	r8, r8, #0
   d986a:	f018 020f 	ands.w	r2, r8, #15
   d986e:	d00a      	beq.n	d9886 <_strtod_l+0x56e>
   d9870:	4b12      	ldr	r3, [pc, #72]	; (d98bc <_strtod_l+0x5a4>)
   d9872:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d9876:	4650      	mov	r0, sl
   d9878:	4659      	mov	r1, fp
   d987a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d987e:	f7ff fa3f 	bl	d8d00 <__aeabi_ddiv>
   d9882:	4682      	mov	sl, r0
   d9884:	468b      	mov	fp, r1
   d9886:	ea5f 1828 	movs.w	r8, r8, asr #4
   d988a:	d0d8      	beq.n	d983e <_strtod_l+0x526>
   d988c:	f1b8 0f1f 	cmp.w	r8, #31
   d9890:	dd1e      	ble.n	d98d0 <_strtod_l+0x5b8>
   d9892:	2500      	movs	r5, #0
   d9894:	462e      	mov	r6, r5
   d9896:	9509      	str	r5, [sp, #36]	; 0x24
   d9898:	9507      	str	r5, [sp, #28]
   d989a:	2322      	movs	r3, #34	; 0x22
   d989c:	f04f 0a00 	mov.w	sl, #0
   d98a0:	f04f 0b00 	mov.w	fp, #0
   d98a4:	6023      	str	r3, [r4, #0]
   d98a6:	e789      	b.n	d97bc <_strtod_l+0x4a4>
   d98a8:	000db742 	.word	0x000db742
   d98ac:	000db75c 	.word	0x000db75c
   d98b0:	000db739 	.word	0x000db739
   d98b4:	000db73c 	.word	0x000db73c
   d98b8:	000db295 	.word	0x000db295
   d98bc:	000db8d8 	.word	0x000db8d8
   d98c0:	000db8b0 	.word	0x000db8b0
   d98c4:	7ff00000 	.word	0x7ff00000
   d98c8:	7ca00000 	.word	0x7ca00000
   d98cc:	7fefffff 	.word	0x7fefffff
   d98d0:	f018 0310 	ands.w	r3, r8, #16
   d98d4:	bf18      	it	ne
   d98d6:	236a      	movne	r3, #106	; 0x6a
   d98d8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; d9c90 <_strtod_l+0x978>
   d98dc:	9304      	str	r3, [sp, #16]
   d98de:	4650      	mov	r0, sl
   d98e0:	4659      	mov	r1, fp
   d98e2:	2300      	movs	r3, #0
   d98e4:	f018 0f01 	tst.w	r8, #1
   d98e8:	d004      	beq.n	d98f4 <_strtod_l+0x5dc>
   d98ea:	e9d9 2300 	ldrd	r2, r3, [r9]
   d98ee:	f7ff f8dd 	bl	d8aac <__aeabi_dmul>
   d98f2:	2301      	movs	r3, #1
   d98f4:	ea5f 0868 	movs.w	r8, r8, asr #1
   d98f8:	f109 0908 	add.w	r9, r9, #8
   d98fc:	d1f2      	bne.n	d98e4 <_strtod_l+0x5cc>
   d98fe:	b10b      	cbz	r3, d9904 <_strtod_l+0x5ec>
   d9900:	4682      	mov	sl, r0
   d9902:	468b      	mov	fp, r1
   d9904:	9b04      	ldr	r3, [sp, #16]
   d9906:	b1bb      	cbz	r3, d9938 <_strtod_l+0x620>
   d9908:	f3cb 530a 	ubfx	r3, fp, #20, #11
   d990c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d9910:	2b00      	cmp	r3, #0
   d9912:	4659      	mov	r1, fp
   d9914:	dd10      	ble.n	d9938 <_strtod_l+0x620>
   d9916:	2b1f      	cmp	r3, #31
   d9918:	f340 8128 	ble.w	d9b6c <_strtod_l+0x854>
   d991c:	2b34      	cmp	r3, #52	; 0x34
   d991e:	bfde      	ittt	le
   d9920:	3b20      	suble	r3, #32
   d9922:	f04f 32ff 	movle.w	r2, #4294967295
   d9926:	fa02 f303 	lslle.w	r3, r2, r3
   d992a:	f04f 0a00 	mov.w	sl, #0
   d992e:	bfcc      	ite	gt
   d9930:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   d9934:	ea03 0b01 	andle.w	fp, r3, r1
   d9938:	2200      	movs	r2, #0
   d993a:	2300      	movs	r3, #0
   d993c:	4650      	mov	r0, sl
   d993e:	4659      	mov	r1, fp
   d9940:	f7ff fb1c 	bl	d8f7c <__aeabi_dcmpeq>
   d9944:	2800      	cmp	r0, #0
   d9946:	d1a4      	bne.n	d9892 <_strtod_l+0x57a>
   d9948:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d994a:	9300      	str	r3, [sp, #0]
   d994c:	990a      	ldr	r1, [sp, #40]	; 0x28
   d994e:	462b      	mov	r3, r5
   d9950:	463a      	mov	r2, r7
   d9952:	4620      	mov	r0, r4
   d9954:	f000 ff73 	bl	da83e <__s2b>
   d9958:	9009      	str	r0, [sp, #36]	; 0x24
   d995a:	2800      	cmp	r0, #0
   d995c:	f43f af24 	beq.w	d97a8 <_strtod_l+0x490>
   d9960:	9b07      	ldr	r3, [sp, #28]
   d9962:	1b9e      	subs	r6, r3, r6
   d9964:	9b08      	ldr	r3, [sp, #32]
   d9966:	2b00      	cmp	r3, #0
   d9968:	bfb4      	ite	lt
   d996a:	4633      	movlt	r3, r6
   d996c:	2300      	movge	r3, #0
   d996e:	9310      	str	r3, [sp, #64]	; 0x40
   d9970:	9b08      	ldr	r3, [sp, #32]
   d9972:	2500      	movs	r5, #0
   d9974:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   d9978:	9318      	str	r3, [sp, #96]	; 0x60
   d997a:	462e      	mov	r6, r5
   d997c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d997e:	4620      	mov	r0, r4
   d9980:	6859      	ldr	r1, [r3, #4]
   d9982:	f000 fed3 	bl	da72c <_Balloc>
   d9986:	9007      	str	r0, [sp, #28]
   d9988:	2800      	cmp	r0, #0
   d998a:	f43f af11 	beq.w	d97b0 <_strtod_l+0x498>
   d998e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d9990:	691a      	ldr	r2, [r3, #16]
   d9992:	3202      	adds	r2, #2
   d9994:	f103 010c 	add.w	r1, r3, #12
   d9998:	0092      	lsls	r2, r2, #2
   d999a:	300c      	adds	r0, #12
   d999c:	f7ff fbfa 	bl	d9194 <memcpy>
   d99a0:	ec4b ab10 	vmov	d0, sl, fp
   d99a4:	aa20      	add	r2, sp, #128	; 0x80
   d99a6:	a91f      	add	r1, sp, #124	; 0x7c
   d99a8:	4620      	mov	r0, r4
   d99aa:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
   d99ae:	f001 fa35 	bl	dae1c <__d2b>
   d99b2:	901e      	str	r0, [sp, #120]	; 0x78
   d99b4:	2800      	cmp	r0, #0
   d99b6:	f43f aefb 	beq.w	d97b0 <_strtod_l+0x498>
   d99ba:	2101      	movs	r1, #1
   d99bc:	4620      	mov	r0, r4
   d99be:	f000 ffcc 	bl	da95a <__i2b>
   d99c2:	4606      	mov	r6, r0
   d99c4:	2800      	cmp	r0, #0
   d99c6:	f43f aef3 	beq.w	d97b0 <_strtod_l+0x498>
   d99ca:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   d99cc:	9904      	ldr	r1, [sp, #16]
   d99ce:	2b00      	cmp	r3, #0
   d99d0:	bfab      	itete	ge
   d99d2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
   d99d4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
   d99d6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
   d99d8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
   d99dc:	bfac      	ite	ge
   d99de:	eb03 0902 	addge.w	r9, r3, r2
   d99e2:	1ad7      	sublt	r7, r2, r3
   d99e4:	9a20      	ldr	r2, [sp, #128]	; 0x80
   d99e6:	eba3 0801 	sub.w	r8, r3, r1
   d99ea:	4490      	add	r8, r2
   d99ec:	4ba3      	ldr	r3, [pc, #652]	; (d9c7c <_strtod_l+0x964>)
   d99ee:	f108 38ff 	add.w	r8, r8, #4294967295
   d99f2:	4598      	cmp	r8, r3
   d99f4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   d99f8:	f280 80cc 	bge.w	d9b94 <_strtod_l+0x87c>
   d99fc:	eba3 0308 	sub.w	r3, r3, r8
   d9a00:	2b1f      	cmp	r3, #31
   d9a02:	eba2 0203 	sub.w	r2, r2, r3
   d9a06:	f04f 0101 	mov.w	r1, #1
   d9a0a:	f300 80b6 	bgt.w	d9b7a <_strtod_l+0x862>
   d9a0e:	fa01 f303 	lsl.w	r3, r1, r3
   d9a12:	9311      	str	r3, [sp, #68]	; 0x44
   d9a14:	2300      	movs	r3, #0
   d9a16:	930c      	str	r3, [sp, #48]	; 0x30
   d9a18:	eb09 0802 	add.w	r8, r9, r2
   d9a1c:	9b04      	ldr	r3, [sp, #16]
   d9a1e:	45c1      	cmp	r9, r8
   d9a20:	4417      	add	r7, r2
   d9a22:	441f      	add	r7, r3
   d9a24:	464b      	mov	r3, r9
   d9a26:	bfa8      	it	ge
   d9a28:	4643      	movge	r3, r8
   d9a2a:	42bb      	cmp	r3, r7
   d9a2c:	bfa8      	it	ge
   d9a2e:	463b      	movge	r3, r7
   d9a30:	2b00      	cmp	r3, #0
   d9a32:	bfc2      	ittt	gt
   d9a34:	eba8 0803 	subgt.w	r8, r8, r3
   d9a38:	1aff      	subgt	r7, r7, r3
   d9a3a:	eba9 0903 	subgt.w	r9, r9, r3
   d9a3e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d9a40:	2b00      	cmp	r3, #0
   d9a42:	dd17      	ble.n	d9a74 <_strtod_l+0x75c>
   d9a44:	4631      	mov	r1, r6
   d9a46:	461a      	mov	r2, r3
   d9a48:	4620      	mov	r0, r4
   d9a4a:	f001 f82b 	bl	daaa4 <__pow5mult>
   d9a4e:	4606      	mov	r6, r0
   d9a50:	2800      	cmp	r0, #0
   d9a52:	f43f aead 	beq.w	d97b0 <_strtod_l+0x498>
   d9a56:	4601      	mov	r1, r0
   d9a58:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   d9a5a:	4620      	mov	r0, r4
   d9a5c:	f000 ff86 	bl	da96c <__multiply>
   d9a60:	900f      	str	r0, [sp, #60]	; 0x3c
   d9a62:	2800      	cmp	r0, #0
   d9a64:	f43f aea4 	beq.w	d97b0 <_strtod_l+0x498>
   d9a68:	991e      	ldr	r1, [sp, #120]	; 0x78
   d9a6a:	4620      	mov	r0, r4
   d9a6c:	f000 fe92 	bl	da794 <_Bfree>
   d9a70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d9a72:	931e      	str	r3, [sp, #120]	; 0x78
   d9a74:	f1b8 0f00 	cmp.w	r8, #0
   d9a78:	f300 8091 	bgt.w	d9b9e <_strtod_l+0x886>
   d9a7c:	9b08      	ldr	r3, [sp, #32]
   d9a7e:	2b00      	cmp	r3, #0
   d9a80:	dd08      	ble.n	d9a94 <_strtod_l+0x77c>
   d9a82:	9a18      	ldr	r2, [sp, #96]	; 0x60
   d9a84:	9907      	ldr	r1, [sp, #28]
   d9a86:	4620      	mov	r0, r4
   d9a88:	f001 f80c 	bl	daaa4 <__pow5mult>
   d9a8c:	9007      	str	r0, [sp, #28]
   d9a8e:	2800      	cmp	r0, #0
   d9a90:	f43f ae8e 	beq.w	d97b0 <_strtod_l+0x498>
   d9a94:	2f00      	cmp	r7, #0
   d9a96:	dd08      	ble.n	d9aaa <_strtod_l+0x792>
   d9a98:	9907      	ldr	r1, [sp, #28]
   d9a9a:	463a      	mov	r2, r7
   d9a9c:	4620      	mov	r0, r4
   d9a9e:	f001 f84f 	bl	dab40 <__lshift>
   d9aa2:	9007      	str	r0, [sp, #28]
   d9aa4:	2800      	cmp	r0, #0
   d9aa6:	f43f ae83 	beq.w	d97b0 <_strtod_l+0x498>
   d9aaa:	f1b9 0f00 	cmp.w	r9, #0
   d9aae:	dd08      	ble.n	d9ac2 <_strtod_l+0x7aa>
   d9ab0:	4631      	mov	r1, r6
   d9ab2:	464a      	mov	r2, r9
   d9ab4:	4620      	mov	r0, r4
   d9ab6:	f001 f843 	bl	dab40 <__lshift>
   d9aba:	4606      	mov	r6, r0
   d9abc:	2800      	cmp	r0, #0
   d9abe:	f43f ae77 	beq.w	d97b0 <_strtod_l+0x498>
   d9ac2:	9a07      	ldr	r2, [sp, #28]
   d9ac4:	991e      	ldr	r1, [sp, #120]	; 0x78
   d9ac6:	4620      	mov	r0, r4
   d9ac8:	f001 f8b5 	bl	dac36 <__mdiff>
   d9acc:	4605      	mov	r5, r0
   d9ace:	2800      	cmp	r0, #0
   d9ad0:	f43f ae6e 	beq.w	d97b0 <_strtod_l+0x498>
   d9ad4:	68c3      	ldr	r3, [r0, #12]
   d9ad6:	930f      	str	r3, [sp, #60]	; 0x3c
   d9ad8:	2300      	movs	r3, #0
   d9ada:	60c3      	str	r3, [r0, #12]
   d9adc:	4631      	mov	r1, r6
   d9ade:	f001 f88e 	bl	dabfe <__mcmp>
   d9ae2:	2800      	cmp	r0, #0
   d9ae4:	da65      	bge.n	d9bb2 <_strtod_l+0x89a>
   d9ae6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d9ae8:	ea53 030a 	orrs.w	r3, r3, sl
   d9aec:	f040 8087 	bne.w	d9bfe <_strtod_l+0x8e6>
   d9af0:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d9af4:	2b00      	cmp	r3, #0
   d9af6:	f040 8082 	bne.w	d9bfe <_strtod_l+0x8e6>
   d9afa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d9afe:	0d1b      	lsrs	r3, r3, #20
   d9b00:	051b      	lsls	r3, r3, #20
   d9b02:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   d9b06:	d97a      	bls.n	d9bfe <_strtod_l+0x8e6>
   d9b08:	696b      	ldr	r3, [r5, #20]
   d9b0a:	b913      	cbnz	r3, d9b12 <_strtod_l+0x7fa>
   d9b0c:	692b      	ldr	r3, [r5, #16]
   d9b0e:	2b01      	cmp	r3, #1
   d9b10:	dd75      	ble.n	d9bfe <_strtod_l+0x8e6>
   d9b12:	4629      	mov	r1, r5
   d9b14:	2201      	movs	r2, #1
   d9b16:	4620      	mov	r0, r4
   d9b18:	f001 f812 	bl	dab40 <__lshift>
   d9b1c:	4631      	mov	r1, r6
   d9b1e:	4605      	mov	r5, r0
   d9b20:	f001 f86d 	bl	dabfe <__mcmp>
   d9b24:	2800      	cmp	r0, #0
   d9b26:	dd6a      	ble.n	d9bfe <_strtod_l+0x8e6>
   d9b28:	9904      	ldr	r1, [sp, #16]
   d9b2a:	4a55      	ldr	r2, [pc, #340]	; (d9c80 <_strtod_l+0x968>)
   d9b2c:	465b      	mov	r3, fp
   d9b2e:	2900      	cmp	r1, #0
   d9b30:	f000 8085 	beq.w	d9c3e <_strtod_l+0x926>
   d9b34:	ea02 010b 	and.w	r1, r2, fp
   d9b38:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   d9b3c:	dc7f      	bgt.n	d9c3e <_strtod_l+0x926>
   d9b3e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   d9b42:	f77f aeaa 	ble.w	d989a <_strtod_l+0x582>
   d9b46:	4a4f      	ldr	r2, [pc, #316]	; (d9c84 <_strtod_l+0x96c>)
   d9b48:	2300      	movs	r3, #0
   d9b4a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
   d9b4e:	4650      	mov	r0, sl
   d9b50:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   d9b54:	4659      	mov	r1, fp
   d9b56:	f7fe ffa9 	bl	d8aac <__aeabi_dmul>
   d9b5a:	460b      	mov	r3, r1
   d9b5c:	4303      	orrs	r3, r0
   d9b5e:	bf08      	it	eq
   d9b60:	2322      	moveq	r3, #34	; 0x22
   d9b62:	4682      	mov	sl, r0
   d9b64:	468b      	mov	fp, r1
   d9b66:	bf08      	it	eq
   d9b68:	6023      	streq	r3, [r4, #0]
   d9b6a:	e62b      	b.n	d97c4 <_strtod_l+0x4ac>
   d9b6c:	f04f 32ff 	mov.w	r2, #4294967295
   d9b70:	fa02 f303 	lsl.w	r3, r2, r3
   d9b74:	ea03 0a0a 	and.w	sl, r3, sl
   d9b78:	e6de      	b.n	d9938 <_strtod_l+0x620>
   d9b7a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   d9b7e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   d9b82:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   d9b86:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   d9b8a:	fa01 f308 	lsl.w	r3, r1, r8
   d9b8e:	930c      	str	r3, [sp, #48]	; 0x30
   d9b90:	9111      	str	r1, [sp, #68]	; 0x44
   d9b92:	e741      	b.n	d9a18 <_strtod_l+0x700>
   d9b94:	2300      	movs	r3, #0
   d9b96:	930c      	str	r3, [sp, #48]	; 0x30
   d9b98:	2301      	movs	r3, #1
   d9b9a:	9311      	str	r3, [sp, #68]	; 0x44
   d9b9c:	e73c      	b.n	d9a18 <_strtod_l+0x700>
   d9b9e:	991e      	ldr	r1, [sp, #120]	; 0x78
   d9ba0:	4642      	mov	r2, r8
   d9ba2:	4620      	mov	r0, r4
   d9ba4:	f000 ffcc 	bl	dab40 <__lshift>
   d9ba8:	901e      	str	r0, [sp, #120]	; 0x78
   d9baa:	2800      	cmp	r0, #0
   d9bac:	f47f af66 	bne.w	d9a7c <_strtod_l+0x764>
   d9bb0:	e5fe      	b.n	d97b0 <_strtod_l+0x498>
   d9bb2:	465f      	mov	r7, fp
   d9bb4:	d16e      	bne.n	d9c94 <_strtod_l+0x97c>
   d9bb6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   d9bb8:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d9bbc:	b342      	cbz	r2, d9c10 <_strtod_l+0x8f8>
   d9bbe:	4a32      	ldr	r2, [pc, #200]	; (d9c88 <_strtod_l+0x970>)
   d9bc0:	4293      	cmp	r3, r2
   d9bc2:	d128      	bne.n	d9c16 <_strtod_l+0x8fe>
   d9bc4:	9b04      	ldr	r3, [sp, #16]
   d9bc6:	4650      	mov	r0, sl
   d9bc8:	b1eb      	cbz	r3, d9c06 <_strtod_l+0x8ee>
   d9bca:	4a2d      	ldr	r2, [pc, #180]	; (d9c80 <_strtod_l+0x968>)
   d9bcc:	403a      	ands	r2, r7
   d9bce:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
   d9bd2:	f04f 31ff 	mov.w	r1, #4294967295
   d9bd6:	d819      	bhi.n	d9c0c <_strtod_l+0x8f4>
   d9bd8:	0d12      	lsrs	r2, r2, #20
   d9bda:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   d9bde:	fa01 f303 	lsl.w	r3, r1, r3
   d9be2:	4298      	cmp	r0, r3
   d9be4:	d117      	bne.n	d9c16 <_strtod_l+0x8fe>
   d9be6:	4b29      	ldr	r3, [pc, #164]	; (d9c8c <_strtod_l+0x974>)
   d9be8:	429f      	cmp	r7, r3
   d9bea:	d102      	bne.n	d9bf2 <_strtod_l+0x8da>
   d9bec:	3001      	adds	r0, #1
   d9bee:	f43f addf 	beq.w	d97b0 <_strtod_l+0x498>
   d9bf2:	4b23      	ldr	r3, [pc, #140]	; (d9c80 <_strtod_l+0x968>)
   d9bf4:	403b      	ands	r3, r7
   d9bf6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   d9bfa:	f04f 0a00 	mov.w	sl, #0
   d9bfe:	9b04      	ldr	r3, [sp, #16]
   d9c00:	2b00      	cmp	r3, #0
   d9c02:	d1a0      	bne.n	d9b46 <_strtod_l+0x82e>
   d9c04:	e5de      	b.n	d97c4 <_strtod_l+0x4ac>
   d9c06:	f04f 33ff 	mov.w	r3, #4294967295
   d9c0a:	e7ea      	b.n	d9be2 <_strtod_l+0x8ca>
   d9c0c:	460b      	mov	r3, r1
   d9c0e:	e7e8      	b.n	d9be2 <_strtod_l+0x8ca>
   d9c10:	ea53 030a 	orrs.w	r3, r3, sl
   d9c14:	d088      	beq.n	d9b28 <_strtod_l+0x810>
   d9c16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d9c18:	b1db      	cbz	r3, d9c52 <_strtod_l+0x93a>
   d9c1a:	423b      	tst	r3, r7
   d9c1c:	d0ef      	beq.n	d9bfe <_strtod_l+0x8e6>
   d9c1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d9c20:	9a04      	ldr	r2, [sp, #16]
   d9c22:	4650      	mov	r0, sl
   d9c24:	4659      	mov	r1, fp
   d9c26:	b1c3      	cbz	r3, d9c5a <_strtod_l+0x942>
   d9c28:	f7ff fb58 	bl	d92dc <sulp>
   d9c2c:	4602      	mov	r2, r0
   d9c2e:	460b      	mov	r3, r1
   d9c30:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d9c34:	f7fe fd84 	bl	d8740 <__adddf3>
   d9c38:	4682      	mov	sl, r0
   d9c3a:	468b      	mov	fp, r1
   d9c3c:	e7df      	b.n	d9bfe <_strtod_l+0x8e6>
   d9c3e:	4013      	ands	r3, r2
   d9c40:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   d9c44:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   d9c48:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   d9c4c:	f04f 3aff 	mov.w	sl, #4294967295
   d9c50:	e7d5      	b.n	d9bfe <_strtod_l+0x8e6>
   d9c52:	9b11      	ldr	r3, [sp, #68]	; 0x44
   d9c54:	ea13 0f0a 	tst.w	r3, sl
   d9c58:	e7e0      	b.n	d9c1c <_strtod_l+0x904>
   d9c5a:	f7ff fb3f 	bl	d92dc <sulp>
   d9c5e:	4602      	mov	r2, r0
   d9c60:	460b      	mov	r3, r1
   d9c62:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d9c66:	f7fe fd69 	bl	d873c <__aeabi_dsub>
   d9c6a:	2200      	movs	r2, #0
   d9c6c:	2300      	movs	r3, #0
   d9c6e:	4682      	mov	sl, r0
   d9c70:	468b      	mov	fp, r1
   d9c72:	f7ff f983 	bl	d8f7c <__aeabi_dcmpeq>
   d9c76:	2800      	cmp	r0, #0
   d9c78:	d0c1      	beq.n	d9bfe <_strtod_l+0x8e6>
   d9c7a:	e60e      	b.n	d989a <_strtod_l+0x582>
   d9c7c:	fffffc02 	.word	0xfffffc02
   d9c80:	7ff00000 	.word	0x7ff00000
   d9c84:	39500000 	.word	0x39500000
   d9c88:	000fffff 	.word	0x000fffff
   d9c8c:	7fefffff 	.word	0x7fefffff
   d9c90:	000db770 	.word	0x000db770
   d9c94:	4631      	mov	r1, r6
   d9c96:	4628      	mov	r0, r5
   d9c98:	f001 f910 	bl	daebc <__ratio>
   d9c9c:	ec59 8b10 	vmov	r8, r9, d0
   d9ca0:	ee10 0a10 	vmov	r0, s0
   d9ca4:	2200      	movs	r2, #0
   d9ca6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d9caa:	4649      	mov	r1, r9
   d9cac:	f7ff f97a 	bl	d8fa4 <__aeabi_dcmple>
   d9cb0:	2800      	cmp	r0, #0
   d9cb2:	d07c      	beq.n	d9dae <_strtod_l+0xa96>
   d9cb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d9cb6:	2b00      	cmp	r3, #0
   d9cb8:	d04c      	beq.n	d9d54 <_strtod_l+0xa3c>
   d9cba:	4b95      	ldr	r3, [pc, #596]	; (d9f10 <_strtod_l+0xbf8>)
   d9cbc:	2200      	movs	r2, #0
   d9cbe:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   d9cc2:	f8df 924c 	ldr.w	r9, [pc, #588]	; d9f10 <_strtod_l+0xbf8>
   d9cc6:	f04f 0800 	mov.w	r8, #0
   d9cca:	4b92      	ldr	r3, [pc, #584]	; (d9f14 <_strtod_l+0xbfc>)
   d9ccc:	403b      	ands	r3, r7
   d9cce:	9311      	str	r3, [sp, #68]	; 0x44
   d9cd0:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d9cd2:	4b91      	ldr	r3, [pc, #580]	; (d9f18 <_strtod_l+0xc00>)
   d9cd4:	429a      	cmp	r2, r3
   d9cd6:	f040 80b2 	bne.w	d9e3e <_strtod_l+0xb26>
   d9cda:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d9cde:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d9ce2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   d9ce6:	ec4b ab10 	vmov	d0, sl, fp
   d9cea:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
   d9cee:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   d9cf2:	f001 f817 	bl	dad24 <__ulp>
   d9cf6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d9cfa:	ec53 2b10 	vmov	r2, r3, d0
   d9cfe:	f7fe fed5 	bl	d8aac <__aeabi_dmul>
   d9d02:	4652      	mov	r2, sl
   d9d04:	465b      	mov	r3, fp
   d9d06:	f7fe fd1b 	bl	d8740 <__adddf3>
   d9d0a:	460b      	mov	r3, r1
   d9d0c:	4981      	ldr	r1, [pc, #516]	; (d9f14 <_strtod_l+0xbfc>)
   d9d0e:	4a83      	ldr	r2, [pc, #524]	; (d9f1c <_strtod_l+0xc04>)
   d9d10:	4019      	ands	r1, r3
   d9d12:	4291      	cmp	r1, r2
   d9d14:	4682      	mov	sl, r0
   d9d16:	d95e      	bls.n	d9dd6 <_strtod_l+0xabe>
   d9d18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d9d1a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   d9d1e:	4293      	cmp	r3, r2
   d9d20:	d103      	bne.n	d9d2a <_strtod_l+0xa12>
   d9d22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d9d24:	3301      	adds	r3, #1
   d9d26:	f43f ad43 	beq.w	d97b0 <_strtod_l+0x498>
   d9d2a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; d9f28 <_strtod_l+0xc10>
   d9d2e:	f04f 3aff 	mov.w	sl, #4294967295
   d9d32:	991e      	ldr	r1, [sp, #120]	; 0x78
   d9d34:	4620      	mov	r0, r4
   d9d36:	f000 fd2d 	bl	da794 <_Bfree>
   d9d3a:	9907      	ldr	r1, [sp, #28]
   d9d3c:	4620      	mov	r0, r4
   d9d3e:	f000 fd29 	bl	da794 <_Bfree>
   d9d42:	4631      	mov	r1, r6
   d9d44:	4620      	mov	r0, r4
   d9d46:	f000 fd25 	bl	da794 <_Bfree>
   d9d4a:	4629      	mov	r1, r5
   d9d4c:	4620      	mov	r0, r4
   d9d4e:	f000 fd21 	bl	da794 <_Bfree>
   d9d52:	e613      	b.n	d997c <_strtod_l+0x664>
   d9d54:	f1ba 0f00 	cmp.w	sl, #0
   d9d58:	d11b      	bne.n	d9d92 <_strtod_l+0xa7a>
   d9d5a:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d9d5e:	b9f3      	cbnz	r3, d9d9e <_strtod_l+0xa86>
   d9d60:	4b6b      	ldr	r3, [pc, #428]	; (d9f10 <_strtod_l+0xbf8>)
   d9d62:	2200      	movs	r2, #0
   d9d64:	4640      	mov	r0, r8
   d9d66:	4649      	mov	r1, r9
   d9d68:	f7ff f912 	bl	d8f90 <__aeabi_dcmplt>
   d9d6c:	b9d0      	cbnz	r0, d9da4 <_strtod_l+0xa8c>
   d9d6e:	4640      	mov	r0, r8
   d9d70:	4649      	mov	r1, r9
   d9d72:	4b6b      	ldr	r3, [pc, #428]	; (d9f20 <_strtod_l+0xc08>)
   d9d74:	2200      	movs	r2, #0
   d9d76:	f7fe fe99 	bl	d8aac <__aeabi_dmul>
   d9d7a:	4680      	mov	r8, r0
   d9d7c:	4689      	mov	r9, r1
   d9d7e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   d9d82:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
   d9d86:	931b      	str	r3, [sp, #108]	; 0x6c
   d9d88:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
   d9d8c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   d9d90:	e79b      	b.n	d9cca <_strtod_l+0x9b2>
   d9d92:	f1ba 0f01 	cmp.w	sl, #1
   d9d96:	d102      	bne.n	d9d9e <_strtod_l+0xa86>
   d9d98:	2f00      	cmp	r7, #0
   d9d9a:	f43f ad7e 	beq.w	d989a <_strtod_l+0x582>
   d9d9e:	4b61      	ldr	r3, [pc, #388]	; (d9f24 <_strtod_l+0xc0c>)
   d9da0:	2200      	movs	r2, #0
   d9da2:	e78c      	b.n	d9cbe <_strtod_l+0x9a6>
   d9da4:	f8df 9178 	ldr.w	r9, [pc, #376]	; d9f20 <_strtod_l+0xc08>
   d9da8:	f04f 0800 	mov.w	r8, #0
   d9dac:	e7e7      	b.n	d9d7e <_strtod_l+0xa66>
   d9dae:	4b5c      	ldr	r3, [pc, #368]	; (d9f20 <_strtod_l+0xc08>)
   d9db0:	4640      	mov	r0, r8
   d9db2:	4649      	mov	r1, r9
   d9db4:	2200      	movs	r2, #0
   d9db6:	f7fe fe79 	bl	d8aac <__aeabi_dmul>
   d9dba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d9dbc:	4680      	mov	r8, r0
   d9dbe:	4689      	mov	r9, r1
   d9dc0:	b933      	cbnz	r3, d9dd0 <_strtod_l+0xab8>
   d9dc2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d9dc6:	9012      	str	r0, [sp, #72]	; 0x48
   d9dc8:	9313      	str	r3, [sp, #76]	; 0x4c
   d9dca:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   d9dce:	e7dd      	b.n	d9d8c <_strtod_l+0xa74>
   d9dd0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
   d9dd4:	e7f9      	b.n	d9dca <_strtod_l+0xab2>
   d9dd6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   d9dda:	9b04      	ldr	r3, [sp, #16]
   d9ddc:	2b00      	cmp	r3, #0
   d9dde:	d1a8      	bne.n	d9d32 <_strtod_l+0xa1a>
   d9de0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d9de4:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d9de6:	0d1b      	lsrs	r3, r3, #20
   d9de8:	051b      	lsls	r3, r3, #20
   d9dea:	429a      	cmp	r2, r3
   d9dec:	d1a1      	bne.n	d9d32 <_strtod_l+0xa1a>
   d9dee:	4640      	mov	r0, r8
   d9df0:	4649      	mov	r1, r9
   d9df2:	f001 f8ff 	bl	daff4 <__aeabi_d2lz>
   d9df6:	f7fe fe2b 	bl	d8a50 <__aeabi_l2d>
   d9dfa:	4602      	mov	r2, r0
   d9dfc:	460b      	mov	r3, r1
   d9dfe:	4640      	mov	r0, r8
   d9e00:	4649      	mov	r1, r9
   d9e02:	f7fe fc9b 	bl	d873c <__aeabi_dsub>
   d9e06:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   d9e08:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d9e0c:	ea43 030a 	orr.w	r3, r3, sl
   d9e10:	4313      	orrs	r3, r2
   d9e12:	4680      	mov	r8, r0
   d9e14:	4689      	mov	r9, r1
   d9e16:	d053      	beq.n	d9ec0 <_strtod_l+0xba8>
   d9e18:	a335      	add	r3, pc, #212	; (adr r3, d9ef0 <_strtod_l+0xbd8>)
   d9e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9e1e:	f7ff f8b7 	bl	d8f90 <__aeabi_dcmplt>
   d9e22:	2800      	cmp	r0, #0
   d9e24:	f47f acce 	bne.w	d97c4 <_strtod_l+0x4ac>
   d9e28:	a333      	add	r3, pc, #204	; (adr r3, d9ef8 <_strtod_l+0xbe0>)
   d9e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9e2e:	4640      	mov	r0, r8
   d9e30:	4649      	mov	r1, r9
   d9e32:	f7ff f8cb 	bl	d8fcc <__aeabi_dcmpgt>
   d9e36:	2800      	cmp	r0, #0
   d9e38:	f43f af7b 	beq.w	d9d32 <_strtod_l+0xa1a>
   d9e3c:	e4c2      	b.n	d97c4 <_strtod_l+0x4ac>
   d9e3e:	9b04      	ldr	r3, [sp, #16]
   d9e40:	b333      	cbz	r3, d9e90 <_strtod_l+0xb78>
   d9e42:	9b11      	ldr	r3, [sp, #68]	; 0x44
   d9e44:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   d9e48:	d822      	bhi.n	d9e90 <_strtod_l+0xb78>
   d9e4a:	a32d      	add	r3, pc, #180	; (adr r3, d9f00 <_strtod_l+0xbe8>)
   d9e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9e50:	4640      	mov	r0, r8
   d9e52:	4649      	mov	r1, r9
   d9e54:	f7ff f8a6 	bl	d8fa4 <__aeabi_dcmple>
   d9e58:	b1a0      	cbz	r0, d9e84 <_strtod_l+0xb6c>
   d9e5a:	4649      	mov	r1, r9
   d9e5c:	4640      	mov	r0, r8
   d9e5e:	f7ff f8e7 	bl	d9030 <__aeabi_d2uiz>
   d9e62:	2801      	cmp	r0, #1
   d9e64:	bf38      	it	cc
   d9e66:	2001      	movcc	r0, #1
   d9e68:	f7fe fda6 	bl	d89b8 <__aeabi_ui2d>
   d9e6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d9e6e:	4680      	mov	r8, r0
   d9e70:	4689      	mov	r9, r1
   d9e72:	bb13      	cbnz	r3, d9eba <_strtod_l+0xba2>
   d9e74:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d9e78:	9014      	str	r0, [sp, #80]	; 0x50
   d9e7a:	9315      	str	r3, [sp, #84]	; 0x54
   d9e7c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   d9e80:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   d9e84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d9e86:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d9e88:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   d9e8c:	1a9b      	subs	r3, r3, r2
   d9e8e:	930d      	str	r3, [sp, #52]	; 0x34
   d9e90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d9e94:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
   d9e98:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   d9e9c:	f000 ff42 	bl	dad24 <__ulp>
   d9ea0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d9ea4:	ec53 2b10 	vmov	r2, r3, d0
   d9ea8:	f7fe fe00 	bl	d8aac <__aeabi_dmul>
   d9eac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d9eb0:	f7fe fc46 	bl	d8740 <__adddf3>
   d9eb4:	4682      	mov	sl, r0
   d9eb6:	468b      	mov	fp, r1
   d9eb8:	e78f      	b.n	d9dda <_strtod_l+0xac2>
   d9eba:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
   d9ebe:	e7dd      	b.n	d9e7c <_strtod_l+0xb64>
   d9ec0:	a311      	add	r3, pc, #68	; (adr r3, d9f08 <_strtod_l+0xbf0>)
   d9ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9ec6:	f7ff f863 	bl	d8f90 <__aeabi_dcmplt>
   d9eca:	e7b4      	b.n	d9e36 <_strtod_l+0xb1e>
   d9ecc:	2300      	movs	r3, #0
   d9ece:	930e      	str	r3, [sp, #56]	; 0x38
   d9ed0:	9a19      	ldr	r2, [sp, #100]	; 0x64
   d9ed2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9ed4:	6013      	str	r3, [r2, #0]
   d9ed6:	f7ff ba65 	b.w	d93a4 <_strtod_l+0x8c>
   d9eda:	2b65      	cmp	r3, #101	; 0x65
   d9edc:	f43f ab5d 	beq.w	d959a <_strtod_l+0x282>
   d9ee0:	2b45      	cmp	r3, #69	; 0x45
   d9ee2:	f43f ab5a 	beq.w	d959a <_strtod_l+0x282>
   d9ee6:	2201      	movs	r2, #1
   d9ee8:	f7ff bb92 	b.w	d9610 <_strtod_l+0x2f8>
   d9eec:	f3af 8000 	nop.w
   d9ef0:	94a03595 	.word	0x94a03595
   d9ef4:	3fdfffff 	.word	0x3fdfffff
   d9ef8:	35afe535 	.word	0x35afe535
   d9efc:	3fe00000 	.word	0x3fe00000
   d9f00:	ffc00000 	.word	0xffc00000
   d9f04:	41dfffff 	.word	0x41dfffff
   d9f08:	94a03595 	.word	0x94a03595
   d9f0c:	3fcfffff 	.word	0x3fcfffff
   d9f10:	3ff00000 	.word	0x3ff00000
   d9f14:	7ff00000 	.word	0x7ff00000
   d9f18:	7fe00000 	.word	0x7fe00000
   d9f1c:	7c9fffff 	.word	0x7c9fffff
   d9f20:	3fe00000 	.word	0x3fe00000
   d9f24:	bff00000 	.word	0xbff00000
   d9f28:	7fefffff 	.word	0x7fefffff

000d9f2c <strtod>:
   d9f2c:	460a      	mov	r2, r1
   d9f2e:	4601      	mov	r1, r0
   d9f30:	4802      	ldr	r0, [pc, #8]	; (d9f3c <strtod+0x10>)
   d9f32:	4b03      	ldr	r3, [pc, #12]	; (d9f40 <strtod+0x14>)
   d9f34:	6800      	ldr	r0, [r0, #0]
   d9f36:	f7ff b9ef 	b.w	d9318 <_strtod_l>
   d9f3a:	bf00      	nop
   d9f3c:	200353f0 	.word	0x200353f0
   d9f40:	20035458 	.word	0x20035458

000d9f44 <_strtol_l.isra.0>:
   d9f44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9f48:	4e3a      	ldr	r6, [pc, #232]	; (da034 <_strtol_l.isra.0+0xf0>)
   d9f4a:	4686      	mov	lr, r0
   d9f4c:	468c      	mov	ip, r1
   d9f4e:	4660      	mov	r0, ip
   d9f50:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d9f54:	5da5      	ldrb	r5, [r4, r6]
   d9f56:	f015 0508 	ands.w	r5, r5, #8
   d9f5a:	d1f8      	bne.n	d9f4e <_strtol_l.isra.0+0xa>
   d9f5c:	2c2d      	cmp	r4, #45	; 0x2d
   d9f5e:	d133      	bne.n	d9fc8 <_strtol_l.isra.0+0x84>
   d9f60:	f89c 4000 	ldrb.w	r4, [ip]
   d9f64:	f04f 0801 	mov.w	r8, #1
   d9f68:	f100 0c02 	add.w	ip, r0, #2
   d9f6c:	2b00      	cmp	r3, #0
   d9f6e:	d05c      	beq.n	da02a <_strtol_l.isra.0+0xe6>
   d9f70:	2b10      	cmp	r3, #16
   d9f72:	d10c      	bne.n	d9f8e <_strtol_l.isra.0+0x4a>
   d9f74:	2c30      	cmp	r4, #48	; 0x30
   d9f76:	d10a      	bne.n	d9f8e <_strtol_l.isra.0+0x4a>
   d9f78:	f89c 0000 	ldrb.w	r0, [ip]
   d9f7c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d9f80:	2858      	cmp	r0, #88	; 0x58
   d9f82:	d14d      	bne.n	da020 <_strtol_l.isra.0+0xdc>
   d9f84:	f89c 4001 	ldrb.w	r4, [ip, #1]
   d9f88:	2310      	movs	r3, #16
   d9f8a:	f10c 0c02 	add.w	ip, ip, #2
   d9f8e:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   d9f92:	3f01      	subs	r7, #1
   d9f94:	2600      	movs	r6, #0
   d9f96:	fbb7 f9f3 	udiv	r9, r7, r3
   d9f9a:	4630      	mov	r0, r6
   d9f9c:	fb03 7a19 	mls	sl, r3, r9, r7
   d9fa0:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   d9fa4:	2d09      	cmp	r5, #9
   d9fa6:	d818      	bhi.n	d9fda <_strtol_l.isra.0+0x96>
   d9fa8:	462c      	mov	r4, r5
   d9faa:	42a3      	cmp	r3, r4
   d9fac:	dd24      	ble.n	d9ff8 <_strtol_l.isra.0+0xb4>
   d9fae:	1c75      	adds	r5, r6, #1
   d9fb0:	d007      	beq.n	d9fc2 <_strtol_l.isra.0+0x7e>
   d9fb2:	4581      	cmp	r9, r0
   d9fb4:	d31d      	bcc.n	d9ff2 <_strtol_l.isra.0+0xae>
   d9fb6:	d101      	bne.n	d9fbc <_strtol_l.isra.0+0x78>
   d9fb8:	45a2      	cmp	sl, r4
   d9fba:	db1a      	blt.n	d9ff2 <_strtol_l.isra.0+0xae>
   d9fbc:	fb00 4003 	mla	r0, r0, r3, r4
   d9fc0:	2601      	movs	r6, #1
   d9fc2:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d9fc6:	e7eb      	b.n	d9fa0 <_strtol_l.isra.0+0x5c>
   d9fc8:	2c2b      	cmp	r4, #43	; 0x2b
   d9fca:	bf08      	it	eq
   d9fcc:	f89c 4000 	ldrbeq.w	r4, [ip]
   d9fd0:	46a8      	mov	r8, r5
   d9fd2:	bf08      	it	eq
   d9fd4:	f100 0c02 	addeq.w	ip, r0, #2
   d9fd8:	e7c8      	b.n	d9f6c <_strtol_l.isra.0+0x28>
   d9fda:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   d9fde:	2d19      	cmp	r5, #25
   d9fe0:	d801      	bhi.n	d9fe6 <_strtol_l.isra.0+0xa2>
   d9fe2:	3c37      	subs	r4, #55	; 0x37
   d9fe4:	e7e1      	b.n	d9faa <_strtol_l.isra.0+0x66>
   d9fe6:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   d9fea:	2d19      	cmp	r5, #25
   d9fec:	d804      	bhi.n	d9ff8 <_strtol_l.isra.0+0xb4>
   d9fee:	3c57      	subs	r4, #87	; 0x57
   d9ff0:	e7db      	b.n	d9faa <_strtol_l.isra.0+0x66>
   d9ff2:	f04f 36ff 	mov.w	r6, #4294967295
   d9ff6:	e7e4      	b.n	d9fc2 <_strtol_l.isra.0+0x7e>
   d9ff8:	1c73      	adds	r3, r6, #1
   d9ffa:	d106      	bne.n	da00a <_strtol_l.isra.0+0xc6>
   d9ffc:	2322      	movs	r3, #34	; 0x22
   d9ffe:	f8ce 3000 	str.w	r3, [lr]
   da002:	4638      	mov	r0, r7
   da004:	b942      	cbnz	r2, da018 <_strtol_l.isra.0+0xd4>
   da006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da00a:	f1b8 0f00 	cmp.w	r8, #0
   da00e:	d000      	beq.n	da012 <_strtol_l.isra.0+0xce>
   da010:	4240      	negs	r0, r0
   da012:	2a00      	cmp	r2, #0
   da014:	d0f7      	beq.n	da006 <_strtol_l.isra.0+0xc2>
   da016:	b10e      	cbz	r6, da01c <_strtol_l.isra.0+0xd8>
   da018:	f10c 31ff 	add.w	r1, ip, #4294967295
   da01c:	6011      	str	r1, [r2, #0]
   da01e:	e7f2      	b.n	da006 <_strtol_l.isra.0+0xc2>
   da020:	2430      	movs	r4, #48	; 0x30
   da022:	2b00      	cmp	r3, #0
   da024:	d1b3      	bne.n	d9f8e <_strtol_l.isra.0+0x4a>
   da026:	2308      	movs	r3, #8
   da028:	e7b1      	b.n	d9f8e <_strtol_l.isra.0+0x4a>
   da02a:	2c30      	cmp	r4, #48	; 0x30
   da02c:	d0a4      	beq.n	d9f78 <_strtol_l.isra.0+0x34>
   da02e:	230a      	movs	r3, #10
   da030:	e7ad      	b.n	d9f8e <_strtol_l.isra.0+0x4a>
   da032:	bf00      	nop
   da034:	000db799 	.word	0x000db799

000da038 <strtol>:
   da038:	4613      	mov	r3, r2
   da03a:	460a      	mov	r2, r1
   da03c:	4601      	mov	r1, r0
   da03e:	4802      	ldr	r0, [pc, #8]	; (da048 <strtol+0x10>)
   da040:	6800      	ldr	r0, [r0, #0]
   da042:	f7ff bf7f 	b.w	d9f44 <_strtol_l.isra.0>
   da046:	bf00      	nop
   da048:	200353f0 	.word	0x200353f0

000da04c <rshift>:
   da04c:	6903      	ldr	r3, [r0, #16]
   da04e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   da052:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   da056:	ea4f 1261 	mov.w	r2, r1, asr #5
   da05a:	f100 0414 	add.w	r4, r0, #20
   da05e:	dd45      	ble.n	da0ec <rshift+0xa0>
   da060:	f011 011f 	ands.w	r1, r1, #31
   da064:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   da068:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   da06c:	d10c      	bne.n	da088 <rshift+0x3c>
   da06e:	f100 0710 	add.w	r7, r0, #16
   da072:	4629      	mov	r1, r5
   da074:	42b1      	cmp	r1, r6
   da076:	d334      	bcc.n	da0e2 <rshift+0x96>
   da078:	1a9b      	subs	r3, r3, r2
   da07a:	009b      	lsls	r3, r3, #2
   da07c:	1eea      	subs	r2, r5, #3
   da07e:	4296      	cmp	r6, r2
   da080:	bf38      	it	cc
   da082:	2300      	movcc	r3, #0
   da084:	4423      	add	r3, r4
   da086:	e015      	b.n	da0b4 <rshift+0x68>
   da088:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   da08c:	f1c1 0820 	rsb	r8, r1, #32
   da090:	40cf      	lsrs	r7, r1
   da092:	f105 0e04 	add.w	lr, r5, #4
   da096:	46a1      	mov	r9, r4
   da098:	4576      	cmp	r6, lr
   da09a:	46f4      	mov	ip, lr
   da09c:	d815      	bhi.n	da0ca <rshift+0x7e>
   da09e:	1a9b      	subs	r3, r3, r2
   da0a0:	009a      	lsls	r2, r3, #2
   da0a2:	3a04      	subs	r2, #4
   da0a4:	3501      	adds	r5, #1
   da0a6:	42ae      	cmp	r6, r5
   da0a8:	bf38      	it	cc
   da0aa:	2200      	movcc	r2, #0
   da0ac:	18a3      	adds	r3, r4, r2
   da0ae:	50a7      	str	r7, [r4, r2]
   da0b0:	b107      	cbz	r7, da0b4 <rshift+0x68>
   da0b2:	3304      	adds	r3, #4
   da0b4:	1b1a      	subs	r2, r3, r4
   da0b6:	42a3      	cmp	r3, r4
   da0b8:	ea4f 02a2 	mov.w	r2, r2, asr #2
   da0bc:	bf08      	it	eq
   da0be:	2300      	moveq	r3, #0
   da0c0:	6102      	str	r2, [r0, #16]
   da0c2:	bf08      	it	eq
   da0c4:	6143      	streq	r3, [r0, #20]
   da0c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   da0ca:	f8dc c000 	ldr.w	ip, [ip]
   da0ce:	fa0c fc08 	lsl.w	ip, ip, r8
   da0d2:	ea4c 0707 	orr.w	r7, ip, r7
   da0d6:	f849 7b04 	str.w	r7, [r9], #4
   da0da:	f85e 7b04 	ldr.w	r7, [lr], #4
   da0de:	40cf      	lsrs	r7, r1
   da0e0:	e7da      	b.n	da098 <rshift+0x4c>
   da0e2:	f851 cb04 	ldr.w	ip, [r1], #4
   da0e6:	f847 cf04 	str.w	ip, [r7, #4]!
   da0ea:	e7c3      	b.n	da074 <rshift+0x28>
   da0ec:	4623      	mov	r3, r4
   da0ee:	e7e1      	b.n	da0b4 <rshift+0x68>

000da0f0 <__hexdig_fun>:
   da0f0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   da0f4:	2b09      	cmp	r3, #9
   da0f6:	d802      	bhi.n	da0fe <__hexdig_fun+0xe>
   da0f8:	3820      	subs	r0, #32
   da0fa:	b2c0      	uxtb	r0, r0
   da0fc:	4770      	bx	lr
   da0fe:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   da102:	2b05      	cmp	r3, #5
   da104:	d801      	bhi.n	da10a <__hexdig_fun+0x1a>
   da106:	3847      	subs	r0, #71	; 0x47
   da108:	e7f7      	b.n	da0fa <__hexdig_fun+0xa>
   da10a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   da10e:	2b05      	cmp	r3, #5
   da110:	d801      	bhi.n	da116 <__hexdig_fun+0x26>
   da112:	3827      	subs	r0, #39	; 0x27
   da114:	e7f1      	b.n	da0fa <__hexdig_fun+0xa>
   da116:	2000      	movs	r0, #0
   da118:	4770      	bx	lr
	...

000da11c <__gethex>:
   da11c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da120:	ed2d 8b02 	vpush	{d8}
   da124:	b089      	sub	sp, #36	; 0x24
   da126:	ee08 0a10 	vmov	s16, r0
   da12a:	9304      	str	r3, [sp, #16]
   da12c:	4bbc      	ldr	r3, [pc, #752]	; (da420 <__gethex+0x304>)
   da12e:	681b      	ldr	r3, [r3, #0]
   da130:	9301      	str	r3, [sp, #4]
   da132:	4618      	mov	r0, r3
   da134:	468b      	mov	fp, r1
   da136:	4690      	mov	r8, r2
   da138:	f7ff f892 	bl	d9260 <strlen>
   da13c:	9b01      	ldr	r3, [sp, #4]
   da13e:	f8db 2000 	ldr.w	r2, [fp]
   da142:	4403      	add	r3, r0
   da144:	4682      	mov	sl, r0
   da146:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   da14a:	9305      	str	r3, [sp, #20]
   da14c:	1c93      	adds	r3, r2, #2
   da14e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   da152:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   da156:	32fe      	adds	r2, #254	; 0xfe
   da158:	18d1      	adds	r1, r2, r3
   da15a:	461f      	mov	r7, r3
   da15c:	f813 0b01 	ldrb.w	r0, [r3], #1
   da160:	9100      	str	r1, [sp, #0]
   da162:	2830      	cmp	r0, #48	; 0x30
   da164:	d0f8      	beq.n	da158 <__gethex+0x3c>
   da166:	f7ff ffc3 	bl	da0f0 <__hexdig_fun>
   da16a:	4604      	mov	r4, r0
   da16c:	2800      	cmp	r0, #0
   da16e:	d13a      	bne.n	da1e6 <__gethex+0xca>
   da170:	9901      	ldr	r1, [sp, #4]
   da172:	4652      	mov	r2, sl
   da174:	4638      	mov	r0, r7
   da176:	f7ff f87b 	bl	d9270 <strncmp>
   da17a:	4605      	mov	r5, r0
   da17c:	2800      	cmp	r0, #0
   da17e:	d168      	bne.n	da252 <__gethex+0x136>
   da180:	f817 000a 	ldrb.w	r0, [r7, sl]
   da184:	eb07 060a 	add.w	r6, r7, sl
   da188:	f7ff ffb2 	bl	da0f0 <__hexdig_fun>
   da18c:	2800      	cmp	r0, #0
   da18e:	d062      	beq.n	da256 <__gethex+0x13a>
   da190:	4633      	mov	r3, r6
   da192:	7818      	ldrb	r0, [r3, #0]
   da194:	2830      	cmp	r0, #48	; 0x30
   da196:	461f      	mov	r7, r3
   da198:	f103 0301 	add.w	r3, r3, #1
   da19c:	d0f9      	beq.n	da192 <__gethex+0x76>
   da19e:	f7ff ffa7 	bl	da0f0 <__hexdig_fun>
   da1a2:	2301      	movs	r3, #1
   da1a4:	fab0 f480 	clz	r4, r0
   da1a8:	0964      	lsrs	r4, r4, #5
   da1aa:	4635      	mov	r5, r6
   da1ac:	9300      	str	r3, [sp, #0]
   da1ae:	463a      	mov	r2, r7
   da1b0:	4616      	mov	r6, r2
   da1b2:	3201      	adds	r2, #1
   da1b4:	7830      	ldrb	r0, [r6, #0]
   da1b6:	f7ff ff9b 	bl	da0f0 <__hexdig_fun>
   da1ba:	2800      	cmp	r0, #0
   da1bc:	d1f8      	bne.n	da1b0 <__gethex+0x94>
   da1be:	9901      	ldr	r1, [sp, #4]
   da1c0:	4652      	mov	r2, sl
   da1c2:	4630      	mov	r0, r6
   da1c4:	f7ff f854 	bl	d9270 <strncmp>
   da1c8:	b980      	cbnz	r0, da1ec <__gethex+0xd0>
   da1ca:	b94d      	cbnz	r5, da1e0 <__gethex+0xc4>
   da1cc:	eb06 050a 	add.w	r5, r6, sl
   da1d0:	462a      	mov	r2, r5
   da1d2:	4616      	mov	r6, r2
   da1d4:	3201      	adds	r2, #1
   da1d6:	7830      	ldrb	r0, [r6, #0]
   da1d8:	f7ff ff8a 	bl	da0f0 <__hexdig_fun>
   da1dc:	2800      	cmp	r0, #0
   da1de:	d1f8      	bne.n	da1d2 <__gethex+0xb6>
   da1e0:	1bad      	subs	r5, r5, r6
   da1e2:	00ad      	lsls	r5, r5, #2
   da1e4:	e004      	b.n	da1f0 <__gethex+0xd4>
   da1e6:	2400      	movs	r4, #0
   da1e8:	4625      	mov	r5, r4
   da1ea:	e7e0      	b.n	da1ae <__gethex+0x92>
   da1ec:	2d00      	cmp	r5, #0
   da1ee:	d1f7      	bne.n	da1e0 <__gethex+0xc4>
   da1f0:	7833      	ldrb	r3, [r6, #0]
   da1f2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   da1f6:	2b50      	cmp	r3, #80	; 0x50
   da1f8:	d13b      	bne.n	da272 <__gethex+0x156>
   da1fa:	7873      	ldrb	r3, [r6, #1]
   da1fc:	2b2b      	cmp	r3, #43	; 0x2b
   da1fe:	d02c      	beq.n	da25a <__gethex+0x13e>
   da200:	2b2d      	cmp	r3, #45	; 0x2d
   da202:	d02e      	beq.n	da262 <__gethex+0x146>
   da204:	1c71      	adds	r1, r6, #1
   da206:	f04f 0900 	mov.w	r9, #0
   da20a:	7808      	ldrb	r0, [r1, #0]
   da20c:	f7ff ff70 	bl	da0f0 <__hexdig_fun>
   da210:	1e43      	subs	r3, r0, #1
   da212:	b2db      	uxtb	r3, r3
   da214:	2b18      	cmp	r3, #24
   da216:	d82c      	bhi.n	da272 <__gethex+0x156>
   da218:	f1a0 0210 	sub.w	r2, r0, #16
   da21c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   da220:	f7ff ff66 	bl	da0f0 <__hexdig_fun>
   da224:	1e43      	subs	r3, r0, #1
   da226:	b2db      	uxtb	r3, r3
   da228:	2b18      	cmp	r3, #24
   da22a:	d91d      	bls.n	da268 <__gethex+0x14c>
   da22c:	f1b9 0f00 	cmp.w	r9, #0
   da230:	d000      	beq.n	da234 <__gethex+0x118>
   da232:	4252      	negs	r2, r2
   da234:	4415      	add	r5, r2
   da236:	f8cb 1000 	str.w	r1, [fp]
   da23a:	b1e4      	cbz	r4, da276 <__gethex+0x15a>
   da23c:	9b00      	ldr	r3, [sp, #0]
   da23e:	2b00      	cmp	r3, #0
   da240:	bf14      	ite	ne
   da242:	2700      	movne	r7, #0
   da244:	2706      	moveq	r7, #6
   da246:	4638      	mov	r0, r7
   da248:	b009      	add	sp, #36	; 0x24
   da24a:	ecbd 8b02 	vpop	{d8}
   da24e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da252:	463e      	mov	r6, r7
   da254:	4625      	mov	r5, r4
   da256:	2401      	movs	r4, #1
   da258:	e7ca      	b.n	da1f0 <__gethex+0xd4>
   da25a:	f04f 0900 	mov.w	r9, #0
   da25e:	1cb1      	adds	r1, r6, #2
   da260:	e7d3      	b.n	da20a <__gethex+0xee>
   da262:	f04f 0901 	mov.w	r9, #1
   da266:	e7fa      	b.n	da25e <__gethex+0x142>
   da268:	230a      	movs	r3, #10
   da26a:	fb03 0202 	mla	r2, r3, r2, r0
   da26e:	3a10      	subs	r2, #16
   da270:	e7d4      	b.n	da21c <__gethex+0x100>
   da272:	4631      	mov	r1, r6
   da274:	e7df      	b.n	da236 <__gethex+0x11a>
   da276:	1bf3      	subs	r3, r6, r7
   da278:	3b01      	subs	r3, #1
   da27a:	4621      	mov	r1, r4
   da27c:	2b07      	cmp	r3, #7
   da27e:	dc52      	bgt.n	da326 <__gethex+0x20a>
   da280:	ee18 0a10 	vmov	r0, s16
   da284:	f000 fa52 	bl	da72c <_Balloc>
   da288:	f04f 0b00 	mov.w	fp, #0
   da28c:	f100 0914 	add.w	r9, r0, #20
   da290:	f1ca 0301 	rsb	r3, sl, #1
   da294:	4604      	mov	r4, r0
   da296:	f8cd 9008 	str.w	r9, [sp, #8]
   da29a:	f8cd b000 	str.w	fp, [sp]
   da29e:	9306      	str	r3, [sp, #24]
   da2a0:	42b7      	cmp	r7, r6
   da2a2:	d343      	bcc.n	da32c <__gethex+0x210>
   da2a4:	9802      	ldr	r0, [sp, #8]
   da2a6:	9b00      	ldr	r3, [sp, #0]
   da2a8:	f840 3b04 	str.w	r3, [r0], #4
   da2ac:	eba0 0009 	sub.w	r0, r0, r9
   da2b0:	1080      	asrs	r0, r0, #2
   da2b2:	0146      	lsls	r6, r0, #5
   da2b4:	6120      	str	r0, [r4, #16]
   da2b6:	4618      	mov	r0, r3
   da2b8:	f000 faff 	bl	da8ba <__hi0bits>
   da2bc:	1a30      	subs	r0, r6, r0
   da2be:	f8d8 6000 	ldr.w	r6, [r8]
   da2c2:	42b0      	cmp	r0, r6
   da2c4:	dd66      	ble.n	da394 <__gethex+0x278>
   da2c6:	1b87      	subs	r7, r0, r6
   da2c8:	4639      	mov	r1, r7
   da2ca:	4620      	mov	r0, r4
   da2cc:	f000 fe4c 	bl	daf68 <__any_on>
   da2d0:	4682      	mov	sl, r0
   da2d2:	b1a8      	cbz	r0, da300 <__gethex+0x1e4>
   da2d4:	1e7b      	subs	r3, r7, #1
   da2d6:	1159      	asrs	r1, r3, #5
   da2d8:	f003 021f 	and.w	r2, r3, #31
   da2dc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   da2e0:	f04f 0a01 	mov.w	sl, #1
   da2e4:	fa0a f202 	lsl.w	r2, sl, r2
   da2e8:	420a      	tst	r2, r1
   da2ea:	d009      	beq.n	da300 <__gethex+0x1e4>
   da2ec:	4553      	cmp	r3, sl
   da2ee:	dd05      	ble.n	da2fc <__gethex+0x1e0>
   da2f0:	1eb9      	subs	r1, r7, #2
   da2f2:	4620      	mov	r0, r4
   da2f4:	f000 fe38 	bl	daf68 <__any_on>
   da2f8:	2800      	cmp	r0, #0
   da2fa:	d148      	bne.n	da38e <__gethex+0x272>
   da2fc:	f04f 0a02 	mov.w	sl, #2
   da300:	4639      	mov	r1, r7
   da302:	4620      	mov	r0, r4
   da304:	f7ff fea2 	bl	da04c <rshift>
   da308:	443d      	add	r5, r7
   da30a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   da30e:	42ab      	cmp	r3, r5
   da310:	da4f      	bge.n	da3b2 <__gethex+0x296>
   da312:	ee18 0a10 	vmov	r0, s16
   da316:	4621      	mov	r1, r4
   da318:	f000 fa3c 	bl	da794 <_Bfree>
   da31c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   da31e:	2300      	movs	r3, #0
   da320:	6013      	str	r3, [r2, #0]
   da322:	27a3      	movs	r7, #163	; 0xa3
   da324:	e78f      	b.n	da246 <__gethex+0x12a>
   da326:	3101      	adds	r1, #1
   da328:	105b      	asrs	r3, r3, #1
   da32a:	e7a7      	b.n	da27c <__gethex+0x160>
   da32c:	1e73      	subs	r3, r6, #1
   da32e:	9a05      	ldr	r2, [sp, #20]
   da330:	9303      	str	r3, [sp, #12]
   da332:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   da336:	4293      	cmp	r3, r2
   da338:	d019      	beq.n	da36e <__gethex+0x252>
   da33a:	f1bb 0f20 	cmp.w	fp, #32
   da33e:	d107      	bne.n	da350 <__gethex+0x234>
   da340:	9b02      	ldr	r3, [sp, #8]
   da342:	9a00      	ldr	r2, [sp, #0]
   da344:	f843 2b04 	str.w	r2, [r3], #4
   da348:	9302      	str	r3, [sp, #8]
   da34a:	2300      	movs	r3, #0
   da34c:	9300      	str	r3, [sp, #0]
   da34e:	469b      	mov	fp, r3
   da350:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   da354:	f7ff fecc 	bl	da0f0 <__hexdig_fun>
   da358:	9b00      	ldr	r3, [sp, #0]
   da35a:	f000 000f 	and.w	r0, r0, #15
   da35e:	fa00 f00b 	lsl.w	r0, r0, fp
   da362:	4303      	orrs	r3, r0
   da364:	9300      	str	r3, [sp, #0]
   da366:	f10b 0b04 	add.w	fp, fp, #4
   da36a:	9b03      	ldr	r3, [sp, #12]
   da36c:	e00d      	b.n	da38a <__gethex+0x26e>
   da36e:	9b03      	ldr	r3, [sp, #12]
   da370:	9a06      	ldr	r2, [sp, #24]
   da372:	4413      	add	r3, r2
   da374:	42bb      	cmp	r3, r7
   da376:	d3e0      	bcc.n	da33a <__gethex+0x21e>
   da378:	4618      	mov	r0, r3
   da37a:	9901      	ldr	r1, [sp, #4]
   da37c:	9307      	str	r3, [sp, #28]
   da37e:	4652      	mov	r2, sl
   da380:	f7fe ff76 	bl	d9270 <strncmp>
   da384:	9b07      	ldr	r3, [sp, #28]
   da386:	2800      	cmp	r0, #0
   da388:	d1d7      	bne.n	da33a <__gethex+0x21e>
   da38a:	461e      	mov	r6, r3
   da38c:	e788      	b.n	da2a0 <__gethex+0x184>
   da38e:	f04f 0a03 	mov.w	sl, #3
   da392:	e7b5      	b.n	da300 <__gethex+0x1e4>
   da394:	da0a      	bge.n	da3ac <__gethex+0x290>
   da396:	1a37      	subs	r7, r6, r0
   da398:	4621      	mov	r1, r4
   da39a:	ee18 0a10 	vmov	r0, s16
   da39e:	463a      	mov	r2, r7
   da3a0:	f000 fbce 	bl	dab40 <__lshift>
   da3a4:	1bed      	subs	r5, r5, r7
   da3a6:	4604      	mov	r4, r0
   da3a8:	f100 0914 	add.w	r9, r0, #20
   da3ac:	f04f 0a00 	mov.w	sl, #0
   da3b0:	e7ab      	b.n	da30a <__gethex+0x1ee>
   da3b2:	f8d8 0004 	ldr.w	r0, [r8, #4]
   da3b6:	42a8      	cmp	r0, r5
   da3b8:	dd6d      	ble.n	da496 <__gethex+0x37a>
   da3ba:	1b45      	subs	r5, r0, r5
   da3bc:	42ae      	cmp	r6, r5
   da3be:	dc31      	bgt.n	da424 <__gethex+0x308>
   da3c0:	f8d8 300c 	ldr.w	r3, [r8, #12]
   da3c4:	2b02      	cmp	r3, #2
   da3c6:	d023      	beq.n	da410 <__gethex+0x2f4>
   da3c8:	2b03      	cmp	r3, #3
   da3ca:	d025      	beq.n	da418 <__gethex+0x2fc>
   da3cc:	2b01      	cmp	r3, #1
   da3ce:	d115      	bne.n	da3fc <__gethex+0x2e0>
   da3d0:	42ae      	cmp	r6, r5
   da3d2:	d113      	bne.n	da3fc <__gethex+0x2e0>
   da3d4:	2e01      	cmp	r6, #1
   da3d6:	d10b      	bne.n	da3f0 <__gethex+0x2d4>
   da3d8:	9a04      	ldr	r2, [sp, #16]
   da3da:	f8d8 3004 	ldr.w	r3, [r8, #4]
   da3de:	6013      	str	r3, [r2, #0]
   da3e0:	2301      	movs	r3, #1
   da3e2:	6123      	str	r3, [r4, #16]
   da3e4:	f8c9 3000 	str.w	r3, [r9]
   da3e8:	9b14      	ldr	r3, [sp, #80]	; 0x50
   da3ea:	2762      	movs	r7, #98	; 0x62
   da3ec:	601c      	str	r4, [r3, #0]
   da3ee:	e72a      	b.n	da246 <__gethex+0x12a>
   da3f0:	1e71      	subs	r1, r6, #1
   da3f2:	4620      	mov	r0, r4
   da3f4:	f000 fdb8 	bl	daf68 <__any_on>
   da3f8:	2800      	cmp	r0, #0
   da3fa:	d1ed      	bne.n	da3d8 <__gethex+0x2bc>
   da3fc:	ee18 0a10 	vmov	r0, s16
   da400:	4621      	mov	r1, r4
   da402:	f000 f9c7 	bl	da794 <_Bfree>
   da406:	9a14      	ldr	r2, [sp, #80]	; 0x50
   da408:	2300      	movs	r3, #0
   da40a:	6013      	str	r3, [r2, #0]
   da40c:	2750      	movs	r7, #80	; 0x50
   da40e:	e71a      	b.n	da246 <__gethex+0x12a>
   da410:	9b15      	ldr	r3, [sp, #84]	; 0x54
   da412:	2b00      	cmp	r3, #0
   da414:	d1f2      	bne.n	da3fc <__gethex+0x2e0>
   da416:	e7df      	b.n	da3d8 <__gethex+0x2bc>
   da418:	9b15      	ldr	r3, [sp, #84]	; 0x54
   da41a:	2b00      	cmp	r3, #0
   da41c:	d1dc      	bne.n	da3d8 <__gethex+0x2bc>
   da41e:	e7ed      	b.n	da3fc <__gethex+0x2e0>
   da420:	000db89c 	.word	0x000db89c
   da424:	1e6f      	subs	r7, r5, #1
   da426:	f1ba 0f00 	cmp.w	sl, #0
   da42a:	d131      	bne.n	da490 <__gethex+0x374>
   da42c:	b127      	cbz	r7, da438 <__gethex+0x31c>
   da42e:	4639      	mov	r1, r7
   da430:	4620      	mov	r0, r4
   da432:	f000 fd99 	bl	daf68 <__any_on>
   da436:	4682      	mov	sl, r0
   da438:	117b      	asrs	r3, r7, #5
   da43a:	2101      	movs	r1, #1
   da43c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   da440:	f007 071f 	and.w	r7, r7, #31
   da444:	fa01 f707 	lsl.w	r7, r1, r7
   da448:	421f      	tst	r7, r3
   da44a:	4629      	mov	r1, r5
   da44c:	4620      	mov	r0, r4
   da44e:	bf18      	it	ne
   da450:	f04a 0a02 	orrne.w	sl, sl, #2
   da454:	1b76      	subs	r6, r6, r5
   da456:	f7ff fdf9 	bl	da04c <rshift>
   da45a:	f8d8 5004 	ldr.w	r5, [r8, #4]
   da45e:	2702      	movs	r7, #2
   da460:	f1ba 0f00 	cmp.w	sl, #0
   da464:	d048      	beq.n	da4f8 <__gethex+0x3dc>
   da466:	f8d8 300c 	ldr.w	r3, [r8, #12]
   da46a:	2b02      	cmp	r3, #2
   da46c:	d015      	beq.n	da49a <__gethex+0x37e>
   da46e:	2b03      	cmp	r3, #3
   da470:	d017      	beq.n	da4a2 <__gethex+0x386>
   da472:	2b01      	cmp	r3, #1
   da474:	d109      	bne.n	da48a <__gethex+0x36e>
   da476:	f01a 0f02 	tst.w	sl, #2
   da47a:	d006      	beq.n	da48a <__gethex+0x36e>
   da47c:	f8d9 0000 	ldr.w	r0, [r9]
   da480:	ea4a 0a00 	orr.w	sl, sl, r0
   da484:	f01a 0f01 	tst.w	sl, #1
   da488:	d10e      	bne.n	da4a8 <__gethex+0x38c>
   da48a:	f047 0710 	orr.w	r7, r7, #16
   da48e:	e033      	b.n	da4f8 <__gethex+0x3dc>
   da490:	f04f 0a01 	mov.w	sl, #1
   da494:	e7d0      	b.n	da438 <__gethex+0x31c>
   da496:	2701      	movs	r7, #1
   da498:	e7e2      	b.n	da460 <__gethex+0x344>
   da49a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   da49c:	f1c3 0301 	rsb	r3, r3, #1
   da4a0:	9315      	str	r3, [sp, #84]	; 0x54
   da4a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
   da4a4:	2b00      	cmp	r3, #0
   da4a6:	d0f0      	beq.n	da48a <__gethex+0x36e>
   da4a8:	f8d4 9010 	ldr.w	r9, [r4, #16]
   da4ac:	f104 0314 	add.w	r3, r4, #20
   da4b0:	ea4f 0b89 	mov.w	fp, r9, lsl #2
   da4b4:	eb03 0189 	add.w	r1, r3, r9, lsl #2
   da4b8:	f04f 0c00 	mov.w	ip, #0
   da4bc:	4618      	mov	r0, r3
   da4be:	f853 2b04 	ldr.w	r2, [r3], #4
   da4c2:	f1b2 3fff 	cmp.w	r2, #4294967295
   da4c6:	d01c      	beq.n	da502 <__gethex+0x3e6>
   da4c8:	3201      	adds	r2, #1
   da4ca:	6002      	str	r2, [r0, #0]
   da4cc:	2f02      	cmp	r7, #2
   da4ce:	f104 0314 	add.w	r3, r4, #20
   da4d2:	d13a      	bne.n	da54a <__gethex+0x42e>
   da4d4:	f8d8 2000 	ldr.w	r2, [r8]
   da4d8:	3a01      	subs	r2, #1
   da4da:	42b2      	cmp	r2, r6
   da4dc:	d10a      	bne.n	da4f4 <__gethex+0x3d8>
   da4de:	1171      	asrs	r1, r6, #5
   da4e0:	2201      	movs	r2, #1
   da4e2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   da4e6:	f006 061f 	and.w	r6, r6, #31
   da4ea:	fa02 f606 	lsl.w	r6, r2, r6
   da4ee:	421e      	tst	r6, r3
   da4f0:	bf18      	it	ne
   da4f2:	4617      	movne	r7, r2
   da4f4:	f047 0720 	orr.w	r7, r7, #32
   da4f8:	9b14      	ldr	r3, [sp, #80]	; 0x50
   da4fa:	601c      	str	r4, [r3, #0]
   da4fc:	9b04      	ldr	r3, [sp, #16]
   da4fe:	601d      	str	r5, [r3, #0]
   da500:	e6a1      	b.n	da246 <__gethex+0x12a>
   da502:	4299      	cmp	r1, r3
   da504:	f843 cc04 	str.w	ip, [r3, #-4]
   da508:	d8d8      	bhi.n	da4bc <__gethex+0x3a0>
   da50a:	68a3      	ldr	r3, [r4, #8]
   da50c:	4599      	cmp	r9, r3
   da50e:	db14      	blt.n	da53a <__gethex+0x41e>
   da510:	6861      	ldr	r1, [r4, #4]
   da512:	ee18 0a10 	vmov	r0, s16
   da516:	3101      	adds	r1, #1
   da518:	f000 f908 	bl	da72c <_Balloc>
   da51c:	6922      	ldr	r2, [r4, #16]
   da51e:	3202      	adds	r2, #2
   da520:	f104 010c 	add.w	r1, r4, #12
   da524:	4682      	mov	sl, r0
   da526:	0092      	lsls	r2, r2, #2
   da528:	300c      	adds	r0, #12
   da52a:	f7fe fe33 	bl	d9194 <memcpy>
   da52e:	4621      	mov	r1, r4
   da530:	ee18 0a10 	vmov	r0, s16
   da534:	f000 f92e 	bl	da794 <_Bfree>
   da538:	4654      	mov	r4, sl
   da53a:	6923      	ldr	r3, [r4, #16]
   da53c:	1c5a      	adds	r2, r3, #1
   da53e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   da542:	6122      	str	r2, [r4, #16]
   da544:	2201      	movs	r2, #1
   da546:	615a      	str	r2, [r3, #20]
   da548:	e7c0      	b.n	da4cc <__gethex+0x3b0>
   da54a:	6922      	ldr	r2, [r4, #16]
   da54c:	454a      	cmp	r2, r9
   da54e:	dd0b      	ble.n	da568 <__gethex+0x44c>
   da550:	2101      	movs	r1, #1
   da552:	4620      	mov	r0, r4
   da554:	f7ff fd7a 	bl	da04c <rshift>
   da558:	f8d8 3008 	ldr.w	r3, [r8, #8]
   da55c:	3501      	adds	r5, #1
   da55e:	42ab      	cmp	r3, r5
   da560:	f6ff aed7 	blt.w	da312 <__gethex+0x1f6>
   da564:	2701      	movs	r7, #1
   da566:	e7c5      	b.n	da4f4 <__gethex+0x3d8>
   da568:	f016 061f 	ands.w	r6, r6, #31
   da56c:	d0fa      	beq.n	da564 <__gethex+0x448>
   da56e:	449b      	add	fp, r3
   da570:	f1c6 0620 	rsb	r6, r6, #32
   da574:	f85b 0c04 	ldr.w	r0, [fp, #-4]
   da578:	f000 f99f 	bl	da8ba <__hi0bits>
   da57c:	42b0      	cmp	r0, r6
   da57e:	dbe7      	blt.n	da550 <__gethex+0x434>
   da580:	e7f0      	b.n	da564 <__gethex+0x448>
   da582:	bf00      	nop

000da584 <L_shift>:
   da584:	f1c2 0208 	rsb	r2, r2, #8
   da588:	0092      	lsls	r2, r2, #2
   da58a:	b570      	push	{r4, r5, r6, lr}
   da58c:	f1c2 0620 	rsb	r6, r2, #32
   da590:	6843      	ldr	r3, [r0, #4]
   da592:	6804      	ldr	r4, [r0, #0]
   da594:	fa03 f506 	lsl.w	r5, r3, r6
   da598:	432c      	orrs	r4, r5
   da59a:	40d3      	lsrs	r3, r2
   da59c:	6004      	str	r4, [r0, #0]
   da59e:	f840 3f04 	str.w	r3, [r0, #4]!
   da5a2:	4288      	cmp	r0, r1
   da5a4:	d3f4      	bcc.n	da590 <L_shift+0xc>
   da5a6:	bd70      	pop	{r4, r5, r6, pc}

000da5a8 <__match>:
   da5a8:	b530      	push	{r4, r5, lr}
   da5aa:	6803      	ldr	r3, [r0, #0]
   da5ac:	3301      	adds	r3, #1
   da5ae:	f811 4b01 	ldrb.w	r4, [r1], #1
   da5b2:	b914      	cbnz	r4, da5ba <__match+0x12>
   da5b4:	6003      	str	r3, [r0, #0]
   da5b6:	2001      	movs	r0, #1
   da5b8:	bd30      	pop	{r4, r5, pc}
   da5ba:	f813 2b01 	ldrb.w	r2, [r3], #1
   da5be:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   da5c2:	2d19      	cmp	r5, #25
   da5c4:	bf98      	it	ls
   da5c6:	3220      	addls	r2, #32
   da5c8:	42a2      	cmp	r2, r4
   da5ca:	d0f0      	beq.n	da5ae <__match+0x6>
   da5cc:	2000      	movs	r0, #0
   da5ce:	e7f3      	b.n	da5b8 <__match+0x10>

000da5d0 <__hexnan>:
   da5d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da5d4:	680b      	ldr	r3, [r1, #0]
   da5d6:	6801      	ldr	r1, [r0, #0]
   da5d8:	115e      	asrs	r6, r3, #5
   da5da:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   da5de:	f013 031f 	ands.w	r3, r3, #31
   da5e2:	b087      	sub	sp, #28
   da5e4:	bf18      	it	ne
   da5e6:	3604      	addne	r6, #4
   da5e8:	2500      	movs	r5, #0
   da5ea:	1f37      	subs	r7, r6, #4
   da5ec:	4682      	mov	sl, r0
   da5ee:	4690      	mov	r8, r2
   da5f0:	9301      	str	r3, [sp, #4]
   da5f2:	f846 5c04 	str.w	r5, [r6, #-4]
   da5f6:	46b9      	mov	r9, r7
   da5f8:	463c      	mov	r4, r7
   da5fa:	9502      	str	r5, [sp, #8]
   da5fc:	46ab      	mov	fp, r5
   da5fe:	784a      	ldrb	r2, [r1, #1]
   da600:	1c4b      	adds	r3, r1, #1
   da602:	9303      	str	r3, [sp, #12]
   da604:	b342      	cbz	r2, da658 <__hexnan+0x88>
   da606:	4610      	mov	r0, r2
   da608:	9105      	str	r1, [sp, #20]
   da60a:	9204      	str	r2, [sp, #16]
   da60c:	f7ff fd70 	bl	da0f0 <__hexdig_fun>
   da610:	2800      	cmp	r0, #0
   da612:	d14f      	bne.n	da6b4 <__hexnan+0xe4>
   da614:	9a04      	ldr	r2, [sp, #16]
   da616:	9905      	ldr	r1, [sp, #20]
   da618:	2a20      	cmp	r2, #32
   da61a:	d818      	bhi.n	da64e <__hexnan+0x7e>
   da61c:	9b02      	ldr	r3, [sp, #8]
   da61e:	459b      	cmp	fp, r3
   da620:	dd13      	ble.n	da64a <__hexnan+0x7a>
   da622:	454c      	cmp	r4, r9
   da624:	d206      	bcs.n	da634 <__hexnan+0x64>
   da626:	2d07      	cmp	r5, #7
   da628:	dc04      	bgt.n	da634 <__hexnan+0x64>
   da62a:	462a      	mov	r2, r5
   da62c:	4649      	mov	r1, r9
   da62e:	4620      	mov	r0, r4
   da630:	f7ff ffa8 	bl	da584 <L_shift>
   da634:	4544      	cmp	r4, r8
   da636:	d950      	bls.n	da6da <__hexnan+0x10a>
   da638:	2300      	movs	r3, #0
   da63a:	f1a4 0904 	sub.w	r9, r4, #4
   da63e:	f844 3c04 	str.w	r3, [r4, #-4]
   da642:	f8cd b008 	str.w	fp, [sp, #8]
   da646:	464c      	mov	r4, r9
   da648:	461d      	mov	r5, r3
   da64a:	9903      	ldr	r1, [sp, #12]
   da64c:	e7d7      	b.n	da5fe <__hexnan+0x2e>
   da64e:	2a29      	cmp	r2, #41	; 0x29
   da650:	d156      	bne.n	da700 <__hexnan+0x130>
   da652:	3102      	adds	r1, #2
   da654:	f8ca 1000 	str.w	r1, [sl]
   da658:	f1bb 0f00 	cmp.w	fp, #0
   da65c:	d050      	beq.n	da700 <__hexnan+0x130>
   da65e:	454c      	cmp	r4, r9
   da660:	d206      	bcs.n	da670 <__hexnan+0xa0>
   da662:	2d07      	cmp	r5, #7
   da664:	dc04      	bgt.n	da670 <__hexnan+0xa0>
   da666:	462a      	mov	r2, r5
   da668:	4649      	mov	r1, r9
   da66a:	4620      	mov	r0, r4
   da66c:	f7ff ff8a 	bl	da584 <L_shift>
   da670:	4544      	cmp	r4, r8
   da672:	d934      	bls.n	da6de <__hexnan+0x10e>
   da674:	f1a8 0204 	sub.w	r2, r8, #4
   da678:	4623      	mov	r3, r4
   da67a:	f853 1b04 	ldr.w	r1, [r3], #4
   da67e:	f842 1f04 	str.w	r1, [r2, #4]!
   da682:	429f      	cmp	r7, r3
   da684:	d2f9      	bcs.n	da67a <__hexnan+0xaa>
   da686:	1b3b      	subs	r3, r7, r4
   da688:	f023 0303 	bic.w	r3, r3, #3
   da68c:	3304      	adds	r3, #4
   da68e:	3401      	adds	r4, #1
   da690:	3e03      	subs	r6, #3
   da692:	42b4      	cmp	r4, r6
   da694:	bf88      	it	hi
   da696:	2304      	movhi	r3, #4
   da698:	4443      	add	r3, r8
   da69a:	2200      	movs	r2, #0
   da69c:	f843 2b04 	str.w	r2, [r3], #4
   da6a0:	429f      	cmp	r7, r3
   da6a2:	d2fb      	bcs.n	da69c <__hexnan+0xcc>
   da6a4:	683b      	ldr	r3, [r7, #0]
   da6a6:	b91b      	cbnz	r3, da6b0 <__hexnan+0xe0>
   da6a8:	4547      	cmp	r7, r8
   da6aa:	d127      	bne.n	da6fc <__hexnan+0x12c>
   da6ac:	2301      	movs	r3, #1
   da6ae:	603b      	str	r3, [r7, #0]
   da6b0:	2005      	movs	r0, #5
   da6b2:	e026      	b.n	da702 <__hexnan+0x132>
   da6b4:	3501      	adds	r5, #1
   da6b6:	2d08      	cmp	r5, #8
   da6b8:	f10b 0b01 	add.w	fp, fp, #1
   da6bc:	dd06      	ble.n	da6cc <__hexnan+0xfc>
   da6be:	4544      	cmp	r4, r8
   da6c0:	d9c3      	bls.n	da64a <__hexnan+0x7a>
   da6c2:	2300      	movs	r3, #0
   da6c4:	f844 3c04 	str.w	r3, [r4, #-4]
   da6c8:	2501      	movs	r5, #1
   da6ca:	3c04      	subs	r4, #4
   da6cc:	6822      	ldr	r2, [r4, #0]
   da6ce:	f000 000f 	and.w	r0, r0, #15
   da6d2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   da6d6:	6022      	str	r2, [r4, #0]
   da6d8:	e7b7      	b.n	da64a <__hexnan+0x7a>
   da6da:	2508      	movs	r5, #8
   da6dc:	e7b5      	b.n	da64a <__hexnan+0x7a>
   da6de:	9b01      	ldr	r3, [sp, #4]
   da6e0:	2b00      	cmp	r3, #0
   da6e2:	d0df      	beq.n	da6a4 <__hexnan+0xd4>
   da6e4:	f04f 32ff 	mov.w	r2, #4294967295
   da6e8:	f1c3 0320 	rsb	r3, r3, #32
   da6ec:	fa22 f303 	lsr.w	r3, r2, r3
   da6f0:	f856 2c04 	ldr.w	r2, [r6, #-4]
   da6f4:	401a      	ands	r2, r3
   da6f6:	f846 2c04 	str.w	r2, [r6, #-4]
   da6fa:	e7d3      	b.n	da6a4 <__hexnan+0xd4>
   da6fc:	3f04      	subs	r7, #4
   da6fe:	e7d1      	b.n	da6a4 <__hexnan+0xd4>
   da700:	2004      	movs	r0, #4
   da702:	b007      	add	sp, #28
   da704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000da708 <__ascii_mbtowc>:
   da708:	b082      	sub	sp, #8
   da70a:	b901      	cbnz	r1, da70e <__ascii_mbtowc+0x6>
   da70c:	a901      	add	r1, sp, #4
   da70e:	b142      	cbz	r2, da722 <__ascii_mbtowc+0x1a>
   da710:	b14b      	cbz	r3, da726 <__ascii_mbtowc+0x1e>
   da712:	7813      	ldrb	r3, [r2, #0]
   da714:	600b      	str	r3, [r1, #0]
   da716:	7812      	ldrb	r2, [r2, #0]
   da718:	1e10      	subs	r0, r2, #0
   da71a:	bf18      	it	ne
   da71c:	2001      	movne	r0, #1
   da71e:	b002      	add	sp, #8
   da720:	4770      	bx	lr
   da722:	4610      	mov	r0, r2
   da724:	e7fb      	b.n	da71e <__ascii_mbtowc+0x16>
   da726:	f06f 0001 	mvn.w	r0, #1
   da72a:	e7f8      	b.n	da71e <__ascii_mbtowc+0x16>

000da72c <_Balloc>:
   da72c:	b570      	push	{r4, r5, r6, lr}
   da72e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   da730:	4604      	mov	r4, r0
   da732:	460d      	mov	r5, r1
   da734:	b93e      	cbnz	r6, da746 <_Balloc+0x1a>
   da736:	2010      	movs	r0, #16
   da738:	f7fb fbb2 	bl	d5ea0 <malloc>
   da73c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   da740:	6260      	str	r0, [r4, #36]	; 0x24
   da742:	6006      	str	r6, [r0, #0]
   da744:	60c6      	str	r6, [r0, #12]
   da746:	6a66      	ldr	r6, [r4, #36]	; 0x24
   da748:	68f3      	ldr	r3, [r6, #12]
   da74a:	b183      	cbz	r3, da76e <_Balloc+0x42>
   da74c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   da74e:	68db      	ldr	r3, [r3, #12]
   da750:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   da754:	b9b8      	cbnz	r0, da786 <_Balloc+0x5a>
   da756:	2101      	movs	r1, #1
   da758:	fa01 f605 	lsl.w	r6, r1, r5
   da75c:	1d72      	adds	r2, r6, #5
   da75e:	0092      	lsls	r2, r2, #2
   da760:	4620      	mov	r0, r4
   da762:	f000 fc22 	bl	dafaa <_calloc_r>
   da766:	b160      	cbz	r0, da782 <_Balloc+0x56>
   da768:	e9c0 5601 	strd	r5, r6, [r0, #4]
   da76c:	e00e      	b.n	da78c <_Balloc+0x60>
   da76e:	2221      	movs	r2, #33	; 0x21
   da770:	2104      	movs	r1, #4
   da772:	4620      	mov	r0, r4
   da774:	f000 fc19 	bl	dafaa <_calloc_r>
   da778:	6a63      	ldr	r3, [r4, #36]	; 0x24
   da77a:	60f0      	str	r0, [r6, #12]
   da77c:	68db      	ldr	r3, [r3, #12]
   da77e:	2b00      	cmp	r3, #0
   da780:	d1e4      	bne.n	da74c <_Balloc+0x20>
   da782:	2000      	movs	r0, #0
   da784:	bd70      	pop	{r4, r5, r6, pc}
   da786:	6802      	ldr	r2, [r0, #0]
   da788:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   da78c:	2300      	movs	r3, #0
   da78e:	e9c0 3303 	strd	r3, r3, [r0, #12]
   da792:	e7f7      	b.n	da784 <_Balloc+0x58>

000da794 <_Bfree>:
   da794:	b570      	push	{r4, r5, r6, lr}
   da796:	6a46      	ldr	r6, [r0, #36]	; 0x24
   da798:	4605      	mov	r5, r0
   da79a:	460c      	mov	r4, r1
   da79c:	b93e      	cbnz	r6, da7ae <_Bfree+0x1a>
   da79e:	2010      	movs	r0, #16
   da7a0:	f7fb fb7e 	bl	d5ea0 <malloc>
   da7a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
   da7a8:	6268      	str	r0, [r5, #36]	; 0x24
   da7aa:	6006      	str	r6, [r0, #0]
   da7ac:	60c6      	str	r6, [r0, #12]
   da7ae:	b13c      	cbz	r4, da7c0 <_Bfree+0x2c>
   da7b0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   da7b2:	6862      	ldr	r2, [r4, #4]
   da7b4:	68db      	ldr	r3, [r3, #12]
   da7b6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   da7ba:	6021      	str	r1, [r4, #0]
   da7bc:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   da7c0:	bd70      	pop	{r4, r5, r6, pc}

000da7c2 <__multadd>:
   da7c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   da7c6:	690e      	ldr	r6, [r1, #16]
   da7c8:	4607      	mov	r7, r0
   da7ca:	4698      	mov	r8, r3
   da7cc:	460c      	mov	r4, r1
   da7ce:	f101 0014 	add.w	r0, r1, #20
   da7d2:	2300      	movs	r3, #0
   da7d4:	6805      	ldr	r5, [r0, #0]
   da7d6:	b2a9      	uxth	r1, r5
   da7d8:	fb02 8101 	mla	r1, r2, r1, r8
   da7dc:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   da7e0:	0c2d      	lsrs	r5, r5, #16
   da7e2:	fb02 c505 	mla	r5, r2, r5, ip
   da7e6:	b289      	uxth	r1, r1
   da7e8:	3301      	adds	r3, #1
   da7ea:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   da7ee:	429e      	cmp	r6, r3
   da7f0:	f840 1b04 	str.w	r1, [r0], #4
   da7f4:	ea4f 4815 	mov.w	r8, r5, lsr #16
   da7f8:	dcec      	bgt.n	da7d4 <__multadd+0x12>
   da7fa:	f1b8 0f00 	cmp.w	r8, #0
   da7fe:	d01b      	beq.n	da838 <__multadd+0x76>
   da800:	68a3      	ldr	r3, [r4, #8]
   da802:	42b3      	cmp	r3, r6
   da804:	dc12      	bgt.n	da82c <__multadd+0x6a>
   da806:	6861      	ldr	r1, [r4, #4]
   da808:	4638      	mov	r0, r7
   da80a:	3101      	adds	r1, #1
   da80c:	f7ff ff8e 	bl	da72c <_Balloc>
   da810:	6922      	ldr	r2, [r4, #16]
   da812:	3202      	adds	r2, #2
   da814:	f104 010c 	add.w	r1, r4, #12
   da818:	4605      	mov	r5, r0
   da81a:	0092      	lsls	r2, r2, #2
   da81c:	300c      	adds	r0, #12
   da81e:	f7fe fcb9 	bl	d9194 <memcpy>
   da822:	4621      	mov	r1, r4
   da824:	4638      	mov	r0, r7
   da826:	f7ff ffb5 	bl	da794 <_Bfree>
   da82a:	462c      	mov	r4, r5
   da82c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
   da830:	3601      	adds	r6, #1
   da832:	f8c3 8014 	str.w	r8, [r3, #20]
   da836:	6126      	str	r6, [r4, #16]
   da838:	4620      	mov	r0, r4
   da83a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000da83e <__s2b>:
   da83e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   da842:	460c      	mov	r4, r1
   da844:	4615      	mov	r5, r2
   da846:	461f      	mov	r7, r3
   da848:	2209      	movs	r2, #9
   da84a:	3308      	adds	r3, #8
   da84c:	4606      	mov	r6, r0
   da84e:	fb93 f3f2 	sdiv	r3, r3, r2
   da852:	2100      	movs	r1, #0
   da854:	2201      	movs	r2, #1
   da856:	429a      	cmp	r2, r3
   da858:	db20      	blt.n	da89c <__s2b+0x5e>
   da85a:	4630      	mov	r0, r6
   da85c:	f7ff ff66 	bl	da72c <_Balloc>
   da860:	9b08      	ldr	r3, [sp, #32]
   da862:	6143      	str	r3, [r0, #20]
   da864:	2d09      	cmp	r5, #9
   da866:	f04f 0301 	mov.w	r3, #1
   da86a:	6103      	str	r3, [r0, #16]
   da86c:	dd19      	ble.n	da8a2 <__s2b+0x64>
   da86e:	f104 0909 	add.w	r9, r4, #9
   da872:	46c8      	mov	r8, r9
   da874:	442c      	add	r4, r5
   da876:	f818 3b01 	ldrb.w	r3, [r8], #1
   da87a:	4601      	mov	r1, r0
   da87c:	3b30      	subs	r3, #48	; 0x30
   da87e:	220a      	movs	r2, #10
   da880:	4630      	mov	r0, r6
   da882:	f7ff ff9e 	bl	da7c2 <__multadd>
   da886:	45a0      	cmp	r8, r4
   da888:	d1f5      	bne.n	da876 <__s2b+0x38>
   da88a:	f1a5 0408 	sub.w	r4, r5, #8
   da88e:	444c      	add	r4, r9
   da890:	1b2d      	subs	r5, r5, r4
   da892:	1963      	adds	r3, r4, r5
   da894:	42bb      	cmp	r3, r7
   da896:	db07      	blt.n	da8a8 <__s2b+0x6a>
   da898:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   da89c:	0052      	lsls	r2, r2, #1
   da89e:	3101      	adds	r1, #1
   da8a0:	e7d9      	b.n	da856 <__s2b+0x18>
   da8a2:	340a      	adds	r4, #10
   da8a4:	2509      	movs	r5, #9
   da8a6:	e7f3      	b.n	da890 <__s2b+0x52>
   da8a8:	f814 3b01 	ldrb.w	r3, [r4], #1
   da8ac:	4601      	mov	r1, r0
   da8ae:	3b30      	subs	r3, #48	; 0x30
   da8b0:	220a      	movs	r2, #10
   da8b2:	4630      	mov	r0, r6
   da8b4:	f7ff ff85 	bl	da7c2 <__multadd>
   da8b8:	e7eb      	b.n	da892 <__s2b+0x54>

000da8ba <__hi0bits>:
   da8ba:	0c03      	lsrs	r3, r0, #16
   da8bc:	041b      	lsls	r3, r3, #16
   da8be:	b9d3      	cbnz	r3, da8f6 <__hi0bits+0x3c>
   da8c0:	0400      	lsls	r0, r0, #16
   da8c2:	2310      	movs	r3, #16
   da8c4:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   da8c8:	bf04      	itt	eq
   da8ca:	0200      	lsleq	r0, r0, #8
   da8cc:	3308      	addeq	r3, #8
   da8ce:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   da8d2:	bf04      	itt	eq
   da8d4:	0100      	lsleq	r0, r0, #4
   da8d6:	3304      	addeq	r3, #4
   da8d8:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   da8dc:	bf04      	itt	eq
   da8de:	0080      	lsleq	r0, r0, #2
   da8e0:	3302      	addeq	r3, #2
   da8e2:	2800      	cmp	r0, #0
   da8e4:	db05      	blt.n	da8f2 <__hi0bits+0x38>
   da8e6:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   da8ea:	f103 0301 	add.w	r3, r3, #1
   da8ee:	bf08      	it	eq
   da8f0:	2320      	moveq	r3, #32
   da8f2:	4618      	mov	r0, r3
   da8f4:	4770      	bx	lr
   da8f6:	2300      	movs	r3, #0
   da8f8:	e7e4      	b.n	da8c4 <__hi0bits+0xa>

000da8fa <__lo0bits>:
   da8fa:	6803      	ldr	r3, [r0, #0]
   da8fc:	f013 0207 	ands.w	r2, r3, #7
   da900:	4601      	mov	r1, r0
   da902:	d00b      	beq.n	da91c <__lo0bits+0x22>
   da904:	07da      	lsls	r2, r3, #31
   da906:	d424      	bmi.n	da952 <__lo0bits+0x58>
   da908:	0798      	lsls	r0, r3, #30
   da90a:	bf49      	itett	mi
   da90c:	085b      	lsrmi	r3, r3, #1
   da90e:	089b      	lsrpl	r3, r3, #2
   da910:	2001      	movmi	r0, #1
   da912:	600b      	strmi	r3, [r1, #0]
   da914:	bf5c      	itt	pl
   da916:	600b      	strpl	r3, [r1, #0]
   da918:	2002      	movpl	r0, #2
   da91a:	4770      	bx	lr
   da91c:	b298      	uxth	r0, r3
   da91e:	b9b0      	cbnz	r0, da94e <__lo0bits+0x54>
   da920:	0c1b      	lsrs	r3, r3, #16
   da922:	2010      	movs	r0, #16
   da924:	f013 0fff 	tst.w	r3, #255	; 0xff
   da928:	bf04      	itt	eq
   da92a:	0a1b      	lsreq	r3, r3, #8
   da92c:	3008      	addeq	r0, #8
   da92e:	071a      	lsls	r2, r3, #28
   da930:	bf04      	itt	eq
   da932:	091b      	lsreq	r3, r3, #4
   da934:	3004      	addeq	r0, #4
   da936:	079a      	lsls	r2, r3, #30
   da938:	bf04      	itt	eq
   da93a:	089b      	lsreq	r3, r3, #2
   da93c:	3002      	addeq	r0, #2
   da93e:	07da      	lsls	r2, r3, #31
   da940:	d403      	bmi.n	da94a <__lo0bits+0x50>
   da942:	085b      	lsrs	r3, r3, #1
   da944:	f100 0001 	add.w	r0, r0, #1
   da948:	d005      	beq.n	da956 <__lo0bits+0x5c>
   da94a:	600b      	str	r3, [r1, #0]
   da94c:	4770      	bx	lr
   da94e:	4610      	mov	r0, r2
   da950:	e7e8      	b.n	da924 <__lo0bits+0x2a>
   da952:	2000      	movs	r0, #0
   da954:	4770      	bx	lr
   da956:	2020      	movs	r0, #32
   da958:	4770      	bx	lr

000da95a <__i2b>:
   da95a:	b510      	push	{r4, lr}
   da95c:	460c      	mov	r4, r1
   da95e:	2101      	movs	r1, #1
   da960:	f7ff fee4 	bl	da72c <_Balloc>
   da964:	2201      	movs	r2, #1
   da966:	6144      	str	r4, [r0, #20]
   da968:	6102      	str	r2, [r0, #16]
   da96a:	bd10      	pop	{r4, pc}

000da96c <__multiply>:
   da96c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da970:	4615      	mov	r5, r2
   da972:	690a      	ldr	r2, [r1, #16]
   da974:	692b      	ldr	r3, [r5, #16]
   da976:	429a      	cmp	r2, r3
   da978:	bfb8      	it	lt
   da97a:	460b      	movlt	r3, r1
   da97c:	460c      	mov	r4, r1
   da97e:	bfbc      	itt	lt
   da980:	462c      	movlt	r4, r5
   da982:	461d      	movlt	r5, r3
   da984:	6927      	ldr	r7, [r4, #16]
   da986:	f8d5 9010 	ldr.w	r9, [r5, #16]
   da98a:	68a3      	ldr	r3, [r4, #8]
   da98c:	6861      	ldr	r1, [r4, #4]
   da98e:	eb07 0609 	add.w	r6, r7, r9
   da992:	42b3      	cmp	r3, r6
   da994:	bfb8      	it	lt
   da996:	3101      	addlt	r1, #1
   da998:	b085      	sub	sp, #20
   da99a:	f7ff fec7 	bl	da72c <_Balloc>
   da99e:	f100 0114 	add.w	r1, r0, #20
   da9a2:	eb01 0886 	add.w	r8, r1, r6, lsl #2
   da9a6:	460b      	mov	r3, r1
   da9a8:	2200      	movs	r2, #0
   da9aa:	4543      	cmp	r3, r8
   da9ac:	d31d      	bcc.n	da9ea <__multiply+0x7e>
   da9ae:	f104 0314 	add.w	r3, r4, #20
   da9b2:	f105 0214 	add.w	r2, r5, #20
   da9b6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   da9ba:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   da9be:	9302      	str	r3, [sp, #8]
   da9c0:	1b3b      	subs	r3, r7, r4
   da9c2:	3b15      	subs	r3, #21
   da9c4:	f023 0303 	bic.w	r3, r3, #3
   da9c8:	3304      	adds	r3, #4
   da9ca:	f104 0515 	add.w	r5, r4, #21
   da9ce:	42af      	cmp	r7, r5
   da9d0:	bf38      	it	cc
   da9d2:	2304      	movcc	r3, #4
   da9d4:	9301      	str	r3, [sp, #4]
   da9d6:	9b02      	ldr	r3, [sp, #8]
   da9d8:	9203      	str	r2, [sp, #12]
   da9da:	4293      	cmp	r3, r2
   da9dc:	d808      	bhi.n	da9f0 <__multiply+0x84>
   da9de:	2e00      	cmp	r6, #0
   da9e0:	dc5a      	bgt.n	daa98 <__multiply+0x12c>
   da9e2:	6106      	str	r6, [r0, #16]
   da9e4:	b005      	add	sp, #20
   da9e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da9ea:	f843 2b04 	str.w	r2, [r3], #4
   da9ee:	e7dc      	b.n	da9aa <__multiply+0x3e>
   da9f0:	f8b2 a000 	ldrh.w	sl, [r2]
   da9f4:	f1ba 0f00 	cmp.w	sl, #0
   da9f8:	d024      	beq.n	daa44 <__multiply+0xd8>
   da9fa:	f104 0e14 	add.w	lr, r4, #20
   da9fe:	4689      	mov	r9, r1
   daa00:	f04f 0c00 	mov.w	ip, #0
   daa04:	f85e 5b04 	ldr.w	r5, [lr], #4
   daa08:	f8d9 b000 	ldr.w	fp, [r9]
   daa0c:	b2ab      	uxth	r3, r5
   daa0e:	fa1f fb8b 	uxth.w	fp, fp
   daa12:	fb0a b303 	mla	r3, sl, r3, fp
   daa16:	ea4f 4b15 	mov.w	fp, r5, lsr #16
   daa1a:	f8d9 5000 	ldr.w	r5, [r9]
   daa1e:	4463      	add	r3, ip
   daa20:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   daa24:	fb0a c50b 	mla	r5, sl, fp, ip
   daa28:	eb05 4513 	add.w	r5, r5, r3, lsr #16
   daa2c:	b29b      	uxth	r3, r3
   daa2e:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   daa32:	4577      	cmp	r7, lr
   daa34:	f849 3b04 	str.w	r3, [r9], #4
   daa38:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   daa3c:	d8e2      	bhi.n	daa04 <__multiply+0x98>
   daa3e:	9b01      	ldr	r3, [sp, #4]
   daa40:	f841 c003 	str.w	ip, [r1, r3]
   daa44:	9b03      	ldr	r3, [sp, #12]
   daa46:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   daa4a:	3204      	adds	r2, #4
   daa4c:	f1b9 0f00 	cmp.w	r9, #0
   daa50:	d020      	beq.n	daa94 <__multiply+0x128>
   daa52:	680b      	ldr	r3, [r1, #0]
   daa54:	f104 0c14 	add.w	ip, r4, #20
   daa58:	468e      	mov	lr, r1
   daa5a:	f04f 0a00 	mov.w	sl, #0
   daa5e:	f8bc 5000 	ldrh.w	r5, [ip]
   daa62:	f8be b002 	ldrh.w	fp, [lr, #2]
   daa66:	fb09 b505 	mla	r5, r9, r5, fp
   daa6a:	44aa      	add	sl, r5
   daa6c:	b29b      	uxth	r3, r3
   daa6e:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   daa72:	f84e 3b04 	str.w	r3, [lr], #4
   daa76:	f85c 3b04 	ldr.w	r3, [ip], #4
   daa7a:	f8be 5000 	ldrh.w	r5, [lr]
   daa7e:	0c1b      	lsrs	r3, r3, #16
   daa80:	fb09 5303 	mla	r3, r9, r3, r5
   daa84:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   daa88:	4567      	cmp	r7, ip
   daa8a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   daa8e:	d8e6      	bhi.n	daa5e <__multiply+0xf2>
   daa90:	9d01      	ldr	r5, [sp, #4]
   daa92:	514b      	str	r3, [r1, r5]
   daa94:	3104      	adds	r1, #4
   daa96:	e79e      	b.n	da9d6 <__multiply+0x6a>
   daa98:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   daa9c:	2b00      	cmp	r3, #0
   daa9e:	d1a0      	bne.n	da9e2 <__multiply+0x76>
   daaa0:	3e01      	subs	r6, #1
   daaa2:	e79c      	b.n	da9de <__multiply+0x72>

000daaa4 <__pow5mult>:
   daaa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   daaa8:	4615      	mov	r5, r2
   daaaa:	f012 0203 	ands.w	r2, r2, #3
   daaae:	4606      	mov	r6, r0
   daab0:	460f      	mov	r7, r1
   daab2:	d007      	beq.n	daac4 <__pow5mult+0x20>
   daab4:	4c21      	ldr	r4, [pc, #132]	; (dab3c <__pow5mult+0x98>)
   daab6:	3a01      	subs	r2, #1
   daab8:	2300      	movs	r3, #0
   daaba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   daabe:	f7ff fe80 	bl	da7c2 <__multadd>
   daac2:	4607      	mov	r7, r0
   daac4:	10ad      	asrs	r5, r5, #2
   daac6:	d035      	beq.n	dab34 <__pow5mult+0x90>
   daac8:	6a74      	ldr	r4, [r6, #36]	; 0x24
   daaca:	b93c      	cbnz	r4, daadc <__pow5mult+0x38>
   daacc:	2010      	movs	r0, #16
   daace:	f7fb f9e7 	bl	d5ea0 <malloc>
   daad2:	e9c0 4401 	strd	r4, r4, [r0, #4]
   daad6:	6270      	str	r0, [r6, #36]	; 0x24
   daad8:	6004      	str	r4, [r0, #0]
   daada:	60c4      	str	r4, [r0, #12]
   daadc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   daae0:	f8d8 4008 	ldr.w	r4, [r8, #8]
   daae4:	b94c      	cbnz	r4, daafa <__pow5mult+0x56>
   daae6:	f240 2171 	movw	r1, #625	; 0x271
   daaea:	4630      	mov	r0, r6
   daaec:	f7ff ff35 	bl	da95a <__i2b>
   daaf0:	2300      	movs	r3, #0
   daaf2:	f8c8 0008 	str.w	r0, [r8, #8]
   daaf6:	4604      	mov	r4, r0
   daaf8:	6003      	str	r3, [r0, #0]
   daafa:	f04f 0900 	mov.w	r9, #0
   daafe:	07eb      	lsls	r3, r5, #31
   dab00:	d50a      	bpl.n	dab18 <__pow5mult+0x74>
   dab02:	4639      	mov	r1, r7
   dab04:	4622      	mov	r2, r4
   dab06:	4630      	mov	r0, r6
   dab08:	f7ff ff30 	bl	da96c <__multiply>
   dab0c:	4639      	mov	r1, r7
   dab0e:	4680      	mov	r8, r0
   dab10:	4630      	mov	r0, r6
   dab12:	f7ff fe3f 	bl	da794 <_Bfree>
   dab16:	4647      	mov	r7, r8
   dab18:	106d      	asrs	r5, r5, #1
   dab1a:	d00b      	beq.n	dab34 <__pow5mult+0x90>
   dab1c:	6820      	ldr	r0, [r4, #0]
   dab1e:	b938      	cbnz	r0, dab30 <__pow5mult+0x8c>
   dab20:	4622      	mov	r2, r4
   dab22:	4621      	mov	r1, r4
   dab24:	4630      	mov	r0, r6
   dab26:	f7ff ff21 	bl	da96c <__multiply>
   dab2a:	6020      	str	r0, [r4, #0]
   dab2c:	f8c0 9000 	str.w	r9, [r0]
   dab30:	4604      	mov	r4, r0
   dab32:	e7e4      	b.n	daafe <__pow5mult+0x5a>
   dab34:	4638      	mov	r0, r7
   dab36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   dab3a:	bf00      	nop
   dab3c:	000db9a0 	.word	0x000db9a0

000dab40 <__lshift>:
   dab40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dab44:	460c      	mov	r4, r1
   dab46:	6849      	ldr	r1, [r1, #4]
   dab48:	6923      	ldr	r3, [r4, #16]
   dab4a:	eb03 1862 	add.w	r8, r3, r2, asr #5
   dab4e:	68a3      	ldr	r3, [r4, #8]
   dab50:	4607      	mov	r7, r0
   dab52:	4691      	mov	r9, r2
   dab54:	ea4f 1a62 	mov.w	sl, r2, asr #5
   dab58:	f108 0601 	add.w	r6, r8, #1
   dab5c:	42b3      	cmp	r3, r6
   dab5e:	db3f      	blt.n	dabe0 <__lshift+0xa0>
   dab60:	4638      	mov	r0, r7
   dab62:	f7ff fde3 	bl	da72c <_Balloc>
   dab66:	2300      	movs	r3, #0
   dab68:	4605      	mov	r5, r0
   dab6a:	f100 0114 	add.w	r1, r0, #20
   dab6e:	f100 0210 	add.w	r2, r0, #16
   dab72:	4618      	mov	r0, r3
   dab74:	4553      	cmp	r3, sl
   dab76:	db36      	blt.n	dabe6 <__lshift+0xa6>
   dab78:	6920      	ldr	r0, [r4, #16]
   dab7a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   dab7e:	f104 0314 	add.w	r3, r4, #20
   dab82:	f019 091f 	ands.w	r9, r9, #31
   dab86:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   dab8a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   dab8e:	d02e      	beq.n	dabee <__lshift+0xae>
   dab90:	f1c9 0e20 	rsb	lr, r9, #32
   dab94:	468a      	mov	sl, r1
   dab96:	2200      	movs	r2, #0
   dab98:	6818      	ldr	r0, [r3, #0]
   dab9a:	fa00 f009 	lsl.w	r0, r0, r9
   dab9e:	4302      	orrs	r2, r0
   daba0:	f84a 2b04 	str.w	r2, [sl], #4
   daba4:	f853 2b04 	ldr.w	r2, [r3], #4
   daba8:	459c      	cmp	ip, r3
   dabaa:	fa22 f20e 	lsr.w	r2, r2, lr
   dabae:	d8f3      	bhi.n	dab98 <__lshift+0x58>
   dabb0:	ebac 0304 	sub.w	r3, ip, r4
   dabb4:	3b15      	subs	r3, #21
   dabb6:	f023 0303 	bic.w	r3, r3, #3
   dabba:	3304      	adds	r3, #4
   dabbc:	f104 0015 	add.w	r0, r4, #21
   dabc0:	4560      	cmp	r0, ip
   dabc2:	bf88      	it	hi
   dabc4:	2304      	movhi	r3, #4
   dabc6:	50ca      	str	r2, [r1, r3]
   dabc8:	b10a      	cbz	r2, dabce <__lshift+0x8e>
   dabca:	f108 0602 	add.w	r6, r8, #2
   dabce:	3e01      	subs	r6, #1
   dabd0:	4638      	mov	r0, r7
   dabd2:	612e      	str	r6, [r5, #16]
   dabd4:	4621      	mov	r1, r4
   dabd6:	f7ff fddd 	bl	da794 <_Bfree>
   dabda:	4628      	mov	r0, r5
   dabdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dabe0:	3101      	adds	r1, #1
   dabe2:	005b      	lsls	r3, r3, #1
   dabe4:	e7ba      	b.n	dab5c <__lshift+0x1c>
   dabe6:	f842 0f04 	str.w	r0, [r2, #4]!
   dabea:	3301      	adds	r3, #1
   dabec:	e7c2      	b.n	dab74 <__lshift+0x34>
   dabee:	3904      	subs	r1, #4
   dabf0:	f853 2b04 	ldr.w	r2, [r3], #4
   dabf4:	f841 2f04 	str.w	r2, [r1, #4]!
   dabf8:	459c      	cmp	ip, r3
   dabfa:	d8f9      	bhi.n	dabf0 <__lshift+0xb0>
   dabfc:	e7e7      	b.n	dabce <__lshift+0x8e>

000dabfe <__mcmp>:
   dabfe:	b530      	push	{r4, r5, lr}
   dac00:	6902      	ldr	r2, [r0, #16]
   dac02:	690c      	ldr	r4, [r1, #16]
   dac04:	1b12      	subs	r2, r2, r4
   dac06:	d10e      	bne.n	dac26 <__mcmp+0x28>
   dac08:	f100 0314 	add.w	r3, r0, #20
   dac0c:	3114      	adds	r1, #20
   dac0e:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   dac12:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   dac16:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   dac1a:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   dac1e:	42a5      	cmp	r5, r4
   dac20:	d003      	beq.n	dac2a <__mcmp+0x2c>
   dac22:	d305      	bcc.n	dac30 <__mcmp+0x32>
   dac24:	2201      	movs	r2, #1
   dac26:	4610      	mov	r0, r2
   dac28:	bd30      	pop	{r4, r5, pc}
   dac2a:	4283      	cmp	r3, r0
   dac2c:	d3f3      	bcc.n	dac16 <__mcmp+0x18>
   dac2e:	e7fa      	b.n	dac26 <__mcmp+0x28>
   dac30:	f04f 32ff 	mov.w	r2, #4294967295
   dac34:	e7f7      	b.n	dac26 <__mcmp+0x28>

000dac36 <__mdiff>:
   dac36:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dac3a:	460c      	mov	r4, r1
   dac3c:	4606      	mov	r6, r0
   dac3e:	4611      	mov	r1, r2
   dac40:	4620      	mov	r0, r4
   dac42:	4617      	mov	r7, r2
   dac44:	f7ff ffdb 	bl	dabfe <__mcmp>
   dac48:	1e05      	subs	r5, r0, #0
   dac4a:	d108      	bne.n	dac5e <__mdiff+0x28>
   dac4c:	4629      	mov	r1, r5
   dac4e:	4630      	mov	r0, r6
   dac50:	f7ff fd6c 	bl	da72c <_Balloc>
   dac54:	2301      	movs	r3, #1
   dac56:	e9c0 3504 	strd	r3, r5, [r0, #16]
   dac5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dac5e:	bfa4      	itt	ge
   dac60:	463b      	movge	r3, r7
   dac62:	4627      	movge	r7, r4
   dac64:	4630      	mov	r0, r6
   dac66:	6879      	ldr	r1, [r7, #4]
   dac68:	bfa6      	itte	ge
   dac6a:	461c      	movge	r4, r3
   dac6c:	2500      	movge	r5, #0
   dac6e:	2501      	movlt	r5, #1
   dac70:	f7ff fd5c 	bl	da72c <_Balloc>
   dac74:	693e      	ldr	r6, [r7, #16]
   dac76:	60c5      	str	r5, [r0, #12]
   dac78:	6925      	ldr	r5, [r4, #16]
   dac7a:	f107 0114 	add.w	r1, r7, #20
   dac7e:	f104 0914 	add.w	r9, r4, #20
   dac82:	f100 0e14 	add.w	lr, r0, #20
   dac86:	f107 0210 	add.w	r2, r7, #16
   dac8a:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
   dac8e:	eb09 0585 	add.w	r5, r9, r5, lsl #2
   dac92:	46f2      	mov	sl, lr
   dac94:	2700      	movs	r7, #0
   dac96:	f859 3b04 	ldr.w	r3, [r9], #4
   dac9a:	f852 bf04 	ldr.w	fp, [r2, #4]!
   dac9e:	fa1f f883 	uxth.w	r8, r3
   daca2:	fa17 f78b 	uxtah	r7, r7, fp
   daca6:	0c1b      	lsrs	r3, r3, #16
   daca8:	eba7 0808 	sub.w	r8, r7, r8
   dacac:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   dacb0:	eb03 4328 	add.w	r3, r3, r8, asr #16
   dacb4:	fa1f f888 	uxth.w	r8, r8
   dacb8:	141f      	asrs	r7, r3, #16
   dacba:	454d      	cmp	r5, r9
   dacbc:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   dacc0:	f84a 3b04 	str.w	r3, [sl], #4
   dacc4:	d8e7      	bhi.n	dac96 <__mdiff+0x60>
   dacc6:	1b2b      	subs	r3, r5, r4
   dacc8:	3b15      	subs	r3, #21
   dacca:	f023 0303 	bic.w	r3, r3, #3
   dacce:	3304      	adds	r3, #4
   dacd0:	3415      	adds	r4, #21
   dacd2:	42a5      	cmp	r5, r4
   dacd4:	bf38      	it	cc
   dacd6:	2304      	movcc	r3, #4
   dacd8:	4419      	add	r1, r3
   dacda:	4473      	add	r3, lr
   dacdc:	469e      	mov	lr, r3
   dacde:	460d      	mov	r5, r1
   dace0:	4565      	cmp	r5, ip
   dace2:	d30e      	bcc.n	dad02 <__mdiff+0xcc>
   dace4:	f10c 0203 	add.w	r2, ip, #3
   dace8:	1a52      	subs	r2, r2, r1
   dacea:	f022 0203 	bic.w	r2, r2, #3
   dacee:	3903      	subs	r1, #3
   dacf0:	458c      	cmp	ip, r1
   dacf2:	bf38      	it	cc
   dacf4:	2200      	movcc	r2, #0
   dacf6:	441a      	add	r2, r3
   dacf8:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   dacfc:	b17b      	cbz	r3, dad1e <__mdiff+0xe8>
   dacfe:	6106      	str	r6, [r0, #16]
   dad00:	e7ab      	b.n	dac5a <__mdiff+0x24>
   dad02:	f855 8b04 	ldr.w	r8, [r5], #4
   dad06:	fa17 f488 	uxtah	r4, r7, r8
   dad0a:	1422      	asrs	r2, r4, #16
   dad0c:	eb02 4218 	add.w	r2, r2, r8, lsr #16
   dad10:	b2a4      	uxth	r4, r4
   dad12:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   dad16:	f84e 4b04 	str.w	r4, [lr], #4
   dad1a:	1417      	asrs	r7, r2, #16
   dad1c:	e7e0      	b.n	dace0 <__mdiff+0xaa>
   dad1e:	3e01      	subs	r6, #1
   dad20:	e7ea      	b.n	dacf8 <__mdiff+0xc2>
	...

000dad24 <__ulp>:
   dad24:	b082      	sub	sp, #8
   dad26:	ed8d 0b00 	vstr	d0, [sp]
   dad2a:	9b01      	ldr	r3, [sp, #4]
   dad2c:	4912      	ldr	r1, [pc, #72]	; (dad78 <__ulp+0x54>)
   dad2e:	4019      	ands	r1, r3
   dad30:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   dad34:	2900      	cmp	r1, #0
   dad36:	dd05      	ble.n	dad44 <__ulp+0x20>
   dad38:	2200      	movs	r2, #0
   dad3a:	460b      	mov	r3, r1
   dad3c:	ec43 2b10 	vmov	d0, r2, r3
   dad40:	b002      	add	sp, #8
   dad42:	4770      	bx	lr
   dad44:	4249      	negs	r1, r1
   dad46:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   dad4a:	ea4f 5021 	mov.w	r0, r1, asr #20
   dad4e:	f04f 0200 	mov.w	r2, #0
   dad52:	f04f 0300 	mov.w	r3, #0
   dad56:	da04      	bge.n	dad62 <__ulp+0x3e>
   dad58:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   dad5c:	fa41 f300 	asr.w	r3, r1, r0
   dad60:	e7ec      	b.n	dad3c <__ulp+0x18>
   dad62:	f1a0 0114 	sub.w	r1, r0, #20
   dad66:	291e      	cmp	r1, #30
   dad68:	bfda      	itte	le
   dad6a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   dad6e:	fa20 f101 	lsrle.w	r1, r0, r1
   dad72:	2101      	movgt	r1, #1
   dad74:	460a      	mov	r2, r1
   dad76:	e7e1      	b.n	dad3c <__ulp+0x18>
   dad78:	7ff00000 	.word	0x7ff00000

000dad7c <__b2d>:
   dad7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dad7e:	6905      	ldr	r5, [r0, #16]
   dad80:	f100 0714 	add.w	r7, r0, #20
   dad84:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   dad88:	1f2e      	subs	r6, r5, #4
   dad8a:	f855 4c04 	ldr.w	r4, [r5, #-4]
   dad8e:	4620      	mov	r0, r4
   dad90:	f7ff fd93 	bl	da8ba <__hi0bits>
   dad94:	f1c0 0320 	rsb	r3, r0, #32
   dad98:	280a      	cmp	r0, #10
   dad9a:	f8df c07c 	ldr.w	ip, [pc, #124]	; dae18 <__b2d+0x9c>
   dad9e:	600b      	str	r3, [r1, #0]
   dada0:	dc14      	bgt.n	dadcc <__b2d+0x50>
   dada2:	f1c0 0e0b 	rsb	lr, r0, #11
   dada6:	fa24 f10e 	lsr.w	r1, r4, lr
   dadaa:	42b7      	cmp	r7, r6
   dadac:	ea41 030c 	orr.w	r3, r1, ip
   dadb0:	bf34      	ite	cc
   dadb2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   dadb6:	2100      	movcs	r1, #0
   dadb8:	3015      	adds	r0, #21
   dadba:	fa04 f000 	lsl.w	r0, r4, r0
   dadbe:	fa21 f10e 	lsr.w	r1, r1, lr
   dadc2:	ea40 0201 	orr.w	r2, r0, r1
   dadc6:	ec43 2b10 	vmov	d0, r2, r3
   dadca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   dadcc:	42b7      	cmp	r7, r6
   dadce:	bf3a      	itte	cc
   dadd0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   dadd4:	f1a5 0608 	subcc.w	r6, r5, #8
   dadd8:	2100      	movcs	r1, #0
   dadda:	380b      	subs	r0, #11
   daddc:	d017      	beq.n	dae0e <__b2d+0x92>
   dadde:	f1c0 0c20 	rsb	ip, r0, #32
   dade2:	fa04 f500 	lsl.w	r5, r4, r0
   dade6:	42be      	cmp	r6, r7
   dade8:	fa21 f40c 	lsr.w	r4, r1, ip
   dadec:	ea45 0504 	orr.w	r5, r5, r4
   dadf0:	bf8c      	ite	hi
   dadf2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   dadf6:	2400      	movls	r4, #0
   dadf8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   dadfc:	fa01 f000 	lsl.w	r0, r1, r0
   dae00:	fa24 f40c 	lsr.w	r4, r4, ip
   dae04:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   dae08:	ea40 0204 	orr.w	r2, r0, r4
   dae0c:	e7db      	b.n	dadc6 <__b2d+0x4a>
   dae0e:	ea44 030c 	orr.w	r3, r4, ip
   dae12:	460a      	mov	r2, r1
   dae14:	e7d7      	b.n	dadc6 <__b2d+0x4a>
   dae16:	bf00      	nop
   dae18:	3ff00000 	.word	0x3ff00000

000dae1c <__d2b>:
   dae1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   dae20:	4689      	mov	r9, r1
   dae22:	2101      	movs	r1, #1
   dae24:	ec57 6b10 	vmov	r6, r7, d0
   dae28:	4690      	mov	r8, r2
   dae2a:	f7ff fc7f 	bl	da72c <_Balloc>
   dae2e:	f3c7 550a 	ubfx	r5, r7, #20, #11
   dae32:	4604      	mov	r4, r0
   dae34:	f3c7 0313 	ubfx	r3, r7, #0, #20
   dae38:	bb35      	cbnz	r5, dae88 <__d2b+0x6c>
   dae3a:	2e00      	cmp	r6, #0
   dae3c:	9301      	str	r3, [sp, #4]
   dae3e:	d028      	beq.n	dae92 <__d2b+0x76>
   dae40:	4668      	mov	r0, sp
   dae42:	9600      	str	r6, [sp, #0]
   dae44:	f7ff fd59 	bl	da8fa <__lo0bits>
   dae48:	9900      	ldr	r1, [sp, #0]
   dae4a:	b300      	cbz	r0, dae8e <__d2b+0x72>
   dae4c:	9a01      	ldr	r2, [sp, #4]
   dae4e:	f1c0 0320 	rsb	r3, r0, #32
   dae52:	fa02 f303 	lsl.w	r3, r2, r3
   dae56:	430b      	orrs	r3, r1
   dae58:	40c2      	lsrs	r2, r0
   dae5a:	6163      	str	r3, [r4, #20]
   dae5c:	9201      	str	r2, [sp, #4]
   dae5e:	9b01      	ldr	r3, [sp, #4]
   dae60:	61a3      	str	r3, [r4, #24]
   dae62:	2b00      	cmp	r3, #0
   dae64:	bf14      	ite	ne
   dae66:	2202      	movne	r2, #2
   dae68:	2201      	moveq	r2, #1
   dae6a:	6122      	str	r2, [r4, #16]
   dae6c:	b1d5      	cbz	r5, daea4 <__d2b+0x88>
   dae6e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   dae72:	4405      	add	r5, r0
   dae74:	f8c9 5000 	str.w	r5, [r9]
   dae78:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   dae7c:	f8c8 0000 	str.w	r0, [r8]
   dae80:	4620      	mov	r0, r4
   dae82:	b003      	add	sp, #12
   dae84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dae88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   dae8c:	e7d5      	b.n	dae3a <__d2b+0x1e>
   dae8e:	6161      	str	r1, [r4, #20]
   dae90:	e7e5      	b.n	dae5e <__d2b+0x42>
   dae92:	a801      	add	r0, sp, #4
   dae94:	f7ff fd31 	bl	da8fa <__lo0bits>
   dae98:	9b01      	ldr	r3, [sp, #4]
   dae9a:	6163      	str	r3, [r4, #20]
   dae9c:	2201      	movs	r2, #1
   dae9e:	6122      	str	r2, [r4, #16]
   daea0:	3020      	adds	r0, #32
   daea2:	e7e3      	b.n	dae6c <__d2b+0x50>
   daea4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   daea8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   daeac:	f8c9 0000 	str.w	r0, [r9]
   daeb0:	6918      	ldr	r0, [r3, #16]
   daeb2:	f7ff fd02 	bl	da8ba <__hi0bits>
   daeb6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   daeba:	e7df      	b.n	dae7c <__d2b+0x60>

000daebc <__ratio>:
   daebc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   daec0:	4688      	mov	r8, r1
   daec2:	4669      	mov	r1, sp
   daec4:	4681      	mov	r9, r0
   daec6:	f7ff ff59 	bl	dad7c <__b2d>
   daeca:	a901      	add	r1, sp, #4
   daecc:	4640      	mov	r0, r8
   daece:	ec55 4b10 	vmov	r4, r5, d0
   daed2:	f7ff ff53 	bl	dad7c <__b2d>
   daed6:	f8d9 3010 	ldr.w	r3, [r9, #16]
   daeda:	f8d8 2010 	ldr.w	r2, [r8, #16]
   daede:	eba3 0c02 	sub.w	ip, r3, r2
   daee2:	e9dd 3200 	ldrd	r3, r2, [sp]
   daee6:	1a9b      	subs	r3, r3, r2
   daee8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   daeec:	ec51 0b10 	vmov	r0, r1, d0
   daef0:	2b00      	cmp	r3, #0
   daef2:	bfd6      	itet	le
   daef4:	460a      	movle	r2, r1
   daef6:	462a      	movgt	r2, r5
   daef8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   daefc:	468b      	mov	fp, r1
   daefe:	462f      	mov	r7, r5
   daf00:	bfd4      	ite	le
   daf02:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   daf06:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   daf0a:	4620      	mov	r0, r4
   daf0c:	ee10 2a10 	vmov	r2, s0
   daf10:	465b      	mov	r3, fp
   daf12:	4639      	mov	r1, r7
   daf14:	f7fd fef4 	bl	d8d00 <__aeabi_ddiv>
   daf18:	ec41 0b10 	vmov	d0, r0, r1
   daf1c:	b003      	add	sp, #12
   daf1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000daf22 <__copybits>:
   daf22:	3901      	subs	r1, #1
   daf24:	b570      	push	{r4, r5, r6, lr}
   daf26:	1149      	asrs	r1, r1, #5
   daf28:	6914      	ldr	r4, [r2, #16]
   daf2a:	3101      	adds	r1, #1
   daf2c:	f102 0314 	add.w	r3, r2, #20
   daf30:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   daf34:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   daf38:	1f05      	subs	r5, r0, #4
   daf3a:	42a3      	cmp	r3, r4
   daf3c:	d30c      	bcc.n	daf58 <__copybits+0x36>
   daf3e:	1aa3      	subs	r3, r4, r2
   daf40:	3b11      	subs	r3, #17
   daf42:	f023 0303 	bic.w	r3, r3, #3
   daf46:	3211      	adds	r2, #17
   daf48:	42a2      	cmp	r2, r4
   daf4a:	bf88      	it	hi
   daf4c:	2300      	movhi	r3, #0
   daf4e:	4418      	add	r0, r3
   daf50:	2300      	movs	r3, #0
   daf52:	4288      	cmp	r0, r1
   daf54:	d305      	bcc.n	daf62 <__copybits+0x40>
   daf56:	bd70      	pop	{r4, r5, r6, pc}
   daf58:	f853 6b04 	ldr.w	r6, [r3], #4
   daf5c:	f845 6f04 	str.w	r6, [r5, #4]!
   daf60:	e7eb      	b.n	daf3a <__copybits+0x18>
   daf62:	f840 3b04 	str.w	r3, [r0], #4
   daf66:	e7f4      	b.n	daf52 <__copybits+0x30>

000daf68 <__any_on>:
   daf68:	f100 0214 	add.w	r2, r0, #20
   daf6c:	6900      	ldr	r0, [r0, #16]
   daf6e:	114b      	asrs	r3, r1, #5
   daf70:	4298      	cmp	r0, r3
   daf72:	b510      	push	{r4, lr}
   daf74:	db11      	blt.n	daf9a <__any_on+0x32>
   daf76:	dd0a      	ble.n	daf8e <__any_on+0x26>
   daf78:	f011 011f 	ands.w	r1, r1, #31
   daf7c:	d007      	beq.n	daf8e <__any_on+0x26>
   daf7e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   daf82:	fa24 f001 	lsr.w	r0, r4, r1
   daf86:	fa00 f101 	lsl.w	r1, r0, r1
   daf8a:	428c      	cmp	r4, r1
   daf8c:	d10b      	bne.n	dafa6 <__any_on+0x3e>
   daf8e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   daf92:	4293      	cmp	r3, r2
   daf94:	d803      	bhi.n	daf9e <__any_on+0x36>
   daf96:	2000      	movs	r0, #0
   daf98:	bd10      	pop	{r4, pc}
   daf9a:	4603      	mov	r3, r0
   daf9c:	e7f7      	b.n	daf8e <__any_on+0x26>
   daf9e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   dafa2:	2900      	cmp	r1, #0
   dafa4:	d0f5      	beq.n	daf92 <__any_on+0x2a>
   dafa6:	2001      	movs	r0, #1
   dafa8:	e7f6      	b.n	daf98 <__any_on+0x30>

000dafaa <_calloc_r>:
   dafaa:	b513      	push	{r0, r1, r4, lr}
   dafac:	434a      	muls	r2, r1
   dafae:	4611      	mov	r1, r2
   dafb0:	9201      	str	r2, [sp, #4]
   dafb2:	f7fa ff9d 	bl	d5ef0 <_malloc_r>
   dafb6:	4604      	mov	r4, r0
   dafb8:	b118      	cbz	r0, dafc2 <_calloc_r+0x18>
   dafba:	9a01      	ldr	r2, [sp, #4]
   dafbc:	2100      	movs	r1, #0
   dafbe:	f7fe f911 	bl	d91e4 <memset>
   dafc2:	4620      	mov	r0, r4
   dafc4:	b002      	add	sp, #8
   dafc6:	bd10      	pop	{r4, pc}

000dafc8 <nan>:
   dafc8:	ed9f 0b01 	vldr	d0, [pc, #4]	; dafd0 <nan+0x8>
   dafcc:	4770      	bx	lr
   dafce:	bf00      	nop
   dafd0:	00000000 	.word	0x00000000
   dafd4:	7ff80000 	.word	0x7ff80000

000dafd8 <__ascii_wctomb>:
   dafd8:	b149      	cbz	r1, dafee <__ascii_wctomb+0x16>
   dafda:	2aff      	cmp	r2, #255	; 0xff
   dafdc:	bf85      	ittet	hi
   dafde:	238a      	movhi	r3, #138	; 0x8a
   dafe0:	6003      	strhi	r3, [r0, #0]
   dafe2:	700a      	strbls	r2, [r1, #0]
   dafe4:	f04f 30ff 	movhi.w	r0, #4294967295
   dafe8:	bf98      	it	ls
   dafea:	2001      	movls	r0, #1
   dafec:	4770      	bx	lr
   dafee:	4608      	mov	r0, r1
   daff0:	4770      	bx	lr
	...

000daff4 <__aeabi_d2lz>:
   daff4:	b538      	push	{r3, r4, r5, lr}
   daff6:	2200      	movs	r2, #0
   daff8:	2300      	movs	r3, #0
   daffa:	4604      	mov	r4, r0
   daffc:	460d      	mov	r5, r1
   daffe:	f7fd ffc7 	bl	d8f90 <__aeabi_dcmplt>
   db002:	b928      	cbnz	r0, db010 <__aeabi_d2lz+0x1c>
   db004:	4620      	mov	r0, r4
   db006:	4629      	mov	r1, r5
   db008:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   db00c:	f7fe b880 	b.w	d9110 <__aeabi_d2ulz>
   db010:	4620      	mov	r0, r4
   db012:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   db016:	f7fe f87b 	bl	d9110 <__aeabi_d2ulz>
   db01a:	4240      	negs	r0, r0
   db01c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   db020:	bd38      	pop	{r3, r4, r5, pc}
   db022:	bf00      	nop

000db024 <dynalib_user>:
   db024:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   db034:	0000 0000 450a 746e 7265 7420 6568 7020     .....Enter the p
   db044:	736f 7469 6f69 206e 666f 7420 6568 6420     osition of the d
   db054:	7665 6369 2065 6977 6874 7420 6568 6220     evice with the b
   db064:	756c 2065 454c 2044 7361 6120 206e 6e69     lue LED as an in
   db074:	6574 6567 2072 6628 7269 7473 6420 7665     teger (first dev
   db084:	6369 2065 7369 6120 2074 2c31 7320 6365     ice is at 1, sec
   db094:	6e6f 2064 7369 6120 2074 2c32 6520 6374     ond is at 2, etc
   db0a4:	3a29 0020 530a 7165 6575 636e 3a65 0020     ): ..Sequence: .
   db0b4:	202c 6c00 7061 2e69 7274 6e61 6973 6374     , .lapi.transitc
   db0c4:	6968 6163 6f67 632e 6d6f 2f00 7061 2f69     hicago.com./api/
   db0d4:	2e31 2f30 7474 6f70 6973 6974 6e6f 2e73     1.0/ttpositions.
   db0e4:	7361 7870 6b3f 7965 303d 6630 3066 3039     aspx?key=00ff090
   db0f4:	3336 6163 3461 3736 3834 3334 6434 6635     63caa46748434d5f
   db104:	3361 3132 3064 3834 2666 7472 723d 6465     a321d048f&rt=red
   db114:	6f26 7475 7570 5474 7079 3d65 534a 4e4f     &outputType=JSON
   db124:	3600 3445 3030 3030 2d31 3542 3341 462d     .6E400001-B5A3-F
   db134:	3933 2d33 3045 3941 452d 3035 3245 4434     393-E0A9-E50E24D
   db144:	4343 3941 0045 4536 3034 3030 3230 422d     CCA9E.6E400002-B
   db154:	4135 2d33 3346 3339 452d 4130 2d39 3545     5A3-F393-E0A9-E5
   db164:	4530 3432 4344 4143 4539 3600 3445 3030     0E24DCCA9E.6E400
   db174:	3030 2d33 3542 3341 462d 3933 2d33 3045     003-B5A3-F393-E0
   db184:	3941 452d 3035 3245 4434 4343 3941 0045     A9-E50E24DCCA9E.
   db194:	7874 7200 0078 6f4e 7472 2f68 6c43 6279     tx.rx.North/Clyb
   db1a4:	756f 6e72 4300 616c 6b72 442f 7669 7369     ourn.Clark/Divis
   db1b4:	6e6f 4300 6968 6163 6f67 4700 6172 646e     on.Chicago.Grand
   db1c4:	4c00 6b61 0065 6f4d 726e 656f 4a00 6361     .Lake.Monroe.Jac
   db1d4:	736b 6e6f 4800 7261 6972 6f73 006e 6f52     kson.Harrison.Ro
   db1e4:	736f 7665 6c65 0074 6543 6d72 6b61 432d     osevelt.Cermak-C
   db1f4:	6968 616e 6f74 6e77 4700 5445 7000 7261     hinatown.GET.par
   db204:	6973 676e 6620 6961 656c 0064 7463 7461     sing failed.ctat
   db214:	0074 6f72 7475 0065 7274 6961 006e 656e     t.route.train.ne
   db224:	7478 7453 4e61 006d 7274 7244 6c00 7461     xtStaNm.trDr.lat
   db234:	6c00 6e6f 3100 3500 0000 0000               .lon.1.5....

000db240 <_ZTV16JsonParserStaticILj10000ELj1000EE>:
	...
   db248:	40f9 000d 410d 000d 6341 6563 7470 2f00     .@...A..Accept./
   db258:	2f2a 2000 5448 5054 312f 302e 0a0d 6300     */. HTTP/1.0...c
   db268:	6f6c 6573 4300 6e6f 656e 7463 6f69 006e     lose.Connection.
   db278:	4f48 5453 4300 6e6f 6574 746e 4c2d 6e65     HOST.Content-Len
   db288:	7467 0068 4f50 5453 0d00 0d0a 000a 3025     gth.POST......%0
   db298:	7834 0000                                   4x..

000db29c <_ZTV10JsonBuffer>:
	...
   db2a4:	502d 000d 5049 000d                         -P..IP..

000db2ac <_ZTV10JsonParser>:
	...
   db2b4:	505d 000d 5081 000d                         ]P...P..

000db2bc <_ZTV13JsonReference>:
	...
   db2c4:	501d 000d 501f 000d                         .P...P..

000db2cc <_ZTVN5spark13EthernetClassE>:
	...
   db2d4:	5f7f 000d 5f75 000d 5f6b 000d 5f61 000d     ._..u_..k_..a_..
   db2e4:	5f55 000d 5f49 000d 82ad 000d 82b5 000d     U_..I_..........
   db2f4:	5f3d 000d 5f35 000d 5f2b 000d 5f21 000d     =_..5_..+_..!_..
   db304:	82e5 000d                                   ....

000db308 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   db308:	0800 1810 2820 3830 6977 6972 676e 622e     .... (08wiring.b
   db318:	656c 5300 6174 7472 6420 7369 6f63 6576     le.Start discove
   db328:	6972 676e 7320 7265 6976 6563 2e73 5000     ring services..P
   db338:	6565 2072 6564 6976 6563 6920 2073 696d     eer device is mi
   db348:	7373 6e69 2167 4600 6961 656c 2064 6f74     ssing!.Failed to
   db358:	6120 7070 6e65 2064 6570 7265 4320 6e65      append peer Cen
   db368:	7274 6c61 6420 7665 6369 2e65 4300 6e6f     tral device..Con
   db378:	656e 7463 6465 6220 2079 6543 746e 6172     nected by Centra
   db388:	206c 6564 6976 6563 002e 6944 6373 6e6f     l device..Discon
   db398:	656e 7463 6465 6220 2079 6572 6f6d 6574     nected by remote
   db3a8:	6420 7665 6369 2e65 4400 7075 696c 6163      device..Duplica
   db3b8:	6574 2064 6863 7261 6361 6574 6972 7473     ted characterist
   db3c8:	6369 6320 6e61 6f6e 2074 6562 6120 6464     ic cannot be add
   db3d8:	6465 002e 6146 6c69 6465 7420 206f 7061     ed..Failed to ap
   db3e8:	6570 646e 6c20 636f 6c61 6320 6168 6172     pend local chara
   db3f8:	7463 7265 7369 6974 2e63 0000               cteristic...

000db404 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   db40c:	639f 000d 6401 000d 65c9 000d 642b 000d     .c...d...e..+d..
   db41c:	63a1 000d                                   .c..

000db420 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   db428:	639b 000d 640f 000d 639d 000d 642f 000d     .c...d...c../d..
   db438:	63c1 000d                                   .c..

000db43c <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   db444:	6399 000d 641d 000d 6d95 000d 6433 000d     .c...d...m..3d..
   db454:	63e1 000d                                   .c..

000db458 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   db460:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............

000db470 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   db470:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.

000db480 <_ZN8particle7BleUuid9BASE_UUIDE>:
   db480:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............
   db490:	7061 0070 5925 252d 2d6d 6425 2554 3a48     app.%Y-%m-%dT%H:
   db4a0:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000db4b0 <_ZTV9IPAddress>:
	...
   db4b8:	7885 000d 7875 000d 7877 000d               .x..ux..wx..

000db4c4 <_ZTV9USBSerial>:
	...
   db4cc:	7991 000d 79f9 000d 79cf 000d 7629 000d     .y...y...y..)v..
   db4dc:	79c1 000d 7993 000d 79a3 000d 79f3 000d     .y...y...y...y..
   db4ec:	79b3 000d 798d 000d                         .y...y..

000db4f4 <_ZTV11USARTSerial>:
	...
   db4fc:	7a9d 000d 7b09 000d 7ae1 000d 7629 000d     .z...{...z..)v..
   db50c:	7ab1 000d 7acd 000d 7abf 000d 7adb 000d     .z...z...z...z..
   db51c:	7a9f 000d 7aa3 000d                         .z...z..

000db524 <_ZTV7TwoWire>:
	...
   db52c:	7b99 000d 7be3 000d 7bbb 000d 7b9b 000d     .{...{...{...{..
   db53c:	7bc3 000d 7bcb 000d 7bd3 000d 7bdb 000d     .{...{...{...{..
   db54c:	6977 6972 676e 7200 6365 2076 7265 6f72     wiring.recv erro
   db55c:	2072 203d 6425 0000                         r = %d..

000db564 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   db56c:	7cbf 000d 7ce1 000d 80fb 000d 7cef 000d     .|...|.......|..
   db57c:	7cc1 000d                                   .|..

000db580 <_ZTV9TCPClient>:
	...
   db588:	7d6d 000d 7da1 000d 7c3d 000d 7c57 000d     m}...}..=|..W|..
   db598:	7f91 000d 7e03 000d 7dd5 000d 7c81 000d     .....~...}...|..
   db5a8:	7e9b 000d 8101 000d 7e37 000d 8045 000d     .~......7~..E...
   db5b8:	7c83 000d 7cb5 000d 7c69 000d 7cf3 000d     .|...|..i|...|..
   db5c8:	7db5 000d                                   .}..

000db5cc <_ZTVN5spark9WiFiClassE>:
	...
   db5d4:	824f 000d 8245 000d 823b 000d 81fd 000d     O...E...;.......
   db5e4:	76ef 000d 822f 000d 82ad 000d 82b5 000d     .v../...........
   db5f4:	8223 000d 821b 000d 8211 000d 8207 000d     #...............
   db604:	82e5 000d                                   ....

000db608 <_ZTVN5spark12NetworkClassE>:
	...
   db610:	826d 000d 8277 000d 8281 000d 828b 000d     m...w...........
   db620:	8295 000d 82a1 000d 82ad 000d 82b5 000d     ................
   db630:	82bd 000d 82c9 000d 82d1 000d 82db 000d     ................
   db640:	82e5 000d                                   ....

000db644 <_ZSt7nothrow>:
	...

000db645 <_ZTSSt19_Sp_make_shared_tag>:
   db645:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   db655:	6572 5f64 6174 0067 0000                     red_tag....

000db660 <_ZTISt19_Sp_make_shared_tag>:
   db660:	b6a0 000d b645 000d                         ....E...

000db668 <_ZTIN10__cxxabiv117__class_type_infoE>:
   db668:	b700 000d b674 000d b724 000d               ....t...$...

000db674 <_ZTSN10__cxxabiv117__class_type_infoE>:
   db674:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   db684:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   db694:	0045 0000                                   E...

000db698 <_ZTVN10__cxxabiv117__class_type_infoE>:
   db698:	0000 0000 b668 000d 855d 000d 8571 000d     ....h...]...q...
   db6a8:	8705 000d 8705 000d 85db 000d 851d 000d     ................
   db6b8:	85c3 000d 8585 000d 8551 000d               ........Q...

000db6c4 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   db6c4:	b700 000d b6d0 000d b668 000d               ........h...

000db6d0 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   db6d0:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   db6e0:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   db6f0:	666e 456f 0000 0000                         nfoE....

000db6f8 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   db6f8:	0000 0000 b6c4 000d 8605 000d 8619 000d     ................
   db708:	8705 000d 8705 000d 85db 000d 851d 000d     ................
   db718:	86d9 000d 8665 000d 862d 000d               ....e...-...

000db724 <_ZTISt9type_info>:
   db724:	b6a0 000d b72c 000d                         ....,...

000db72c <_ZTSSt9type_info>:
   db72c:	7453 7439 7079 5f65 6e69 6f66 6e00 0066     St9type_info.nf.
   db73c:	6e69 7469 0079 6e61 0000 0000               inity.an....

000db748 <fpi.7566>:
   db748:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   db758:	0000 0000                                   ....

000db75c <fpinan.7602>:
   db75c:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   db76c:	0000 0000                                   ....

000db770 <tinytens>:
   db770:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   db780:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   db790:	6f43 64ac 0628 1168                         Co.d(.h.

000db798 <_ctype_>:
   db798:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   db7a8:	2020 2020 2020 2020 2020 2020 2020 2020                     
   db7b8:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   db7c8:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   db7d8:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   db7e8:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   db7f8:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   db808:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   db818:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000db89c <_C_numeric_locale>:
   db89c:	b401 000d b295 000d 5454 2003 0043 4f50     ........TT. C.PO
   db8ac:	4953 0058                                   SIX.

000db8b0 <__mprec_bigtens>:
   db8b0:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   db8c0:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   db8d0:	bf3c 7f73 4fdd 7515                         <.s..O.u

000db8d8 <__mprec_tens>:
   db8d8:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   db8e8:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   db8f8:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   db908:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   db918:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   db928:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   db938:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   db948:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   db958:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   db968:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   db978:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   db988:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   db998:	9db4 79d9 7843 44ea                         ...yCx.D

000db9a0 <p05.7490>:
   db9a0:	0005 0000 0019 0000 007d 0000               ........}...

000db9ac <link_const_variable_data_end>:
   db9ac:	000d43f9 	.word	0x000d43f9
   db9b0:	000d4d49 	.word	0x000d4d49
   db9b4:	000d5f89 	.word	0x000d5f89
   db9b8:	000d6151 	.word	0x000d6151
   db9bc:	000d7601 	.word	0x000d7601
   db9c0:	000d76fd 	.word	0x000d76fd
   db9c4:	000d770d 	.word	0x000d770d
   db9c8:	000d7735 	.word	0x000d7735
   db9cc:	000d8259 	.word	0x000d8259
   db9d0:	000d83c5 	.word	0x000d83c5

000db9d4 <link_constructors_end>:
	...
