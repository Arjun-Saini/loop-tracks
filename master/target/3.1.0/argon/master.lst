
e:/IoT/loop-tracks/master/target/3.1.0/argon/master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000012e4  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000b5300  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  2003e5c8  000b5304  0001e5c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000001c0  2003e630  2003e630  0002e630  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000b536c  000b536c  0002536c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000b5394  000b5394  00025394  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000e907a  00000000  00000000  00025398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 0000f3ee  00000000  00000000  0010e412  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_loc    0003172b  00000000  00000000  0011d800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000024d8  00000000  00000000  0014ef2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00009030  00000000  00000000  00151403  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00031cd3  00000000  00000000  0015a433  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000318cd  00000000  00000000  0018c106  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00120aad  00000000  00000000  001bd9d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_frame  0000670c  00000000  00000000  002de480  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f000 fff3 	bl	b5018 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f000 fffb 	bl	b5034 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e5c8 	.word	0x2003e5c8
   b4048:	000b5304 	.word	0x000b5304
   b404c:	2003e630 	.word	0x2003e630
   b4050:	2003e630 	.word	0x2003e630
   b4054:	2003e7f0 	.word	0x2003e7f0

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f000 fc93 	bl	b4988 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42a5      	cmp	r5, r4
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b52dc 	.word	0x000b52dc
   b407c:	000b5300 	.word	0x000b5300

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b81b 	b.w	b40ba <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f81f 	bl	b40c8 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f000 bc33 	b.w	b48f8 <_post_loop>

000b4092 <_Znaj>:
   b4092:	f000 b9eb 	b.w	b446c <malloc>

000b4096 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   b4096:	f000 b9f1 	b.w	b447c <free>

000b409a <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b409a:	7800      	ldrb	r0, [r0, #0]
   b409c:	fab0 f080 	clz	r0, r0
   b40a0:	0940      	lsrs	r0, r0, #5
   b40a2:	4770      	bx	lr

000b40a4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40a4:	2301      	movs	r3, #1
   b40a6:	7003      	strb	r3, [r0, #0]
   b40a8:	4770      	bx	lr

000b40aa <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   b40aa:	b510      	push	{r4, lr}
   b40ac:	4604      	mov	r4, r0
        if (wakeupSource_) {
   b40ae:	6800      	ldr	r0, [r0, #0]
   b40b0:	b108      	cbz	r0, b40b6 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   b40b2:	f000 f9e3 	bl	b447c <free>
class SystemClass {
   b40b6:	4620      	mov	r0, r4
   b40b8:	bd10      	pop	{r4, pc}

000b40ba <setup>:
SYSTEM_MODE(MANUAL)

void setup() {
   b40ba:	b508      	push	{r3, lr}
  Wire.begin();
   b40bc:	f000 ff6c 	bl	b4f98 <_Z19__fetch_global_Wirev>
}
   b40c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Wire.begin();
   b40c4:	f000 be4a 	b.w	b4d5c <_ZN7TwoWire5beginEv>

000b40c8 <loop>:

String test;

void loop() {
   b40c8:	b530      	push	{r4, r5, lr}
   b40ca:	b085      	sub	sp, #20
  Wire.requestFrom(0x20);
   b40cc:	f000 ff64 	bl	b4f98 <_Z19__fetch_global_Wirev>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b40d0:	2400      	movs	r4, #0
   b40d2:	2320      	movs	r3, #32
   b40d4:	e9cd 3400 	strd	r3, r4, [sp]
   b40d8:	2201      	movs	r2, #1
   b40da:	2364      	movs	r3, #100	; 0x64
   b40dc:	4669      	mov	r1, sp
   b40de:	e9cd 2302 	strd	r2, r3, [sp, #8]
   b40e2:	f000 fe41 	bl	b4d68 <_ZN7TwoWire11requestFromERK16WireTransmission>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b40e6:	4d16      	ldr	r5, [pc, #88]	; (b4140 <loop+0x78>)
  for(int i = 0; i < Wire.available(); i++){
   b40e8:	f000 ff56 	bl	b4f98 <_Z19__fetch_global_Wirev>
   b40ec:	6803      	ldr	r3, [r0, #0]
   b40ee:	691b      	ldr	r3, [r3, #16]
   b40f0:	4798      	blx	r3
   b40f2:	42a0      	cmp	r0, r4
   b40f4:	dd12      	ble.n	b411c <loop+0x54>
    test += String(Wire.read());
   b40f6:	f000 ff4f 	bl	b4f98 <_Z19__fetch_global_Wirev>
   b40fa:	6803      	ldr	r3, [r0, #0]
   b40fc:	695b      	ldr	r3, [r3, #20]
   b40fe:	4798      	blx	r3
   b4100:	220a      	movs	r2, #10
   b4102:	4601      	mov	r1, r0
   b4104:	4668      	mov	r0, sp
   b4106:	f000 faf2 	bl	b46ee <_ZN6StringC1Eih>
   b410a:	4669      	mov	r1, sp
   b410c:	4628      	mov	r0, r5
   b410e:	f000 fb18 	bl	b4742 <_ZN6String6concatERKS_>
   b4112:	4668      	mov	r0, sp
   b4114:	f000 fa7a 	bl	b460c <_ZN6StringD1Ev>
  for(int i = 0; i < Wire.available(); i++){
   b4118:	3401      	adds	r4, #1
   b411a:	e7e5      	b.n	b40e8 <loop+0x20>
  }
  Serial.println(test);
   b411c:	f000 fd38 	bl	b4b90 <_Z16_fetch_usbserialv>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b4120:	4b07      	ldr	r3, [pc, #28]	; (b4140 <loop+0x78>)
   b4122:	6819      	ldr	r1, [r3, #0]
   b4124:	f000 fb6d 	bl	b4802 <_ZN5Print7printlnEPKc>
  Serial.println();
   b4128:	f000 fd32 	bl	b4b90 <_Z16_fetch_usbserialv>
   b412c:	f000 fb5d 	bl	b47ea <_ZN5Print7printlnEv>
  delay(500);
   b4130:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b4134:	b005      	add	sp, #20
   b4136:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  delay(500);
   b413a:	f000 bba3 	b.w	b4884 <delay>
   b413e:	bf00      	nop
   b4140:	2003e640 	.word	0x2003e640

000b4144 <_GLOBAL__sub_I_SystemMode>:
   b4144:	b510      	push	{r4, lr}
              error_(SYSTEM_ERROR_NONE) {
   b4146:	4c0d      	ldr	r4, [pc, #52]	; (b417c <_GLOBAL__sub_I_SystemMode+0x38>)
   b4148:	2300      	movs	r3, #0
   b414a:	e9c4 3300 	strd	r3, r3, [r4]
    SleepResult() {}
   b414e:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
   b4152:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4154:	2003      	movs	r0, #3
   b4156:	f000 f8fd 	bl	b4354 <set_system_mode>
SYSTEM_MODE(MANUAL)
   b415a:	4620      	mov	r0, r4
String test;
   b415c:	4c08      	ldr	r4, [pc, #32]	; (b4180 <_GLOBAL__sub_I_SystemMode+0x3c>)
SYSTEM_MODE(MANUAL)
   b415e:	4a09      	ldr	r2, [pc, #36]	; (b4184 <_GLOBAL__sub_I_SystemMode+0x40>)
   b4160:	4909      	ldr	r1, [pc, #36]	; (b4188 <_GLOBAL__sub_I_SystemMode+0x44>)
   b4162:	f000 ff41 	bl	b4fe8 <__aeabi_atexit>
String test;
   b4166:	4909      	ldr	r1, [pc, #36]	; (b418c <_GLOBAL__sub_I_SystemMode+0x48>)
   b4168:	4620      	mov	r0, r4
   b416a:	f000 fa9a 	bl	b46a2 <_ZN6StringC1EPK19__FlashStringHelper>
   b416e:	4620      	mov	r0, r4
   b4170:	4a04      	ldr	r2, [pc, #16]	; (b4184 <_GLOBAL__sub_I_SystemMode+0x40>)
   b4172:	4907      	ldr	r1, [pc, #28]	; (b4190 <_GLOBAL__sub_I_SystemMode+0x4c>)
   b4174:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
String test;
   b4178:	f000 bf36 	b.w	b4fe8 <__aeabi_atexit>
   b417c:	2003e634 	.word	0x2003e634
   b4180:	2003e640 	.word	0x2003e640
   b4184:	2003e630 	.word	0x2003e630
   b4188:	000b40ab 	.word	0x000b40ab
   b418c:	000b52d8 	.word	0x000b52d8
   b4190:	000b460d 	.word	0x000b460d

000b4194 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4194:	b508      	push	{r3, lr}
   b4196:	4b02      	ldr	r3, [pc, #8]	; (b41a0 <netdb_freeaddrinfo+0xc>)
   b4198:	681b      	ldr	r3, [r3, #0]
   b419a:	689b      	ldr	r3, [r3, #8]
   b419c:	9301      	str	r3, [sp, #4]
   b419e:	bd08      	pop	{r3, pc}
   b41a0:	00030268 	.word	0x00030268

000b41a4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b41a4:	b508      	push	{r3, lr}
   b41a6:	4b02      	ldr	r3, [pc, #8]	; (b41b0 <netdb_getaddrinfo+0xc>)
   b41a8:	681b      	ldr	r3, [r3, #0]
   b41aa:	68db      	ldr	r3, [r3, #12]
   b41ac:	9301      	str	r3, [sp, #4]
   b41ae:	bd08      	pop	{r3, pc}
   b41b0:	00030268 	.word	0x00030268

000b41b4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b41b4:	b508      	push	{r3, lr}
   b41b6:	4b02      	ldr	r3, [pc, #8]	; (b41c0 <HAL_RNG_GetRandomNumber+0xc>)
   b41b8:	681b      	ldr	r3, [r3, #0]
   b41ba:	685b      	ldr	r3, [r3, #4]
   b41bc:	9301      	str	r3, [sp, #4]
   b41be:	bd08      	pop	{r3, pc}
   b41c0:	00030218 	.word	0x00030218

000b41c4 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b41c4:	b508      	push	{r3, lr}
   b41c6:	4b02      	ldr	r3, [pc, #8]	; (b41d0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b41c8:	681b      	ldr	r3, [r3, #0]
   b41ca:	695b      	ldr	r3, [r3, #20]
   b41cc:	9301      	str	r3, [sp, #4]
   b41ce:	bd08      	pop	{r3, pc}
   b41d0:	00030218 	.word	0x00030218

000b41d4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b41d4:	b508      	push	{r3, lr}
   b41d6:	4b02      	ldr	r3, [pc, #8]	; (b41e0 <os_mutex_recursive_create+0xc>)
   b41d8:	681b      	ldr	r3, [r3, #0]
   b41da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b41dc:	9301      	str	r3, [sp, #4]
   b41de:	bd08      	pop	{r3, pc}
   b41e0:	00030248 	.word	0x00030248

000b41e4 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   b41e4:	b508      	push	{r3, lr}
   b41e6:	4b02      	ldr	r3, [pc, #8]	; (b41f0 <os_mutex_recursive_destroy+0xc>)
   b41e8:	681b      	ldr	r3, [r3, #0]
   b41ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b41ec:	9301      	str	r3, [sp, #4]
   b41ee:	bd08      	pop	{r3, pc}
   b41f0:	00030248 	.word	0x00030248

000b41f4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b41f4:	b508      	push	{r3, lr}
   b41f6:	4b02      	ldr	r3, [pc, #8]	; (b4200 <inet_inet_ntop+0xc>)
   b41f8:	681b      	ldr	r3, [r3, #0]
   b41fa:	695b      	ldr	r3, [r3, #20]
   b41fc:	9301      	str	r3, [sp, #4]
   b41fe:	bd08      	pop	{r3, pc}
   b4200:	00030264 	.word	0x00030264

000b4204 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   b4204:	b508      	push	{r3, lr}
   b4206:	4b02      	ldr	r3, [pc, #8]	; (b4210 <hal_usart_init+0xc>)
   b4208:	681b      	ldr	r3, [r3, #0]
   b420a:	681b      	ldr	r3, [r3, #0]
   b420c:	9301      	str	r3, [sp, #4]
   b420e:	bd08      	pop	{r3, pc}
   b4210:	0003023c 	.word	0x0003023c

000b4214 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4214:	b508      	push	{r3, lr}
   b4216:	4b02      	ldr	r3, [pc, #8]	; (b4220 <hal_usart_write+0xc>)
   b4218:	681b      	ldr	r3, [r3, #0]
   b421a:	68db      	ldr	r3, [r3, #12]
   b421c:	9301      	str	r3, [sp, #4]
   b421e:	bd08      	pop	{r3, pc}
   b4220:	0003023c 	.word	0x0003023c

000b4224 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4224:	b508      	push	{r3, lr}
   b4226:	4b02      	ldr	r3, [pc, #8]	; (b4230 <hal_usart_available+0xc>)
   b4228:	681b      	ldr	r3, [r3, #0]
   b422a:	691b      	ldr	r3, [r3, #16]
   b422c:	9301      	str	r3, [sp, #4]
   b422e:	bd08      	pop	{r3, pc}
   b4230:	0003023c 	.word	0x0003023c

000b4234 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4234:	b508      	push	{r3, lr}
   b4236:	4b02      	ldr	r3, [pc, #8]	; (b4240 <hal_usart_read+0xc>)
   b4238:	681b      	ldr	r3, [r3, #0]
   b423a:	695b      	ldr	r3, [r3, #20]
   b423c:	9301      	str	r3, [sp, #4]
   b423e:	bd08      	pop	{r3, pc}
   b4240:	0003023c 	.word	0x0003023c

000b4244 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4244:	b508      	push	{r3, lr}
   b4246:	4b02      	ldr	r3, [pc, #8]	; (b4250 <hal_usart_peek+0xc>)
   b4248:	681b      	ldr	r3, [r3, #0]
   b424a:	699b      	ldr	r3, [r3, #24]
   b424c:	9301      	str	r3, [sp, #4]
   b424e:	bd08      	pop	{r3, pc}
   b4250:	0003023c 	.word	0x0003023c

000b4254 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4254:	b508      	push	{r3, lr}
   b4256:	4b02      	ldr	r3, [pc, #8]	; (b4260 <hal_usart_flush+0xc>)
   b4258:	681b      	ldr	r3, [r3, #0]
   b425a:	69db      	ldr	r3, [r3, #28]
   b425c:	9301      	str	r3, [sp, #4]
   b425e:	bd08      	pop	{r3, pc}
   b4260:	0003023c 	.word	0x0003023c

000b4264 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4264:	b508      	push	{r3, lr}
   b4266:	4b02      	ldr	r3, [pc, #8]	; (b4270 <hal_usart_available_data_for_write+0xc>)
   b4268:	681b      	ldr	r3, [r3, #0]
   b426a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b426c:	9301      	str	r3, [sp, #4]
   b426e:	bd08      	pop	{r3, pc}
   b4270:	0003023c 	.word	0x0003023c

000b4274 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b4274:	b508      	push	{r3, lr}
   b4276:	4b02      	ldr	r3, [pc, #8]	; (b4280 <hal_i2c_begin+0xc>)
   b4278:	681b      	ldr	r3, [r3, #0]
   b427a:	68db      	ldr	r3, [r3, #12]
   b427c:	9301      	str	r3, [sp, #4]
   b427e:	bd08      	pop	{r3, pc}
   b4280:	00030228 	.word	0x00030228

000b4284 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b4284:	b508      	push	{r3, lr}
   b4286:	4b02      	ldr	r3, [pc, #8]	; (b4290 <hal_i2c_write+0xc>)
   b4288:	681b      	ldr	r3, [r3, #0]
   b428a:	6a1b      	ldr	r3, [r3, #32]
   b428c:	9301      	str	r3, [sp, #4]
   b428e:	bd08      	pop	{r3, pc}
   b4290:	00030228 	.word	0x00030228

000b4294 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b4294:	b508      	push	{r3, lr}
   b4296:	4b02      	ldr	r3, [pc, #8]	; (b42a0 <hal_i2c_available+0xc>)
   b4298:	681b      	ldr	r3, [r3, #0]
   b429a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b429c:	9301      	str	r3, [sp, #4]
   b429e:	bd08      	pop	{r3, pc}
   b42a0:	00030228 	.word	0x00030228

000b42a4 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b42a4:	b508      	push	{r3, lr}
   b42a6:	4b02      	ldr	r3, [pc, #8]	; (b42b0 <hal_i2c_read+0xc>)
   b42a8:	681b      	ldr	r3, [r3, #0]
   b42aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b42ac:	9301      	str	r3, [sp, #4]
   b42ae:	bd08      	pop	{r3, pc}
   b42b0:	00030228 	.word	0x00030228

000b42b4 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b42b4:	b508      	push	{r3, lr}
   b42b6:	4b02      	ldr	r3, [pc, #8]	; (b42c0 <hal_i2c_peek+0xc>)
   b42b8:	681b      	ldr	r3, [r3, #0]
   b42ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b42bc:	9301      	str	r3, [sp, #4]
   b42be:	bd08      	pop	{r3, pc}
   b42c0:	00030228 	.word	0x00030228

000b42c4 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b42c4:	b508      	push	{r3, lr}
   b42c6:	4b02      	ldr	r3, [pc, #8]	; (b42d0 <hal_i2c_flush+0xc>)
   b42c8:	681b      	ldr	r3, [r3, #0]
   b42ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b42cc:	9301      	str	r3, [sp, #4]
   b42ce:	bd08      	pop	{r3, pc}
   b42d0:	00030228 	.word	0x00030228

000b42d4 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b42d4:	b508      	push	{r3, lr}
   b42d6:	4b02      	ldr	r3, [pc, #8]	; (b42e0 <hal_i2c_init+0xc>)
   b42d8:	681b      	ldr	r3, [r3, #0]
   b42da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b42dc:	9301      	str	r3, [sp, #4]
   b42de:	bd08      	pop	{r3, pc}
   b42e0:	00030228 	.word	0x00030228

000b42e4 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b42e4:	b508      	push	{r3, lr}
   b42e6:	4b02      	ldr	r3, [pc, #8]	; (b42f0 <hal_i2c_request_ex+0xc>)
   b42e8:	681b      	ldr	r3, [r3, #0]
   b42ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b42ec:	9301      	str	r3, [sp, #4]
   b42ee:	bd08      	pop	{r3, pc}
   b42f0:	00030228 	.word	0x00030228

000b42f4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b42f4:	b508      	push	{r3, lr}
   b42f6:	4b02      	ldr	r3, [pc, #8]	; (b4300 <HAL_USB_USART_Init+0xc>)
   b42f8:	681b      	ldr	r3, [r3, #0]
   b42fa:	681b      	ldr	r3, [r3, #0]
   b42fc:	9301      	str	r3, [sp, #4]
   b42fe:	bd08      	pop	{r3, pc}
   b4300:	0003024c 	.word	0x0003024c

000b4304 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4304:	b508      	push	{r3, lr}
   b4306:	4b02      	ldr	r3, [pc, #8]	; (b4310 <HAL_USB_USART_Available_Data+0xc>)
   b4308:	681b      	ldr	r3, [r3, #0]
   b430a:	691b      	ldr	r3, [r3, #16]
   b430c:	9301      	str	r3, [sp, #4]
   b430e:	bd08      	pop	{r3, pc}
   b4310:	0003024c 	.word	0x0003024c

000b4314 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4314:	b508      	push	{r3, lr}
   b4316:	4b02      	ldr	r3, [pc, #8]	; (b4320 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4318:	681b      	ldr	r3, [r3, #0]
   b431a:	695b      	ldr	r3, [r3, #20]
   b431c:	9301      	str	r3, [sp, #4]
   b431e:	bd08      	pop	{r3, pc}
   b4320:	0003024c 	.word	0x0003024c

000b4324 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4324:	b508      	push	{r3, lr}
   b4326:	4b02      	ldr	r3, [pc, #8]	; (b4330 <HAL_USB_USART_Receive_Data+0xc>)
   b4328:	681b      	ldr	r3, [r3, #0]
   b432a:	699b      	ldr	r3, [r3, #24]
   b432c:	9301      	str	r3, [sp, #4]
   b432e:	bd08      	pop	{r3, pc}
   b4330:	0003024c 	.word	0x0003024c

000b4334 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4334:	b508      	push	{r3, lr}
   b4336:	4b02      	ldr	r3, [pc, #8]	; (b4340 <HAL_USB_USART_Send_Data+0xc>)
   b4338:	681b      	ldr	r3, [r3, #0]
   b433a:	69db      	ldr	r3, [r3, #28]
   b433c:	9301      	str	r3, [sp, #4]
   b433e:	bd08      	pop	{r3, pc}
   b4340:	0003024c 	.word	0x0003024c

000b4344 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4344:	b508      	push	{r3, lr}
   b4346:	4b02      	ldr	r3, [pc, #8]	; (b4350 <HAL_USB_USART_Flush_Data+0xc>)
   b4348:	681b      	ldr	r3, [r3, #0]
   b434a:	6a1b      	ldr	r3, [r3, #32]
   b434c:	9301      	str	r3, [sp, #4]
   b434e:	bd08      	pop	{r3, pc}
   b4350:	0003024c 	.word	0x0003024c

000b4354 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4354:	b508      	push	{r3, lr}
   b4356:	4b02      	ldr	r3, [pc, #8]	; (b4360 <set_system_mode+0xc>)
   b4358:	681b      	ldr	r3, [r3, #0]
   b435a:	685b      	ldr	r3, [r3, #4]
   b435c:	9301      	str	r3, [sp, #4]
   b435e:	bd08      	pop	{r3, pc}
   b4360:	00030220 	.word	0x00030220

000b4364 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b4364:	b508      	push	{r3, lr}
   b4366:	4b02      	ldr	r3, [pc, #8]	; (b4370 <system_delay_ms+0xc>)
   b4368:	681b      	ldr	r3, [r3, #0]
   b436a:	695b      	ldr	r3, [r3, #20]
   b436c:	9301      	str	r3, [sp, #4]
   b436e:	bd08      	pop	{r3, pc}
   b4370:	00030220 	.word	0x00030220

000b4374 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4374:	b508      	push	{r3, lr}
   b4376:	4b03      	ldr	r3, [pc, #12]	; (b4384 <system_ctrl_set_app_request_handler+0x10>)
   b4378:	681b      	ldr	r3, [r3, #0]
   b437a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b437e:	9301      	str	r3, [sp, #4]
   b4380:	bd08      	pop	{r3, pc}
   b4382:	0000      	.short	0x0000
   b4384:	00030220 	.word	0x00030220

000b4388 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b4388:	b508      	push	{r3, lr}
   b438a:	4b03      	ldr	r3, [pc, #12]	; (b4398 <system_ctrl_set_result+0x10>)
   b438c:	681b      	ldr	r3, [r3, #0]
   b438e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b4392:	9301      	str	r3, [sp, #4]
   b4394:	bd08      	pop	{r3, pc}
   b4396:	0000      	.short	0x0000
   b4398:	00030220 	.word	0x00030220

000b439c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b439c:	b508      	push	{r3, lr}
   b439e:	4b02      	ldr	r3, [pc, #8]	; (b43a8 <network_connect+0xc>)
   b43a0:	681b      	ldr	r3, [r3, #0]
   b43a2:	685b      	ldr	r3, [r3, #4]
   b43a4:	9301      	str	r3, [sp, #4]
   b43a6:	bd08      	pop	{r3, pc}
   b43a8:	00030240 	.word	0x00030240

000b43ac <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b43ac:	b508      	push	{r3, lr}
   b43ae:	4b02      	ldr	r3, [pc, #8]	; (b43b8 <network_connecting+0xc>)
   b43b0:	681b      	ldr	r3, [r3, #0]
   b43b2:	689b      	ldr	r3, [r3, #8]
   b43b4:	9301      	str	r3, [sp, #4]
   b43b6:	bd08      	pop	{r3, pc}
   b43b8:	00030240 	.word	0x00030240

000b43bc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b43bc:	b508      	push	{r3, lr}
   b43be:	4b02      	ldr	r3, [pc, #8]	; (b43c8 <network_disconnect+0xc>)
   b43c0:	681b      	ldr	r3, [r3, #0]
   b43c2:	68db      	ldr	r3, [r3, #12]
   b43c4:	9301      	str	r3, [sp, #4]
   b43c6:	bd08      	pop	{r3, pc}
   b43c8:	00030240 	.word	0x00030240

000b43cc <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b43cc:	b508      	push	{r3, lr}
   b43ce:	4b02      	ldr	r3, [pc, #8]	; (b43d8 <network_ready+0xc>)
   b43d0:	681b      	ldr	r3, [r3, #0]
   b43d2:	691b      	ldr	r3, [r3, #16]
   b43d4:	9301      	str	r3, [sp, #4]
   b43d6:	bd08      	pop	{r3, pc}
   b43d8:	00030240 	.word	0x00030240

000b43dc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b43dc:	b508      	push	{r3, lr}
   b43de:	4b02      	ldr	r3, [pc, #8]	; (b43e8 <network_on+0xc>)
   b43e0:	681b      	ldr	r3, [r3, #0]
   b43e2:	695b      	ldr	r3, [r3, #20]
   b43e4:	9301      	str	r3, [sp, #4]
   b43e6:	bd08      	pop	{r3, pc}
   b43e8:	00030240 	.word	0x00030240

000b43ec <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b43ec:	b508      	push	{r3, lr}
   b43ee:	4b02      	ldr	r3, [pc, #8]	; (b43f8 <network_off+0xc>)
   b43f0:	681b      	ldr	r3, [r3, #0]
   b43f2:	699b      	ldr	r3, [r3, #24]
   b43f4:	9301      	str	r3, [sp, #4]
   b43f6:	bd08      	pop	{r3, pc}
   b43f8:	00030240 	.word	0x00030240

000b43fc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b43fc:	b508      	push	{r3, lr}
   b43fe:	4b02      	ldr	r3, [pc, #8]	; (b4408 <network_listen+0xc>)
   b4400:	681b      	ldr	r3, [r3, #0]
   b4402:	69db      	ldr	r3, [r3, #28]
   b4404:	9301      	str	r3, [sp, #4]
   b4406:	bd08      	pop	{r3, pc}
   b4408:	00030240 	.word	0x00030240

000b440c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b440c:	b508      	push	{r3, lr}
   b440e:	4b02      	ldr	r3, [pc, #8]	; (b4418 <network_listening+0xc>)
   b4410:	681b      	ldr	r3, [r3, #0]
   b4412:	6a1b      	ldr	r3, [r3, #32]
   b4414:	9301      	str	r3, [sp, #4]
   b4416:	bd08      	pop	{r3, pc}
   b4418:	00030240 	.word	0x00030240

000b441c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b441c:	b508      	push	{r3, lr}
   b441e:	4b02      	ldr	r3, [pc, #8]	; (b4428 <network_set_listen_timeout+0xc>)
   b4420:	681b      	ldr	r3, [r3, #0]
   b4422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4424:	9301      	str	r3, [sp, #4]
   b4426:	bd08      	pop	{r3, pc}
   b4428:	00030240 	.word	0x00030240

000b442c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b442c:	b508      	push	{r3, lr}
   b442e:	4b02      	ldr	r3, [pc, #8]	; (b4438 <network_get_listen_timeout+0xc>)
   b4430:	681b      	ldr	r3, [r3, #0]
   b4432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4434:	9301      	str	r3, [sp, #4]
   b4436:	bd08      	pop	{r3, pc}
   b4438:	00030240 	.word	0x00030240

000b443c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b443c:	b508      	push	{r3, lr}
   b443e:	4b02      	ldr	r3, [pc, #8]	; (b4448 <network_is_on+0xc>)
   b4440:	681b      	ldr	r3, [r3, #0]
   b4442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4444:	9301      	str	r3, [sp, #4]
   b4446:	bd08      	pop	{r3, pc}
   b4448:	00030240 	.word	0x00030240

000b444c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b444c:	b508      	push	{r3, lr}
   b444e:	4b02      	ldr	r3, [pc, #8]	; (b4458 <network_is_off+0xc>)
   b4450:	681b      	ldr	r3, [r3, #0]
   b4452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4454:	9301      	str	r3, [sp, #4]
   b4456:	bd08      	pop	{r3, pc}
   b4458:	00030240 	.word	0x00030240

000b445c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b445c:	b508      	push	{r3, lr}
   b445e:	4b02      	ldr	r3, [pc, #8]	; (b4468 <spark_set_random_seed_from_cloud_handler+0xc>)
   b4460:	681b      	ldr	r3, [r3, #0]
   b4462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4464:	9301      	str	r3, [sp, #4]
   b4466:	bd08      	pop	{r3, pc}
   b4468:	00030244 	.word	0x00030244

000b446c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b446c:	b508      	push	{r3, lr}
   b446e:	4b02      	ldr	r3, [pc, #8]	; (b4478 <malloc+0xc>)
   b4470:	681b      	ldr	r3, [r3, #0]
   b4472:	681b      	ldr	r3, [r3, #0]
   b4474:	9301      	str	r3, [sp, #4]
   b4476:	bd08      	pop	{r3, pc}
   b4478:	0003021c 	.word	0x0003021c

000b447c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b447c:	b508      	push	{r3, lr}
   b447e:	4b02      	ldr	r3, [pc, #8]	; (b4488 <free+0xc>)
   b4480:	681b      	ldr	r3, [r3, #0]
   b4482:	685b      	ldr	r3, [r3, #4]
   b4484:	9301      	str	r3, [sp, #4]
   b4486:	bd08      	pop	{r3, pc}
   b4488:	0003021c 	.word	0x0003021c

000b448c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b448c:	b508      	push	{r3, lr}
   b448e:	4b02      	ldr	r3, [pc, #8]	; (b4498 <realloc+0xc>)
   b4490:	681b      	ldr	r3, [r3, #0]
   b4492:	689b      	ldr	r3, [r3, #8]
   b4494:	9301      	str	r3, [sp, #4]
   b4496:	bd08      	pop	{r3, pc}
   b4498:	0003021c 	.word	0x0003021c

000b449c <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b449c:	b508      	push	{r3, lr}
   b449e:	4b02      	ldr	r3, [pc, #8]	; (b44a8 <__assert_func+0xc>)
   b44a0:	681b      	ldr	r3, [r3, #0]
   b44a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b44a4:	9301      	str	r3, [sp, #4]
   b44a6:	bd08      	pop	{r3, pc}
   b44a8:	0003021c 	.word	0x0003021c

000b44ac <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b44ac:	b508      	push	{r3, lr}
   b44ae:	4b02      	ldr	r3, [pc, #8]	; (b44b8 <newlib_impure_ptr_callback+0xc>)
   b44b0:	681b      	ldr	r3, [r3, #0]
   b44b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b44b4:	9301      	str	r3, [sp, #4]
   b44b6:	bd08      	pop	{r3, pc}
   b44b8:	0003021c 	.word	0x0003021c

000b44bc <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b44bc:	2200      	movs	r2, #0
   b44be:	6840      	ldr	r0, [r0, #4]
   b44c0:	4611      	mov	r1, r2
   b44c2:	f7ff bfa3 	b.w	b440c <network_listening>

000b44c6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b44c6:	2200      	movs	r2, #0
   b44c8:	6840      	ldr	r0, [r0, #4]
   b44ca:	4611      	mov	r1, r2
   b44cc:	f7ff bfae 	b.w	b442c <network_get_listen_timeout>

000b44d0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b44d0:	6840      	ldr	r0, [r0, #4]
   b44d2:	2200      	movs	r2, #0
   b44d4:	f7ff bfa2 	b.w	b441c <network_set_listen_timeout>

000b44d8 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b44d8:	6840      	ldr	r0, [r0, #4]
   b44da:	2200      	movs	r2, #0
   b44dc:	f081 0101 	eor.w	r1, r1, #1
   b44e0:	f7ff bf8c 	b.w	b43fc <network_listen>

000b44e4 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b44e4:	2300      	movs	r3, #0
   b44e6:	6840      	ldr	r0, [r0, #4]
   b44e8:	461a      	mov	r2, r3
   b44ea:	4619      	mov	r1, r3
   b44ec:	f7ff bf7e 	b.w	b43ec <network_off>

000b44f0 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b44f0:	2300      	movs	r3, #0
   b44f2:	6840      	ldr	r0, [r0, #4]
   b44f4:	461a      	mov	r2, r3
   b44f6:	4619      	mov	r1, r3
   b44f8:	f7ff bf70 	b.w	b43dc <network_on>

000b44fc <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b44fc:	2200      	movs	r2, #0
   b44fe:	6840      	ldr	r0, [r0, #4]
   b4500:	4611      	mov	r1, r2
   b4502:	f7ff bf63 	b.w	b43cc <network_ready>

000b4506 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4506:	2200      	movs	r2, #0
   b4508:	6840      	ldr	r0, [r0, #4]
   b450a:	4611      	mov	r1, r2
   b450c:	f7ff bf4e 	b.w	b43ac <network_connecting>

000b4510 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4510:	6840      	ldr	r0, [r0, #4]
   b4512:	2200      	movs	r2, #0
   b4514:	2102      	movs	r1, #2
   b4516:	f7ff bf51 	b.w	b43bc <network_disconnect>

000b451a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b451a:	2300      	movs	r3, #0
   b451c:	6840      	ldr	r0, [r0, #4]
   b451e:	461a      	mov	r2, r3
   b4520:	f7ff bf3c 	b.w	b439c <network_connect>

000b4524 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b4524:	4b02      	ldr	r3, [pc, #8]	; (b4530 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b4526:	2203      	movs	r2, #3
   b4528:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b452a:	4a02      	ldr	r2, [pc, #8]	; (b4534 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b452c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b452e:	4770      	bx	lr
   b4530:	2003e650 	.word	0x2003e650
   b4534:	000b50dc 	.word	0x000b50dc

000b4538 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   b4538:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b453a:	4b09      	ldr	r3, [pc, #36]	; (b4560 <_GLOBAL__sub_I_System+0x28>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b453c:	4c09      	ldr	r4, [pc, #36]	; (b4564 <_GLOBAL__sub_I_System+0x2c>)
   b453e:	2202      	movs	r2, #2
   b4540:	601a      	str	r2, [r3, #0]
   b4542:	2000      	movs	r0, #0
    SleepResult() {}
   b4544:	4b08      	ldr	r3, [pc, #32]	; (b4568 <_GLOBAL__sub_I_System+0x30>)
   b4546:	60a3      	str	r3, [r4, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4548:	e9c4 0000 	strd	r0, r0, [r4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b454c:	f7ff ff02 	bl	b4354 <set_system_mode>
SystemClass System;
   b4550:	4620      	mov	r0, r4
   b4552:	4a06      	ldr	r2, [pc, #24]	; (b456c <_GLOBAL__sub_I_System+0x34>)
   b4554:	4906      	ldr	r1, [pc, #24]	; (b4570 <_GLOBAL__sub_I_System+0x38>)
   b4556:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   b455a:	f000 bd45 	b.w	b4fe8 <__aeabi_atexit>
   b455e:	bf00      	nop
   b4560:	2003e664 	.word	0x2003e664
   b4564:	2003e658 	.word	0x2003e658
   b4568:	ffff0000 	.word	0xffff0000
   b456c:	2003e630 	.word	0x2003e630
   b4570:	000b40ab 	.word	0x000b40ab

000b4574 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b4574:	b510      	push	{r4, lr}
   b4576:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b4578:	f000 fd9a 	bl	b50b0 <strlen>
   b457c:	3801      	subs	r0, #1
   b457e:	1823      	adds	r3, r4, r0
   b4580:	4620      	mov	r0, r4
	while(i<j){
   b4582:	4283      	cmp	r3, r0
   b4584:	d906      	bls.n	b4594 <_Z11str_reversePc+0x20>
		c = *i;
   b4586:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b4588:	7819      	ldrb	r1, [r3, #0]
   b458a:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b458e:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b4592:	e7f6      	b.n	b4582 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b4594:	bd10      	pop	{r4, pc}

000b4596 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b4596:	b570      	push	{r4, r5, r6, lr}
   b4598:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b459a:	1e91      	subs	r1, r2, #2
   b459c:	2922      	cmp	r1, #34	; 0x22
   b459e:	d81d      	bhi.n	b45dc <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b45a0:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b45a2:	b930      	cbnz	r0, b45b2 <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b45a4:	4423      	add	r3, r4
            *ptr++ = '0';
   b45a6:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b45a8:	429d      	cmp	r5, r3
   b45aa:	d210      	bcs.n	b45ce <ultoa+0x38>
            *ptr++ = '0';
   b45ac:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b45b0:	e7fa      	b.n	b45a8 <ultoa+0x12>
            result.quot = a/radix;
   b45b2:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b45b6:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b45ba:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b45bc:	2809      	cmp	r0, #9
                *ptr += '0';
   b45be:	bf94      	ite	ls
   b45c0:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b45c2:	3157      	addhi	r1, #87	; 0x57
   b45c4:	b2c9      	uxtb	r1, r1
   b45c6:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b45ca:	4630      	mov	r0, r6
	while(a){
   b45cc:	e7e9      	b.n	b45a2 <ultoa+0xc>

	*ptr = '\0';
   b45ce:	2300      	movs	r3, #0
	str_reverse(buffer);
   b45d0:	4620      	mov	r0, r4
	*ptr = '\0';
   b45d2:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b45d4:	f7ff ffce 	bl	b4574 <_Z11str_reversePc>
	return buffer;
   b45d8:	4620      	mov	r0, r4
}
   b45da:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b45dc:	2000      	movs	r0, #0
   b45de:	e7fc      	b.n	b45da <ultoa+0x44>

000b45e0 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b45e0:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b45e2:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b45e4:	460c      	mov	r4, r1
   b45e6:	4615      	mov	r5, r2
	if(a<0){
   b45e8:	da0e      	bge.n	b4608 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b45ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b45ee:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b45f2:	bf14      	ite	ne
   b45f4:	4258      	negne	r0, r3
   b45f6:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b45f8:	2301      	movs	r3, #1
		*buffer = '-';
   b45fa:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b45fc:	462a      	mov	r2, r5
   b45fe:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b4600:	f7ff ffc9 	bl	b4596 <ultoa>
	}
	return buffer;
}
   b4604:	4620      	mov	r0, r4
   b4606:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b4608:	2301      	movs	r3, #1
   b460a:	e7f9      	b.n	b4600 <itoa+0x20>

000b460c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b460c:	b510      	push	{r4, lr}
   b460e:	4604      	mov	r4, r0
{
	free(buffer);
   b4610:	6800      	ldr	r0, [r0, #0]
   b4612:	f7ff ff33 	bl	b447c <free>
}
   b4616:	4620      	mov	r0, r4
   b4618:	bd10      	pop	{r4, pc}

000b461a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b461a:	b510      	push	{r4, lr}
   b461c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b461e:	6800      	ldr	r0, [r0, #0]
   b4620:	b108      	cbz	r0, b4626 <_ZN6String10invalidateEv+0xc>
   b4622:	f7ff ff2b 	bl	b447c <free>
	buffer = NULL;
   b4626:	2300      	movs	r3, #0
	capacity = len = 0;
   b4628:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b462c:	6023      	str	r3, [r4, #0]
}
   b462e:	bd10      	pop	{r4, pc}

000b4630 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b4630:	b538      	push	{r3, r4, r5, lr}
   b4632:	4604      	mov	r4, r0
   b4634:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b4636:	6800      	ldr	r0, [r0, #0]
   b4638:	3101      	adds	r1, #1
   b463a:	f7ff ff27 	bl	b448c <realloc>
	if (newbuffer) {
   b463e:	b110      	cbz	r0, b4646 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b4640:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b4644:	2001      	movs	r0, #1
	}
	return 0;
}
   b4646:	bd38      	pop	{r3, r4, r5, pc}

000b4648 <_ZN6String7reserveEj>:
{
   b4648:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b464a:	6803      	ldr	r3, [r0, #0]
{
   b464c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b464e:	b123      	cbz	r3, b465a <_ZN6String7reserveEj+0x12>
   b4650:	6843      	ldr	r3, [r0, #4]
   b4652:	428b      	cmp	r3, r1
   b4654:	d301      	bcc.n	b465a <_ZN6String7reserveEj+0x12>
   b4656:	2001      	movs	r0, #1
}
   b4658:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b465a:	4620      	mov	r0, r4
   b465c:	f7ff ffe8 	bl	b4630 <_ZN6String12changeBufferEj>
   b4660:	2800      	cmp	r0, #0
   b4662:	d0f9      	beq.n	b4658 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b4664:	68a3      	ldr	r3, [r4, #8]
   b4666:	2b00      	cmp	r3, #0
   b4668:	d1f5      	bne.n	b4656 <_ZN6String7reserveEj+0xe>
   b466a:	6822      	ldr	r2, [r4, #0]
   b466c:	7013      	strb	r3, [r2, #0]
   b466e:	e7f2      	b.n	b4656 <_ZN6String7reserveEj+0xe>

000b4670 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b4670:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4672:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b4674:	4611      	mov	r1, r2
   b4676:	9201      	str	r2, [sp, #4]
{
   b4678:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b467a:	f7ff ffe5 	bl	b4648 <_ZN6String7reserveEj>
   b467e:	9a01      	ldr	r2, [sp, #4]
   b4680:	b928      	cbnz	r0, b468e <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b4682:	4620      	mov	r0, r4
   b4684:	f7ff ffc9 	bl	b461a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b4688:	4620      	mov	r0, r4
   b468a:	b003      	add	sp, #12
   b468c:	bd30      	pop	{r4, r5, pc}
	len = length;
   b468e:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b4690:	4629      	mov	r1, r5
   b4692:	6820      	ldr	r0, [r4, #0]
   b4694:	f000 fcc0 	bl	b5018 <memcpy>
	buffer[len] = 0;
   b4698:	6822      	ldr	r2, [r4, #0]
   b469a:	68a3      	ldr	r3, [r4, #8]
   b469c:	2100      	movs	r1, #0
   b469e:	54d1      	strb	r1, [r2, r3]
	return *this;
   b46a0:	e7f2      	b.n	b4688 <_ZN6String4copyEPKcj+0x18>

000b46a2 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b46a2:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b46a4:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b46a6:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b46aa:	4604      	mov	r4, r0
	len = 0;
   b46ac:	6083      	str	r3, [r0, #8]
	flags = 0;
   b46ae:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b46b0:	b141      	cbz	r1, b46c4 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b46b2:	4608      	mov	r0, r1
   b46b4:	9101      	str	r1, [sp, #4]
   b46b6:	f000 fcfb 	bl	b50b0 <strlen>
   b46ba:	9901      	ldr	r1, [sp, #4]
   b46bc:	4602      	mov	r2, r0
   b46be:	4620      	mov	r0, r4
   b46c0:	f7ff ffd6 	bl	b4670 <_ZN6String4copyEPKcj>
}
   b46c4:	4620      	mov	r0, r4
   b46c6:	b002      	add	sp, #8
   b46c8:	bd10      	pop	{r4, pc}

000b46ca <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b46ca:	b513      	push	{r0, r1, r4, lr}
   b46cc:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b46ce:	b159      	cbz	r1, b46e8 <_ZN6StringaSEPKc+0x1e>
   b46d0:	4608      	mov	r0, r1
   b46d2:	9101      	str	r1, [sp, #4]
   b46d4:	f000 fcec 	bl	b50b0 <strlen>
   b46d8:	9901      	ldr	r1, [sp, #4]
   b46da:	4602      	mov	r2, r0
   b46dc:	4620      	mov	r0, r4
   b46de:	f7ff ffc7 	bl	b4670 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b46e2:	4620      	mov	r0, r4
   b46e4:	b002      	add	sp, #8
   b46e6:	bd10      	pop	{r4, pc}
	else invalidate();
   b46e8:	f7ff ff97 	bl	b461a <_ZN6String10invalidateEv>
   b46ec:	e7f9      	b.n	b46e2 <_ZN6StringaSEPKc+0x18>

000b46ee <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b46ee:	b510      	push	{r4, lr}
   b46f0:	4604      	mov	r4, r0
   b46f2:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b46f4:	2300      	movs	r3, #0
	capacity = 0;
   b46f6:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b46fa:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b46fc:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b46fe:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b4700:	a901      	add	r1, sp, #4
   b4702:	f7ff ff6d 	bl	b45e0 <itoa>
	*this = buf;
   b4706:	a901      	add	r1, sp, #4
   b4708:	4620      	mov	r0, r4
   b470a:	f7ff ffde 	bl	b46ca <_ZN6StringaSEPKc>
}
   b470e:	4620      	mov	r0, r4
   b4710:	b00a      	add	sp, #40	; 0x28
   b4712:	bd10      	pop	{r4, pc}

000b4714 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b4714:	b570      	push	{r4, r5, r6, lr}
   b4716:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b4718:	460e      	mov	r6, r1
   b471a:	b909      	cbnz	r1, b4720 <_ZN6String6concatEPKcj+0xc>
   b471c:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b471e:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b4720:	b16a      	cbz	r2, b473e <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b4722:	6884      	ldr	r4, [r0, #8]
   b4724:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b4726:	4621      	mov	r1, r4
   b4728:	f7ff ff8e 	bl	b4648 <_ZN6String7reserveEj>
   b472c:	2800      	cmp	r0, #0
   b472e:	d0f5      	beq.n	b471c <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b4730:	6828      	ldr	r0, [r5, #0]
   b4732:	68ab      	ldr	r3, [r5, #8]
   b4734:	4631      	mov	r1, r6
   b4736:	4418      	add	r0, r3
   b4738:	f000 fcb2 	bl	b50a0 <strcpy>
	len = newlen;
   b473c:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b473e:	2001      	movs	r0, #1
   b4740:	e7ed      	b.n	b471e <_ZN6String6concatEPKcj+0xa>

000b4742 <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
   b4742:	688a      	ldr	r2, [r1, #8]
   b4744:	6809      	ldr	r1, [r1, #0]
   b4746:	f7ff bfe5 	b.w	b4714 <_ZN6String6concatEPKcj>

000b474a <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   b474a:	b510      	push	{r4, lr}
   b474c:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   b474e:	6800      	ldr	r0, [r0, #0]
   b4750:	b108      	cbz	r0, b4756 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   b4752:	f7ff fd47 	bl	b41e4 <os_mutex_recursive_destroy>
    }
   b4756:	4620      	mov	r0, r4
   b4758:	bd10      	pop	{r4, pc}

000b475a <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   b475a:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   b475c:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b475e:	4604      	mov	r4, r0
      if (_M_manager)
   b4760:	b113      	cbz	r3, b4768 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b4762:	2203      	movs	r2, #3
   b4764:	4601      	mov	r1, r0
   b4766:	4798      	blx	r3
    }
   b4768:	4620      	mov	r0, r4
   b476a:	bd10      	pop	{r4, pc}

000b476c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   b476c:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   b476e:	4c06      	ldr	r4, [pc, #24]	; (b4788 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   b4770:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   b4772:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   b4774:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   b4776:	f7ff fd2d 	bl	b41d4 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   b477a:	4620      	mov	r0, r4
   b477c:	4a03      	ldr	r2, [pc, #12]	; (b478c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   b477e:	4904      	ldr	r1, [pc, #16]	; (b4790 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   b4780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   b4784:	f000 bc30 	b.w	b4fe8 <__aeabi_atexit>
   b4788:	2003e668 	.word	0x2003e668
   b478c:	2003e630 	.word	0x2003e630
   b4790:	000b474b 	.word	0x000b474b

000b4794 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b4794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4796:	4606      	mov	r6, r0
   b4798:	460d      	mov	r5, r1
  size_t n = 0;
   b479a:	188f      	adds	r7, r1, r2
   b479c:	2400      	movs	r4, #0
  while (size--) {
   b479e:	42bd      	cmp	r5, r7
   b47a0:	d00c      	beq.n	b47bc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b47a2:	6833      	ldr	r3, [r6, #0]
   b47a4:	f815 1b01 	ldrb.w	r1, [r5], #1
   b47a8:	689b      	ldr	r3, [r3, #8]
   b47aa:	4630      	mov	r0, r6
   b47ac:	4798      	blx	r3
     if (chunk>=0)
   b47ae:	1e03      	subs	r3, r0, #0
   b47b0:	db01      	blt.n	b47b6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b47b2:	441c      	add	r4, r3
  while (size--) {
   b47b4:	e7f3      	b.n	b479e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b47b6:	2c00      	cmp	r4, #0
   b47b8:	bf08      	it	eq
   b47ba:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b47bc:	4620      	mov	r0, r4
   b47be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b47c0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b47c0:	b513      	push	{r0, r1, r4, lr}
   b47c2:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b47c4:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b47c6:	b159      	cbz	r1, b47e0 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b47c8:	9101      	str	r1, [sp, #4]
   b47ca:	f000 fc71 	bl	b50b0 <strlen>
   b47ce:	6823      	ldr	r3, [r4, #0]
   b47d0:	9901      	ldr	r1, [sp, #4]
   b47d2:	68db      	ldr	r3, [r3, #12]
   b47d4:	4602      	mov	r2, r0
   b47d6:	4620      	mov	r0, r4
    }
   b47d8:	b002      	add	sp, #8
   b47da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b47de:	4718      	bx	r3
    }
   b47e0:	b002      	add	sp, #8
   b47e2:	bd10      	pop	{r4, pc}

000b47e4 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b47e4:	6803      	ldr	r3, [r0, #0]
   b47e6:	689b      	ldr	r3, [r3, #8]
   b47e8:	4718      	bx	r3

000b47ea <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b47ea:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b47ec:	210d      	movs	r1, #13
{
   b47ee:	4605      	mov	r5, r0
  size_t n = print('\r');
   b47f0:	f7ff fff8 	bl	b47e4 <_ZN5Print5printEc>
  n += print('\n');
   b47f4:	210a      	movs	r1, #10
  size_t n = print('\r');
   b47f6:	4604      	mov	r4, r0
  n += print('\n');
   b47f8:	4628      	mov	r0, r5
   b47fa:	f7ff fff3 	bl	b47e4 <_ZN5Print5printEc>
  return n;
}
   b47fe:	4420      	add	r0, r4
   b4800:	bd38      	pop	{r3, r4, r5, pc}

000b4802 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b4802:	b538      	push	{r3, r4, r5, lr}
   b4804:	4605      	mov	r5, r0
  return write(str);
   b4806:	f7ff ffdb 	bl	b47c0 <_ZN5Print5writeEPKc>
   b480a:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b480c:	4628      	mov	r0, r5
   b480e:	f7ff ffec 	bl	b47ea <_ZN5Print7printlnEv>
  return n;
}
   b4812:	4420      	add	r0, r4
   b4814:	bd38      	pop	{r3, r4, r5, pc}

000b4816 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b4816:	b530      	push	{r4, r5, lr}
   b4818:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b481a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b481c:	2a01      	cmp	r2, #1
  *str = '\0';
   b481e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b4822:	bf98      	it	ls
   b4824:	220a      	movls	r2, #10
   b4826:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b4828:	460d      	mov	r5, r1
   b482a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b482e:	fb01 5312 	mls	r3, r1, r2, r5
   b4832:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4836:	2b09      	cmp	r3, #9
   b4838:	bf94      	ite	ls
   b483a:	3330      	addls	r3, #48	; 0x30
   b483c:	3337      	addhi	r3, #55	; 0x37
   b483e:	b2db      	uxtb	r3, r3
  } while(n);
   b4840:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4842:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b4846:	d9ef      	bls.n	b4828 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b4848:	4621      	mov	r1, r4
   b484a:	f7ff ffb9 	bl	b47c0 <_ZN5Print5writeEPKc>
}
   b484e:	b00b      	add	sp, #44	; 0x2c
   b4850:	bd30      	pop	{r4, r5, pc}

000b4852 <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   b4852:	2300      	movs	r3, #0
   b4854:	6840      	ldr	r0, [r0, #4]
   b4856:	461a      	mov	r2, r3
   b4858:	4619      	mov	r1, r3
   b485a:	f7ff bdbf 	b.w	b43dc <network_on>
	...

000b4860 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b4860:	4b01      	ldr	r3, [pc, #4]	; (b4868 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b4862:	4a02      	ldr	r2, [pc, #8]	; (b486c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b4864:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b4866:	4770      	bx	lr
   b4868:	2003e66c 	.word	0x2003e66c
   b486c:	000b5110 	.word	0x000b5110

000b4870 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b4870:	4b02      	ldr	r3, [pc, #8]	; (b487c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b4872:	681a      	ldr	r2, [r3, #0]
   b4874:	4b02      	ldr	r3, [pc, #8]	; (b4880 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b4876:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b4878:	4770      	bx	lr
   b487a:	bf00      	nop
   b487c:	2003e5c8 	.word	0x2003e5c8
   b4880:	2003e670 	.word	0x2003e670

000b4884 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b4884:	2100      	movs	r1, #0
   b4886:	f7ff bd6d 	b.w	b4364 <system_delay_ms>

000b488a <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   b488a:	b510      	push	{r4, lr}
   b488c:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b488e:	f7ff ff64 	bl	b475a <_ZNSt14_Function_baseD1Ev>
   b4892:	4620      	mov	r0, r4
   b4894:	bd10      	pop	{r4, pc}
	...

000b4898 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b4898:	4803      	ldr	r0, [pc, #12]	; (b48a8 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   b489a:	4a04      	ldr	r2, [pc, #16]	; (b48ac <_GLOBAL__sub_I_RGB+0x14>)
   b489c:	4904      	ldr	r1, [pc, #16]	; (b48b0 <_GLOBAL__sub_I_RGB+0x18>)
   b489e:	2300      	movs	r3, #0
   b48a0:	6083      	str	r3, [r0, #8]
   b48a2:	f000 bba1 	b.w	b4fe8 <__aeabi_atexit>
   b48a6:	bf00      	nop
   b48a8:	2003e674 	.word	0x2003e674
   b48ac:	2003e630 	.word	0x2003e630
   b48b0:	000b488b 	.word	0x000b488b

000b48b4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b48b4:	4b01      	ldr	r3, [pc, #4]	; (b48bc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b48b6:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b48b8:	4770      	bx	lr
   b48ba:	bf00      	nop
   b48bc:	2003e5cc 	.word	0x2003e5cc

000b48c0 <serialEventRun>:
{
   b48c0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b48c2:	4b0b      	ldr	r3, [pc, #44]	; (b48f0 <serialEventRun+0x30>)
   b48c4:	b143      	cbz	r3, b48d8 <serialEventRun+0x18>
   b48c6:	f000 f963 	bl	b4b90 <_Z16_fetch_usbserialv>
   b48ca:	6803      	ldr	r3, [r0, #0]
   b48cc:	691b      	ldr	r3, [r3, #16]
   b48ce:	4798      	blx	r3
   b48d0:	2800      	cmp	r0, #0
   b48d2:	dd01      	ble.n	b48d8 <serialEventRun+0x18>
        serialEvent();
   b48d4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b48d8:	4b06      	ldr	r3, [pc, #24]	; (b48f4 <serialEventRun+0x34>)
   b48da:	b143      	cbz	r3, b48ee <serialEventRun+0x2e>
   b48dc:	f000 f9d6 	bl	b4c8c <_Z22__fetch_global_Serial1v>
   b48e0:	6803      	ldr	r3, [r0, #0]
   b48e2:	691b      	ldr	r3, [r3, #16]
   b48e4:	4798      	blx	r3
   b48e6:	2800      	cmp	r0, #0
   b48e8:	dd01      	ble.n	b48ee <serialEventRun+0x2e>
        serialEvent1();
   b48ea:	f3af 8000 	nop.w
}
   b48ee:	bd08      	pop	{r3, pc}
	...

000b48f8 <_post_loop>:
{
   b48f8:	b508      	push	{r3, lr}
	serialEventRun();
   b48fa:	f7ff ffe1 	bl	b48c0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b48fe:	f7ff fc61 	bl	b41c4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b4902:	4b01      	ldr	r3, [pc, #4]	; (b4908 <_post_loop+0x10>)
   b4904:	6018      	str	r0, [r3, #0]
}
   b4906:	bd08      	pop	{r3, pc}
   b4908:	2003e7d4 	.word	0x2003e7d4

000b490c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b490c:	4805      	ldr	r0, [pc, #20]	; (b4924 <_Z33system_initialize_user_backup_ramv+0x18>)
   b490e:	4a06      	ldr	r2, [pc, #24]	; (b4928 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b4910:	4906      	ldr	r1, [pc, #24]	; (b492c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b4912:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b4914:	1a12      	subs	r2, r2, r0
   b4916:	f000 fb7f 	bl	b5018 <memcpy>
    __backup_sram_signature = signature;
   b491a:	4b05      	ldr	r3, [pc, #20]	; (b4930 <_Z33system_initialize_user_backup_ramv+0x24>)
   b491c:	4a05      	ldr	r2, [pc, #20]	; (b4934 <_Z33system_initialize_user_backup_ramv+0x28>)
   b491e:	601a      	str	r2, [r3, #0]
}
   b4920:	bd08      	pop	{r3, pc}
   b4922:	bf00      	nop
   b4924:	2003f400 	.word	0x2003f400
   b4928:	2003f404 	.word	0x2003f404
   b492c:	000b5300 	.word	0x000b5300
   b4930:	2003f400 	.word	0x2003f400
   b4934:	9a271c1e 	.word	0x9a271c1e

000b4938 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b4938:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b493a:	2300      	movs	r3, #0
   b493c:	9300      	str	r3, [sp, #0]
   b493e:	461a      	mov	r2, r3
   b4940:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b4944:	f7ff fd20 	bl	b4388 <system_ctrl_set_result>
}
   b4948:	b003      	add	sp, #12
   b494a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b4950 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b4950:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b4952:	8843      	ldrh	r3, [r0, #2]
   b4954:	2b0a      	cmp	r3, #10
   b4956:	d008      	beq.n	b496a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b4958:	2b50      	cmp	r3, #80	; 0x50
   b495a:	d10b      	bne.n	b4974 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b495c:	4b09      	ldr	r3, [pc, #36]	; (b4984 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b495e:	681b      	ldr	r3, [r3, #0]
   b4960:	b14b      	cbz	r3, b4976 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b4962:	b003      	add	sp, #12
   b4964:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b4968:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b496a:	f7ff ffe5 	bl	b4938 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b496e:	b003      	add	sp, #12
   b4970:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b4974:	2300      	movs	r3, #0
   b4976:	9300      	str	r3, [sp, #0]
   b4978:	461a      	mov	r2, r3
   b497a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b497e:	f7ff fd03 	bl	b4388 <system_ctrl_set_result>
}
   b4982:	e7f4      	b.n	b496e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b4984:	2003e688 	.word	0x2003e688

000b4988 <module_user_init_hook>:
{
   b4988:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b498a:	4812      	ldr	r0, [pc, #72]	; (b49d4 <module_user_init_hook+0x4c>)
   b498c:	2100      	movs	r1, #0
   b498e:	f7ff fd8d 	bl	b44ac <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b4992:	4b11      	ldr	r3, [pc, #68]	; (b49d8 <module_user_init_hook+0x50>)
   b4994:	681a      	ldr	r2, [r3, #0]
   b4996:	4b11      	ldr	r3, [pc, #68]	; (b49dc <module_user_init_hook+0x54>)
   b4998:	429a      	cmp	r2, r3
   b499a:	4b11      	ldr	r3, [pc, #68]	; (b49e0 <module_user_init_hook+0x58>)
   b499c:	bf0c      	ite	eq
   b499e:	2201      	moveq	r2, #1
   b49a0:	2200      	movne	r2, #0
   b49a2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b49a4:	d001      	beq.n	b49aa <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b49a6:	f7ff ffb1 	bl	b490c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b49aa:	f7ff fc03 	bl	b41b4 <HAL_RNG_GetRandomNumber>
   b49ae:	4604      	mov	r4, r0
    srand(seed);
   b49b0:	f000 fb48 	bl	b5044 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b49b4:	4b0b      	ldr	r3, [pc, #44]	; (b49e4 <module_user_init_hook+0x5c>)
   b49b6:	b113      	cbz	r3, b49be <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b49b8:	4620      	mov	r0, r4
   b49ba:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b49be:	2100      	movs	r1, #0
   b49c0:	4808      	ldr	r0, [pc, #32]	; (b49e4 <module_user_init_hook+0x5c>)
   b49c2:	f7ff fd4b 	bl	b445c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b49c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b49ca:	4807      	ldr	r0, [pc, #28]	; (b49e8 <module_user_init_hook+0x60>)
   b49cc:	2100      	movs	r1, #0
   b49ce:	f7ff bcd1 	b.w	b4374 <system_ctrl_set_app_request_handler>
   b49d2:	bf00      	nop
   b49d4:	000b48b5 	.word	0x000b48b5
   b49d8:	2003f400 	.word	0x2003f400
   b49dc:	9a271c1e 	.word	0x9a271c1e
   b49e0:	2003e684 	.word	0x2003e684
   b49e4:	00000000 	.word	0x00000000
   b49e8:	000b4951 	.word	0x000b4951

000b49ec <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b49ec:	4770      	bx	lr

000b49ee <_ZN9IPAddressD0Ev>:
   b49ee:	b510      	push	{r4, lr}
   b49f0:	2118      	movs	r1, #24
   b49f2:	4604      	mov	r4, r0
   b49f4:	f000 fafd 	bl	b4ff2 <_ZdlPvj>
   b49f8:	4620      	mov	r0, r4
   b49fa:	bd10      	pop	{r4, pc}

000b49fc <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b49fc:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b49fe:	7d03      	ldrb	r3, [r0, #20]
   b4a00:	2b06      	cmp	r3, #6
{
   b4a02:	b08d      	sub	sp, #52	; 0x34
   b4a04:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4a06:	f100 0704 	add.w	r7, r0, #4
   b4a0a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b4a0e:	d012      	beq.n	b4a36 <_ZNK9IPAddress7printToER5Print+0x3a>
   b4a10:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4a14:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b4a18:	220a      	movs	r2, #10
   b4a1a:	4630      	mov	r0, r6
   b4a1c:	f7ff fefb 	bl	b4816 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b4a20:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b4a22:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b4a24:	d019      	beq.n	b4a5a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b4a26:	2c00      	cmp	r4, #0
   b4a28:	d0f4      	beq.n	b4a14 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b4a2a:	212e      	movs	r1, #46	; 0x2e
   b4a2c:	4630      	mov	r0, r6
   b4a2e:	f7ff fed9 	bl	b47e4 <_ZN5Print5printEc>
   b4a32:	4404      	add	r4, r0
   b4a34:	e7ee      	b.n	b4a14 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4a36:	232f      	movs	r3, #47	; 0x2f
   b4a38:	466a      	mov	r2, sp
   b4a3a:	4639      	mov	r1, r7
   b4a3c:	200a      	movs	r0, #10
		buf[0] = 0;
   b4a3e:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4a42:	f7ff fbd7 	bl	b41f4 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b4a46:	4668      	mov	r0, sp
   b4a48:	f000 fb32 	bl	b50b0 <strlen>
   b4a4c:	6833      	ldr	r3, [r6, #0]
   b4a4e:	4602      	mov	r2, r0
   b4a50:	68db      	ldr	r3, [r3, #12]
   b4a52:	4669      	mov	r1, sp
   b4a54:	4630      	mov	r0, r6
   b4a56:	4798      	blx	r3
   b4a58:	4604      	mov	r4, r0
    }
    return n;
}
   b4a5a:	4620      	mov	r0, r4
   b4a5c:	b00d      	add	sp, #52	; 0x34
   b4a5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b4a60 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b4a60:	b510      	push	{r4, lr}
   b4a62:	4b05      	ldr	r3, [pc, #20]	; (b4a78 <_ZN9IPAddressC1Ev+0x18>)
   b4a64:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b4a66:	2211      	movs	r2, #17
   b4a68:	f840 3b04 	str.w	r3, [r0], #4
   b4a6c:	2100      	movs	r1, #0
   b4a6e:	f000 fae1 	bl	b5034 <memset>
}
   b4a72:	4620      	mov	r0, r4
   b4a74:	bd10      	pop	{r4, pc}
   b4a76:	bf00      	nop
   b4a78:	000b5138 	.word	0x000b5138

000b4a7c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b4a7c:	4603      	mov	r3, r0
   b4a7e:	4a07      	ldr	r2, [pc, #28]	; (b4a9c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b4a80:	b510      	push	{r4, lr}
   b4a82:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b4a86:	f101 0210 	add.w	r2, r1, #16
   b4a8a:	f851 4b04 	ldr.w	r4, [r1], #4
   b4a8e:	f843 4b04 	str.w	r4, [r3], #4
   b4a92:	4291      	cmp	r1, r2
   b4a94:	d1f9      	bne.n	b4a8a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b4a96:	780a      	ldrb	r2, [r1, #0]
   b4a98:	701a      	strb	r2, [r3, #0]
}
   b4a9a:	bd10      	pop	{r4, pc}
   b4a9c:	000b5138 	.word	0x000b5138

000b4aa0 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b4aa0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b4aa2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b4aa6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b4aaa:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b4aae:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b4ab2:	2304      	movs	r3, #4
   b4ab4:	6041      	str	r1, [r0, #4]
   b4ab6:	7503      	strb	r3, [r0, #20]
}
   b4ab8:	bd10      	pop	{r4, pc}
	...

000b4abc <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b4abc:	b507      	push	{r0, r1, r2, lr}
   b4abe:	4b06      	ldr	r3, [pc, #24]	; (b4ad8 <_ZN9IPAddressC1EPKh+0x1c>)
   b4ac0:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b4ac2:	78cb      	ldrb	r3, [r1, #3]
   b4ac4:	9300      	str	r3, [sp, #0]
   b4ac6:	788b      	ldrb	r3, [r1, #2]
   b4ac8:	784a      	ldrb	r2, [r1, #1]
   b4aca:	7809      	ldrb	r1, [r1, #0]
   b4acc:	f7ff ffe8 	bl	b4aa0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b4ad0:	b003      	add	sp, #12
   b4ad2:	f85d fb04 	ldr.w	pc, [sp], #4
   b4ad6:	bf00      	nop
   b4ad8:	000b5138 	.word	0x000b5138

000b4adc <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b4adc:	7441      	strb	r1, [r0, #17]
}
   b4ade:	4770      	bx	lr

000b4ae0 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b4ae0:	4770      	bx	lr

000b4ae2 <_ZN9USBSerial4readEv>:
{
   b4ae2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b4ae4:	2100      	movs	r1, #0
   b4ae6:	7c00      	ldrb	r0, [r0, #16]
   b4ae8:	f7ff fc1c 	bl	b4324 <HAL_USB_USART_Receive_Data>
}
   b4aec:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4af0:	bd08      	pop	{r3, pc}

000b4af2 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   b4af2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b4af4:	2101      	movs	r1, #1
   b4af6:	7c00      	ldrb	r0, [r0, #16]
   b4af8:	f7ff fc14 	bl	b4324 <HAL_USB_USART_Receive_Data>
}
   b4afc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4b00:	bd08      	pop	{r3, pc}

000b4b02 <_ZN9USBSerial17availableForWriteEv>:
{
   b4b02:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b4b04:	7c00      	ldrb	r0, [r0, #16]
   b4b06:	f7ff fc05 	bl	b4314 <HAL_USB_USART_Available_Data_For_Write>
}
   b4b0a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4b0e:	bd08      	pop	{r3, pc}

000b4b10 <_ZN9USBSerial9availableEv>:
{
   b4b10:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b4b12:	7c00      	ldrb	r0, [r0, #16]
   b4b14:	f7ff fbf6 	bl	b4304 <HAL_USB_USART_Available_Data>
}
   b4b18:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4b1c:	bd08      	pop	{r3, pc}

000b4b1e <_ZN9USBSerial5writeEh>:
{
   b4b1e:	b513      	push	{r0, r1, r4, lr}
   b4b20:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b4b22:	7c00      	ldrb	r0, [r0, #16]
{
   b4b24:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b4b26:	f7ff fbf5 	bl	b4314 <HAL_USB_USART_Available_Data_For_Write>
   b4b2a:	2800      	cmp	r0, #0
   b4b2c:	9901      	ldr	r1, [sp, #4]
   b4b2e:	dc01      	bgt.n	b4b34 <_ZN9USBSerial5writeEh+0x16>
   b4b30:	7c60      	ldrb	r0, [r4, #17]
   b4b32:	b120      	cbz	r0, b4b3e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b4b34:	7c20      	ldrb	r0, [r4, #16]
   b4b36:	f7ff fbfd 	bl	b4334 <HAL_USB_USART_Send_Data>
   b4b3a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b4b3e:	b002      	add	sp, #8
   b4b40:	bd10      	pop	{r4, pc}

000b4b42 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b4b42:	7c00      	ldrb	r0, [r0, #16]
   b4b44:	f7ff bbfe 	b.w	b4344 <HAL_USB_USART_Flush_Data>

000b4b48 <_ZN9USBSerialD0Ev>:
   b4b48:	b510      	push	{r4, lr}
   b4b4a:	2114      	movs	r1, #20
   b4b4c:	4604      	mov	r4, r0
   b4b4e:	f000 fa50 	bl	b4ff2 <_ZdlPvj>
   b4b52:	4620      	mov	r0, r4
   b4b54:	bd10      	pop	{r4, pc}
	...

000b4b58 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b4b58:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b4b5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4b5e:	4604      	mov	r4, r0
   b4b60:	4608      	mov	r0, r1
   b4b62:	2100      	movs	r1, #0
   b4b64:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b4b68:	4b04      	ldr	r3, [pc, #16]	; (b4b7c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b4b6a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b4b6c:	2301      	movs	r3, #1
  _serial = serial;
   b4b6e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b4b70:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b4b72:	4611      	mov	r1, r2
   b4b74:	f7ff fbbe 	bl	b42f4 <HAL_USB_USART_Init>
}
   b4b78:	4620      	mov	r0, r4
   b4b7a:	bd10      	pop	{r4, pc}
   b4b7c:	000b514c 	.word	0x000b514c

000b4b80 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   b4b80:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   b4b82:	2214      	movs	r2, #20
{
   b4b84:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   b4b86:	2100      	movs	r1, #0
   b4b88:	f000 fa54 	bl	b5034 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   b4b8c:	4620      	mov	r0, r4
   b4b8e:	bd10      	pop	{r4, pc}

000b4b90 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   b4b90:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4b92:	4c10      	ldr	r4, [pc, #64]	; (b4bd4 <_Z16_fetch_usbserialv+0x44>)
{
   b4b94:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b4b96:	a803      	add	r0, sp, #12
   b4b98:	f7ff fff2 	bl	b4b80 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4b9c:	7821      	ldrb	r1, [r4, #0]
   b4b9e:	f3bf 8f5b 	dmb	ish
   b4ba2:	f011 0101 	ands.w	r1, r1, #1
   b4ba6:	d111      	bne.n	b4bcc <_Z16_fetch_usbserialv+0x3c>
   b4ba8:	4620      	mov	r0, r4
   b4baa:	9101      	str	r1, [sp, #4]
   b4bac:	f7ff fa75 	bl	b409a <__cxa_guard_acquire>
   b4bb0:	9901      	ldr	r1, [sp, #4]
   b4bb2:	b158      	cbz	r0, b4bcc <_Z16_fetch_usbserialv+0x3c>
   b4bb4:	aa03      	add	r2, sp, #12
   b4bb6:	4808      	ldr	r0, [pc, #32]	; (b4bd8 <_Z16_fetch_usbserialv+0x48>)
   b4bb8:	f7ff ffce 	bl	b4b58 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b4bbc:	4620      	mov	r0, r4
   b4bbe:	f7ff fa71 	bl	b40a4 <__cxa_guard_release>
   b4bc2:	4a06      	ldr	r2, [pc, #24]	; (b4bdc <_Z16_fetch_usbserialv+0x4c>)
   b4bc4:	4906      	ldr	r1, [pc, #24]	; (b4be0 <_Z16_fetch_usbserialv+0x50>)
   b4bc6:	4804      	ldr	r0, [pc, #16]	; (b4bd8 <_Z16_fetch_usbserialv+0x48>)
   b4bc8:	f000 fa0e 	bl	b4fe8 <__aeabi_atexit>
	return _usbserial;
}
   b4bcc:	4802      	ldr	r0, [pc, #8]	; (b4bd8 <_Z16_fetch_usbserialv+0x48>)
   b4bce:	b008      	add	sp, #32
   b4bd0:	bd10      	pop	{r4, pc}
   b4bd2:	bf00      	nop
   b4bd4:	2003e68c 	.word	0x2003e68c
   b4bd8:	2003e690 	.word	0x2003e690
   b4bdc:	2003e630 	.word	0x2003e630
   b4be0:	000b4ae1 	.word	0x000b4ae1

000b4be4 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   b4be4:	4770      	bx	lr

000b4be6 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b4be6:	7441      	strb	r1, [r0, #17]
}
   b4be8:	4770      	bx	lr

000b4bea <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b4bea:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b4bec:	7c00      	ldrb	r0, [r0, #16]
   b4bee:	f7ff fb39 	bl	b4264 <hal_usart_available_data_for_write>
}
   b4bf2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4bf6:	bd08      	pop	{r3, pc}

000b4bf8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b4bf8:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b4bfa:	7c00      	ldrb	r0, [r0, #16]
   b4bfc:	f7ff fb12 	bl	b4224 <hal_usart_available>
}
   b4c00:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4c04:	bd08      	pop	{r3, pc}

000b4c06 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b4c06:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b4c08:	7c00      	ldrb	r0, [r0, #16]
   b4c0a:	f7ff fb1b 	bl	b4244 <hal_usart_peek>
}
   b4c0e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4c12:	bd08      	pop	{r3, pc}

000b4c14 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b4c14:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b4c16:	7c00      	ldrb	r0, [r0, #16]
   b4c18:	f7ff fb0c 	bl	b4234 <hal_usart_read>
}
   b4c1c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4c20:	bd08      	pop	{r3, pc}

000b4c22 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b4c22:	7c00      	ldrb	r0, [r0, #16]
   b4c24:	f7ff bb16 	b.w	b4254 <hal_usart_flush>

000b4c28 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b4c28:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b4c2a:	7c45      	ldrb	r5, [r0, #17]
{
   b4c2c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b4c2e:	b12d      	cbz	r5, b4c3c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b4c30:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b4c32:	b003      	add	sp, #12
   b4c34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b4c38:	f7ff baec 	b.w	b4214 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b4c3c:	7c00      	ldrb	r0, [r0, #16]
   b4c3e:	9101      	str	r1, [sp, #4]
   b4c40:	f7ff fb10 	bl	b4264 <hal_usart_available_data_for_write>
   b4c44:	2800      	cmp	r0, #0
   b4c46:	9901      	ldr	r1, [sp, #4]
   b4c48:	dcf2      	bgt.n	b4c30 <_ZN11USARTSerial5writeEh+0x8>
}
   b4c4a:	4628      	mov	r0, r5
   b4c4c:	b003      	add	sp, #12
   b4c4e:	bd30      	pop	{r4, r5, pc}

000b4c50 <_ZN11USARTSerialD0Ev>:
   b4c50:	b510      	push	{r4, lr}
   b4c52:	2114      	movs	r1, #20
   b4c54:	4604      	mov	r4, r0
   b4c56:	f000 f9cc 	bl	b4ff2 <_ZdlPvj>
   b4c5a:	4620      	mov	r0, r4
   b4c5c:	bd10      	pop	{r4, pc}
	...

000b4c60 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   b4c60:	b510      	push	{r4, lr}
   b4c62:	f04f 0c00 	mov.w	ip, #0
   b4c66:	4604      	mov	r4, r0
   b4c68:	4608      	mov	r0, r1
   b4c6a:	4611      	mov	r1, r2
   b4c6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b4c70:	e9c4 c201 	strd	ip, r2, [r4, #4]
   b4c74:	4a04      	ldr	r2, [pc, #16]	; (b4c88 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   b4c76:	6022      	str	r2, [r4, #0]
  _blocking = true;
   b4c78:	2201      	movs	r2, #1
  _serial = serial;
   b4c7a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b4c7c:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   b4c7e:	461a      	mov	r2, r3
   b4c80:	f7ff fac0 	bl	b4204 <hal_usart_init>
}
   b4c84:	4620      	mov	r0, r4
   b4c86:	bd10      	pop	{r4, pc}
   b4c88:	000b517c 	.word	0x000b517c

000b4c8c <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   b4c8c:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   b4c8e:	4c0e      	ldr	r4, [pc, #56]	; (b4cc8 <_Z22__fetch_global_Serial1v+0x3c>)
   b4c90:	7821      	ldrb	r1, [r4, #0]
   b4c92:	f3bf 8f5b 	dmb	ish
   b4c96:	f011 0101 	ands.w	r1, r1, #1
   b4c9a:	d112      	bne.n	b4cc2 <_Z22__fetch_global_Serial1v+0x36>
   b4c9c:	4620      	mov	r0, r4
   b4c9e:	9101      	str	r1, [sp, #4]
   b4ca0:	f7ff f9fb 	bl	b409a <__cxa_guard_acquire>
   b4ca4:	9901      	ldr	r1, [sp, #4]
   b4ca6:	b160      	cbz	r0, b4cc2 <_Z22__fetch_global_Serial1v+0x36>
   b4ca8:	4a08      	ldr	r2, [pc, #32]	; (b4ccc <_Z22__fetch_global_Serial1v+0x40>)
   b4caa:	4b09      	ldr	r3, [pc, #36]	; (b4cd0 <_Z22__fetch_global_Serial1v+0x44>)
   b4cac:	4809      	ldr	r0, [pc, #36]	; (b4cd4 <_Z22__fetch_global_Serial1v+0x48>)
   b4cae:	f7ff ffd7 	bl	b4c60 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   b4cb2:	4620      	mov	r0, r4
   b4cb4:	f7ff f9f6 	bl	b40a4 <__cxa_guard_release>
   b4cb8:	4a07      	ldr	r2, [pc, #28]	; (b4cd8 <_Z22__fetch_global_Serial1v+0x4c>)
   b4cba:	4908      	ldr	r1, [pc, #32]	; (b4cdc <_Z22__fetch_global_Serial1v+0x50>)
   b4cbc:	4805      	ldr	r0, [pc, #20]	; (b4cd4 <_Z22__fetch_global_Serial1v+0x48>)
   b4cbe:	f000 f993 	bl	b4fe8 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   b4cc2:	4804      	ldr	r0, [pc, #16]	; (b4cd4 <_Z22__fetch_global_Serial1v+0x48>)
   b4cc4:	b002      	add	sp, #8
   b4cc6:	bd10      	pop	{r4, pc}
   b4cc8:	2003e6a4 	.word	0x2003e6a4
   b4ccc:	2003e6a8 	.word	0x2003e6a8
   b4cd0:	2003e72c 	.word	0x2003e72c
   b4cd4:	2003e7b0 	.word	0x2003e7b0
   b4cd8:	2003e630 	.word	0x2003e630
   b4cdc:	000b4be5 	.word	0x000b4be5

000b4ce0 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b4ce0:	4770      	bx	lr

000b4ce2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b4ce2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4ce4:	4606      	mov	r6, r0
   b4ce6:	4615      	mov	r5, r2
   b4ce8:	460c      	mov	r4, r1
   b4cea:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b4cec:	42bc      	cmp	r4, r7
   b4cee:	d006      	beq.n	b4cfe <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b4cf0:	6833      	ldr	r3, [r6, #0]
   b4cf2:	f814 1b01 	ldrb.w	r1, [r4], #1
   b4cf6:	689b      	ldr	r3, [r3, #8]
   b4cf8:	4630      	mov	r0, r6
   b4cfa:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b4cfc:	e7f6      	b.n	b4cec <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b4cfe:	4628      	mov	r0, r5
   b4d00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4d02 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b4d02:	7c00      	ldrb	r0, [r0, #16]
   b4d04:	2200      	movs	r2, #0
   b4d06:	f7ff babd 	b.w	b4284 <hal_i2c_write>

000b4d0a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b4d0a:	7c00      	ldrb	r0, [r0, #16]
   b4d0c:	2100      	movs	r1, #0
   b4d0e:	f7ff bac1 	b.w	b4294 <hal_i2c_available>

000b4d12 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b4d12:	7c00      	ldrb	r0, [r0, #16]
   b4d14:	2100      	movs	r1, #0
   b4d16:	f7ff bac5 	b.w	b42a4 <hal_i2c_read>

000b4d1a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b4d1a:	7c00      	ldrb	r0, [r0, #16]
   b4d1c:	2100      	movs	r1, #0
   b4d1e:	f7ff bac9 	b.w	b42b4 <hal_i2c_peek>

000b4d22 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b4d22:	7c00      	ldrb	r0, [r0, #16]
   b4d24:	2100      	movs	r1, #0
   b4d26:	f7ff bacd 	b.w	b42c4 <hal_i2c_flush>

000b4d2a <_ZN7TwoWireD0Ev>:
   b4d2a:	b510      	push	{r4, lr}
   b4d2c:	2114      	movs	r1, #20
   b4d2e:	4604      	mov	r4, r0
   b4d30:	f000 f95f 	bl	b4ff2 <_ZdlPvj>
   b4d34:	4620      	mov	r0, r4
   b4d36:	bd10      	pop	{r4, pc}

000b4d38 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b4d38:	b510      	push	{r4, lr}
   b4d3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4d3e:	4604      	mov	r4, r0
   b4d40:	4608      	mov	r0, r1
   b4d42:	2100      	movs	r1, #0
   b4d44:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b4d48:	4b03      	ldr	r3, [pc, #12]	; (b4d58 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b4d4a:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b4d4c:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b4d4e:	4611      	mov	r1, r2
   b4d50:	f7ff fac0 	bl	b42d4 <hal_i2c_init>
}
   b4d54:	4620      	mov	r0, r4
   b4d56:	bd10      	pop	{r4, pc}
   b4d58:	000b51ac 	.word	0x000b51ac

000b4d5c <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b4d5c:	2300      	movs	r3, #0
   b4d5e:	7c00      	ldrb	r0, [r0, #16]
   b4d60:	461a      	mov	r2, r3
   b4d62:	4619      	mov	r1, r3
   b4d64:	f7ff ba86 	b.w	b4274 <hal_i2c_begin>

000b4d68 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b4d68:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b4d6a:	2200      	movs	r2, #0
   b4d6c:	2314      	movs	r3, #20
   b4d6e:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b4d72:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b4d76:	780b      	ldrb	r3, [r1, #0]
   b4d78:	f88d 3008 	strb.w	r3, [sp, #8]
   b4d7c:	684b      	ldr	r3, [r1, #4]
   b4d7e:	9303      	str	r3, [sp, #12]
   b4d80:	68cb      	ldr	r3, [r1, #12]
   b4d82:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b4d84:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b4d86:	7a0b      	ldrb	r3, [r1, #8]
   b4d88:	9305      	str	r3, [sp, #20]
   b4d8a:	a901      	add	r1, sp, #4
   b4d8c:	f7ff faaa 	bl	b42e4 <hal_i2c_request_ex>
}
   b4d90:	b007      	add	sp, #28
   b4d92:	f85d fb04 	ldr.w	pc, [sp], #4

000b4d96 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b4d96:	2200      	movs	r2, #0
   b4d98:	6840      	ldr	r0, [r0, #4]
   b4d9a:	4611      	mov	r1, r2
   b4d9c:	f7ff bb16 	b.w	b43cc <network_ready>

000b4da0 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4da0:	2200      	movs	r2, #0
   b4da2:	6840      	ldr	r0, [r0, #4]
   b4da4:	4611      	mov	r1, r2
   b4da6:	f7ff bb31 	b.w	b440c <network_listening>

000b4daa <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4daa:	2200      	movs	r2, #0
   b4dac:	6840      	ldr	r0, [r0, #4]
   b4dae:	4611      	mov	r1, r2
   b4db0:	f7ff bb3c 	b.w	b442c <network_get_listen_timeout>

000b4db4 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4db4:	6840      	ldr	r0, [r0, #4]
   b4db6:	2200      	movs	r2, #0
   b4db8:	f7ff bb30 	b.w	b441c <network_set_listen_timeout>

000b4dbc <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4dbc:	6840      	ldr	r0, [r0, #4]
   b4dbe:	2200      	movs	r2, #0
   b4dc0:	f081 0101 	eor.w	r1, r1, #1
   b4dc4:	f7ff bb1a 	b.w	b43fc <network_listen>

000b4dc8 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4dc8:	2300      	movs	r3, #0
   b4dca:	6840      	ldr	r0, [r0, #4]
   b4dcc:	461a      	mov	r2, r3
   b4dce:	4619      	mov	r1, r3
   b4dd0:	f7ff bb0c 	b.w	b43ec <network_off>

000b4dd4 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4dd4:	2200      	movs	r2, #0
   b4dd6:	6840      	ldr	r0, [r0, #4]
   b4dd8:	4611      	mov	r1, r2
   b4dda:	f7ff bae7 	b.w	b43ac <network_connecting>

000b4dde <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4dde:	6840      	ldr	r0, [r0, #4]
   b4de0:	2200      	movs	r2, #0
   b4de2:	2102      	movs	r1, #2
   b4de4:	f7ff baea 	b.w	b43bc <network_disconnect>

000b4de8 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b4de8:	2300      	movs	r3, #0
   b4dea:	6840      	ldr	r0, [r0, #4]
   b4dec:	461a      	mov	r2, r3
   b4dee:	f7ff bad5 	b.w	b439c <network_connect>
	...

000b4df4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b4df4:	4b02      	ldr	r3, [pc, #8]	; (b4e00 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b4df6:	2204      	movs	r2, #4
   b4df8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b4dfa:	4a02      	ldr	r2, [pc, #8]	; (b4e04 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b4dfc:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b4dfe:	4770      	bx	lr
   b4e00:	2003e7c4 	.word	0x2003e7c4
   b4e04:	000b51d4 	.word	0x000b51d4

000b4e08 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b4e08:	2300      	movs	r3, #0
   b4e0a:	6840      	ldr	r0, [r0, #4]
   b4e0c:	461a      	mov	r2, r3
   b4e0e:	f7ff bac5 	b.w	b439c <network_connect>

000b4e12 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b4e12:	6840      	ldr	r0, [r0, #4]
   b4e14:	2200      	movs	r2, #0
   b4e16:	2102      	movs	r1, #2
   b4e18:	f7ff bad0 	b.w	b43bc <network_disconnect>

000b4e1c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b4e1c:	2200      	movs	r2, #0
   b4e1e:	6840      	ldr	r0, [r0, #4]
   b4e20:	4611      	mov	r1, r2
   b4e22:	f7ff bac3 	b.w	b43ac <network_connecting>

000b4e26 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b4e26:	2200      	movs	r2, #0
   b4e28:	6840      	ldr	r0, [r0, #4]
   b4e2a:	4611      	mov	r1, r2
   b4e2c:	f7ff bace 	b.w	b43cc <network_ready>

000b4e30 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b4e30:	2300      	movs	r3, #0
   b4e32:	6840      	ldr	r0, [r0, #4]
   b4e34:	461a      	mov	r2, r3
   b4e36:	4619      	mov	r1, r3
   b4e38:	f7ff bad0 	b.w	b43dc <network_on>

000b4e3c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b4e3c:	2300      	movs	r3, #0
   b4e3e:	6840      	ldr	r0, [r0, #4]
   b4e40:	461a      	mov	r2, r3
   b4e42:	4619      	mov	r1, r3
   b4e44:	f7ff bad2 	b.w	b43ec <network_off>

000b4e48 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b4e48:	6840      	ldr	r0, [r0, #4]
   b4e4a:	2100      	movs	r1, #0
   b4e4c:	f7ff baf6 	b.w	b443c <network_is_on>

000b4e50 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b4e50:	6840      	ldr	r0, [r0, #4]
   b4e52:	2100      	movs	r1, #0
   b4e54:	f7ff bafa 	b.w	b444c <network_is_off>

000b4e58 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b4e58:	6840      	ldr	r0, [r0, #4]
   b4e5a:	2200      	movs	r2, #0
   b4e5c:	f081 0101 	eor.w	r1, r1, #1
   b4e60:	f7ff bacc 	b.w	b43fc <network_listen>

000b4e64 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b4e64:	6840      	ldr	r0, [r0, #4]
   b4e66:	2200      	movs	r2, #0
   b4e68:	f7ff bad8 	b.w	b441c <network_set_listen_timeout>

000b4e6c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b4e6c:	2200      	movs	r2, #0
   b4e6e:	6840      	ldr	r0, [r0, #4]
   b4e70:	4611      	mov	r1, r2
   b4e72:	f7ff badb 	b.w	b442c <network_get_listen_timeout>

000b4e76 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b4e76:	2200      	movs	r2, #0
   b4e78:	6840      	ldr	r0, [r0, #4]
   b4e7a:	4611      	mov	r1, r2
   b4e7c:	f7ff bac6 	b.w	b440c <network_listening>

000b4e80 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b4e80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b4e84:	b095      	sub	sp, #84	; 0x54
   b4e86:	4614      	mov	r4, r2
   b4e88:	460d      	mov	r5, r1
   b4e8a:	4607      	mov	r7, r0
    IPAddress addr;
   b4e8c:	f7ff fde8 	bl	b4a60 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b4e90:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b4e92:	221c      	movs	r2, #28
   b4e94:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b4e96:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b4e98:	f000 f8cc 	bl	b5034 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b4e9c:	2340      	movs	r3, #64	; 0x40
   b4e9e:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b4ea0:	4620      	mov	r0, r4
   b4ea2:	466b      	mov	r3, sp
   b4ea4:	aa0c      	add	r2, sp, #48	; 0x30
   b4ea6:	2100      	movs	r1, #0
   b4ea8:	f7ff f97c 	bl	b41a4 <netdb_getaddrinfo>
    if (!r) {
   b4eac:	4604      	mov	r4, r0
   b4eae:	2800      	cmp	r0, #0
   b4eb0:	d14b      	bne.n	b4f4a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b4eb2:	4602      	mov	r2, r0
   b4eb4:	2101      	movs	r1, #1
   b4eb6:	6868      	ldr	r0, [r5, #4]
   b4eb8:	f7ff fa88 	bl	b43cc <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b4ebc:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b4ebe:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b4ec0:	4622      	mov	r2, r4
   b4ec2:	6868      	ldr	r0, [r5, #4]
   b4ec4:	f7ff fa82 	bl	b43cc <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4ec8:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b4eca:	4681      	mov	r9, r0
        bool ok = false;
   b4ecc:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4ece:	2e00      	cmp	r6, #0
   b4ed0:	d03b      	beq.n	b4f4a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b4ed2:	2900      	cmp	r1, #0
   b4ed4:	d139      	bne.n	b4f4a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b4ed6:	6873      	ldr	r3, [r6, #4]
   b4ed8:	2b02      	cmp	r3, #2
   b4eda:	d003      	beq.n	b4ee4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b4edc:	2b0a      	cmp	r3, #10
   b4ede:	d011      	beq.n	b4f04 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4ee0:	69f6      	ldr	r6, [r6, #28]
   b4ee2:	e7f4      	b.n	b4ece <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b4ee4:	f1b8 0f00 	cmp.w	r8, #0
   b4ee8:	d0fa      	beq.n	b4ee0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b4eea:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b4eec:	a806      	add	r0, sp, #24
   b4eee:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b4ef0:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b4ef2:	f7ff fde3 	bl	b4abc <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b4ef6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4ef8:	1d3c      	adds	r4, r7, #4
   b4efa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4efc:	682b      	ldr	r3, [r5, #0]
   b4efe:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b4f00:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b4f02:	e7ed      	b.n	b4ee0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b4f04:	f1b9 0f00 	cmp.w	r9, #0
   b4f08:	d0ea      	beq.n	b4ee0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b4f0a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b4f0c:	2210      	movs	r2, #16
   b4f0e:	a801      	add	r0, sp, #4
   b4f10:	f000 f890 	bl	b5034 <memset>
                    a.v = 6;
   b4f14:	2306      	movs	r3, #6
   b4f16:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b4f1a:	ad01      	add	r5, sp, #4
   b4f1c:	f104 0308 	add.w	r3, r4, #8
   b4f20:	3418      	adds	r4, #24
   b4f22:	6818      	ldr	r0, [r3, #0]
   b4f24:	6859      	ldr	r1, [r3, #4]
   b4f26:	462a      	mov	r2, r5
   b4f28:	c203      	stmia	r2!, {r0, r1}
   b4f2a:	3308      	adds	r3, #8
   b4f2c:	42a3      	cmp	r3, r4
   b4f2e:	4615      	mov	r5, r2
   b4f30:	d1f7      	bne.n	b4f22 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b4f32:	a901      	add	r1, sp, #4
   b4f34:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b4f36:	ad07      	add	r5, sp, #28
   b4f38:	f7ff fda0 	bl	b4a7c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b4f3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4f3e:	1d3c      	adds	r4, r7, #4
   b4f40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4f42:	682b      	ldr	r3, [r5, #0]
   b4f44:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b4f46:	4649      	mov	r1, r9
   b4f48:	e7ca      	b.n	b4ee0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b4f4a:	9800      	ldr	r0, [sp, #0]
   b4f4c:	f7ff f922 	bl	b4194 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b4f50:	4638      	mov	r0, r7
   b4f52:	b015      	add	sp, #84	; 0x54
   b4f54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b4f58 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b4f58:	4b02      	ldr	r3, [pc, #8]	; (b4f64 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b4f5a:	4a03      	ldr	r2, [pc, #12]	; (b4f68 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b4f5c:	601a      	str	r2, [r3, #0]
   b4f5e:	2200      	movs	r2, #0
   b4f60:	605a      	str	r2, [r3, #4]

} // spark
   b4f62:	4770      	bx	lr
   b4f64:	2003e7cc 	.word	0x2003e7cc
   b4f68:	000b5210 	.word	0x000b5210

000b4f6c <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   b4f6c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b4f6e:	2520      	movs	r5, #32
   b4f70:	2314      	movs	r3, #20
{
   b4f72:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b4f74:	6003      	str	r3, [r0, #0]
   b4f76:	6085      	str	r5, [r0, #8]
   b4f78:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b4f7a:	4906      	ldr	r1, [pc, #24]	; (b4f94 <_Z17acquireWireBufferv+0x28>)
   b4f7c:	4628      	mov	r0, r5
   b4f7e:	f000 f83a 	bl	b4ff6 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b4f82:	4904      	ldr	r1, [pc, #16]	; (b4f94 <_Z17acquireWireBufferv+0x28>)
	};
   b4f84:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b4f86:	4628      	mov	r0, r5
   b4f88:	f000 f835 	bl	b4ff6 <_ZnajRKSt9nothrow_t>
	};
   b4f8c:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   b4f8e:	4620      	mov	r0, r4
   b4f90:	bd38      	pop	{r3, r4, r5, pc}
   b4f92:	bf00      	nop
   b4f94:	000b5244 	.word	0x000b5244

000b4f98 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   b4f98:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b4f9a:	4d0f      	ldr	r5, [pc, #60]	; (b4fd8 <_Z19__fetch_global_Wirev+0x40>)
   b4f9c:	7829      	ldrb	r1, [r5, #0]
   b4f9e:	f3bf 8f5b 	dmb	ish
   b4fa2:	f011 0401 	ands.w	r4, r1, #1
{
   b4fa6:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b4fa8:	d113      	bne.n	b4fd2 <_Z19__fetch_global_Wirev+0x3a>
   b4faa:	4628      	mov	r0, r5
   b4fac:	f7ff f875 	bl	b409a <__cxa_guard_acquire>
   b4fb0:	b178      	cbz	r0, b4fd2 <_Z19__fetch_global_Wirev+0x3a>
   b4fb2:	a801      	add	r0, sp, #4
   b4fb4:	f7ff ffda 	bl	b4f6c <_Z17acquireWireBufferv>
   b4fb8:	aa01      	add	r2, sp, #4
   b4fba:	4621      	mov	r1, r4
   b4fbc:	4807      	ldr	r0, [pc, #28]	; (b4fdc <_Z19__fetch_global_Wirev+0x44>)
   b4fbe:	f7ff febb 	bl	b4d38 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b4fc2:	4628      	mov	r0, r5
   b4fc4:	f7ff f86e 	bl	b40a4 <__cxa_guard_release>
   b4fc8:	4a05      	ldr	r2, [pc, #20]	; (b4fe0 <_Z19__fetch_global_Wirev+0x48>)
   b4fca:	4906      	ldr	r1, [pc, #24]	; (b4fe4 <_Z19__fetch_global_Wirev+0x4c>)
   b4fcc:	4803      	ldr	r0, [pc, #12]	; (b4fdc <_Z19__fetch_global_Wirev+0x44>)
   b4fce:	f000 f80b 	bl	b4fe8 <__aeabi_atexit>
	return wire;
}
   b4fd2:	4802      	ldr	r0, [pc, #8]	; (b4fdc <_Z19__fetch_global_Wirev+0x44>)
   b4fd4:	b007      	add	sp, #28
   b4fd6:	bd30      	pop	{r4, r5, pc}
   b4fd8:	2003e7d8 	.word	0x2003e7d8
   b4fdc:	2003e7dc 	.word	0x2003e7dc
   b4fe0:	2003e630 	.word	0x2003e630
   b4fe4:	000b4ce1 	.word	0x000b4ce1

000b4fe8 <__aeabi_atexit>:
   b4fe8:	460b      	mov	r3, r1
   b4fea:	4601      	mov	r1, r0
   b4fec:	4618      	mov	r0, r3
   b4fee:	f000 b805 	b.w	b4ffc <__cxa_atexit>

000b4ff2 <_ZdlPvj>:
   b4ff2:	f7ff b850 	b.w	b4096 <_ZdlPv>

000b4ff6 <_ZnajRKSt9nothrow_t>:
   b4ff6:	f7ff b84c 	b.w	b4092 <_Znaj>
	...

000b4ffc <__cxa_atexit>:
   b4ffc:	b510      	push	{r4, lr}
   b4ffe:	4c05      	ldr	r4, [pc, #20]	; (b5014 <__cxa_atexit+0x18>)
   b5000:	4613      	mov	r3, r2
   b5002:	b12c      	cbz	r4, b5010 <__cxa_atexit+0x14>
   b5004:	460a      	mov	r2, r1
   b5006:	4601      	mov	r1, r0
   b5008:	2002      	movs	r0, #2
   b500a:	f3af 8000 	nop.w
   b500e:	bd10      	pop	{r4, pc}
   b5010:	4620      	mov	r0, r4
   b5012:	e7fc      	b.n	b500e <__cxa_atexit+0x12>
   b5014:	00000000 	.word	0x00000000

000b5018 <memcpy>:
   b5018:	440a      	add	r2, r1
   b501a:	4291      	cmp	r1, r2
   b501c:	f100 33ff 	add.w	r3, r0, #4294967295
   b5020:	d100      	bne.n	b5024 <memcpy+0xc>
   b5022:	4770      	bx	lr
   b5024:	b510      	push	{r4, lr}
   b5026:	f811 4b01 	ldrb.w	r4, [r1], #1
   b502a:	f803 4f01 	strb.w	r4, [r3, #1]!
   b502e:	4291      	cmp	r1, r2
   b5030:	d1f9      	bne.n	b5026 <memcpy+0xe>
   b5032:	bd10      	pop	{r4, pc}

000b5034 <memset>:
   b5034:	4402      	add	r2, r0
   b5036:	4603      	mov	r3, r0
   b5038:	4293      	cmp	r3, r2
   b503a:	d100      	bne.n	b503e <memset+0xa>
   b503c:	4770      	bx	lr
   b503e:	f803 1b01 	strb.w	r1, [r3], #1
   b5042:	e7f9      	b.n	b5038 <memset+0x4>

000b5044 <srand>:
   b5044:	b538      	push	{r3, r4, r5, lr}
   b5046:	4b10      	ldr	r3, [pc, #64]	; (b5088 <srand+0x44>)
   b5048:	681d      	ldr	r5, [r3, #0]
   b504a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b504c:	4604      	mov	r4, r0
   b504e:	b9b3      	cbnz	r3, b507e <srand+0x3a>
   b5050:	2018      	movs	r0, #24
   b5052:	f7ff fa0b 	bl	b446c <malloc>
   b5056:	4602      	mov	r2, r0
   b5058:	63a8      	str	r0, [r5, #56]	; 0x38
   b505a:	b920      	cbnz	r0, b5066 <srand+0x22>
   b505c:	4b0b      	ldr	r3, [pc, #44]	; (b508c <srand+0x48>)
   b505e:	480c      	ldr	r0, [pc, #48]	; (b5090 <srand+0x4c>)
   b5060:	2142      	movs	r1, #66	; 0x42
   b5062:	f7ff fa1b 	bl	b449c <__assert_func>
   b5066:	490b      	ldr	r1, [pc, #44]	; (b5094 <srand+0x50>)
   b5068:	4b0b      	ldr	r3, [pc, #44]	; (b5098 <srand+0x54>)
   b506a:	e9c0 1300 	strd	r1, r3, [r0]
   b506e:	4b0b      	ldr	r3, [pc, #44]	; (b509c <srand+0x58>)
   b5070:	6083      	str	r3, [r0, #8]
   b5072:	230b      	movs	r3, #11
   b5074:	8183      	strh	r3, [r0, #12]
   b5076:	2100      	movs	r1, #0
   b5078:	2001      	movs	r0, #1
   b507a:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b507e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b5080:	2200      	movs	r2, #0
   b5082:	611c      	str	r4, [r3, #16]
   b5084:	615a      	str	r2, [r3, #20]
   b5086:	bd38      	pop	{r3, r4, r5, pc}
   b5088:	2003e5cc 	.word	0x2003e5cc
   b508c:	000b5245 	.word	0x000b5245
   b5090:	000b525c 	.word	0x000b525c
   b5094:	abcd330e 	.word	0xabcd330e
   b5098:	e66d1234 	.word	0xe66d1234
   b509c:	0005deec 	.word	0x0005deec

000b50a0 <strcpy>:
   b50a0:	4603      	mov	r3, r0
   b50a2:	f811 2b01 	ldrb.w	r2, [r1], #1
   b50a6:	f803 2b01 	strb.w	r2, [r3], #1
   b50aa:	2a00      	cmp	r2, #0
   b50ac:	d1f9      	bne.n	b50a2 <strcpy+0x2>
   b50ae:	4770      	bx	lr

000b50b0 <strlen>:
   b50b0:	4603      	mov	r3, r0
   b50b2:	f813 2b01 	ldrb.w	r2, [r3], #1
   b50b6:	2a00      	cmp	r2, #0
   b50b8:	d1fb      	bne.n	b50b2 <strlen+0x2>
   b50ba:	1a18      	subs	r0, r3, r0
   b50bc:	3801      	subs	r0, #1
   b50be:	4770      	bx	lr

000b50c0 <dynalib_user>:
   b50c0:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b50d0:	0000 0000                                   ....

000b50d4 <_ZTVN5spark13EthernetClassE>:
	...
   b50dc:	451b 000b 4511 000b 4507 000b 44fd 000b     .E...E...E...D..
   b50ec:	44f1 000b 44e5 000b 4e49 000b 4e51 000b     .D...D..IN..QN..
   b50fc:	44d9 000b 44d1 000b 44c7 000b 44bd 000b     .D...D...D...D..
   b510c:	4e81 000b 7061 0070 5925 252d 2d6d 6425     .N..app.%Y-%m-%d
   b511c:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   b512c:	6d69 0065                                   ime.

000b5130 <_ZTV9IPAddress>:
	...
   b5138:	49fd 000b 49ed 000b 49ef 000b               .I...I...I..

000b5144 <_ZTV9USBSerial>:
	...
   b514c:	4ae1 000b 4b49 000b 4b1f 000b 4795 000b     .J..IK...K...G..
   b515c:	4b11 000b 4ae3 000b 4af3 000b 4b43 000b     .K...J...J..CK..
   b516c:	4b03 000b 4add 000b                         .K...J..

000b5174 <_ZTV11USARTSerial>:
	...
   b517c:	4be5 000b 4c51 000b 4c29 000b 4795 000b     .K..QL..)L...G..
   b518c:	4bf9 000b 4c15 000b 4c07 000b 4c23 000b     .K...L...L..#L..
   b519c:	4be7 000b 4beb 000b                         .K...K..

000b51a4 <_ZTV7TwoWire>:
	...
   b51ac:	4ce1 000b 4d2b 000b 4d03 000b 4ce3 000b     .L..+M...M...L..
   b51bc:	4d0b 000b 4d13 000b 4d1b 000b 4d23 000b     .M...M...M..#M..

000b51cc <_ZTVN5spark9WiFiClassE>:
	...
   b51d4:	4de9 000b 4ddf 000b 4dd5 000b 4d97 000b     .M...M...M...M..
   b51e4:	4853 000b 4dc9 000b 4e49 000b 4e51 000b     SH...M..IN..QN..
   b51f4:	4dbd 000b 4db5 000b 4dab 000b 4da1 000b     .M...M...M...M..
   b5204:	4e81 000b                                   .N..

000b5208 <_ZTVN5spark12NetworkClassE>:
	...
   b5210:	4e09 000b 4e13 000b 4e1d 000b 4e27 000b     .N...N...N..'N..
   b5220:	4e31 000b 4e3d 000b 4e49 000b 4e51 000b     1N..=N..IN..QN..
   b5230:	4e59 000b 4e65 000b 4e6d 000b 4e77 000b     YN..eN..mN..wN..
   b5240:	4e81 000b                                   .N..

000b5244 <_ZSt7nothrow>:
   b5244:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b5254:	6363 6565 6564 0064 6d2f 746e 772f 726f     cceeded./mnt/wor
   b5264:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   b5274:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   b5284:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   b5294:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   b52a4:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   b52b4:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   b52c4:	2f62 696c 6362 732f 6474 696c 2f62 6172     b/libc/stdlib/ra
   b52d4:	646e 632e                                    nd.c.

000b52d9 <link_const_variable_data_end>:
   b52d9:	00          	.byte	0x00
	...

000b52dc <link_constructors_location>:
   b52dc:	000b4145 	.word	0x000b4145
   b52e0:	000b4525 	.word	0x000b4525
   b52e4:	000b4539 	.word	0x000b4539
   b52e8:	000b476d 	.word	0x000b476d
   b52ec:	000b4861 	.word	0x000b4861
   b52f0:	000b4871 	.word	0x000b4871
   b52f4:	000b4899 	.word	0x000b4899
   b52f8:	000b4df5 	.word	0x000b4df5
   b52fc:	000b4f59 	.word	0x000b4f59
