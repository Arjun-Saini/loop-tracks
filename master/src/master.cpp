/******************************************************/
//       THIS IS A GENERATED FILE - DO NOT EDIT       //
/******************************************************/

#include "Particle.h"
#line 1 "/Users/sainihome/Documents/GitHub/loop-tracks/master/src/master.ino"
void setup();
void loop();
void randomizeAddress();
void flashProg(unsigned char* _prog, unsigned int _len, int _addr);
#line 1 "/Users/sainihome/Documents/GitHub/loop-tracks/master/src/master.ino"
SYSTEM_MODE(MANUAL);
SYSTEM_THREAD(ENABLED);

#include "HttpClient.h"
#include "JsonParserGeneratorRK.h"
#include "City.cpp"
#include "Adafruit_VL6180X.h"
#include "MQTT.h"
#include "Adafruit_GFX_RK.h"
#include "Adafruit_LEDBackpack_RK.h"
#include "twiboot.h"

#define UPDATE_INTERVAL 604800 //seconds between program flashes
#define DEFAULT_SLAVE_ADR 0x29 //address that all slaves are set to when bootloader starts

//use hexed.it to generate code snippet, upload arduino sketch hex file WITHOUT bootloader
unsigned char slaveCode[8436] = {
	// Offset 0x00000000 to 0x000020F3
	0x0C, 0x94, 0x68, 0x00, 0x0C, 0x94, 0x90, 0x00, 0x0C, 0x94, 0x90, 0x00,
	0x0C, 0x94, 0x90, 0x00, 0x0C, 0x94, 0x90, 0x00, 0x0C, 0x94, 0x90, 0x00,
	0x0C, 0x94, 0x90, 0x00, 0x0C, 0x94, 0x90, 0x00, 0x0C, 0x94, 0x90, 0x00,
	0x0C, 0x94, 0x90, 0x00, 0x0C, 0x94, 0x90, 0x00, 0x0C, 0x94, 0x90, 0x00,
	0x0C, 0x94, 0x90, 0x00, 0x0C, 0x94, 0x90, 0x00, 0x0C, 0x94, 0x90, 0x00,
	0x0C, 0x94, 0x90, 0x00, 0x0C, 0x94, 0x1E, 0x08, 0x0C, 0x94, 0x90, 0x00,
	0x0C, 0x94, 0xEC, 0x07, 0x0C, 0x94, 0xC6, 0x07, 0x0C, 0x94, 0x90, 0x00,
	0x0C, 0x94, 0x90, 0x00, 0x0C, 0x94, 0x90, 0x00, 0x0C, 0x94, 0x90, 0x00,
	0x0C, 0x94, 0x68, 0x08, 0x0C, 0x94, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x24, 0x00, 0x27, 0x00, 0x2A, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x02,
	0x01, 0x00, 0x00, 0x03, 0x04, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x72, 0x61, 0x6E, 0x64, 0x6F, 0x6D, 0x69, 0x7A, 0x65, 0x20,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x3A, 0x20, 0x00, 0x01, 0x02,
	0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20,
	0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x00, 0x00, 0x00, 0x00, 0x25, 0x00,
	0x28, 0x00, 0x2B, 0x00, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
	0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
	0x82, 0x09, 0xAA, 0x0C, 0x11, 0x24, 0x1F, 0xBE, 0xCF, 0xEF, 0xD8, 0xE0,
	0xDE, 0xBF, 0xCD, 0xBF, 0x11, 0xE0, 0xA0, 0xE0, 0xB1, 0xE0, 0xE8, 0xEA,
	0xF0, 0xE2, 0x02, 0xC0, 0x05, 0x90, 0x0D, 0x92, 0xAC, 0x34, 0xB1, 0x07,
	0xD9, 0xF7, 0x26, 0xE0, 0xAC, 0xE4, 0xB1, 0xE0, 0x01, 0xC0, 0x1D, 0x92,
	0xAE, 0x35, 0xB2, 0x07, 0xE1, 0xF7, 0x10, 0xE0, 0xC7, 0xE6, 0xD0, 0xE0,
	0x04, 0xC0, 0x21, 0x97, 0xFE, 0x01, 0x0E, 0x94, 0x15, 0x0F, 0xC6, 0x36,
	0xD1, 0x07, 0xC9, 0xF7, 0x0E, 0x94, 0x3D, 0x0A, 0x0C, 0x94, 0x47, 0x10,
	0x0C, 0x94, 0x00, 0x00, 0x8F, 0x92, 0x9F, 0x92, 0xAF, 0x92, 0xBF, 0x92,
	0xCF, 0x92, 0xDF, 0x92, 0xEF, 0x92, 0xFF, 0x92, 0xCF, 0x93, 0x20, 0x91,
	0x44, 0x06, 0x30, 0x91, 0x45, 0x06, 0x82, 0x17, 0x93, 0x07, 0xE8, 0xF5,
	0x4B, 0x01, 0xAA, 0x24, 0xBB, 0x24, 0xC8, 0x2D, 0xC5, 0x2E, 0xD6, 0x2E,
	0xE7, 0x2E, 0xFF, 0x24, 0xBC, 0x2D, 0xA4, 0x2F, 0x20, 0x91, 0x4A, 0x06,
	0x22, 0x23, 0x61, 0xF0, 0x82, 0x9E, 0x40, 0x01, 0x11, 0x24, 0xC9, 0x2D,
	0x2C, 0x9D, 0x60, 0x01, 0x11, 0x24, 0xBD, 0x2D, 0x24, 0x9F, 0xF0, 0x01,
	0x11, 0x24, 0xAF, 0x2F, 0xE0, 0x91, 0x50, 0x06, 0xE0, 0x90, 0x4B, 0x06,
	0xF0, 0x90, 0x4C, 0x06, 0x30, 0x91, 0x4D, 0x06, 0xE3, 0x13, 0x23, 0xC0,
	0x9C, 0x01, 0x22, 0x0F, 0x33, 0x1F, 0x82, 0x0F, 0x93, 0x1F, 0x8E, 0x0D,
	0x9F, 0x1D, 0xE0, 0x91, 0x4D, 0x06, 0xE8, 0x0F, 0xF9, 0x2F, 0xF1, 0x1D,
	0xC0, 0x83, 0xE0, 0x91, 0x4E, 0x06, 0xE8, 0x0F, 0xF9, 0x2F, 0xF1, 0x1D,
	0xB0, 0x83, 0x20, 0x91, 0x4F, 0x06, 0x82, 0x0F, 0x91, 0x1D, 0xFC, 0x01,
	0xA0, 0x83, 0xCF, 0x91, 0xFF, 0x90, 0xEF, 0x90, 0xDF, 0x90, 0xCF, 0x90,
	0xBF, 0x90, 0xAF, 0x90, 0x9F, 0x90, 0x8F, 0x90, 0x08, 0x95, 0x88, 0x0F,
	0x99, 0x1F, 0x88, 0x0F, 0x99, 0x1F, 0x8E, 0x0D, 0x9F, 0x1D, 0x47, 0x2F,
	0x55, 0x27, 0x66, 0x27, 0x77, 0x27, 0x22, 0x23, 0x49, 0xF0, 0x30, 0xE0,
	0x24, 0x9F, 0x70, 0x01, 0x25, 0x9F, 0xF0, 0x0C, 0x34, 0x9F, 0xF0, 0x0C,
	0x11, 0x24, 0x4F, 0x2D, 0xE8, 0x0F, 0xF9, 0x2F, 0xF1, 0x1D, 0x40, 0x83,
	0xCA, 0xCF, 0x4F, 0x92, 0x5F, 0x92, 0x6F, 0x92, 0x7F, 0x92, 0x8F, 0x92,
	0x9F, 0x92, 0xAF, 0x92, 0xBF, 0x92, 0xEF, 0x92, 0xFF, 0x92, 0xCF, 0x93,
	0xDF, 0x93, 0x60, 0x91, 0x50, 0x06, 0x70, 0x91, 0x4D, 0x06, 0x40, 0x91,
	0x4B, 0x06, 0x50, 0x91, 0x4C, 0x06, 0x80, 0x90, 0x4A, 0x06, 0x26, 0x2F,
	0x30, 0xE0, 0xE0, 0x91, 0x4E, 0x06, 0xF0, 0xE0, 0xA0, 0x91, 0x4F, 0x06,
	0xB0, 0xE0, 0x67, 0x13, 0x64, 0xC0, 0xBC, 0x01, 0x66, 0x0F, 0x77, 0x1F,
	0x86, 0x0F, 0x97, 0x1F, 0x48, 0x0F, 0x59, 0x1F, 0x24, 0x0F, 0x35, 0x1F,
	0xE9, 0x01, 0x28, 0x81, 0xE4, 0x0F, 0xF5, 0x1F, 0xF0, 0x80, 0xA4, 0x0F,
	0xB5, 0x1F, 0xCC, 0x91, 0x88, 0x20, 0x09, 0xF4, 0x45, 0xC0, 0x91, 0x2C,
	0xB1, 0x2C, 0xA1, 0x2C, 0x62, 0x2F, 0x70, 0xE0, 0x76, 0x2F, 0x66, 0x27,
	0x07, 0x2E, 0x00, 0x0C, 0x88, 0x0B, 0x99, 0x0B, 0xA5, 0x01, 0x94, 0x01,
	0x0E, 0x94, 0x7B, 0x0E, 0x39, 0x01, 0x55, 0x24, 0x44, 0x24, 0x6F, 0x2D,
	0x70, 0xE0, 0x76, 0x2F, 0x66, 0x27, 0x07, 0x2E, 0x00, 0x0C, 0x88, 0x0B,
	0x99, 0x0B, 0xA5, 0x01, 0x94, 0x01, 0x0E, 0x94, 0x7B, 0x0E, 0xB4, 0x2F,
	0xA3, 0x2F, 0x92, 0x2F, 0x88, 0x27, 0x48, 0x2A, 0x59, 0x2A, 0x6A, 0x2A,
	0x7B, 0x2A, 0x6C, 0x2F, 0x70, 0xE0, 0x76, 0x2F, 0x66, 0x27, 0x07, 0x2E,
	0x00, 0x0C, 0x88, 0x0B, 0x99, 0x0B, 0xA5, 0x01, 0x94, 0x01, 0x0E, 0x94,
	0x7B, 0x0E, 0xC3, 0x01, 0xB2, 0x01, 0x62, 0x2B, 0x73, 0x2B, 0x84, 0x2B,
	0x95, 0x2B, 0xDF, 0x91, 0xCF, 0x91, 0xFF, 0x90, 0xEF, 0x90, 0xBF, 0x90,
	0xAF, 0x90, 0x9F, 0x90, 0x8F, 0x90, 0x7F, 0x90, 0x6F, 0x90, 0x5F, 0x90,
	0x4F, 0x90, 0x08, 0x95, 0x6F, 0x2D, 0x70, 0xE0, 0x90, 0xE0, 0x80, 0xE0,
	0x98, 0x2F, 0x87, 0x2F, 0x76, 0x2F, 0x66, 0x27, 0x82, 0x2B, 0x6C, 0x2B,
	0xE8, 0xCF, 0x88, 0x0F, 0x99, 0x1F, 0x88, 0x0F, 0x99, 0x1F, 0x84, 0x0F,
	0x95, 0x1F, 0x28, 0x0F, 0x39, 0x1F, 0xE9, 0x01, 0x38, 0x81, 0xEC, 0x01,
	0xC7, 0x0F, 0xD1, 0x1D, 0xF8, 0x80, 0xE8, 0x0F, 0xF9, 0x1F, 0xC0, 0x81,
	0xA8, 0x0F, 0xB9, 0x1F, 0xEC, 0x90, 0x88, 0x20, 0x09, 0xF4, 0x4B, 0xC0,
	0x91, 0x2C, 0xB1, 0x2C, 0xA1, 0x2C, 0x63, 0x2F, 0x70, 0xE0, 0x76, 0x2F,
	0x66, 0x27, 0x07, 0x2E, 0x00, 0x0C, 0x88, 0x0B, 0x99, 0x0B, 0xA5, 0x01,
	0x94, 0x01, 0x0E, 0x94, 0x7B, 0x0E, 0x72, 0x2E, 0x66, 0x24, 0x55, 0x24,
	0x44, 0x24, 0x6F, 0x2D, 0x70, 0xE0, 0x76, 0x2F, 0x66, 0x27, 0x07, 0x2E,
	0x00, 0x0C, 0x88, 0x0B, 0x99, 0x0B, 0xA5, 0x01, 0x94, 0x01, 0x0E, 0x94,
	0x7B, 0x0E, 0xA9, 0x01, 0x33, 0x27, 0x22, 0x27, 0x42, 0x2A, 0x53, 0x2A,
	0x64, 0x2A, 0x75, 0x2A, 0x6E, 0x2D, 0x70, 0xE0, 0x76, 0x2F, 0x66, 0x27,
	0x07, 0x2E, 0x00, 0x0C, 0x88, 0x0B, 0x99, 0x0B, 0xA5, 0x01, 0x94, 0x01,
	0x0E, 0x94, 0x7B, 0x0E, 0x42, 0x2A, 0x53, 0x2A, 0x64, 0x2A, 0x75, 0x2A,
	0x6C, 0x2F, 0x70, 0xE0, 0x76, 0x2F, 0x66, 0x27, 0x07, 0x2E, 0x00, 0x0C,
	0x88, 0x0B, 0x99, 0x0B, 0xA5, 0x01, 0x94, 0x01, 0x0E, 0x94, 0x7B, 0x0E,
	0x94, 0x2F, 0x83, 0x2F, 0x72, 0x2F, 0x66, 0x27, 0x64, 0x29, 0x75, 0x29,
	0x86, 0x29, 0x97, 0x29, 0x86, 0xCF, 0x6F, 0x2D, 0x70, 0xE0, 0x90, 0xE0,
	0x80, 0xE0, 0xCB, 0x01, 0x77, 0x27, 0x66, 0x27, 0x93, 0x2B, 0x6E, 0x29,
	0x7C, 0x2B, 0x7B, 0xCF, 0xE0, 0x91, 0x90, 0x05, 0xF0, 0x91, 0x91, 0x05,
	0x30, 0x97, 0x19, 0xF0, 0x10, 0x92, 0x8B, 0x05, 0x09, 0x94, 0x08, 0x95,
	0xCF, 0x93, 0xDF, 0x93, 0xAC, 0x01, 0xE0, 0x91, 0x8E, 0x05, 0xF0, 0x91,
	0x8F, 0x05, 0x30, 0x97, 0xF1, 0xF0, 0x90, 0x91, 0x8D, 0x05, 0x80, 0x91,
	0x8C, 0x05, 0x98, 0x17, 0xC0, 0xF0, 0x90, 0xE0, 0x29, 0x2F, 0x30, 0xE0,
	0x26, 0x17, 0x37, 0x07, 0x54, 0xF4, 0xD9, 0x01, 0xAB, 0x59, 0xBB, 0x4F,
	0x24, 0x0F, 0x35, 0x1F, 0xE9, 0x01, 0x28, 0x81, 0x2C, 0x93, 0x9F, 0x5F,
	0xF1, 0xCF, 0x10, 0x92, 0x8D, 0x05, 0x60, 0x93, 0x8C, 0x05, 0xCB, 0x01,
	0xDF, 0x91, 0xCF, 0x91, 0x09, 0x94, 0xDF, 0x91, 0xCF, 0x91, 0x08, 0x95,
	0xAF, 0x92, 0xBF, 0x92, 0xCF, 0x92, 0xDF, 0x92, 0xEF, 0x92, 0xFF, 0x92,
	0x0F, 0x93, 0x1F, 0x93, 0xCF, 0x93, 0xDF, 0x93, 0x6C, 0x01, 0x7B, 0x01,
	0x8B, 0x01, 0x04, 0x0F, 0x15, 0x1F, 0xEB, 0x01, 0x5E, 0x01, 0xAE, 0x18,
	0xBF, 0x08, 0xC0, 0x17, 0xD1, 0x07, 0x59, 0xF0, 0x69, 0x91, 0xD6, 0x01,
	0xED, 0x91, 0xFC, 0x91, 0x01, 0x90, 0xF0, 0x81, 0xE0, 0x2D, 0xC6, 0x01,
	0x09, 0x95, 0x89, 0x2B, 0x79, 0xF7, 0xC5, 0x01, 0xDF, 0x91, 0xCF, 0x91,
	0x1F, 0x91, 0x0F, 0x91, 0xFF, 0x90, 0xEF, 0x90, 0xDF, 0x90, 0xCF, 0x90,
	0xBF, 0x90, 0xAF, 0x90, 0x08, 0x95, 0xFC, 0x01, 0x53, 0x8D, 0x44, 0x8D,
	0x25, 0x2F, 0x30, 0xE0, 0x84, 0x2F, 0x90, 0xE0, 0x82, 0x1B, 0x93, 0x0B,
	0x54, 0x17, 0x10, 0xF0, 0xCF, 0x96, 0x08, 0x95, 0x01, 0x97, 0x08, 0x95,
	0xFC, 0x01, 0x91, 0x8D, 0x82, 0x8D, 0x98, 0x17, 0x61, 0xF0, 0xA2, 0x8D,
	0xAE, 0x0F, 0xBF, 0x2F, 0xB1, 0x1D, 0x5D, 0x96, 0x8C, 0x91, 0x92, 0x8D,
	0x9F, 0x5F, 0x9F, 0x73, 0x92, 0x8F, 0x90, 0xE0, 0x08, 0x95, 0x8F, 0xEF,
	0x9F, 0xEF, 0x08, 0x95, 0xFC, 0x01, 0x91, 0x8D, 0x82, 0x8D, 0x98, 0x17,
	0x31, 0xF0, 0x82, 0x8D, 0xE8, 0x0F, 0xF1, 0x1D, 0x85, 0x8D, 0x90, 0xE0,
	0x08, 0x95, 0x8F, 0xEF, 0x9F, 0xEF, 0x08, 0x95, 0xFC, 0x01, 0x91, 0x8D,
	0x22, 0x8D, 0x89, 0x2F, 0x90, 0xE0, 0x80, 0x5C, 0x9F, 0x4F, 0x82, 0x1B,
	0x91, 0x09, 0x8F, 0x73, 0x99, 0x27, 0x08, 0x95, 0x89, 0xE9, 0x95, 0xE0,
	0x0E, 0x94, 0x86, 0x02, 0x21, 0xE0, 0x89, 0x2B, 0x09, 0xF4, 0x20, 0xE0,
	0x82, 0x2F, 0x08, 0x95, 0x80, 0xE0, 0x90, 0xE0, 0x89, 0x2B, 0x29, 0xF0,
	0x0E, 0x94, 0x92, 0x02, 0x81, 0x11, 0x0C, 0x94, 0x00, 0x00, 0x08, 0x95,
	0xFC, 0x01, 0xA4, 0x8D, 0xA8, 0x0F, 0xB9, 0x2F, 0xB1, 0x1D, 0xA3, 0x5A,
	0xBF, 0x4F, 0x2C, 0x91, 0x84, 0x8D, 0x90, 0xE0, 0x01, 0x96, 0x8F, 0x73,
	0x99, 0x27, 0x84, 0x8F, 0xA6, 0x89, 0xB7, 0x89, 0x2C, 0x93, 0xA0, 0x89,
	0xB1, 0x89, 0x8C, 0x91, 0x83, 0x70, 0x80, 0x64, 0x8C, 0x93, 0x93, 0x8D,
	0x84, 0x8D, 0x98, 0x13, 0x06, 0xC0, 0x02, 0x88, 0xF3, 0x89, 0xE0, 0x2D,
	0x80, 0x81, 0x8F, 0x7D, 0x80, 0x83, 0x08, 0x95, 0xEF, 0x92, 0xFF, 0x92,
	0x0F, 0x93, 0x1F, 0x93, 0xCF, 0x93, 0xDF, 0x93, 0xEC, 0x01, 0x81, 0xE0,
	0x88, 0x8F, 0x9B, 0x8D, 0x8C, 0x8D, 0x98, 0x13, 0x1A, 0xC0, 0xE8, 0x89,
	0xF9, 0x89, 0x80, 0x81, 0x85, 0xFF, 0x15, 0xC0, 0x9F, 0xB7, 0xF8, 0x94,
	0xEE, 0x89, 0xFF, 0x89, 0x60, 0x83, 0xE8, 0x89, 0xF9, 0x89, 0x80, 0x81,
	0x83, 0x70, 0x80, 0x64, 0x80, 0x83, 0x9F, 0xBF, 0x81, 0xE0, 0x90, 0xE0,
	0xDF, 0x91, 0xCF, 0x91, 0x1F, 0x91, 0x0F, 0x91, 0xFF, 0x90, 0xEF, 0x90,
	0x08, 0x95, 0xF6, 0x2E, 0x0B, 0x8D, 0x10, 0xE0, 0x0F, 0x5F, 0x1F, 0x4F,
	0x0F, 0x73, 0x11, 0x27, 0xE0, 0x2E, 0x8C, 0x8D, 0x8E, 0x11, 0x0C, 0xC0,
	0x0F, 0xB6, 0x07, 0xFC, 0xFA, 0xCF, 0xE8, 0x89, 0xF9, 0x89, 0x80, 0x81,
	0x85, 0xFF, 0xF5, 0xCF, 0xCE, 0x01, 0x0E, 0x94, 0xA6, 0x02, 0xF1, 0xCF,
	0xEB, 0x8D, 0xEC, 0x0F, 0xFD, 0x2F, 0xF1, 0x1D, 0xE3, 0x5A, 0xFF, 0x4F,
	0xF0, 0x82, 0x9F, 0xB7, 0xF8, 0x94, 0x0B, 0x8F, 0xEA, 0x89, 0xFB, 0x89,
	0x80, 0x81, 0x80, 0x62, 0xCF, 0xCF, 0xCF, 0x93, 0xDF, 0x93, 0xEC, 0x01,
	0x88, 0x8D, 0x88, 0x23, 0xB9, 0xF0, 0xAA, 0x89, 0xBB, 0x89, 0xE8, 0x89,
	0xF9, 0x89, 0x8C, 0x91, 0x85, 0xFD, 0x03, 0xC0, 0x80, 0x81, 0x86, 0xFD,
	0x0D, 0xC0, 0x0F, 0xB6, 0x07, 0xFC, 0xF7, 0xCF, 0x8C, 0x91, 0x85, 0xFF,
	0xF2, 0xCF, 0x80, 0x81, 0x85, 0xFF, 0xED, 0xCF, 0xCE, 0x01, 0x0E, 0x94,
	0xA6, 0x02, 0xE9, 0xCF, 0xDF, 0x91, 0xCF, 0x91, 0x08, 0x95, 0x90, 0xE0,
	0xFC, 0x01, 0xEE, 0x58, 0xFF, 0x4F, 0x24, 0x91, 0xFC, 0x01, 0xE6, 0x56,
	0xFF, 0x4F, 0x34, 0x91, 0xFC, 0x01, 0xE8, 0x54, 0xFF, 0x4F, 0xE4, 0x91,
	0xEE, 0x23, 0xC9, 0xF0, 0x22, 0x23, 0x39, 0xF0, 0x23, 0x30, 0x01, 0xF1,
	0xA8, 0xF4, 0x21, 0x30, 0x19, 0xF1, 0x22, 0x30, 0x29, 0xF1, 0xF0, 0xE0,
	0xEE, 0x0F, 0xFF, 0x1F, 0xE2, 0x55, 0xFF, 0x4F, 0xA5, 0x91, 0xB4, 0x91,
	0x8F, 0xB7, 0xF8, 0x94, 0xEC, 0x91, 0x61, 0x11, 0x26, 0xC0, 0x30, 0x95,
	0x3E, 0x23, 0x3C, 0x93, 0x8F, 0xBF, 0x08, 0x95, 0x27, 0x30, 0xA9, 0xF0,
	0x28, 0x30, 0xC9, 0xF0, 0x24, 0x30, 0x49, 0xF7, 0x80, 0x91, 0x80, 0x00,
	0x8F, 0x7D, 0x03, 0xC0, 0x80, 0x91, 0x80, 0x00, 0x8F, 0x77, 0x80, 0x93,
	0x80, 0x00, 0xDF, 0xCF, 0x84, 0xB5, 0x8F, 0x77, 0x84, 0xBD, 0xDB, 0xCF,
	0x84, 0xB5, 0x8F, 0x7D, 0xFB, 0xCF, 0x80, 0x91, 0xB0, 0x00, 0x8F, 0x77,
	0x80, 0x93, 0xB0, 0x00, 0xD2, 0xCF, 0x80, 0x91, 0xB0, 0x00, 0x8F, 0x7D,
	0xF9, 0xCF, 0x3E, 0x2B, 0xDA, 0xCF, 0xCF, 0x93, 0xDF, 0x93, 0x90, 0xE0,
	0xFC, 0x01, 0xE6, 0x56, 0xFF, 0x4F, 0x24, 0x91, 0x88, 0x54, 0x9F, 0x4F,
	0xFC, 0x01, 0x84, 0x91, 0x88, 0x23, 0xD1, 0xF0, 0x90, 0xE0, 0x88, 0x0F,
	0x99, 0x1F, 0xFC, 0x01, 0xE8, 0x59, 0xFF, 0x4F, 0xA5, 0x91, 0xB4, 0x91,
	0xFC, 0x01, 0xE2, 0x55, 0xFF, 0x4F, 0xC5, 0x91, 0xD4, 0x91, 0x61, 0x11,
	0x0E, 0xC0, 0x9F, 0xB7, 0xF8, 0x94, 0x8C, 0x91, 0xE2, 0x2F, 0xE0, 0x95,
	0x8E, 0x23, 0x8C, 0x93, 0x28, 0x81, 0xE2, 0x23, 0xE8, 0x83, 0x9F, 0xBF,
	0xDF, 0x91, 0xCF, 0x91, 0x08, 0x95, 0x8F, 0xB7, 0xF8, 0x94, 0xEC, 0x91,
	0xE2, 0x2B, 0xEC, 0x93, 0x8F, 0xBF, 0xF6, 0xCF, 0x3F, 0xB7, 0xF8, 0x94,
	0x80, 0x91, 0x6A, 0x05, 0x90, 0x91, 0x6B, 0x05, 0xA0, 0x91, 0x6C, 0x05,
	0xB0, 0x91, 0x6D, 0x05, 0x26, 0xB5, 0xA8, 0x9B, 0x05, 0xC0, 0x2F, 0x3F,
	0x19, 0xF0, 0x01, 0x96, 0xA1, 0x1D, 0xB1, 0x1D, 0x3F, 0xBF, 0xBA, 0x2F,
	0xA9, 0x2F, 0x98, 0x2F, 0x88, 0x27, 0xBC, 0x01, 0xCD, 0x01, 0x62, 0x0F,
	0x71, 0x1D, 0x81, 0x1D, 0x91, 0x1D, 0x42, 0xE0, 0x66, 0x0F, 0x77, 0x1F,
	0x88, 0x1F, 0x99, 0x1F, 0x4A, 0x95, 0xD1, 0xF7, 0x08, 0x95, 0x0F, 0x93,
	0x1F, 0x93, 0xCF, 0x93, 0xDF, 0x93, 0xCD, 0xB7, 0xDE, 0xB7, 0x29, 0x97,
	0x0F, 0xB6, 0xF8, 0x94, 0xDE, 0xBF, 0x0F, 0xBE, 0xCD, 0xBF, 0x80, 0x91,
	0x4B, 0x06, 0x90, 0x91, 0x4C, 0x06, 0x89, 0x2B, 0x09, 0xF4, 0x7C, 0xC0,
	0x0E, 0x94, 0xB2, 0x03, 0x00, 0x91, 0x51, 0x06, 0x10, 0x91, 0x52, 0x06,
	0x20, 0x91, 0x53, 0x06, 0x30, 0x91, 0x54, 0x06, 0x60, 0x17, 0x71, 0x07,
	0x82, 0x07, 0x93, 0x07, 0x40, 0xF4, 0x60, 0x93, 0x51, 0x06, 0x70, 0x93,
	0x52, 0x06, 0x80, 0x93, 0x53, 0x06, 0x90, 0x93, 0x54, 0x06, 0x00, 0x91,
	0x51, 0x06, 0x10, 0x91, 0x52, 0x06, 0x20, 0x91, 0x53, 0x06, 0x30, 0x91,
	0x54, 0x06, 0x60, 0x1B, 0x71, 0x0B, 0x82, 0x0B, 0x93, 0x0B, 0x6C, 0x32,
	0x71, 0x40, 0x81, 0x05, 0x91, 0x05, 0xC0, 0xF2, 0xF8, 0x94, 0x80, 0x91,
	0x46, 0x06, 0x90, 0x91, 0x47, 0x06, 0x9A, 0x83, 0x89, 0x83, 0xE0, 0x91,
	0x4B, 0x06, 0xF0, 0x91, 0x4C, 0x06, 0xDF, 0x01, 0x11, 0x96, 0x80, 0x81,
	0x89, 0x87, 0x90, 0x91, 0x42, 0x06, 0xE0, 0x91, 0x55, 0x06, 0xF0, 0x91,
	0x56, 0x06, 0x80, 0x91, 0x57, 0x06, 0x99, 0x23, 0x09, 0xF4, 0x45, 0xC0,
	0x90, 0x81, 0x98, 0x2B, 0x98, 0x87, 0x90, 0x81, 0x80, 0x95, 0x89, 0x23,
	0x8F, 0x83, 0x8F, 0x81, 0x8C, 0x83, 0x88, 0xE0, 0x8B, 0x83, 0x58, 0x85,
	0x6F, 0x81, 0x49, 0x85, 0x3B, 0x81, 0x2C, 0x81, 0x89, 0x81, 0x9A, 0x81,
	0x50, 0x83, 0x47, 0xFD, 0x25, 0x2F, 0x3A, 0x95, 0x20, 0x83, 0x26, 0x2F,
	0x39, 0xF0, 0x44, 0x1F, 0x00, 0xC0, 0x00, 0x00, 0x60, 0x83, 0x00, 0x00,
	0x00, 0xC0, 0xF2, 0xCF, 0x38, 0xE0, 0x4D, 0x91, 0x60, 0x83, 0x00, 0x00,
	0x01, 0x97, 0x61, 0xF7, 0xF0, 0x93, 0x56, 0x06, 0xE0, 0x93, 0x55, 0x06,
	0x49, 0x87, 0x3B, 0x83, 0x2C, 0x83, 0x9A, 0x83, 0x89, 0x83, 0x78, 0x94,
	0x0E, 0x94, 0xB2, 0x03, 0x60, 0x93, 0x51, 0x06, 0x70, 0x93, 0x52, 0x06,
	0x80, 0x93, 0x53, 0x06, 0x90, 0x93, 0x54, 0x06, 0x29, 0x96, 0x0F, 0xB6,
	0xF8, 0x94, 0xDE, 0xBF, 0x0F, 0xBE, 0xCD, 0xBF, 0xDF, 0x91, 0xCF, 0x91,
	0x1F, 0x91, 0x0F, 0x91, 0x08, 0x95, 0x90, 0x81, 0x98, 0x2B, 0x98, 0x87,
	0x90, 0x81, 0x80, 0x95, 0x89, 0x23, 0x8F, 0x83, 0x8F, 0x81, 0x8E, 0x83,
	0x88, 0xE0, 0x8D, 0x83, 0x58, 0x85, 0x6F, 0x81, 0x49, 0x85, 0x3D, 0x81,
	0x2E, 0x81, 0x89, 0x81, 0x9A, 0x81, 0x50, 0x83, 0x47, 0xFD, 0x25, 0x2F,
	0x00, 0xC0, 0x00, 0xC0, 0x20, 0x83, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0xC0,
	0x00, 0xC0, 0x00, 0xC0, 0x60, 0x83, 0x00, 0x00, 0x26, 0x2F, 0x3A, 0x95,
	0x41, 0xF0, 0x44, 0x1F, 0x00, 0x00, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0xC0,
	0x00, 0xC0, 0x00, 0xC0, 0xE8, 0xCF, 0x38, 0xE0, 0x4D, 0x91, 0x00, 0xC0,
	0x60, 0x83, 0x00, 0xC0, 0x01, 0x97, 0x09, 0xF7, 0xF0, 0x93, 0x56, 0x06,
	0xE0, 0x93, 0x55, 0x06, 0x49, 0x87, 0x3D, 0x83, 0x2E, 0x83, 0xAF, 0xCF,
	0x08, 0x95, 0xE0, 0x91, 0x8D, 0x05, 0x80, 0x91, 0x8C, 0x05, 0xE8, 0x17,
	0x30, 0xF4, 0xF0, 0xE0, 0xEB, 0x59, 0xFB, 0x4F, 0x80, 0x81, 0x90, 0xE0,
	0x08, 0x95, 0x8F, 0xEF, 0x9F, 0xEF, 0x08, 0x95, 0x90, 0x91, 0x8D, 0x05,
	0x80, 0x91, 0x8C, 0x05, 0x2F, 0xEF, 0x3F, 0xEF, 0x98, 0x17, 0x48, 0xF4,
	0xE9, 0x2F, 0xF0, 0xE0, 0xEB, 0x59, 0xFB, 0x4F, 0x20, 0x81, 0x30, 0xE0,
	0x9F, 0x5F, 0x90, 0x93, 0x8D, 0x05, 0xC9, 0x01, 0x08, 0x95, 0x80, 0x91,
	0x8C, 0x05, 0x90, 0x91, 0x8D, 0x05, 0x89, 0x1B, 0x99, 0x0B, 0x08, 0x95,
	0x90, 0xE0, 0x80, 0xE0, 0x08, 0x95, 0x20, 0x91, 0x5B, 0x02, 0x26, 0x0F,
	0x33, 0x27, 0x33, 0x1F, 0x21, 0x30, 0x31, 0x40, 0xEC, 0xF4, 0x20, 0x91,
	0x5F, 0x03, 0xFC, 0x01, 0x90, 0xE0, 0x80, 0xE0, 0x24, 0x30, 0x69, 0xF0,
	0x82, 0xE0, 0x08, 0x95, 0xA0, 0x91, 0x5B, 0x02, 0x21, 0x91, 0xAC, 0x01,
	0x45, 0x5A, 0x5E, 0x4F, 0xA4, 0x0F, 0xB5, 0x2F, 0xB1, 0x1D, 0x2C, 0x93,
	0x01, 0x96, 0x86, 0x17, 0x98, 0xF3, 0x80, 0x91, 0x5B, 0x02, 0x68, 0x0F,
	0x60, 0x93, 0x5B, 0x02, 0x80, 0xE0, 0x08, 0x95, 0x81, 0xE0, 0x08, 0x95,
	0xCF, 0x93, 0xDF, 0x93, 0xCB, 0x01, 0xEA, 0x01, 0x64, 0x2F, 0x0E, 0x94,
	0xD7, 0x04, 0xCE, 0x01, 0xDF, 0x91, 0xCF, 0x91, 0x08, 0x95, 0xCF, 0x93,
	0xDF, 0x93, 0x1F, 0x92, 0xCD, 0xB7, 0xDE, 0xB7, 0x69, 0x83, 0x61, 0xE0,
	0xCE, 0x01, 0x01, 0x96, 0x0E, 0x94, 0xD7, 0x04, 0x81, 0xE0, 0x90, 0xE0,
	0x0F, 0x90, 0xDF, 0x91, 0xCF, 0x91, 0x08, 0x95, 0xEC, 0xEB, 0xF0, 0xE0,
	0x80, 0x81, 0x8A, 0x7B, 0x80, 0x83, 0x60, 0xE0, 0x82, 0xE1, 0x0E, 0x94,
	0x35, 0x03, 0x60, 0xE0, 0x83, 0xE1, 0x0C, 0x94, 0x35, 0x03, 0x10, 0x92,
	0x5F, 0x03, 0x81, 0xE0, 0x80, 0x93, 0x61, 0x03, 0x10, 0x92, 0x60, 0x03,
	0x61, 0xE0, 0x82, 0xE1, 0x0E, 0x94, 0x35, 0x03, 0x61, 0xE0, 0x83, 0xE1,
	0x0E, 0x94, 0x35, 0x03, 0xE9, 0xEB, 0xF0, 0xE0, 0x80, 0x81, 0x8E, 0x7F,
	0x80, 0x83, 0x80, 0x81, 0x8D, 0x7F, 0x80, 0x83, 0x88, 0xE4, 0x80, 0x93,
	0xB8, 0x00, 0x85, 0xE4, 0x80, 0x93, 0xBC, 0x00, 0x08, 0x95, 0xFB, 0x01,
	0x01, 0x90, 0x00, 0x20, 0xE9, 0xF7, 0x31, 0x97, 0xAF, 0x01, 0x46, 0x1B,
	0x57, 0x0B, 0xDC, 0x01, 0xED, 0x91, 0xFC, 0x91, 0x02, 0x80, 0xF3, 0x81,
	0xE0, 0x2D, 0x09, 0x94, 0x8F, 0x92, 0x9F, 0x92, 0xAF, 0x92, 0xBF, 0x92,
	0xCF, 0x92, 0xDF, 0x92, 0xEF, 0x92, 0xFF, 0x92, 0x0F, 0x93, 0x1F, 0x93,
	0xCF, 0x93, 0xDF, 0x93, 0xCD, 0xB7, 0xDE, 0xB7, 0xA1, 0x97, 0x0F, 0xB6,
	0xF8, 0x94, 0xDE, 0xBF, 0x0F, 0xBE, 0xCD, 0xBF, 0x6C, 0x01, 0x99, 0x0F,
	0xEE, 0x08, 0xFF, 0x08, 0xF7, 0xFE, 0x4B, 0xC0, 0x6D, 0xE2, 0x89, 0xE9,
	0x95, 0xE0, 0x0E, 0x94, 0xC8, 0x02, 0x8C, 0x01, 0x22, 0x27, 0x33, 0x27,
	0xA9, 0x01, 0x2C, 0x19, 0x3D, 0x09, 0x4E, 0x09, 0x5F, 0x09, 0x19, 0xA2,
	0xCE, 0x01, 0x81, 0x96, 0x7C, 0x01, 0x9A, 0xE0, 0x89, 0x2E, 0x91, 0x2C,
	0xA1, 0x2C, 0xB1, 0x2C, 0xCA, 0x01, 0xB9, 0x01, 0xA5, 0x01, 0x94, 0x01,
	0x0E, 0x94, 0x7B, 0x0E, 0x60, 0x5D, 0xF7, 0x01, 0x62, 0x93, 0x7F, 0x01,
	0x21, 0x15, 0x31, 0x05, 0x41, 0x05, 0x51, 0x05, 0x89, 0xF7, 0x90, 0xE0,
	0x80, 0xE0, 0x30, 0x97, 0x29, 0xF0, 0xBF, 0x01, 0x89, 0xE9, 0x95, 0xE0,
	0x0E, 0x94, 0x45, 0x05, 0x08, 0x0F, 0x19, 0x1F, 0x6F, 0xE2, 0x71, 0xE0,
	0x89, 0xE9, 0x95, 0xE0, 0x0E, 0x94, 0x45, 0x05, 0x80, 0x0F, 0x91, 0x1F,
	0xA1, 0x96, 0x0F, 0xB6, 0xF8, 0x94, 0xDE, 0xBF, 0x0F, 0xBE, 0xCD, 0xBF,
	0xDF, 0x91, 0xCF, 0x91, 0x1F, 0x91, 0x0F, 0x91, 0xFF, 0x90, 0xEF, 0x90,
	0xDF, 0x90, 0xCF, 0x90, 0xBF, 0x90, 0xAF, 0x90, 0x9F, 0x90, 0x8F, 0x90,
	0x08, 0x95, 0xA7, 0x01, 0x96, 0x01, 0x19, 0xA2, 0x8E, 0x01, 0x0F, 0x5D,
	0x1F, 0x4F, 0x8A, 0xE0, 0xC8, 0x2E, 0xD1, 0x2C, 0xE1, 0x2C, 0xF1, 0x2C,
	0xCA, 0x01, 0xB9, 0x01, 0xA7, 0x01, 0x96, 0x01, 0x0E, 0x94, 0x7B, 0x0E,
	0x60, 0x5D, 0xF8, 0x01, 0x62, 0x93, 0x8F, 0x01, 0x21, 0x15, 0x31, 0x05,
	0x41, 0x05, 0x51, 0x05, 0x89, 0xF7, 0x30, 0x97, 0x39, 0xF0, 0xBF, 0x01,
	0x89, 0xE9, 0x95, 0xE0, 0x0E, 0x94, 0x45, 0x05, 0x8C, 0x01, 0xC2, 0xCF,
	0x10, 0xE0, 0x00, 0xE0, 0xBF, 0xCF, 0x80, 0x91, 0x93, 0x05, 0x90, 0x91,
	0x94, 0x05, 0x81, 0x30, 0x91, 0x05, 0x39, 0xF0, 0x02, 0x97, 0x59, 0xF0,
	0x60, 0xE0, 0x86, 0xE3, 0x96, 0xE0, 0x0C, 0x94, 0x09, 0x05, 0x6E, 0xE6,
	0x75, 0xE0, 0x86, 0xE3, 0x96, 0xE0, 0x0C, 0x94, 0x45, 0x05, 0x80, 0x91,
	0x00, 0x01, 0x67, 0xE3, 0x71, 0xE0, 0x88, 0x23, 0xB1, 0xF3, 0x62, 0xE3,
	0x71, 0xE0, 0xF3, 0xCF, 0x4F, 0x92, 0x5F, 0x92, 0x6F, 0x92, 0x7F, 0x92,
	0x8F, 0x92, 0x9F, 0x92, 0xAF, 0x92, 0xBF, 0x92, 0xCF, 0x92, 0xDF, 0x92,
	0xEF, 0x92, 0xFF, 0x92, 0x0F, 0x93, 0x1F, 0x93, 0xCF, 0x93, 0xDF, 0x93,
	0xCD, 0xB7, 0xDE, 0xB7, 0x2E, 0x97, 0x0F, 0xB6, 0xF8, 0x94, 0xDE, 0xBF,
	0x0F, 0xBE, 0xCD, 0xBF, 0xCD, 0xB6, 0xDE, 0xB6, 0xA0, 0x90, 0x8C, 0x05,
	0x80, 0x91, 0x8D, 0x05, 0xA8, 0x1A, 0xBB, 0x08, 0x8D, 0xB7, 0x9E, 0xB7,
	0x8A, 0x19, 0x9B, 0x09, 0x0F, 0xB6, 0xF8, 0x94, 0x9E, 0xBF, 0x0F, 0xBE,
	0x8D, 0xBF, 0x0D, 0xB7, 0x1E, 0xB7, 0x0F, 0x5F, 0x1F, 0x4F, 0x6C, 0xE3,
	0x71, 0xE0, 0x89, 0xE9, 0x95, 0xE0, 0x0E, 0x94, 0x45, 0x05, 0x78, 0x01,
	0x48, 0x01, 0xF4, 0x01, 0xE0, 0x1B, 0xF1, 0x0B, 0x80, 0x91, 0x8C, 0x05,
	0x90, 0x91, 0x8D, 0x05, 0x89, 0x1B, 0x99, 0x0B, 0x18, 0x16, 0x19, 0x06,
	0x44, 0xF4, 0x86, 0xE3, 0x96, 0xE0, 0x0E, 0x94, 0xBA, 0x04, 0xD4, 0x01,
	0x8D, 0x93, 0x4D, 0x01, 0xEC, 0xCF, 0xE0, 0x0F, 0xF1, 0x1F, 0x10, 0x82,
	0xB8, 0x01, 0x89, 0xE9, 0x95, 0xE0, 0x0E, 0x94, 0x45, 0x05, 0x6F, 0xE2,
	0x71, 0xE0, 0x89, 0xE9, 0x95, 0xE0, 0x0E, 0x94, 0x45, 0x05, 0xB1, 0xE0,
	0xAB, 0x16, 0xB1, 0x04, 0x09, 0xF0, 0x47, 0xC0, 0xF8, 0x01, 0x80, 0x81,
	0x81, 0x33, 0x29, 0xF5, 0xB0, 0x92, 0x94, 0x05, 0xA0, 0x92, 0x93, 0x05,
	0x0F, 0xB6, 0xF8, 0x94, 0xDE, 0xBE, 0x0F, 0xBE, 0xCD, 0xBE, 0x0F, 0xB6,
	0xF8, 0x94, 0xDE, 0xBE, 0x0F, 0xBE, 0xCD, 0xBE, 0x2E, 0x96, 0x0F, 0xB6,
	0xF8, 0x94, 0xDE, 0xBF, 0x0F, 0xBE, 0xCD, 0xBF, 0xDF, 0x91, 0xCF, 0x91,
	0x1F, 0x91, 0x0F, 0x91, 0xFF, 0x90, 0xEF, 0x90, 0xDF, 0x90, 0xCF, 0x90,
	0xBF, 0x90, 0xAF, 0x90, 0x9F, 0x90, 0x8F, 0x90, 0x7F, 0x90, 0x6F, 0x90,
	0x5F, 0x90, 0x4F, 0x90, 0x08, 0x95, 0x82, 0x33, 0x39, 0xF4, 0x82, 0xE0,
	0x90, 0xE0, 0x90, 0x93, 0x94, 0x05, 0x80, 0x93, 0x93, 0x05, 0xD6, 0xCF,
	0x83, 0x33, 0x21, 0xF4, 0x81, 0xE0, 0x80, 0x93, 0x97, 0x05, 0xD0, 0xCF,
	0x84, 0x33, 0x31, 0xF4, 0x10, 0x92, 0x97, 0x05, 0x81, 0xE0, 0x80, 0x93,
	0x98, 0x05, 0xC8, 0xCF, 0x89, 0x33, 0x31, 0xF6, 0x61, 0xE0, 0x86, 0xE0,
	0x0E, 0x94, 0x81, 0x03, 0xC1, 0xCF, 0xF8, 0xE1, 0xAF, 0x16, 0xB1, 0x04,
	0x89, 0xF4, 0xEE, 0xE6, 0xF5, 0xE0, 0x08, 0x5E, 0x1F, 0x4F, 0x91, 0x91,
	0xD7, 0x01, 0x8D, 0x91, 0x7D, 0x01, 0x98, 0x17, 0x19, 0xF0, 0x10, 0x92,
	0x00, 0x01, 0xB0, 0xCF, 0xA0, 0x17, 0xB1, 0x07, 0xA1, 0xF7, 0xAC, 0xCF,
	0xBC, 0xE0, 0xAB, 0x16, 0xB1, 0x04, 0xA1, 0xF5, 0xDE, 0x01, 0x11, 0x96,
	0xAE, 0x01, 0x48, 0x5F, 0x5F, 0x4F, 0x0A, 0x5F, 0x1F, 0x4F, 0xCD, 0x01,
	0x5A, 0x01, 0xF7, 0x01, 0x21, 0x91, 0x7F, 0x01, 0x2D, 0x93, 0x25, 0x81,
	0xFA, 0x01, 0x21, 0x93, 0xAF, 0x01, 0x0E, 0x15, 0x1F, 0x05, 0xA9, 0xF7,
	0x1F, 0x82, 0x1E, 0x86, 0x40, 0xE1, 0x50, 0xE0, 0x70, 0xE0, 0x60, 0xE0,
	0x0E, 0x94, 0x5E, 0x0D, 0x60, 0x93, 0x51, 0x01, 0x70, 0x93, 0x52, 0x01,
	0x80, 0x93, 0x53, 0x01, 0x90, 0x93, 0x54, 0x01, 0x40, 0xE1, 0x50, 0xE0,
	0x70, 0xE0, 0x60, 0xE0, 0xC5, 0x01, 0x0E, 0x94, 0x5E, 0x0D, 0x60, 0x93,
	0x4D, 0x01, 0x70, 0x93, 0x4E, 0x01, 0x80, 0x93, 0x4F, 0x01, 0x90, 0x93,
	0x50, 0x01, 0x74, 0xCF, 0x10, 0xE0, 0x00, 0xE0, 0xA0, 0x16, 0xB1, 0x06,
	0x8C, 0xF1, 0x80, 0x91, 0x44, 0x06, 0x90, 0x91, 0x45, 0x06, 0x08, 0x17,
	0x19, 0x07, 0x30, 0xF5, 0xC8, 0x01, 0x0E, 0x94, 0x03, 0x01, 0x40, 0x90,
	0x51, 0x01, 0x50, 0x90, 0x52, 0x01, 0x60, 0x90, 0x53, 0x01, 0x70, 0x90,
	0x54, 0x01, 0x46, 0x16, 0x57, 0x06, 0x68, 0x06, 0x79, 0x06, 0x69, 0xF0,
	0x40, 0x90, 0x4D, 0x01, 0x50, 0x90, 0x4E, 0x01, 0x60, 0x90, 0x4F, 0x01,
	0x70, 0x90, 0x50, 0x01, 0x46, 0x16, 0x57, 0x06, 0x68, 0x06, 0x79, 0x06,
	0x31, 0xF4, 0x40, 0xE0, 0x50, 0xE0, 0xBA, 0x01, 0xC8, 0x01, 0x0E, 0x94,
	0x92, 0x00, 0x0F, 0x5F, 0x1F, 0x4F, 0xD0, 0xCF, 0x60, 0xE0, 0x70, 0xE0,
	0xCB, 0x01, 0xD9, 0xCF, 0x10, 0xE0, 0x00, 0xE0, 0x0A, 0x15, 0x1B, 0x05,
	0x0C, 0xF0, 0x4E, 0xC0, 0xD7, 0x01, 0x8D, 0x91, 0x7D, 0x01, 0x0F, 0x5F,
	0x1F, 0x4F, 0x81, 0x33, 0x21, 0xF5, 0x40, 0x91, 0x4D, 0x01, 0x50, 0x91,
	0x4E, 0x01, 0x60, 0x91, 0x4F, 0x01, 0x70, 0x91, 0x50, 0x01, 0xC8, 0x01,
	0x02, 0x97, 0x0E, 0x94, 0x92, 0x00, 0x40, 0x91, 0x4D, 0x01, 0x50, 0x91,
	0x4E, 0x01, 0x60, 0x91, 0x4F, 0x01, 0x70, 0x91, 0x50, 0x01, 0xC8, 0x01,
	0x01, 0x97, 0x0E, 0x94, 0x92, 0x00, 0x40, 0x91, 0x51, 0x01, 0x50, 0x91,
	0x52, 0x01, 0x60, 0x91, 0x53, 0x01, 0x70, 0x91, 0x54, 0x01, 0xC8, 0x01,
	0x0E, 0x94, 0x92, 0x00, 0xD1, 0xCF, 0x85, 0x33, 0x79, 0xF6, 0x40, 0x91,
	0x51, 0x01, 0x50, 0x91, 0x52, 0x01, 0x60, 0x91, 0x53, 0x01, 0x70, 0x91,
	0x54, 0x01, 0xC8, 0x01, 0x02, 0x97, 0x0E, 0x94, 0x92, 0x00, 0x40, 0x91,
	0x4D, 0x01, 0x50, 0x91, 0x4E, 0x01, 0x60, 0x91, 0x4F, 0x01, 0x70, 0x91,
	0x50, 0x01, 0xC8, 0x01, 0x01, 0x97, 0x0E, 0x94, 0x92, 0x00, 0x40, 0x91,
	0x4D, 0x01, 0x50, 0x91, 0x4E, 0x01, 0x60, 0x91, 0x4F, 0x01, 0x70, 0x91,
	0x50, 0x01, 0xD9, 0xCF, 0x81, 0xE0, 0x80, 0x93, 0x92, 0x05, 0xE6, 0xCE,
	0xCF, 0x93, 0xDF, 0x93, 0x85, 0xED, 0x80, 0x93, 0xBC, 0x00, 0x80, 0x91,
	0x57, 0x01, 0x90, 0x91, 0x58, 0x01, 0xA0, 0x91, 0x59, 0x01, 0xB0, 0x91,
	0x5A, 0x01, 0x07, 0x96, 0xA1, 0x1D, 0xB1, 0x1D, 0x23, 0xE0, 0xB6, 0x95,
	0xA7, 0x95, 0x97, 0x95, 0x87, 0x95, 0x2A, 0x95, 0xD1, 0xF7, 0x20, 0x91,
	0xBC, 0x00, 0x24, 0xFD, 0x03, 0xC0, 0x10, 0x92, 0x5F, 0x03, 0x2B, 0xC0,
	0x40, 0x91, 0x57, 0x01, 0x50, 0x91, 0x58, 0x01, 0x60, 0x91, 0x59, 0x01,
	0x70, 0x91, 0x5A, 0x01, 0x45, 0x2B, 0x46, 0x2B, 0x47, 0x2B, 0x69, 0xF3,
	0x00, 0x97, 0xA1, 0x05, 0xB1, 0x05, 0x41, 0xF0, 0x25, 0xE3, 0x2A, 0x95,
	0xF1, 0xF7, 0x00, 0x00, 0x01, 0x97, 0xA1, 0x09, 0xB1, 0x09, 0xE1, 0xCF,
	0x80, 0x91, 0x56, 0x01, 0x91, 0xE0, 0x90, 0x93, 0x55, 0x01, 0x88, 0x23,
	0x61, 0xF0, 0xC0, 0x91, 0xB8, 0x00, 0xD0, 0x91, 0xBA, 0x00, 0x0E, 0x94,
	0x1A, 0x05, 0x0E, 0x94, 0x27, 0x05, 0xD0, 0x93, 0xBA, 0x00, 0xC0, 0x93,
	0xB8, 0x00, 0xDF, 0x91, 0xCF, 0x91, 0x08, 0x95, 0x1F, 0x92, 0x0F, 0x92,
	0x0F, 0xB6, 0x0F, 0x92, 0x11, 0x24, 0x2F, 0x93, 0x3F, 0x93, 0x4F, 0x93,
	0x5F, 0x93, 0x6F, 0x93, 0x7F, 0x93, 0x8F, 0x93, 0x9F, 0x93, 0xAF, 0x93,
	0xBF, 0x93, 0xEF, 0x93, 0xFF, 0x93, 0x89, 0xE9, 0x95, 0xE0, 0x0E, 0x94,
	0xA6, 0x02, 0xFF, 0x91, 0xEF, 0x91, 0xBF, 0x91, 0xAF, 0x91, 0x9F, 0x91,
	0x8F, 0x91, 0x7F, 0x91, 0x6F, 0x91, 0x5F, 0x91, 0x4F, 0x91, 0x3F, 0x91,
	0x2F, 0x91, 0x0F, 0x90, 0x0F, 0xBE, 0x0F, 0x90, 0x1F, 0x90, 0x18, 0x95,
	0x1F, 0x92, 0x0F, 0x92, 0x0F, 0xB6, 0x0F, 0x92, 0x11, 0x24, 0x2F, 0x93,
	0x8F, 0x93, 0x9F, 0x93, 0xEF, 0x93, 0xFF, 0x93, 0xE0, 0x91, 0xA9, 0x05,
	0xF0, 0x91, 0xAA, 0x05, 0x80, 0x81, 0xE0, 0x91, 0xAF, 0x05, 0xF0, 0x91,
	0xB0, 0x05, 0x82, 0xFD, 0x1B, 0xC0, 0x90, 0x81, 0x80, 0x91, 0xB2, 0x05,
	0x8F, 0x5F, 0x8F, 0x73, 0x20, 0x91, 0xB3, 0x05, 0x82, 0x17, 0x41, 0xF0,
	0xE0, 0x91, 0xB2, 0x05, 0xF0, 0xE0, 0xE7, 0x56, 0xFA, 0x4F, 0x95, 0x8F,
	0x80, 0x93, 0xB2, 0x05, 0xFF, 0x91, 0xEF, 0x91, 0x9F, 0x91, 0x8F, 0x91,
	0x2F, 0x91, 0x0F, 0x90, 0x0F, 0xBE, 0x0F, 0x90, 0x1F, 0x90, 0x18, 0x95,
	0x80, 0x81, 0xF4, 0xCF, 0x1F, 0x92, 0x0F, 0x92, 0x0F, 0xB6, 0x0F, 0x92,
	0x11, 0x24, 0x2F, 0x93, 0x3F, 0x93, 0x8F, 0x93, 0x9F, 0x93, 0xAF, 0x93,
	0xBF, 0x93, 0x80, 0x91, 0x66, 0x05, 0x90, 0x91, 0x67, 0x05, 0xA0, 0x91,
	0x68, 0x05, 0xB0, 0x91, 0x69, 0x05, 0x30, 0x91, 0x65, 0x05, 0x23, 0xE0,
	0x23, 0x0F, 0x2D, 0x37, 0x58, 0xF5, 0x01, 0x96, 0xA1, 0x1D, 0xB1, 0x1D,
	0x20, 0x93, 0x65, 0x05, 0x80, 0x93, 0x66, 0x05, 0x90, 0x93, 0x67, 0x05,
	0xA0, 0x93, 0x68, 0x05, 0xB0, 0x93, 0x69, 0x05, 0x80, 0x91, 0x6A, 0x05,
	0x90, 0x91, 0x6B, 0x05, 0xA0, 0x91, 0x6C, 0x05, 0xB0, 0x91, 0x6D, 0x05,
	0x01, 0x96, 0xA1, 0x1D, 0xB1, 0x1D, 0x80, 0x93, 0x6A, 0x05, 0x90, 0x93,
	0x6B, 0x05, 0xA0, 0x93, 0x6C, 0x05, 0xB0, 0x93, 0x6D, 0x05, 0xBF, 0x91,
	0xAF, 0x91, 0x9F, 0x91, 0x8F, 0x91, 0x3F, 0x91, 0x2F, 0x91, 0x0F, 0x90,
	0x0F, 0xBE, 0x0F, 0x90, 0x1F, 0x90, 0x18, 0x95, 0x26, 0xE8, 0x23, 0x0F,
	0x02, 0x96, 0xA1, 0x1D, 0xB1, 0x1D, 0xD2, 0xCF, 0x1F, 0x92, 0x0F, 0x92,
	0x0F, 0xB6, 0x0F, 0x92, 0x11, 0x24, 0x2F, 0x93, 0x3F, 0x93, 0x4F, 0x93,
	0x5F, 0x93, 0x6F, 0x93, 0x7F, 0x93, 0x8F, 0x93, 0x9F, 0x93, 0xAF, 0x93,
	0xBF, 0x93, 0xEF, 0x93, 0xFF, 0x93, 0x80, 0x91, 0xB9, 0x00, 0x88, 0x7F,
	0x80, 0x36, 0x09, 0xF4, 0x4A, 0xC0, 0xF0, 0xF5, 0x88, 0x32, 0x09, 0xF4,
	0xA4, 0xC0, 0x18, 0xF5, 0x80, 0x31, 0x09, 0xF4, 0x98, 0xC0, 0xB8, 0xF4,
	0x88, 0x23, 0x09, 0xF4, 0xF4, 0xC0, 0x88, 0x30, 0x09, 0xF4, 0x91, 0xC0,
	0xFF, 0x91, 0xEF, 0x91, 0xBF, 0x91, 0xAF, 0x91, 0x9F, 0x91, 0x8F, 0x91,
	0x7F, 0x91, 0x6F, 0x91, 0x5F, 0x91, 0x4F, 0x91, 0x3F, 0x91, 0x2F, 0x91,
	0x0F, 0x90, 0x0F, 0xBE, 0x0F, 0x90, 0x1F, 0x90, 0x18, 0x95, 0x88, 0x31,
	0x09, 0xF4, 0x85, 0xC0, 0x80, 0x32, 0x51, 0xF7, 0x80, 0x93, 0x5E, 0x03,
	0x14, 0xC0, 0x80, 0x34, 0x09, 0xF4, 0x9A, 0xC0, 0x40, 0xF4, 0x80, 0x33,
	0xB9, 0xF3, 0x88, 0x33, 0xF9, 0xF6, 0x80, 0x93, 0x5E, 0x03, 0x85, 0xEC,
	0xAD, 0xC0, 0x80, 0x35, 0x09, 0xF4, 0x82, 0xC0, 0x88, 0x35, 0x09, 0xF4,
	0x93, 0xC0, 0x88, 0x34, 0x99, 0xF6, 0x0E, 0x94, 0x7A, 0x07, 0xD0, 0xCF,
	0x88, 0x39, 0x09, 0xF4, 0x89, 0xC0, 0x20, 0xF5, 0x88, 0x37, 0x29, 0xF0,
	0x50, 0xF4, 0x88, 0x36, 0x11, 0xF0, 0x80, 0x37, 0x29, 0xF6, 0x83, 0xE0,
	0x80, 0x93, 0x5F, 0x03, 0x10, 0x92, 0x5D, 0x03, 0x54, 0xC0, 0x88, 0x38,
	0x09, 0xF4, 0x78, 0xC0, 0x80, 0x39, 0x19, 0xF0, 0x80, 0x38, 0x09, 0xF0,
	0xB7, 0xCF, 0x80, 0x91, 0x5D, 0x03, 0xE0, 0x91, 0x5D, 0x03, 0x81, 0xE0,
	0x8E, 0x0F, 0x80, 0x93, 0x5D, 0x03, 0x80, 0x91, 0xBB, 0x00, 0xF0, 0xE0,
	0xE3, 0x5A, 0xFD, 0x4F, 0x80, 0x83, 0x3D, 0xC0, 0x80, 0x3B, 0x39, 0xF0,
	0xE0, 0xF4, 0x80, 0x3A, 0x09, 0xF4, 0x79, 0xC0, 0x88, 0x3A, 0x09, 0xF0,
	0x9F, 0xCF, 0x84, 0xE0, 0x80, 0x93, 0x5F, 0x03, 0x10, 0x92, 0x5C, 0x02,
	0x10, 0x92, 0x5B, 0x02, 0xE0, 0x91, 0x87, 0x05, 0xF0, 0x91, 0x88, 0x05,
	0x09, 0x95, 0x80, 0x91, 0x5B, 0x02, 0x81, 0x11, 0x0F, 0xC0, 0x81, 0xE0,
	0x80, 0x93, 0x5B, 0x02, 0x10, 0x92, 0x5B, 0x01, 0x09, 0xC0, 0x80, 0x3C,
	0x09, 0xF4, 0xA9, 0xCF, 0x88, 0x3C, 0x09, 0xF4, 0xA6, 0xCF, 0x88, 0x3B,
	0x09, 0xF0, 0x80, 0xCF, 0xE0, 0x91, 0x5C, 0x02, 0x81, 0xE0, 0x8E, 0x0F,
	0x80, 0x93, 0x5C, 0x02, 0xF0, 0xE0, 0xE5, 0x5A, 0xFE, 0x4F, 0x80, 0x81,
	0x80, 0x93, 0xBB, 0x00, 0x90, 0x91, 0x5C, 0x02, 0x80, 0x91, 0x5B, 0x02,
	0x29, 0xC0, 0x80, 0x91, 0x64, 0x04, 0x80, 0x93, 0xBB, 0x00, 0x85, 0xEC,
	0x80, 0x93, 0xBC, 0x00, 0x67, 0xCF, 0x90, 0x91, 0x63, 0x04, 0x80, 0x91,
	0x62, 0x04, 0x98, 0x17, 0x58, 0xF5, 0xE0, 0x91, 0x63, 0x04, 0x81, 0xE0,
	0x8E, 0x0F, 0x80, 0x93, 0x63, 0x04, 0xF0, 0xE0, 0xEE, 0x59, 0xFC, 0x4F,
	0x80, 0x81, 0xE9, 0xCF, 0xE0, 0x91, 0x63, 0x04, 0x81, 0xE0, 0x8E, 0x0F,
	0x80, 0x93, 0x63, 0x04, 0x80, 0x91, 0xBB, 0x00, 0xF0, 0xE0, 0xEE, 0x59,
	0xFC, 0x4F, 0x80, 0x83, 0x90, 0x91, 0x63, 0x04, 0x80, 0x91, 0x62, 0x04,
	0x98, 0x17, 0xC8, 0xF2, 0x85, 0xE8, 0xD8, 0xCF, 0xE0, 0x91, 0x63, 0x04,
	0x81, 0xE0, 0x8E, 0x0F, 0x80, 0x93, 0x63, 0x04, 0x80, 0x91, 0xBB, 0x00,
	0xF0, 0xE0, 0xEE, 0x59, 0xFC, 0x4F, 0x80, 0x83, 0x80, 0x91, 0x61, 0x03,
	0x81, 0x11, 0x5F, 0xCF, 0x81, 0xE0, 0x80, 0x93, 0x60, 0x03, 0x84, 0xEA,
	0x80, 0x93, 0xBC, 0x00, 0x10, 0x92, 0x5F, 0x03, 0x29, 0xCF, 0x85, 0xEC,
	0x80, 0x93, 0xBC, 0x00, 0x10, 0x92, 0x5F, 0x03, 0x80, 0x91, 0x5D, 0x03,
	0xE0, 0x91, 0x5D, 0x03, 0xF0, 0xE0, 0xE3, 0x5A, 0xFD, 0x4F, 0x10, 0x82,
	0x60, 0x91, 0x5D, 0x03, 0x70, 0xE0, 0xE0, 0x91, 0x89, 0x05, 0xF0, 0x91,
	0x8A, 0x05, 0x8D, 0xE5, 0x92, 0xE0, 0x09, 0x95, 0x10, 0x92, 0x5D, 0x03,
	0x0F, 0xCF, 0x10, 0x92, 0x5E, 0x03, 0x39, 0xCF, 0xCF, 0x93, 0xDF, 0x93,
	0x10, 0x92, 0x9C, 0x05, 0x10, 0x92, 0x9B, 0x05, 0x88, 0xEE, 0x93, 0xE0,
	0xA0, 0xE0, 0xB0, 0xE0, 0x80, 0x93, 0x9D, 0x05, 0x90, 0x93, 0x9E, 0x05,
	0xA0, 0x93, 0x9F, 0x05, 0xB0, 0x93, 0xA0, 0x05, 0x2F, 0xE0, 0x31, 0xE0,
	0x30, 0x93, 0x9A, 0x05, 0x20, 0x93, 0x99, 0x05, 0x25, 0xEC, 0x30, 0xE0,
	0x30, 0x93, 0xA6, 0x05, 0x20, 0x93, 0xA5, 0x05, 0x24, 0xEC, 0x30, 0xE0,
	0x30, 0x93, 0xA8, 0x05, 0x20, 0x93, 0xA7, 0x05, 0x20, 0xEC, 0x30, 0xE0,
	0x30, 0x93, 0xAA, 0x05, 0x20, 0x93, 0xA9, 0x05, 0x21, 0xEC, 0x30, 0xE0,
	0x30, 0x93, 0xAC, 0x05, 0x20, 0x93, 0xAB, 0x05, 0x22, 0xEC, 0x30, 0xE0,
	0x30, 0x93, 0xAE, 0x05, 0x20, 0x93, 0xAD, 0x05, 0x26, 0xEC, 0x30, 0xE0,
	0x30, 0x93, 0xB0, 0x05, 0x20, 0x93, 0xAF, 0x05, 0x10, 0x92, 0xB2, 0x05,
	0x10, 0x92, 0xB3, 0x05, 0x10, 0x92, 0xB4, 0x05, 0x10, 0x92, 0xB5, 0x05,
	0x10, 0x92, 0x39, 0x06, 0x10, 0x92, 0x38, 0x06, 0x80, 0x93, 0x3A, 0x06,
	0x90, 0x93, 0x3B, 0x06, 0xA0, 0x93, 0x3C, 0x06, 0xB0, 0x93, 0x3D, 0x06,
	0x81, 0xE2, 0x91, 0xE0, 0x90, 0x93, 0x37, 0x06, 0x80, 0x93, 0x36, 0x06,
	0x10, 0x92, 0x43, 0x06, 0x10, 0x92, 0x4A, 0x06, 0x10, 0x92, 0x51, 0x06,
	0x10, 0x92, 0x52, 0x06, 0x10, 0x92, 0x53, 0x06, 0x10, 0x92, 0x54, 0x06,
	0x81, 0xE0, 0x80, 0x93, 0x50, 0x06, 0x80, 0x93, 0x4D, 0x06, 0x10, 0x92,
	0x4E, 0x06, 0x92, 0xE0, 0x90, 0x93, 0x4F, 0x06, 0x80, 0x93, 0x42, 0x06,
	0xCC, 0xE2, 0xD1, 0xE0, 0xD0, 0x93, 0x47, 0x06, 0xC0, 0x93, 0x46, 0x06,
	0x8C, 0xE2, 0x91, 0xE0, 0x0E, 0x94, 0x1B, 0x0F, 0x90, 0x93, 0x4C, 0x06,
	0x80, 0x93, 0x4B, 0x06, 0x00, 0x97, 0xA1, 0xF1, 0xFC, 0x01, 0x9E, 0x01,
	0x11, 0x92, 0x21, 0x50, 0x30, 0x40, 0xE1, 0xF7, 0x84, 0xE6, 0x90, 0xE0,
	0x90, 0x93, 0x45, 0x06, 0x80, 0x93, 0x44, 0x06, 0x82, 0xE0, 0x90, 0xE0,
	0x90, 0x93, 0x49, 0x06, 0x80, 0x93, 0x48, 0x06, 0x80, 0x91, 0x43, 0x06,
	0x88, 0x23, 0x41, 0xF0, 0x61, 0xE0, 0x82, 0xE0, 0x0E, 0x94, 0x81, 0x03,
	0x60, 0xE0, 0x82, 0xE0, 0x0E, 0x94, 0x35, 0x03, 0xEA, 0xEB, 0xF0, 0xE0,
	0xE4, 0x91, 0xF0, 0xE0, 0xEE, 0x0F, 0xFF, 0x1F, 0xE2, 0x55, 0xFF, 0x4F,
	0x85, 0x91, 0x94, 0x91, 0x90, 0x93, 0x56, 0x06, 0x80, 0x93, 0x55, 0x06,
	0xEC, 0xE9, 0xF0, 0xE0, 0xE4, 0x91, 0xE0, 0x93, 0x57, 0x06, 0xDF, 0x91,
	0xCF, 0x91, 0x08, 0x95, 0x10, 0x92, 0x47, 0x06, 0x10, 0x92, 0x46, 0x06,
	0x10, 0x92, 0x45, 0x06, 0x10, 0x92, 0x44, 0x06, 0xCF, 0xCF, 0x78, 0x94,
	0x84, 0xB5, 0x82, 0x60, 0x84, 0xBD, 0x84, 0xB5, 0x81, 0x60, 0x84, 0xBD,
	0x85, 0xB5, 0x82, 0x60, 0x85, 0xBD, 0x85, 0xB5, 0x81, 0x60, 0x85, 0xBD,
	0x80, 0x91, 0x6E, 0x00, 0x81, 0x60, 0x80, 0x93, 0x6E, 0x00, 0x10, 0x92,
	0x81, 0x00, 0x80, 0x91, 0x81, 0x00, 0x82, 0x60, 0x80, 0x93, 0x81, 0x00,
	0x80, 0x91, 0x81, 0x00, 0x81, 0x60, 0x80, 0x93, 0x81, 0x00, 0x80, 0x91,
	0x80, 0x00, 0x81, 0x60, 0x80, 0x93, 0x80, 0x00, 0x80, 0x91, 0xB1, 0x00,
	0x84, 0x60, 0x80, 0x93, 0xB1, 0x00, 0x80, 0x91, 0xB0, 0x00, 0x81, 0x60,
	0x80, 0x93, 0xB0, 0x00, 0x80, 0x91, 0x7A, 0x00, 0x84, 0x60, 0x80, 0x93,
	0x7A, 0x00, 0x80, 0x91, 0x7A, 0x00, 0x82, 0x60, 0x80, 0x93, 0x7A, 0x00,
	0x80, 0x91, 0x7A, 0x00, 0x81, 0x60, 0x80, 0x93, 0x7A, 0x00, 0x80, 0x91,
	0x7A, 0x00, 0x80, 0x68, 0x80, 0x93, 0x7A, 0x00, 0x10, 0x92, 0xC1, 0x00,
	0xE0, 0x91, 0xA9, 0x05, 0xF0, 0x91, 0xAA, 0x05, 0x82, 0xE0, 0x80, 0x83,
	0xE0, 0x91, 0xA5, 0x05, 0xF0, 0x91, 0xA6, 0x05, 0x10, 0x82, 0xE0, 0x91,
	0xA7, 0x05, 0xF0, 0x91, 0xA8, 0x05, 0x80, 0xE1, 0x80, 0x83, 0x10, 0x92,
	0xB1, 0x05, 0xE0, 0x91, 0xAD, 0x05, 0xF0, 0x91, 0xAE, 0x05, 0x86, 0xE0,
	0x80, 0x83, 0xE0, 0x91, 0xAB, 0x05, 0xF0, 0x91, 0xAC, 0x05, 0x80, 0x81,
	0x80, 0x61, 0x80, 0x83, 0xE0, 0x91, 0xAB, 0x05, 0xF0, 0x91, 0xAC, 0x05,
	0x80, 0x81, 0x88, 0x60, 0x80, 0x83, 0xE0, 0x91, 0xAB, 0x05, 0xF0, 0x91,
	0xAC, 0x05, 0x80, 0x81, 0x80, 0x68, 0x80, 0x83, 0xE0, 0x91, 0xAB, 0x05,
	0xF0, 0x91, 0xAC, 0x05, 0x80, 0x81, 0x8F, 0x7D, 0x80, 0x83, 0x80, 0xE4,
	0x80, 0x93, 0x7C, 0x00, 0x80, 0x91, 0x7A, 0x00, 0x80, 0x64, 0x80, 0x93,
	0x7A, 0x00, 0x80, 0x91, 0x7A, 0x00, 0x86, 0xFD, 0xFC, 0xCF, 0x80, 0x91,
	0x78, 0x00, 0x60, 0x91, 0x79, 0x00, 0x76, 0x2F, 0x68, 0x2F, 0x07, 0x2E,
	0x00, 0x0C, 0x88, 0x0B, 0x99, 0x0B, 0x61, 0x15, 0x71, 0x05, 0x81, 0x05,
	0x91, 0x05, 0x11, 0xF0, 0x0E, 0x94, 0x55, 0x0D, 0xCE, 0xE6, 0xD5, 0xE0,
	0x07, 0xE8, 0x15, 0xE0, 0xA9, 0xE0, 0xCA, 0x2E, 0xD1, 0x2C, 0xE1, 0x2C,
	0xF1, 0x2C, 0x0E, 0x94, 0x06, 0x0D, 0xA7, 0x01, 0x96, 0x01, 0x0E, 0x94,
	0x9D, 0x0E, 0x60, 0x5D, 0x7F, 0x4F, 0x8F, 0x4F, 0x9F, 0x4F, 0x69, 0x93,
	0x0C, 0x17, 0x1D, 0x07, 0x91, 0xF7, 0x10, 0x92, 0x86, 0x05, 0x0E, 0x94,
	0x06, 0x0D, 0x21, 0xE6, 0x30, 0xE0, 0x40, 0xE0, 0x50, 0xE0, 0x0E, 0x94,
	0x9D, 0x0E, 0x68, 0x5F, 0x7F, 0x4F, 0x8F, 0x4F, 0x9F, 0x4F, 0x70, 0x93,
	0x96, 0x05, 0x60, 0x93, 0x95, 0x05, 0xF1, 0xE6, 0xCF, 0x2E, 0xD1, 0x2C,
	0xE1, 0x2C, 0xF1, 0x2C, 0x80, 0x91, 0x95, 0x05, 0x90, 0x91, 0x96, 0x05,
	0x89, 0x97, 0x09, 0xF4, 0xBB, 0xC0, 0x80, 0x91, 0x95, 0x05, 0x90, 0x91,
	0x96, 0x05, 0xC0, 0x97, 0x09, 0xF4, 0xB4, 0xC0, 0x90, 0xE0, 0x80, 0xE0,
	0x0E, 0x94, 0x55, 0x0E, 0x8F, 0x3F, 0x09, 0xF0, 0xBC, 0xC0, 0x60, 0x91,
	0x95, 0x05, 0x70, 0x91, 0x96, 0x05, 0x90, 0xE0, 0x80, 0xE0, 0x0E, 0x94,
	0x5D, 0x0E, 0x8C, 0xE0, 0x80, 0x93, 0xB8, 0x00, 0xC0, 0x91, 0x95, 0x05,
	0xD0, 0x91, 0x96, 0x05, 0x10, 0x92, 0x8D, 0x05, 0x10, 0x92, 0x8C, 0x05,
	0x10, 0x92, 0x8B, 0x05, 0x0E, 0x94, 0x27, 0x05, 0x84, 0xEF, 0x91, 0xE0,
	0x90, 0x93, 0x88, 0x05, 0x80, 0x93, 0x87, 0x05, 0x8E, 0xEF, 0x91, 0xE0,
	0x90, 0x93, 0x8A, 0x05, 0x80, 0x93, 0x89, 0x05, 0xCC, 0x0F, 0xC0, 0x93,
	0xBA, 0x00, 0x8C, 0xEF, 0x95, 0xE0, 0x90, 0x93, 0x8F, 0x05, 0x80, 0x93,
	0x8E, 0x05, 0x8F, 0xED, 0x95, 0xE0, 0x90, 0x93, 0x91, 0x05, 0x80, 0x93,
	0x90, 0x05, 0x80, 0x91, 0x48, 0x06, 0x90, 0x91, 0x49, 0x06, 0x97, 0xFD,
	0x08, 0xC0, 0x61, 0xE0, 0x0E, 0x94, 0x81, 0x03, 0x60, 0xE0, 0x80, 0x91,
	0x48, 0x06, 0x0E, 0x94, 0x35, 0x03, 0x81, 0xE0, 0x80, 0x93, 0x43, 0x06,
	0x40, 0x91, 0x46, 0x06, 0x50, 0x91, 0x47, 0x06, 0x70, 0xE0, 0x60, 0xE0,
	0x80, 0x91, 0x4B, 0x06, 0x90, 0x91, 0x4C, 0x06, 0x0E, 0x94, 0x40, 0x10,
	0x0E, 0x94, 0xD7, 0x03, 0x60, 0xE0, 0x86, 0xE0, 0x0E, 0x94, 0x81, 0x03,
	0x71, 0xE6, 0x47, 0x2E, 0x51, 0x2C, 0x61, 0x2C, 0x71, 0x2C, 0xE0, 0xE0,
	0x2E, 0x2E, 0xE0, 0xE0, 0x3E, 0x2E, 0x80, 0x91, 0x98, 0x05, 0x88, 0x23,
	0x81, 0xF0, 0x40, 0x91, 0x46, 0x06, 0x50, 0x91, 0x47, 0x06, 0x70, 0xE0,
	0x60, 0xE0, 0x80, 0x91, 0x4B, 0x06, 0x90, 0x91, 0x4C, 0x06, 0x0E, 0x94,
	0x40, 0x10, 0x0E, 0x94, 0xD7, 0x03, 0x10, 0x92, 0x98, 0x05, 0x80, 0x91,
	0x97, 0x05, 0x88, 0x23, 0x09, 0xF4, 0x98, 0xC0, 0xC0, 0xE0, 0xD0, 0xE0,
	0x10, 0xE0, 0x00, 0xE0, 0xD1, 0x2C, 0xF1, 0x2C, 0xE1, 0x2C, 0x42, 0xE0,
	0xC4, 0x2E, 0xCC, 0x0E, 0x5D, 0xEF, 0xB5, 0x2E, 0xBD, 0x0E, 0x6E, 0xEF,
	0xA6, 0x2E, 0xAD, 0x0E, 0x99, 0x24, 0x93, 0x94, 0x9C, 0x0E, 0x88, 0x24,
	0x8A, 0x94, 0x8D, 0x0E, 0x80, 0x91, 0x44, 0x06, 0x90, 0x91, 0x45, 0x06,
	0xE8, 0x16, 0xF9, 0x06, 0x08, 0xF0, 0x4B, 0xC0, 0x8E, 0x2D, 0x80, 0x0F,
	0x85, 0x35, 0x68, 0xF5, 0x4C, 0x2F, 0x4D, 0x19, 0x50, 0xE0, 0x70, 0xE0,
	0x60, 0xE0, 0xBA, 0x01, 0x55, 0x27, 0x44, 0x27, 0x88, 0x2D, 0x8D, 0x0D,
	0x58, 0x2B, 0xC7, 0x01, 0x0E, 0x94, 0x92, 0x00, 0x2F, 0xEF, 0xE2, 0x1A,
	0xF2, 0x0A, 0x8D, 0xEF, 0xD8, 0x0E, 0xE0, 0xCF, 0x0E, 0x94, 0x06, 0x0D,
	0xA7, 0x01, 0x96, 0x01, 0x0E, 0x94, 0x9D, 0x0E, 0x68, 0x5F, 0x7F, 0x4F,
	0x8F, 0x4F, 0x9F, 0x4F, 0x70, 0x93, 0x96, 0x05, 0x60, 0x93, 0x95, 0x05,
	0x2F, 0xCF, 0x90, 0xE0, 0x80, 0xE0, 0x0E, 0x94, 0x55, 0x0E, 0x90, 0xE0,
	0x90, 0x93, 0x96, 0x05, 0x80, 0x93, 0x95, 0x05, 0x42, 0xCF, 0x8A, 0x3A,
	0x60, 0xF4, 0x4A, 0x2D, 0x4D, 0x0D, 0x50, 0xE0, 0x70, 0xE0, 0x60, 0xE0,
	0xBA, 0x01, 0x55, 0x27, 0x44, 0x27, 0x89, 0x2D, 0x8D, 0x19, 0x48, 0x2B,
	0xD0, 0xCF, 0x4C, 0x2D, 0x4D, 0x19, 0x50, 0xE0, 0x70, 0xE0, 0x60, 0xE0,
	0x76, 0x2F, 0x65, 0x2F, 0x54, 0x2F, 0x44, 0x27, 0x8B, 0x2D, 0x8D, 0x0D,
	0xF2, 0xCF, 0x0E, 0x94, 0xD7, 0x03, 0x0E, 0x94, 0xB2, 0x03, 0x4B, 0x01,
	0x5C, 0x01, 0x85, 0xE0, 0xC8, 0x2E, 0xD1, 0x2C, 0xE1, 0x2C, 0xF1, 0x2C,
	0x0E, 0x94, 0xB2, 0x03, 0x68, 0x19, 0x79, 0x09, 0x8A, 0x09, 0x9B, 0x09,
	0x68, 0x3E, 0x73, 0x40, 0x81, 0x05, 0x91, 0x05, 0xA8, 0xF3, 0x91, 0xE0,
	0xC9, 0x1A, 0xD1, 0x08, 0xE1, 0x08, 0xF1, 0x08, 0xE8, 0xEE, 0x8E, 0x0E,
	0xE3, 0xE0, 0x9E, 0x1E, 0xA1, 0x1C, 0xB1, 0x1C, 0xC1, 0x14, 0xD1, 0x04,
	0xE1, 0x04, 0xF1, 0x04, 0x29, 0xF7, 0x0F, 0x5F, 0x1F, 0x4F, 0xD3, 0x50,
	0xCD, 0x5F, 0x01, 0x15, 0x21, 0xE0, 0x12, 0x07, 0x09, 0xF0, 0x6C, 0xCF,
	0x80, 0x91, 0x00, 0x01, 0x81, 0x11, 0x6E, 0xC0, 0xC6, 0xE8, 0xD0, 0xE0,
	0xFE, 0x01, 0x64, 0x91, 0x66, 0x23, 0x39, 0xF0, 0x89, 0xE9, 0x95, 0xE0,
	0x0E, 0x94, 0xC8, 0x02, 0x21, 0x96, 0x89, 0x2B, 0xA9, 0xF7, 0x80, 0x91,
	0x95, 0x05, 0x90, 0x91, 0x96, 0x05, 0x0E, 0x94, 0x54, 0x05, 0x0E, 0x94,
	0x06, 0x0D, 0xA3, 0x01, 0x92, 0x01, 0x0E, 0x94, 0x9D, 0x0E, 0x68, 0x5F,
	0x7F, 0x4F, 0x8F, 0x4F, 0x9F, 0x4F, 0x70, 0x93, 0x96, 0x05, 0x60, 0x93,
	0x95, 0x05, 0x80, 0x91, 0x95, 0x05, 0x90, 0x91, 0x96, 0x05, 0x89, 0x97,
	0x61, 0xF3, 0x80, 0x91, 0x95, 0x05, 0x90, 0x91, 0x96, 0x05, 0xC0, 0x97,
	0x31, 0xF3, 0x60, 0x91, 0x95, 0x05, 0x70, 0x91, 0x96, 0x05, 0x90, 0xE0,
	0x80, 0xE0, 0x0E, 0x94, 0x5D, 0x0E, 0x80, 0x91, 0x95, 0x05, 0x90, 0x91,
	0x96, 0x05, 0x0E, 0x94, 0x54, 0x05, 0x0E, 0x94, 0x1A, 0x05, 0xFC, 0xE0,
	0xF0, 0x93, 0xB8, 0x00, 0xC0, 0x91, 0x95, 0x05, 0xD0, 0x91, 0x96, 0x05,
	0x10, 0x92, 0x8D, 0x05, 0x10, 0x92, 0x8C, 0x05, 0x10, 0x92, 0x8B, 0x05,
	0x0E, 0x94, 0x27, 0x05, 0x84, 0xEF, 0x91, 0xE0, 0x90, 0x93, 0x88, 0x05,
	0x80, 0x93, 0x87, 0x05, 0xEE, 0xEF, 0xF1, 0xE0, 0xF0, 0x93, 0x8A, 0x05,
	0xE0, 0x93, 0x89, 0x05, 0xCC, 0x0F, 0xC0, 0x93, 0xBA, 0x00, 0x8C, 0xEF,
	0x95, 0xE0, 0x90, 0x93, 0x8F, 0x05, 0x80, 0x93, 0x8E, 0x05, 0xEF, 0xED,
	0xF5, 0xE0, 0xF0, 0x93, 0x91, 0x05, 0xE0, 0x93, 0x90, 0x05, 0x10, 0x92,
	0x94, 0x05, 0x10, 0x92, 0x93, 0x05, 0xF1, 0xE0, 0xF0, 0x93, 0x00, 0x01,
	0x80, 0x91, 0x92, 0x05, 0x88, 0x23, 0x21, 0xF0, 0x10, 0x92, 0x92, 0x05,
	0x0E, 0x94, 0xD7, 0x03, 0x21, 0x14, 0x31, 0x04, 0x09, 0xF4, 0xD1, 0xCE,
	0x0E, 0x94, 0x92, 0x02, 0x88, 0x23, 0x09, 0xF4, 0xCC, 0xCE, 0x0E, 0x94,
	0x00, 0x00, 0xC9, 0xCE, 0x80, 0x91, 0x4B, 0x06, 0x90, 0x91, 0x4C, 0x06,
	0x0E, 0x94, 0xB7, 0x0F, 0x80, 0x91, 0x48, 0x06, 0x90, 0x91, 0x49, 0x06,
	0x97, 0xFD, 0x03, 0xC0, 0x60, 0xE0, 0x0C, 0x94, 0x81, 0x03, 0x08, 0x95,
	0x8F, 0x92, 0x9F, 0x92, 0xAF, 0x92, 0xBF, 0x92, 0xCF, 0x92, 0xDF, 0x92,
	0xEF, 0x92, 0xFF, 0x92, 0xCF, 0x93, 0xDF, 0x93, 0xEC, 0x01, 0x68, 0x81,
	0x79, 0x81, 0x8A, 0x81, 0x9B, 0x81, 0x61, 0x15, 0x71, 0x05, 0x81, 0x05,
	0x91, 0x05, 0x21, 0xF4, 0x64, 0xE2, 0x79, 0xED, 0x8B, 0xE5, 0x97, 0xE0,
	0x2D, 0xE1, 0x33, 0xEF, 0x41, 0xE0, 0x50, 0xE0, 0x0E, 0x94, 0x9D, 0x0E,
	0x49, 0x01, 0x5A, 0x01, 0x9B, 0x01, 0xAC, 0x01, 0xA7, 0xEA, 0xB1, 0xE4,
	0x0E, 0x94, 0xBC, 0x0E, 0x6B, 0x01, 0x7C, 0x01, 0xAC, 0xEE, 0xB4, 0xEF,
	0xA5, 0x01, 0x94, 0x01, 0x0E, 0x94, 0xCA, 0x0E, 0xC6, 0x0E, 0xD7, 0x1E,
	0xE8, 0x1E, 0xF9, 0x1E, 0xF7, 0xFE, 0x06, 0xC0, 0x81, 0xE0, 0xC8, 0x1A,
	0xD1, 0x08, 0xE1, 0x08, 0x80, 0xE8, 0xF8, 0x0A, 0xC8, 0x82, 0xD9, 0x82,
	0xEA, 0x82, 0xFB, 0x82, 0xC7, 0x01, 0xB6, 0x01, 0x9F, 0x77, 0xDF, 0x91,
	0xCF, 0x91, 0xFF, 0x90, 0xEF, 0x90, 0xDF, 0x90, 0xCF, 0x90, 0xBF, 0x90,
	0xAF, 0x90, 0x9F, 0x90, 0x8F, 0x90, 0x08, 0x95, 0x8F, 0x92, 0x9F, 0x92,
	0xAF, 0x92, 0xBF, 0x92, 0xCF, 0x92, 0xDF, 0x92, 0xEF, 0x92, 0xFF, 0x92,
	0x60, 0x91, 0x01, 0x01, 0x70, 0x91, 0x02, 0x01, 0x80, 0x91, 0x03, 0x01,
	0x90, 0x91, 0x04, 0x01, 0x61, 0x15, 0x71, 0x05, 0x81, 0x05, 0x91, 0x05,
	0x21, 0xF4, 0x64, 0xE2, 0x79, 0xED, 0x8B, 0xE5, 0x97, 0xE0, 0x2D, 0xE1,
	0x33, 0xEF, 0x41, 0xE0, 0x50, 0xE0, 0x0E, 0x94, 0x9D, 0x0E, 0x49, 0x01,
	0x5A, 0x01, 0x9B, 0x01, 0xAC, 0x01, 0xA7, 0xEA, 0xB1, 0xE4, 0x0E, 0x94,
	0xBC, 0x0E, 0x6B, 0x01, 0x7C, 0x01, 0xAC, 0xEE, 0xB4, 0xEF, 0xA5, 0x01,
	0x94, 0x01, 0x0E, 0x94, 0xCA, 0x0E, 0xC6, 0x0E, 0xD7, 0x1E, 0xE8, 0x1E,
	0xF9, 0x1E, 0xF7, 0xFE, 0x06, 0xC0, 0x81, 0xE0, 0xC8, 0x1A, 0xD1, 0x08,
	0xE1, 0x08, 0x80, 0xE8, 0xF8, 0x0A, 0xC0, 0x92, 0x01, 0x01, 0xD0, 0x92,
	0x02, 0x01, 0xE0, 0x92, 0x03, 0x01, 0xF0, 0x92, 0x04, 0x01, 0xC7, 0x01,
	0xB6, 0x01, 0x9F, 0x77, 0xFF, 0x90, 0xEF, 0x90, 0xDF, 0x90, 0xCF, 0x90,
	0xBF, 0x90, 0xAF, 0x90, 0x9F, 0x90, 0x8F, 0x90, 0x08, 0x95, 0x60, 0x93,
	0x01, 0x01, 0x70, 0x93, 0x02, 0x01, 0x80, 0x93, 0x03, 0x01, 0x90, 0x93,
	0x04, 0x01, 0x08, 0x95, 0xB0, 0xE0, 0xA0, 0xE0, 0xE4, 0xE6, 0xFD, 0xE0,
	0x0C, 0x94, 0xD0, 0x0E, 0x5C, 0x01, 0x6B, 0x01, 0x7A, 0x01, 0x61, 0x15,
	0x71, 0x05, 0x19, 0xF0, 0xFB, 0x01, 0x91, 0x83, 0x80, 0x83, 0xE1, 0x14,
	0xF1, 0x04, 0x49, 0xF0, 0xC7, 0x01, 0x02, 0x97, 0x83, 0x97, 0x28, 0xF0,
	0x60, 0xE0, 0x70, 0xE0, 0xCB, 0x01, 0x9C, 0xC0, 0x5E, 0x01, 0xE5, 0x01,
	0x21, 0x96, 0xF5, 0x01, 0x10, 0x81, 0x81, 0x2F, 0x90, 0xE0, 0x0E, 0x94,
	0x49, 0x0E, 0x89, 0x2B, 0xA9, 0xF7, 0x1D, 0x32, 0x09, 0xF0, 0x56, 0xC0,
	0x21, 0x96, 0xF5, 0x01, 0x11, 0x81, 0x01, 0xE0, 0xE1, 0x14, 0xF1, 0x04,
	0x09, 0xF4, 0xAE, 0xC0, 0xF0, 0xE1, 0xEF, 0x16, 0xF1, 0x04, 0x09, 0xF0,
	0x8E, 0xC0, 0x10, 0x33, 0x41, 0xF4, 0x88, 0x81, 0x8F, 0x7D, 0x88, 0x35,
	0x09, 0xF0, 0x83, 0xC0, 0x19, 0x81, 0x22, 0x96, 0x02, 0x60, 0xE0, 0xE1,
	0xEE, 0x2E, 0xF1, 0x2C, 0x88, 0x24, 0x8A, 0x94, 0x98, 0x2C, 0xA8, 0x2C,
	0xFF, 0xE0, 0xBF, 0x2E, 0x20, 0xE0, 0x60, 0xE0, 0x70, 0xE0, 0xCB, 0x01,
	0x27, 0x01, 0x0F, 0x2C, 0x00, 0x0C, 0x66, 0x08, 0x77, 0x08, 0xFE, 0x01,
	0x50, 0xED, 0x35, 0x2E, 0x31, 0x0E, 0x39, 0xE0, 0x33, 0x15, 0x38, 0xF4,
	0x3F, 0xEB, 0x31, 0x0F, 0x3A, 0x31, 0xA0, 0xF5, 0x49, 0xEC, 0x34, 0x2E,
	0x31, 0x0E, 0x3E, 0x14, 0x1F, 0x04, 0xBC, 0xF5, 0x2F, 0x3F, 0xB9, 0xF0,
	0x86, 0x16, 0x97, 0x06, 0xA8, 0x06, 0xB9, 0x06, 0x70, 0xF1, 0xA3, 0x01,
	0x92, 0x01, 0x0E, 0x94, 0x6B, 0x0E, 0x23, 0x2D, 0x30, 0xE0, 0x50, 0xE0,
	0x40, 0xE0, 0x62, 0x0F, 0x73, 0x1F, 0x84, 0x1F, 0x95, 0x1F, 0x62, 0x17,
	0x73, 0x07, 0x84, 0x07, 0x95, 0x07, 0xE8, 0xF0, 0x21, 0xE0, 0x21, 0x96,
	0x10, 0x81, 0xD3, 0xCF, 0x1B, 0x32, 0x21, 0xF4, 0xE5, 0x01, 0x22, 0x96,
	0xF5, 0x01, 0x11, 0x81, 0x00, 0xE0, 0xA6, 0xCF, 0x78, 0xE0, 0xE7, 0x2E,
	0xF1, 0x2C, 0x88, 0x24, 0x8A, 0x94, 0x98, 0x2C, 0xA8, 0x2C, 0x6F, 0xE1,
	0xB6, 0x2E, 0xB8, 0xCF, 0x3F, 0xE9, 0x31, 0x0F, 0x3A, 0x31, 0x28, 0xF4,
	0x39, 0xEA, 0x33, 0x2E, 0xC7, 0xCF, 0x2F, 0xEF, 0xE2, 0xCF, 0xC1, 0x14,
	0xD1, 0x04, 0x31, 0xF0, 0x22, 0x23, 0xE9, 0xF0, 0x21, 0x97, 0xF6, 0x01,
	0xD1, 0x83, 0xC0, 0x83, 0x00, 0xFF, 0x07, 0xC0, 0x90, 0x95, 0x80, 0x95,
	0x70, 0x95, 0x61, 0x95, 0x7F, 0x4F, 0x8F, 0x4F, 0x9F, 0x4F, 0x2F, 0x3F,
	0x49, 0xF4, 0x82, 0xE2, 0x90, 0xE0, 0x90, 0x93, 0x59, 0x06, 0x80, 0x93,
	0x58, 0x06, 0x6F, 0xEF, 0x7F, 0xEF, 0xCB, 0x01, 0xCD, 0xB7, 0xDE, 0xB7,
	0xE1, 0xE1, 0x0C, 0x94, 0xEC, 0x0E, 0x01, 0xFF, 0xE5, 0xCF, 0x22, 0x97,
	0xE0, 0xCF, 0x10, 0xE3, 0xE1, 0x14, 0xF1, 0x04, 0x19, 0xF2, 0x3A, 0xE0,
	0xE3, 0x16, 0xF1, 0x04, 0xE9, 0xF0, 0x80, 0xE1, 0xE8, 0x16, 0xF1, 0x04,
	0x09, 0xF4, 0x73, 0xCF, 0xE8, 0xE0, 0xEE, 0x16, 0xF1, 0x04, 0x09, 0xF4,
	0xB8, 0xCF, 0x6F, 0xEF, 0x7F, 0xEF, 0xCB, 0x01, 0x97, 0x01, 0x0F, 0x2C,
	0x00, 0x0C, 0x44, 0x0B, 0x55, 0x0B, 0x0E, 0x94, 0x7B, 0x0E, 0x49, 0x01,
	0x5A, 0x01, 0x6A, 0xCF, 0x10, 0x33, 0x09, 0xF4, 0x56, 0xCF, 0x9A, 0xE0,
	0xE9, 0x2E, 0xF1, 0x2C, 0x89, 0xE9, 0x88, 0x2E, 0x98, 0x2C, 0xA8, 0x2C,
	0x89, 0xE1, 0xB8, 0x2E, 0x5D, 0xCF, 0x91, 0x11, 0x0C, 0x94, 0x52, 0x0E,
	0x80, 0x32, 0x19, 0xF0, 0x89, 0x50, 0x85, 0x50, 0xC8, 0xF7, 0x08, 0x95,
	0x99, 0x27, 0x88, 0x27, 0x08, 0x95, 0xF9, 0x99, 0xFE, 0xCF, 0x92, 0xBD,
	0x81, 0xBD, 0xF8, 0x9A, 0x99, 0x27, 0x80, 0xB5, 0x08, 0x95, 0x26, 0x2F,
	0xF9, 0x99, 0xFE, 0xCF, 0x1F, 0xBA, 0x92, 0xBD, 0x81, 0xBD, 0x20, 0xBD,
	0x0F, 0xB6, 0xF8, 0x94, 0xFA, 0x9A, 0xF9, 0x9A, 0x0F, 0xBE, 0x01, 0x96,
	0x08, 0x95, 0xDB, 0x01, 0x8F, 0x93, 0x9F, 0x93, 0x0E, 0x94, 0xBC, 0x0E,
	0xBF, 0x91, 0xAF, 0x91, 0xA2, 0x9F, 0x80, 0x0D, 0x91, 0x1D, 0xA3, 0x9F,
	0x90, 0x0D, 0xB2, 0x9F, 0x90, 0x0D, 0x11, 0x24, 0x08, 0x95, 0xA1, 0xE2,
	0x1A, 0x2E, 0xAA, 0x1B, 0xBB, 0x1B, 0xFD, 0x01, 0x0D, 0xC0, 0xAA, 0x1F,
	0xBB, 0x1F, 0xEE, 0x1F, 0xFF, 0x1F, 0xA2, 0x17, 0xB3, 0x07, 0xE4, 0x07,
	0xF5, 0x07, 0x20, 0xF0, 0xA2, 0x1B, 0xB3, 0x0B, 0xE4, 0x0B, 0xF5, 0x0B,
	0x66, 0x1F, 0x77, 0x1F, 0x88, 0x1F, 0x99, 0x1F, 0x1A, 0x94, 0x69, 0xF7,
	0x60, 0x95, 0x70, 0x95, 0x80, 0x95, 0x90, 0x95, 0x9B, 0x01, 0xAC, 0x01,
	0xBD, 0x01, 0xCF, 0x01, 0x08, 0x95, 0x05, 0x2E, 0x97, 0xFB, 0x1E, 0xF4,
	0x00, 0x94, 0x0E, 0x94, 0xB4, 0x0E, 0x57, 0xFD, 0x07, 0xD0, 0x0E, 0x94,
	0x7B, 0x0E, 0x07, 0xFC, 0x03, 0xD0, 0x4E, 0xF4, 0x0C, 0x94, 0xB4, 0x0E,
	0x50, 0x95, 0x40, 0x95, 0x30, 0x95, 0x21, 0x95, 0x3F, 0x4F, 0x4F, 0x4F,
	0x5F, 0x4F, 0x08, 0x95, 0x90, 0x95, 0x80, 0x95, 0x70, 0x95, 0x61, 0x95,
	0x7F, 0x4F, 0x8F, 0x4F, 0x9F, 0x4F, 0x08, 0x95, 0x0E, 0x94, 0x06, 0x0F,
	0xA5, 0x9F, 0x90, 0x0D, 0xB4, 0x9F, 0x90, 0x0D, 0xA4, 0x9F, 0x80, 0x0D,
	0x91, 0x1D, 0x11, 0x24, 0x08, 0x95, 0xB7, 0xFF, 0x0C, 0x94, 0xBC, 0x0E,
	0x0E, 0x94, 0xBC, 0x0E, 0x82, 0x1B, 0x93, 0x0B, 0x08, 0x95, 0x2F, 0x92,
	0x3F, 0x92, 0x4F, 0x92, 0x5F, 0x92, 0x6F, 0x92, 0x7F, 0x92, 0x8F, 0x92,
	0x9F, 0x92, 0xAF, 0x92, 0xBF, 0x92, 0xCF, 0x92, 0xDF, 0x92, 0xEF, 0x92,
	0xFF, 0x92, 0x0F, 0x93, 0x1F, 0x93, 0xCF, 0x93, 0xDF, 0x93, 0xCD, 0xB7,
	0xDE, 0xB7, 0xCA, 0x1B, 0xDB, 0x0B, 0x0F, 0xB6, 0xF8, 0x94, 0xDE, 0xBF,
	0x0F, 0xBE, 0xCD, 0xBF, 0x09, 0x94, 0x2A, 0x88, 0x39, 0x88, 0x48, 0x88,
	0x5F, 0x84, 0x6E, 0x84, 0x7D, 0x84, 0x8C, 0x84, 0x9B, 0x84, 0xAA, 0x84,
	0xB9, 0x84, 0xC8, 0x84, 0xDF, 0x80, 0xEE, 0x80, 0xFD, 0x80, 0x0C, 0x81,
	0x1B, 0x81, 0xAA, 0x81, 0xB9, 0x81, 0xCE, 0x0F, 0xD1, 0x1D, 0x0F, 0xB6,
	0xF8, 0x94, 0xDE, 0xBF, 0x0F, 0xBE, 0xCD, 0xBF, 0xED, 0x01, 0x08, 0x95,
	0xA2, 0x9F, 0xB0, 0x01, 0xB3, 0x9F, 0xC0, 0x01, 0xA3, 0x9F, 0x70, 0x0D,
	0x81, 0x1D, 0x11, 0x24, 0x91, 0x1D, 0xB2, 0x9F, 0x70, 0x0D, 0x81, 0x1D,
	0x11, 0x24, 0x91, 0x1D, 0x08, 0x95, 0xEE, 0x0F, 0xFF, 0x1F, 0x05, 0x90,
	0xF4, 0x91, 0xE0, 0x2D, 0x09, 0x94, 0x0F, 0x93, 0x1F, 0x93, 0xCF, 0x93,
	0xDF, 0x93, 0x82, 0x30, 0x91, 0x05, 0x10, 0xF4, 0x82, 0xE0, 0x90, 0xE0,
	0xE0, 0x91, 0x5C, 0x06, 0xF0, 0x91, 0x5D, 0x06, 0x30, 0xE0, 0x20, 0xE0,
	0xB0, 0xE0, 0xA0, 0xE0, 0x30, 0x97, 0x99, 0xF4, 0x21, 0x15, 0x31, 0x05,
	0x09, 0xF4, 0x4A, 0xC0, 0x28, 0x1B, 0x39, 0x0B, 0x24, 0x30, 0x31, 0x05,
	0xD8, 0xF5, 0x8A, 0x81, 0x9B, 0x81, 0x61, 0x15, 0x71, 0x05, 0x89, 0xF1,
	0xFB, 0x01, 0x93, 0x83, 0x82, 0x83, 0xFE, 0x01, 0x11, 0xC0, 0x40, 0x81,
	0x51, 0x81, 0x02, 0x81, 0x13, 0x81, 0x48, 0x17, 0x59, 0x07, 0xE0, 0xF0,
	0x48, 0x17, 0x59, 0x07, 0x99, 0xF4, 0x10, 0x97, 0x61, 0xF0, 0x12, 0x96,
	0x0C, 0x93, 0x12, 0x97, 0x13, 0x96, 0x1C, 0x93, 0x32, 0x96, 0xCF, 0x01,
	0xDF, 0x91, 0xCF, 0x91, 0x1F, 0x91, 0x0F, 0x91, 0x08, 0x95, 0x00, 0x93,
	0x5C, 0x06, 0x10, 0x93, 0x5D, 0x06, 0xF4, 0xCF, 0x21, 0x15, 0x31, 0x05,
	0x51, 0xF0, 0x42, 0x17, 0x53, 0x07, 0x38, 0xF0, 0xA9, 0x01, 0xDB, 0x01,
	0x9A, 0x01, 0xBD, 0x01, 0xDF, 0x01, 0xF8, 0x01, 0xC1, 0xCF, 0xEF, 0x01,
	0xF9, 0xCF, 0x90, 0x93, 0x5D, 0x06, 0x80, 0x93, 0x5C, 0x06, 0xCD, 0xCF,
	0xFE, 0x01, 0xE2, 0x0F, 0xF3, 0x1F, 0x81, 0x93, 0x91, 0x93, 0x22, 0x50,
	0x31, 0x09, 0x39, 0x83, 0x28, 0x83, 0xD7, 0xCF, 0x20, 0x91, 0x5A, 0x06,
	0x30, 0x91, 0x5B, 0x06, 0x23, 0x2B, 0x41, 0xF4, 0x20, 0x91, 0x07, 0x01,
	0x30, 0x91, 0x08, 0x01, 0x30, 0x93, 0x5B, 0x06, 0x20, 0x93, 0x5A, 0x06,
	0x20, 0x91, 0x05, 0x01, 0x30, 0x91, 0x06, 0x01, 0x21, 0x15, 0x31, 0x05,
	0x41, 0xF4, 0x2D, 0xB7, 0x3E, 0xB7, 0x40, 0x91, 0x09, 0x01, 0x50, 0x91,
	0x0A, 0x01, 0x24, 0x1B, 0x35, 0x0B, 0xE0, 0x91, 0x5A, 0x06, 0xF0, 0x91,
	0x5B, 0x06, 0xE2, 0x17, 0xF3, 0x07, 0xA0, 0xF4, 0x2E, 0x1B, 0x3F, 0x0B,
	0x28, 0x17, 0x39, 0x07, 0x78, 0xF0, 0xAC, 0x01, 0x4E, 0x5F, 0x5F, 0x4F,
	0x24, 0x17, 0x35, 0x07, 0x48, 0xF0, 0x4E, 0x0F, 0x5F, 0x1F, 0x50, 0x93,
	0x5B, 0x06, 0x40, 0x93, 0x5A, 0x06, 0x81, 0x93, 0x91, 0x93, 0x9F, 0xCF,
	0xF0, 0xE0, 0xE0, 0xE0, 0x9C, 0xCF, 0xCF, 0x93, 0xDF, 0x93, 0x00, 0x97,
	0xE9, 0xF0, 0xFC, 0x01, 0x32, 0x97, 0x13, 0x82, 0x12, 0x82, 0xA0, 0x91,
	0x5C, 0x06, 0xB0, 0x91, 0x5D, 0x06, 0xED, 0x01, 0x30, 0xE0, 0x20, 0xE0,
	0x10, 0x97, 0xA1, 0xF4, 0x20, 0x81, 0x31, 0x81, 0x82, 0x0F, 0x93, 0x1F,
	0x20, 0x91, 0x5A, 0x06, 0x30, 0x91, 0x5B, 0x06, 0x28, 0x17, 0x39, 0x07,
	0x09, 0xF0, 0x61, 0xC0, 0xF0, 0x93, 0x5B, 0x06, 0xE0, 0x93, 0x5A, 0x06,
	0xDF, 0x91, 0xCF, 0x91, 0x08, 0x95, 0xEA, 0x01, 0xCE, 0x17, 0xDF, 0x07,
	0xE8, 0xF5, 0x4A, 0x81, 0x5B, 0x81, 0x9E, 0x01, 0x41, 0x15, 0x51, 0x05,
	0xB1, 0xF7, 0xE9, 0x01, 0xFB, 0x83, 0xEA, 0x83, 0x49, 0x91, 0x59, 0x91,
	0xC4, 0x0F, 0xD5, 0x1F, 0xEC, 0x17, 0xFD, 0x07, 0x61, 0xF4, 0x80, 0x81,
	0x91, 0x81, 0x02, 0x96, 0x84, 0x0F, 0x95, 0x1F, 0xE9, 0x01, 0x99, 0x83,
	0x88, 0x83, 0x82, 0x81, 0x93, 0x81, 0x9B, 0x83, 0x8A, 0x83, 0xF0, 0xE0,
	0xE0, 0xE0, 0x12, 0x96, 0x8D, 0x91, 0x9C, 0x91, 0x13, 0x97, 0x00, 0x97,
	0xB9, 0xF5, 0x2D, 0x91, 0x3C, 0x91, 0x11, 0x97, 0xCD, 0x01, 0x02, 0x96,
	0x82, 0x0F, 0x93, 0x1F, 0x20, 0x91, 0x5A, 0x06, 0x30, 0x91, 0x5B, 0x06,
	0x28, 0x17, 0x39, 0x07, 0x39, 0xF6, 0x30, 0x97, 0x51, 0xF5, 0x10, 0x92,
	0x5D, 0x06, 0x10, 0x92, 0x5C, 0x06, 0xB0, 0x93, 0x5B, 0x06, 0xA0, 0x93,
	0x5A, 0x06, 0xBC, 0xCF, 0xD3, 0x83, 0xC2, 0x83, 0x40, 0x81, 0x51, 0x81,
	0x84, 0x0F, 0x95, 0x1F, 0xC8, 0x17, 0xD9, 0x07, 0x61, 0xF4, 0x4E, 0x5F,
	0x5F, 0x4F, 0x88, 0x81, 0x99, 0x81, 0x48, 0x0F, 0x59, 0x1F, 0x51, 0x83,
	0x40, 0x83, 0x8A, 0x81, 0x9B, 0x81, 0x93, 0x83, 0x82, 0x83, 0x21, 0x15,
	0x31, 0x05, 0x09, 0xF0, 0xB0, 0xCF, 0xF0, 0x93, 0x5D, 0x06, 0xE0, 0x93,
	0x5C, 0x06, 0x9E, 0xCF, 0xFD, 0x01, 0xDC, 0x01, 0xC0, 0xCF, 0x13, 0x82,
	0x12, 0x82, 0xD7, 0xCF, 0xDC, 0x01, 0x01, 0xC0, 0x6D, 0x93, 0x41, 0x50,
	0x50, 0x40, 0xE0, 0xF7, 0x08, 0x95, 0x10, 0xE0, 0xC7, 0xE6, 0xD0, 0xE0,
	0x04, 0xC0, 0xFE, 0x01, 0x0E, 0x94, 0x15, 0x0F, 0x21, 0x96, 0xC8, 0x36,
	0xD1, 0x07, 0xC9, 0xF7, 0xF8, 0x94, 0xFF, 0xCF, 0x01, 0x01, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x5E, 0x06, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC8,
	0x02, 0x28, 0x02, 0x55, 0x02, 0x15, 0x03, 0x86, 0x02, 0x64, 0x02, 0x78,
	0x02, 0x00, 0x00, 0x00, 0x00, 0x09, 0x05, 0xFE, 0x04, 0xD4, 0x04, 0xAA,
	0x04, 0xCD, 0x04, 0xBA, 0x04, 0xAB, 0x04, 0x0D, 0x0A, 0x00, 0x70, 0x61,
	0x73, 0x73, 0x00, 0x66, 0x61, 0x69, 0x6C, 0x00, 0x44, 0x61, 0x74, 0x61,
	0x20, 0x72, 0x65, 0x63, 0x69, 0x65, 0x76, 0x65, 0x64, 0x3A, 0x20, 0x00
};

/*
all loop segment sizes must be the same
brown line receives all loop data for cta
no output segment can be 1, 12, or 24 pixels long, causes conflict with slave protocol
*/

// Chinatown to North/Clybourn
Railway redLineCTA = Railway(
    // checkpoints in order starting at slave position, should be a checkpoint at each bend/turn, no 3 adxacent checkpoints can form an angle smaller than 90 degrees
    {Checkpoint(41.853028, -87.63109), Checkpoint(41.9041, -87.628921), Checkpoint(41.903888, -87.639506), Checkpoint(41.913732, -87.652380), Checkpoint(41.9253, -87.65286)},
    {25, 3, 7, 5}, // pixels in between each checkpoint, should have 1 less element than checkpoint vector
    {0, 40, 0, 0}, // size of each output segment: before loop, after loop, in loop, in green
    "red",
    {"ff0000", "0a0000"}, // hex color values for head and body/tail of the train
    {0, 0, 0, 0}          // checkpoint bounds for lower loop, upper loop, lower green, upper green, these are only used for merging different rail colors onto one track
);

// Pulaski to Western (O'Hare branch)
Railway blueLineCTA = Railway(
    {Checkpoint(41.873647, -87.727931), Checkpoint(41.875666, -87.672961), Checkpoint(41.875293, -87.640976), Checkpoint(41.875660, -87.627620), Checkpoint(41.885738, -87.629540), Checkpoint(41.885698, -87.639828), Checkpoint(41.915497, -87.686258)},
    {12, 8, 5, 5, 5, 25},
    {0, 60, 0, 0},
    "blue",
    {"0000ff", "00000a"},
    {0, 0, 0, 0}
);

// Sedgewick to Loop
Railway brownLineCTA = Railway(
    {Checkpoint(41.9107586, -87.648068), Checkpoint(41.9103656, -87.6373962), Checkpoint(41.885840, -87.633990), Checkpoint(41.8770372, -87.6342823), Checkpoint(41.8767992, -87.6255196), Checkpoint(41.885921, -87.626137), Checkpoint(41.885840, -87.633990)},
    {5, 15, 10, 10, 10, 10},
    {20, 0, 40, 0},
    "brown",
    {"ffff00", "0a0a00"},
    {2, 6, 0, 0}
);

// Cermak-McCormick to Kedzie
Railway greenLineCTA = Railway(
    {Checkpoint(41.853115, -87.626402), Checkpoint(41.876946, -87.626046), Checkpoint(41.885921, -87.626137), Checkpoint(41.885724, -87.633945), Checkpoint(41.88422, -87.696234)},
    {15, 10, 10, 15},
    {15, 15, 20, 0},
    "green",
    {"00ff00", "000a00"},
    {1, 3, 0, 0}
);

// Halsted to Loop
Railway orangeLineCTA = Railway(
    {Checkpoint(41.84678, -87.648088), Checkpoint(41.85817, -87.627117), Checkpoint(41.875689, -87.626019), Checkpoint(41.876955, -87.626044), Checkpoint(41.885921, -87.626137), Checkpoint(41.885840, -87.633990), Checkpoint(41.876835, -87.633710), Checkpoint(41.8767992, -87.6255196)},
    {12, 7, 1, 10, 10, 10, 10},
    {12, 0, 40, 8},
    "orange",
    {"ff8000", "0a0500"},
    {3, 7, 1, 3}
);

// Sedgewick to Loop
Railway purpleLineCTA = Railway(
    {Checkpoint(41.9107586, -87.648068), Checkpoint(41.9103656, -87.6373962), Checkpoint(41.885840, -87.633990), Checkpoint(41.8770372, -87.6342823), Checkpoint(41.8767992, -87.6255196), Checkpoint(41.885921, -87.626137), Checkpoint(41.885840, -87.633990)},
    {5, 15, 10, 10, 10, 10},
    {20, 0, 40, 0},
    "purple",
    {"2000ff", "02000a"},
    {2, 6, 0, 0}
);

// Kedzie to Loop
Railway pinkLineCTA = Railway(
    {Checkpoint(41.853964, -87.705408), Checkpoint(41.854856, -87.6695341), Checkpoint(41.8849389, -87.6696133), Checkpoint(41.885840, -87.633990), Checkpoint(41.885921, -87.626137), Checkpoint(41.8767992, -87.6255196), Checkpoint(41.8770372, -87.6342823), Checkpoint(41.885840, -87.633990)},
    {7, 7, 6, 10, 10, 10, 10},
    {14, 0, 40, 6},
    "pink",
    {"ff8080", "0a0505"},
    {3, 7, 2, 3}
);

/// JFK/UMass to Harvard
Railway redLineMBTA = Railway{
    {Checkpoint(42.320414, -71.052139), Checkpoint(42.327649, -71.057760), Checkpoint(42.344627, -71.056986), Checkpoint(42.350559, -71.052613), Checkpoint(42.360982, -71.070116), Checkpoint(42.363490, -71.100487), Checkpoint(42.372535, -71.115947)},
    {5, 10, 5, 10, 10, 10},
    {0, 50, 0, 0},
    "red",
    {"ff0000", "0a0000"},
    {0, 0, 0, 0}
};

// Wood Island to Bowdoin
Railway blueLineMBTA = Railway{
    {Checkpoint(42.379551, -71.023236), Checkpoint(42.360008, -71.047623), Checkpoint(42.359257, -71.059615), Checkpoint(42.361149, -71.062128)},
    {20, 10, 10},
    {0, 40, 0, 0},
    "blue",
    {"0000ff", "00000a"},
    {0, 0, 0, 0}
};

// Roxbury Crossing to Wellington
Railway orangeLineMBTA = Railway{
    {Checkpoint(42.331520, -71.095285), Checkpoint(42.347474, -71.076055), Checkpoint(42.346967, -71.064553), Checkpoint(42.357606, -71.057324), Checkpoint(42.377410, -71.075941), Checkpoint(42.403125, -71.077024)},
    {10, 5, 10, 10, 10},
    {0, 45, 0, 0},
    "orange",
    {"ff8000", "0a0500"},
    {0, 0, 0, 0}
};

// Kenmore to Union Square
Railway greenLine1MBTA = Railway{
    {Checkpoint(42.348957, -71.095080), Checkpoint(42.349616, -71.079112), Checkpoint(42.351835, -71.070836), Checkpoint(42.352342, -71.064498), Checkpoint(42.362111, -71.057983), Checkpoint(42.366666, -71.061263), Checkpoint(42.365633, -71.064124), Checkpoint(42.377506, -71.095170)},
    {10, 10, 10, 10, 10, 10, 10},
    {0, 70, 0, 0},
    "green",
    {"00ff00", "000a00"},
    {0, 0, 0, 0}
};

// Longwood Medical Center to Back Bay(merges with green1)
Railway greenLine2MBTA = Railway{
    {Checkpoint(42.335878, -71.100229), Checkpoint(42.349616, -71.079112)},
    {15},
    {0, 15, 0, 0},
    "green",
    {"00ff00", "000a00"},
    {0, 0, 0, 0}
};

std::vector<City> cities;
std::vector<Railway> ctaRailways, mbtaRailways;

constexpr size_t I2C_BUFFER_SIZE = 512;

int brownLineCTAAdr = 0;
int greenLineCTAAdr[2] = {0, 0};

std::vector<int> addressArr;  // i2c addresses in numerical order
std::vector<int> sequenceArr; // organizes i2c addresses from addressArr
int slaveCount;

bool parseTrain(int trainIndex, Railway &currentRailway);
void sendData(int thing, Railway currentRailway);
void onDataReceived(const uint8_t *data, size_t len, const BlePeerDevice &peer, void *context);
void lightshow(int length);
void callback(char *topic, byte *payload, unsigned int length);
void alphaDisplay(Adafruit_AlphaNum4 display, String str);
void flashProg(unsigned char* _prog, unsigned int _len, int _adr);

void proximityThread(void *param);

// const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
// const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
// const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");

const BleUuid serviceUuid("a73ba101-8192-4a51-b42d-ae9cd14b14a5");
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");

BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, serviceUuid);
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, serviceUuid, onDataReceived, NULL);

Adafruit_VL6180X vl = Adafruit_VL6180X();

MQTT client("lab.thewcl.com", 1883, callback);

http_header_t headers[] = {
    {"Accept", "/*/"},
    {NULL, NULL}};

http_request_t request;
http_response_t response;

HttpClient http;
JsonParserStatic<10000, 1000> parser;

String SSID = "";
String password = "";

Adafruit_AlphaNum4 display1 = Adafruit_AlphaNum4();

bool userInput = false;

unsigned int bleCount = 0;
int cityIndex = -1;
int railwayIndex = -1;
int cityIndexBuffer;

time_t lastTime = Time.now();

void setup()
{
    Serial.begin(9600);
    delay(1000);

    // BLE setup
    BLE.on();
    BLE.addCharacteristic(txCharacteristic);
    BLE.addCharacteristic(rxCharacteristic);
    BleAdvertisingData data;
    data.appendServiceUUID(serviceUuid);
    BLE.advertise(&data);

    //acquireWireBuffer();
    Wire.setClock(400000);
    Wire.begin();
    // vl.begin();

    // request.hostname = "lapi.transitchicago.com";
    // request.port = 80;
    request.hostname = "trek.thewcl.com";
    request.port = 80;

    brownLineCTA.setLoopIndex(2, 6);
    orangeLineCTA.setLoopIndex(3, 7);
    purpleLineCTA.setLoopIndex(2, 6);
    pinkLineCTA.setLoopIndex(3, 7);
    ctaRailways = {blueLineCTA};
    //, redLineCTA, brownLineCTA, greenLineCTA, orangeLineCTA, pinkLineCTA, purpleLineCTA};

    // greenLine1 and greenLine2 must be in adxacent in the vector
    mbtaRailways = {redLineMBTA, greenLine1MBTA, greenLine2MBTA, blueLineMBTA, orangeLineMBTA};

    // 1 slave per line, except cta green which has 2 and cta purple which has 0 (7 for full cta)
    // there needs to be the same number of rail lines and slaves expected
    cities = {City(ctaRailways, "cta", 1), City(mbtaRailways, "mbta", 5)};

    display1.begin(0x71);

    //flashes slave code to every address
    for(int i = 0x08; i <= 0x69; i++){
        flashProg(slaveCode, sizeof(slaveCode), i);
    }

    //TEMPORARY, configures settings without need for app
    delay(500);
    cityIndex = 0;
    railwayIndex = 0;
    sequenceArr = std::vector<int>(cities[cityIndex].railways.size() * 2, 0);
    addressArr = std::vector<int>(cities[cityIndex].slaveCountExpected, 0);
    randomizeAddress();
    sequenceArr[1] = addressArr[0];
    userInput = true;
    WiFi.on();
    WiFi.connect();
    //END TEMPORARY
    new Thread("proximity", proximityThread, NULL, OS_THREAD_PRIORITY_DEFAULT, 1024);
}

void loop()
{
    delay(100);
    Wire.lock();
    delay(1);
    Wire.unlock();
    if (WiFi.hasCredentials() && userInput)
    {
        //re-flashes slave code to all slave addresses
        if(Time.now() - lastTime > UPDATE_INTERVAL){
            for(int i : addressArr){
                flashProg(slaveCode, sizeof(slaveCode), i);
            }
            lastTime = Time.now();
        }

        Serial.println("loop start");

        alphaDisplay(display1, "Test");

        for (int i : sequenceArr)
        {
            Serial.printf("%i, ", i);
        }
        Serial.println();

        cityIndexBuffer = cityIndex;
        for (unsigned int x = 0; x < cities[cityIndexBuffer].railways.size(); x++)
        {
            // MQTT
            if (client.isConnected())
            {
                client.subscribe("loop-tracks/twitter");
                client.loop();
                Serial.println("mqtt loop");
            }
            else
            {
                client.connect("sparkclient");
            }

            if (cityIndex == -1)
            {
                // Wire.unlock();
                return;
            }
            // request.path = "/api/1.0/ttpositions.aspx?key=00ff09063caa46748434d5fa321d048f&rt=" + String(railways[x].name.c_str()) + "&outputType=JSON";
            request.path = "/loop-tracks/" + String(cities[cityIndexBuffer].name.c_str()) + "?lines=" + String(cities[cityIndexBuffer].railways[x].name.c_str());
            http.get(request, response, headers);

            Serial.println("parsing");
            parser.clear();
            parser.addString(response.body);
            if (!parser.parse())
            {
                Serial.println("parsing failed");
                // Wire.unlock();
                return;
            }

            int trainIndex = 0;
            Railway currentRailway = cities[cityIndexBuffer].railways[x];

            // loop through each train, loop breaks when all trains have been parsed
            while (true)
            {
                if (parseTrain(trainIndex, currentRailway))
                {
                    break;
                }
                trainIndex++;
            }

            sendData(x, currentRailway);
        }

        Serial.println();
    }
    // Wire.unlock();
}

/**
 * Sends the data to the slaves
 * @param thing what is this? - Ian
 * @param currentRailway The current railway being processed and sent
 */
void sendData(int thing, Railway currentRailway)
{
    Wire.lock();

    // outputs train data to slaves
    // each `i` is a different part of the train data? need to know - Ian
    for (int i = 0; i < 4; i++)
    {
        // sends train color data to slave in preparation for the next set of train data
        if (cityIndexBuffer == 0 && (i == 2 || currentRailway.name == purpleLineCTA.name))
        {
            Wire.beginTransmission(brownLineCTAAdr);
        }
        else if (cityIndexBuffer == 0 && i == 3)
        {
            if (currentRailway.name == orangeLineCTA.name)
            {
                Wire.beginTransmission(greenLineCTAAdr[0]);
            }
            else
            {
                Wire.beginTransmission(greenLineCTAAdr[1]);
            }
        }
        else
        {
            Wire.beginTransmission(sequenceArr[thing * 2 + i]);
        }

        Wire.write(currentRailway.colors[0].c_str());
        Wire.write(currentRailway.colors[1].c_str());
        Wire.endTransmission();

        if (cityIndexBuffer == 0 && (i == 2 || currentRailway.name == purpleLineCTA.name))
        {
            Wire.beginTransmission(brownLineCTAAdr);
        }
        else if (cityIndexBuffer == 0 && i == 3)
        {
            if (currentRailway.name == orangeLineCTA.name)
            {
                Wire.beginTransmission(greenLineCTAAdr[0]);
            }
            else
            {
                Wire.beginTransmission(greenLineCTAAdr[1]);
            }
        }
        else
        {
            Wire.beginTransmission(sequenceArr[thing * 2 + i]); // why this specific address? - Ian
        }

        // padding for chicago
        if (cityIndexBuffer == 0)
        {
            if (i == 2)
            {
                // pads green line sending to loop
                if (currentRailway.name == greenLineCTA.name)
                {
                    for (unsigned int x = 0; x < brownLineCTA.outputs[0].size() + (brownLineCTA.outputs[2].size() / 2); x++) // why brown line and not green line? - Ian
                    {
                        Wire.write('0');
                    }
                }

                // prevents brown/purple line from getting overriden
                else if (currentRailway.name == brownLineCTA.name || currentRailway.name == purpleLineCTA.name)
                {
                    for (unsigned int x = 0; x < brownLineCTA.outputs[0].size(); x++)
                    {
                        Wire.write((char)currentRailway.outputs[0][x] + '0');
                    }
                }

                // pads every other line sending to loop
                else
                {
                    for (unsigned int x = 0; x < brownLineCTA.outputs[0].size(); x++)
                    {
                        Wire.write('0');
                    }
                }
            }

            // pads blank loop onto the brown/purple track
            if (i == 1 && (currentRailway.name == brownLineCTA.name || currentRailway.name == purpleLineCTA.name))
            {
                for (unsigned int x = 0; x < currentRailway.outputs[2].size(); x++)
                {
                    Wire.write('0');
                }
            }

            // pad blank green segment onto orange and pink tracks
            if (i == 3 && currentRailway.name == orangeLineCTA.name)
            {
                for (unsigned int x = 0; x < greenLineCTA.outputs[0].size() - orangeLineCTA.outputs[3].size(); x++)
                {
                    Wire.write('0');
                }
            }
            else if (i == 3 && currentRailway.name == pinkLineCTA.name)
            {
                for (unsigned int x = 0; x < greenLineCTA.outputs[0].size() - pinkLineCTA.outputs[3].size(); x++)
                {
                    Wire.write('0');
                }
            }
        }

        // sends train data to slave
        Serial.printf("%s rail part %i: ", currentRailway.name.c_str(), i);
        for (unsigned int x = 0; x < currentRailway.outputs[i].size(); x++)
        {
            Wire.write((char)currentRailway.outputs[i][x] + '0');
            Serial.print(currentRailway.outputs[i][x]);
        }
        Serial.println();
        Wire.endTransmission(true);
    }
    for (int i = 0; i < 4; i++)
    {
        for (unsigned int x = 0; x < currentRailway.outputs[x].size(); x++)
        {
            currentRailway.outputs[i][x] = 0;
        }
    }
    Serial.println();

    Wire.unlock();
    delay(1000);
}

/**
 * Parses a train from the HTTP API and stores it in the railways array.
 * @param trainIndex The Index of train in the railway.
 * @param currentRailway The current railway we are on.
 * @return true if there are no more trains to parse, false otherwise.
 */
bool parseTrain(int trainIndex, Railway &currentRailway)
{
    // parse xson data returned from api
    JsonReference train = parser.getReference().key("lines").index(0).key("trains").index(trainIndex);
    String nextStation = train.key("next_stop").valueString();
    String destNm = train.key("destination").valueString();
    int trainDir = train.key("direction").valueInt();
    float lat = train.key("latitude").valueFloat();
    float lon = train.key("longitude").valueFloat();

    // break loop once all trains have been parsed
    if (nextStation.length() <= 1)
    {
        Serial.println("break");
        return true;
    }
    // Serial.print(String(currentRailway.name.c_str()) + " ");
    // Serial.printf("train %i: ", count);

    std::vector<Checkpoint> currentCheckpoints = currentRailway.checkpoints;
    int checkpointCount = currentCheckpoints.size();

    // finds Index of closest checkpoint to train
    for (int i = 0; i < checkpointCount; i++)
    {
        currentRailway.distances[i] = currentCheckpoints[i].getDistance(lat, lon);
    }
    int closestIndex = std::min_element(currentRailway.distances.begin(), currentRailway.distances.end()) - currentRailway.distances.begin();
    if (closestIndex == currentRailway.tripleIndex)
    {
        closestIndex = currentRailway.loopIndex;
    }

    // calculates which checkpoint is on the other side of the train from the nearest checkpoint, works when turns are 90 degrees or less
    float x, x1, y, y1, slope, perpendicularSlope;
    int secondClosestIndex;

    x = lat;
    y = lon;
    x1 = currentCheckpoints[closestIndex].lat;
    y1 = currentCheckpoints[closestIndex].lon;

    if (currentCheckpoints[closestIndex].lat > lat)
    {
        slope = (y1 - y) / (x1 - x);
    }
    else
    {
        slope = (y - y1) / (x - x1);
    }

    // prevents division by zero or extremely large numbers
    if (slope == 0)
    {
        perpendicularSlope = __FLT_MAX__ / 10;
    }
    else if (slope >= __FLT_MAX__ / 10)
    {
        perpendicularSlope = 0;
    }
    else
    {
        perpendicularSlope = -1 / slope;
    }

    bool pointSide, nearestSide, loopPointSide;
    bool validTrain = true;

    // point slope formula to determine which checkpoint is on the other side of the train from the nearest checkpoint
    if (closestIndex == 0)
    {
        pointSide = (perpendicularSlope * (currentCheckpoints[closestIndex + 1].lat - x) + y) > currentCheckpoints[closestIndex + 1].lon;
        nearestSide = (perpendicularSlope * (currentCheckpoints[closestIndex].lat - x) + y) > currentCheckpoints[closestIndex].lon;
        if (currentRailway.loopIndex == closestIndex)
        {
            loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
            if (nearestSide != pointSide)
            {
                secondClosestIndex = 1;
            }
            else if (nearestSide != loopPointSide)
            {
                closestIndex = currentRailway.tripleIndex;
                secondClosestIndex = currentRailway.tripleIndex - 1;
            }
            else
            {
                closestIndex = currentRailway.tripleIndex;
                secondClosestIndex = currentRailway.tripleIndex + 1;
            }
        }
        else
        {
            if (pointSide == nearestSide)
            {
                validTrain = false;
            }
            else
            {
                secondClosestIndex = 1;
            }
        }
    }
    else
    {
        pointSide = (perpendicularSlope * (currentCheckpoints[closestIndex - 1].lat - x) + y) > currentCheckpoints[closestIndex - 1].lon;
        nearestSide = (perpendicularSlope * (currentCheckpoints[closestIndex].lat - x) + y) > currentCheckpoints[closestIndex].lon;
        if (closestIndex == checkpointCount - 1)
        {
            if (closestIndex == currentRailway.loopIndex)
            {
                loopPointSide = (perpendicularSlope * (currentCheckpoints[currentRailway.tripleIndex - 1].lat - x) + y) > currentCheckpoints[currentRailway.tripleIndex - 1].lon;
                if (nearestSide != pointSide)
                {
                    secondClosestIndex = checkpointCount - 2;
                }
                else if (nearestSide != loopPointSide)
                {
                    closestIndex = currentRailway.tripleIndex;
                    secondClosestIndex = currentRailway.tripleIndex - 1;
                }
                else
                {
                    closestIndex = currentRailway.tripleIndex;
                    secondClosestIndex = currentRailway.tripleIndex + 1;
                }
            }
            else
            {
                if (pointSide == nearestSide)
                {
                    validTrain = false;
                }
                else
                {
                    secondClosestIndex = checkpointCount - 2;
                }
            }
        }
        else
        {
            if (pointSide == nearestSide)
            {
                secondClosestIndex = closestIndex + 1;
            }
            else
            {
                secondClosestIndex = closestIndex - 1;
            }
        }
    }

    int pcbSegment;
    float segmentPos;
    bool inLoop = false;
    // calculates train position within the segment
    if (validTrain)
    {
        // Serial.printlnf("closestIndex: %i second: %i", closestIndex, secondClosestIndex);
        int lowerIndex, upperIndex;

        if (closestIndex < secondClosestIndex)
        {
            lowerIndex = closestIndex;
            upperIndex = secondClosestIndex;
        }
        else
        {
            lowerIndex = secondClosestIndex;
            upperIndex = closestIndex;
        }

        segmentPos = currentRailway.distances[lowerIndex] / (currentRailway.distances[lowerIndex] + currentRailway.distances[upperIndex]);
        segmentPos *= currentRailway.scalers[lowerIndex];

        int lowerScaleBound;
        // in green
        if (closestIndex <= currentRailway.upperGreenBound && closestIndex >= currentRailway.lowerGreenBound && secondClosestIndex <= currentRailway.upperGreenBound && secondClosestIndex >= currentRailway.lowerGreenBound)
        {
            pcbSegment = 3;
            lowerScaleBound = currentRailway.lowerGreenBound;
        }
        // before loop
        else if (closestIndex < currentRailway.lowerLoopBound || secondClosestIndex < currentRailway.lowerLoopBound)
        {
            lowerScaleBound = 0;
            pcbSegment = 0;
        }
        // after loop, also for lines that don't go through loop
        else if (closestIndex > currentRailway.upperLoopBound || secondClosestIndex > currentRailway.upperLoopBound)
        {
            lowerScaleBound = currentRailway.upperLoopBound;
            pcbSegment = 1;
        }
        // in loop
        else
        {
            inLoop = true;
            lowerScaleBound = currentRailway.lowerLoopBound;
            pcbSegment = 2;
        }

        for (int i = lowerScaleBound; i < lowerIndex; i++)
        {
            segmentPos += currentRailway.scalers[i];
        }

        // cta direction fixes
        if (cityIndexBuffer == 0)
        {
            if (inLoop)
            {
                // adxusts output array orientation to match brown line
                if (currentRailway.name == pinkLineCTA.name)
                {
                    segmentPos = (float)currentRailway.outputs[2].size() - segmentPos;
                }
                else if (currentRailway.name == orangeLineCTA.name)
                {
                    segmentPos = (int)(segmentPos + orangeLineCTA.outputs[2].size() / 2) % orangeLineCTA.outputs[2].size();
                }
                else if (currentRailway.name == purpleLineCTA.name)
                {
                    trainDir = 1;
                }
            }
            else
            {
                if (currentRailway.name == brownLineCTA.name || currentRailway.name == purpleLineCTA.name)
                {
                    trainDir = 6 - trainDir;
                }
            }
            if (pcbSegment == 1 && currentRailway.name == greenLineCTA.name)
            {
                segmentPos = (float)currentRailway.outputs[1].size() - segmentPos;
                trainDir = 6 - trainDir;
            }
            if (pcbSegment == 3 && currentRailway.name == pinkLineCTA.name)
            {
                trainDir = 6 - trainDir;
            }
        }
        // mbta direction fixes
        else if (cityIndexBuffer == 1)
        {
            if (currentRailway.name == orangeLineMBTA.name || currentRailway.name == greenLine1MBTA.name || currentRailway.name == redLineMBTA.name)
            {
                trainDir = 6 - trainDir;
            }
        }

        currentRailway.outputs[pcbSegment][(int)floor(segmentPos)] = trainDir;
    }

    return false;
}

//String *deviceIDArr;
int iterationCount = 0;
int i2cRequestCount = 0;
// Clears up conflicts with multiple i2c slaves having the same address.
void randomizeAddress()
{
    Wire.lock();

    String deviceIDArr[cities[cityIndex].slaveCountExpected];
    while (slaveCount < cities[cityIndex].slaveCountExpected)
    {
        Serial.printlnf("slaveCount: %i", slaveCount);
        slaveCount = 0;
        iterationCount++;
        for (int i = 8; i <= 111; i++)
        {
            i2cRequestCount++;
            if (i == VL6180X_NEW_I2C_ADDR)
            {
                continue;
            }
            Serial.println("\nrequest code 1, address: " + String(i));
            Wire.beginTransmission(i);
            Wire.write('1');
            Wire.endTransmission();

            // gets UUID from address and sends it back to slave, slave changes address if conflict
            Wire.requestFrom(i, 24);
            if (Wire.available() > 0)
            {
                Serial.println("transmission recieved from: " + String(i));

                String inputBuffer = "";
                char c;
                for (int x = 0; x < 24; x++)
                {
                    c = Wire.read();
                    inputBuffer += c;
                }
                Wire.beginTransmission(i);
                Wire.write(inputBuffer);
                Serial.println("device id: " + inputBuffer);
                deviceIDArr[slaveCount] = inputBuffer;
                Wire.endTransmission();
                Serial.println("transmission sent to: " + String(i));

                Wire.beginTransmission(i);
                Wire.write('2');
                Wire.endTransmission();

                Serial.println("request code 2, address: " + String(i));
                Wire.requestFrom(i, 4);
                inputBuffer = "";
                for (int x = 0; x < 4; x++)
                {
                    inputBuffer += (char)Wire.read();
                }

                Serial.println("conflict verification: " + inputBuffer);
                if (inputBuffer != "pass")
                {
                    break;
                }
                if (++slaveCount == cities[cityIndex].slaveCountExpected)
                {
                    break;
                }
            }
        }

        Wire.unlock();
    }

    Serial.println("\nConnected to: ");

    int count = 0;
    for (int i = 8; i <= 111; i++)
    {
        if (i == VL6180X_NEW_I2C_ADDR)
        {
            continue;
        }
        Wire.beginTransmission(i);
        Wire.write('1');
        Wire.endTransmission();

        Wire.requestFrom(i, 24);
        if (Wire.available() > 0)
        {
            Serial.print(i);
            Serial.print(", ");

            addressArr[count++] = i;
        }
    }
    Serial.println();
    // for (int i = 0; i < slaveCount; i++)
    // {
    //     Serial.println(deviceIDArr[i]);
    // }
}

// Communication with app, configures city and rail colors.
void onDataReceived(const uint8_t *data, size_t len, const BlePeerDevice &peer, void *context)
{
    Wire.lock();

    txCharacteristic.setValue("ok");
    String inputBuffer = "";
    String nameBuffer;
    for (unsigned int i = 0; i < len; i++)
    {
        inputBuffer += (char)data[i];
    }
    Serial.println(inputBuffer);

    // set wifi credentials
    if (inputBuffer.indexOf("wifi:") == 0)
    {
        int commaIndex = inputBuffer.indexOf(",");
        SSID = inputBuffer.substring(5, commaIndex);
        password = inputBuffer.substring(commaIndex + 1);
        Serial.printlnf("SSID: %s, password: %s", SSID.c_str(), password.c_str());
        WiFi.setCredentials(SSID, password);
    }
    // set city
    else if (inputBuffer.indexOf("city:") == 0)
    {
        inputBuffer = inputBuffer.substring(5);
        for (unsigned int i = 0; i < cities.size(); i++)
        {
            if (inputBuffer == String(cities[i].name.c_str()))
            {
                cityIndex = i;
            }
        }
        if (cityIndex == -1)
        {
            txCharacteristic.setValue("incorrect city name");
            return;
        }
        sequenceArr = std::vector<int>(cities[cityIndex].railways.size() * 2, 0);
        addressArr = std::vector<int>(cities[cityIndex].slaveCountExpected, 0);
        randomizeAddress();
        txCharacteristic.setValue("slave addresses sorted");

        // turn on led on first device
        Wire.beginTransmission(addressArr[0]);
        Wire.write('3');
        Wire.endTransmission();
        Serial.printlnf("city: %s", cities[cityIndex].name.c_str());
    }
    // set lines
    else if (inputBuffer.indexOf("color:") == 0)
    {
        if (cityIndex == -1)
        {
            txCharacteristic.setValue("city not set");
            return;
        }
        inputBuffer = inputBuffer.substring(6);
        nameBuffer = inputBuffer;
        if (bleCount < cities[cityIndex].railways.size())
        {
            if ((cityIndex == 0 || cityIndex == 1) && (inputBuffer == "green1" || inputBuffer == "green2"))
            {
                nameBuffer = "green";
            }
            // finds which rail the address should be set to
            for (unsigned int i = 0; i < cities[cityIndex].railways.size(); i++)
            {
                if ((cityIndex != 0 || nameBuffer != String(purpleLineCTA.name.c_str())) && String(cities[cityIndex].railways[i].name.c_str()) == nameBuffer)
                {
                    railwayIndex = i;
                }
            }

            if (cityIndex == 1 && inputBuffer == "green1")
            {
                railwayIndex--;
            }

            Serial.printlnf("railway Index: %i", railwayIndex);

            if (railwayIndex == -1)
            {
                txCharacteristic.setValue("incorrect railway color");
                return;
            }

            // organizes address into sequenceArr
            for (unsigned int i = 0; i < 2; i++)
            {
                Serial.printlnf("address: %i", addressArr[bleCount]);
                if (cities[cityIndex].railways[railwayIndex].outputs[i].size() == 0 || (cityIndex == 0 && cities[cityIndex].railways[railwayIndex].name == purpleLineCTA.name))
                {
                    sequenceArr[2 * railwayIndex + i] = 0;
                }
                else
                {
                    if (cityIndex == 0 && nameBuffer == "green")
                    {
                        if (inputBuffer == "green1")
                        {
                            sequenceArr[2 * railwayIndex] = addressArr[bleCount];
                        }
                        else if (inputBuffer == "green2")
                        {
                            sequenceArr[2 * railwayIndex + 1] = addressArr[bleCount];
                        }
                    }
                    else
                    {
                        sequenceArr[2 * railwayIndex + i] = addressArr[bleCount];
                    }
                    if (cityIndex == 0)
                    {
                        if (inputBuffer == String(brownLineCTA.name.c_str()))
                        {
                            brownLineCTAAdr = sequenceArr[2 * railwayIndex + i];
                        }
                        else if (inputBuffer == "green1")
                        {
                            greenLineCTAAdr[0] = sequenceArr[2 * railwayIndex];
                            // bleCount++;
                        }
                        else if (inputBuffer == "green2")
                        {
                            greenLineCTAAdr[1] = sequenceArr[2 * railwayIndex + 1];
                        }
                    }
                }
            }

            // turn off led, turn next device led on
            Wire.beginTransmission(addressArr[bleCount]);
            Wire.write('4');
            Wire.endTransmission();

            Wire.beginTransmission(addressArr[bleCount + 1]);
            Wire.write('3');
            Wire.endTransmission();
        }
        if (bleCount == cities[cityIndex].railways.size() - 1)
        {
            Serial.println("BLE finished");
            // for(int i = 0; i < addressArr.size(); i++){
            //   Serial.printlnf("turning off: %i", i);
            //   Wire.beginTransmission(addressArr[i]);
            //   Wire.write('4');
            //   Wire.endTransmission();
            // }
            userInput = true;
            WiFi.on();
            WiFi.connect();
            client.connect("sparkclient");
        }
        bleCount++;
    }
    else if (inputBuffer.indexOf("reset") == 0)
    {
        for (unsigned int i = 0; i < addressArr.size(); i++)
        {
            Serial.printlnf("turning off: %i", i);
            Wire.beginTransmission(addressArr[i]);
            Wire.write('4');
            Wire.endTransmission();
        }
        bleCount = 0;
        cityIndex = -1;
        railwayIndex = -1;
        userInput = false;
        Serial.println("reset done");
    }

    Wire.unlock();
}

// Increases I2C buffer size
// hal_i2c_config_t acquireWireBuffer()
// {
//     hal_i2c_config_t config = {
//         .size = sizeof(hal_i2c_config_t),
//         .version = HAL_I2C_CONFIG_VERSION_1,
//         .rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_SIZE],
//         .rx_buffer_size = I2C_BUFFER_SIZE,
//         .tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_SIZE],
//         .tx_buffer_size = I2C_BUFFER_SIZE};
//     return config;
// }

/**
 * @brief Sends rainbow command to every slave.
 * @param length Duration in ms for rainbow to last.
 */
void lightshow(int length)
{
    Wire.lock();

    for (unsigned int i = 0; i < addressArr.size(); i++)
    {
        Wire.beginTransmission(addressArr[i]);
        Wire.write('3');
        Wire.endTransmission();
    }
    delay(length);
    for (unsigned int i = 0; i < addressArr.size(); i++)
    {
        Wire.beginTransmission(addressArr[i]);
        Wire.write('4');
        Wire.endTransmission();
    }

    Wire.unlock();
}

// MQTT callback for twitter response
void callback(char *topic, byte *payload, unsigned int length)
{
    Wire.lock();

    Serial.println("twitter");
    lightshow(3000);

    Wire.unlock();
}

// Display 4 characters on the display
void alphaDisplay(Adafruit_AlphaNum4 display, String str)
{
    Wire.lock();

    for (int i = 0; i < 4; i++)
    {
        display.writeDigitAscii(i, str.charAt(i));
    }
    display.writeDisplay();

    Wire.unlock();
}

// Flashes program to designed i2c address
void flashProg(unsigned char* _prog, unsigned int _len, int _addr){
    Wire.lock();

    if(_addr == VL6180X_NEW_I2C_ADDR || _addr == DEFAULT_SLAVE_ADR){
        return;
    }

    Wire.requestFrom(_addr, 1);
    if(Wire.available() > 0){
        Serial.println("device found, starting flash");
    }else{
        return;
    }
    Wire.read();

    bool verify = false;
    Serial.printlnf("flashing %i", _addr);
    Wire.beginTransmission(_addr);
    Wire.write('9');
    Wire.endTransmission();

    Twiboot twiboot(DEFAULT_SLAVE_ADR);
    while(!verify){
        // wait for the bootloader to properly initialize
        while (!twiboot.AbortBootTimeout()){};

        Serial.println("Bootloader initialized!");

        char btldr_ver[16];
        twiboot.GetBootloaderVersion(btldr_ver);
        Serial.print("Bootloader version: ");
        Serial.println(btldr_ver);

        // Get chip information
        uint64_t signature;
        uint8_t pageSize;
        uint16_t flashSize;
        uint16_t eepromSize;

        twiboot.GetChipInfo(&signature, &pageSize, &flashSize, &eepromSize);

        Serial.print("Signature: ");
        Serial.println(signature, HEX);
        Serial.print("Page size: ");
        Serial.println(pageSize);
        Serial.print("Flash size: ");
        Serial.println(flashSize);
        Serial.print("EEPROM size: ");
        Serial.println(eepromSize);

        Serial.println("Flashing...");

        twiboot.WriteFlash(_prog, _len); // flash the program

        Serial.println("Flashed!");

        Serial.println("Verifying...");
        if (twiboot.Verify(_prog, _len)) // verify the program
        {
            verify = true;
            Serial.println("Verified!");
            Serial.println("All done, going to the app now!");
            twiboot.JumpToApp();
        }
        else
        {
            Serial.println("Verification failed! Trying again...");
        }
        delay(500);
    }

    START_WIRE;

    Wire.unlock();
}

void proximityThread(void *param){
    while(true){
        Wire.lock();

        // rainbow led on when close proximity
        // uint8_t range = vl.readRange();
        // if (range <= 100)
        // {
        //     lightshow(1000);
        // }

        Wire.unlock();

        delay(100);
    }
}