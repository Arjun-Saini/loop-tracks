
c:/Users/Arjun/Documents/GitHub/loop_tracks/slave/target/3.0.0/argon/slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001be4  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d5c00  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000070  2003e590  000d5c04  0001e590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000001f0  2003e600  2003e600  0002e600  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d5c74  000d5c74  00025c74  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d5c9c  000d5c9c  00025c9c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001685dd  00000000  00000000  00025ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00015b55  00000000  00000000  0018e27d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0003292b  00000000  00000000  001a3dd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002ae8  00000000  00000000  001d66fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00008c78  00000000  00000000  001d91e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00037643  00000000  00000000  001e1e5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0003939c  00000000  00000000  002194a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00121e1b  00000000  00000000  0025283c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00007514  00000000  00000000  00374658  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f001 fc5b 	bl	d58e8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f001 fc63 	bl	d5904 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e590 	.word	0x2003e590
   d4048:	000d5c04 	.word	0x000d5c04
   d404c:	2003e600 	.word	0x2003e600
   d4050:	2003e600 	.word	0x2003e600
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f001 f897 	bl	d5190 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d5bd8 	.word	0x000d5bd8
   d407c:	000d5c00 	.word	0x000d5c00

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b9b8 	b.w	d43f4 <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f981 	bl	d438c <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f001 b841 	b.w	d5114 <_post_loop>

000d4092 <_Znaj>:
   d4092:	f000 be1b 	b.w	d4ccc <malloc>

000d4096 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d4096:	f000 be21 	b.w	d4cdc <free>

000d409a <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409a:	7800      	ldrb	r0, [r0, #0]
   d409c:	fab0 f080 	clz	r0, r0
   d40a0:	0940      	lsrs	r0, r0, #5
   d40a2:	4770      	bx	lr

000d40a4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a4:	2301      	movs	r3, #1
   d40a6:	7003      	strb	r3, [r0, #0]
   d40a8:	4770      	bx	lr

000d40aa <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40aa:	b510      	push	{r4, lr}
   d40ac:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d40ae:	6800      	ldr	r0, [r0, #0]
   d40b0:	b108      	cbz	r0, d40b6 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d40b2:	f000 fe13 	bl	d4cdc <free>
class SystemClass {
   d40b6:	4620      	mov	r0, r4
   d40b8:	bd10      	pop	{r4, pc}
	...

000d40bc <_Z12dataReceivedi>:
  delay(100);
}

char c;

void dataReceived(int count){
   d40bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d40c0:	af00      	add	r7, sp, #0
  int size = Wire.available();
   d40c2:	f001 fbd1 	bl	d5868 <_Z19__fetch_global_Wirev>
   d40c6:	6803      	ldr	r3, [r0, #0]
   d40c8:	691b      	ldr	r3, [r3, #16]
   d40ca:	4798      	blx	r3
  char inputBuffer[size];
   d40cc:	1dc3      	adds	r3, r0, #7
   d40ce:	f023 0307 	bic.w	r3, r3, #7
   d40d2:	ebad 0d03 	sub.w	sp, sp, r3
  int size = Wire.available();
   d40d6:	4605      	mov	r5, r0
  int counter = 0;

  Serial.println("count: ");
   d40d8:	f001 f960 	bl	d539c <_Z16_fetch_usbserialv>
   d40dc:	4974      	ldr	r1, [pc, #464]	; (d42b0 <_Z12dataReceivedi+0x1f4>)
   d40de:	f000 ff94 	bl	d500a <_ZN5Print7printlnEPKc>
  Serial.print(Wire.available());
   d40e2:	f001 f95b 	bl	d539c <_Z16_fetch_usbserialv>
   d40e6:	4606      	mov	r6, r0
   d40e8:	f001 fbbe 	bl	d5868 <_Z19__fetch_global_Wirev>
   d40ec:	6803      	ldr	r3, [r0, #0]
   d40ee:	691b      	ldr	r3, [r3, #16]
   d40f0:	4798      	blx	r3
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   d40f2:	1e04      	subs	r4, r0, #0
  char inputBuffer[size];
   d40f4:	46e8      	mov	r8, sp
   d40f6:	da25      	bge.n	d4144 <_Z12dataReceivedi+0x88>
            t = print('-');
   d40f8:	212d      	movs	r1, #45	; 0x2d
   d40fa:	4630      	mov	r0, r6
   d40fc:	f000 ff76 	bl	d4fec <_ZN5Print5printEc>
            val = -n;
   d4100:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d4102:	220a      	movs	r2, #10
   d4104:	4630      	mov	r0, r6
   d4106:	f000 ff94 	bl	d5032 <_ZN5Print11printNumberEmh>
  Serial.println();
   d410a:	f001 f947 	bl	d539c <_Z16_fetch_usbserialv>
   d410e:	f000 ff70 	bl	d4ff2 <_ZN5Print7printlnEv>

  while(Wire.available() > 0){
    c = Wire.read();
   d4112:	4c68      	ldr	r4, [pc, #416]	; (d42b4 <_Z12dataReceivedi+0x1f8>)
   d4114:	f108 36ff 	add.w	r6, r8, #4294967295
  while(Wire.available() > 0){
   d4118:	f001 fba6 	bl	d5868 <_Z19__fetch_global_Wirev>
   d411c:	6803      	ldr	r3, [r0, #0]
   d411e:	691b      	ldr	r3, [r3, #16]
   d4120:	4798      	blx	r3
   d4122:	2800      	cmp	r0, #0
   d4124:	dd10      	ble.n	d4148 <_Z12dataReceivedi+0x8c>
    c = Wire.read();
   d4126:	f001 fb9f 	bl	d5868 <_Z19__fetch_global_Wirev>
   d412a:	6803      	ldr	r3, [r0, #0]
   d412c:	695b      	ldr	r3, [r3, #20]
   d412e:	4798      	blx	r3
   d4130:	7020      	strb	r0, [r4, #0]
    Serial.println(c);
   d4132:	f001 f933 	bl	d539c <_Z16_fetch_usbserialv>
   d4136:	7821      	ldrb	r1, [r4, #0]
   d4138:	f000 ff71 	bl	d501e <_ZN5Print7printlnEc>
    inputBuffer[counter] = c;
   d413c:	7823      	ldrb	r3, [r4, #0]
   d413e:	f806 3f01 	strb.w	r3, [r6, #1]!
  while(Wire.available() > 0){
   d4142:	e7e9      	b.n	d4118 <_Z12dataReceivedi+0x5c>
            val = n;
   d4144:	4621      	mov	r1, r4
   d4146:	e7dc      	b.n	d4102 <_Z12dataReceivedi+0x46>
    counter++;
  }
  Serial.println("data received: ");
   d4148:	f001 f928 	bl	d539c <_Z16_fetch_usbserialv>
   d414c:	495a      	ldr	r1, [pc, #360]	; (d42b8 <_Z12dataReceivedi+0x1fc>)
   d414e:	f000 ff5c 	bl	d500a <_ZN5Print7printlnEPKc>
  Serial.print(inputBuffer);
   d4152:	f001 f923 	bl	d539c <_Z16_fetch_usbserialv>
   d4156:	4641      	mov	r1, r8
   d4158:	f000 ff44 	bl	d4fe4 <_ZN5Print5printEPKc>
  Serial.println();
   d415c:	f001 f91e 	bl	d539c <_Z16_fetch_usbserialv>
   d4160:	f000 ff47 	bl	d4ff2 <_ZN5Print7printlnEv>

  if(size == 1 && inputBuffer[0] == '1'){
   d4164:	2d01      	cmp	r5, #1
   d4166:	d11a      	bne.n	d419e <_Z12dataReceivedi+0xe2>
   d4168:	f898 3000 	ldrb.w	r3, [r8]
   d416c:	2b31      	cmp	r3, #49	; 0x31
   d416e:	d104      	bne.n	d417a <_Z12dataReceivedi+0xbe>
    requestMode = 1;
   d4170:	4b52      	ldr	r3, [pc, #328]	; (d42bc <_Z12dataReceivedi+0x200>)
   d4172:	601d      	str	r5, [r3, #0]
    strip.show();
    for(int i = 0; i < size; i++){
      strip.setPixelColor(i, 0);
    }
  }
}
   d4174:	46bd      	mov	sp, r7
   d4176:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  }else if(size == 1 && inputBuffer[0] == '2'){
   d417a:	2b32      	cmp	r3, #50	; 0x32
   d417c:	d103      	bne.n	d4186 <_Z12dataReceivedi+0xca>
    requestMode = 2;
   d417e:	4b4f      	ldr	r3, [pc, #316]	; (d42bc <_Z12dataReceivedi+0x200>)
   d4180:	2202      	movs	r2, #2
   d4182:	601a      	str	r2, [r3, #0]
   d4184:	e7f6      	b.n	d4174 <_Z12dataReceivedi+0xb8>
  }else if(size == 1 && inputBuffer[0] == '3'){
   d4186:	2b33      	cmp	r3, #51	; 0x33
   d4188:	d102      	bne.n	d4190 <_Z12dataReceivedi+0xd4>
    blink = true;
   d418a:	4b4d      	ldr	r3, [pc, #308]	; (d42c0 <_Z12dataReceivedi+0x204>)
   d418c:	701d      	strb	r5, [r3, #0]
   d418e:	e7f1      	b.n	d4174 <_Z12dataReceivedi+0xb8>
  }else if(size == 1 && inputBuffer[0] == '4'){
   d4190:	2b34      	cmp	r3, #52	; 0x34
   d4192:	f04f 0400 	mov.w	r4, #0
   d4196:	d13f      	bne.n	d4218 <_Z12dataReceivedi+0x15c>
    blink = false;
   d4198:	4b49      	ldr	r3, [pc, #292]	; (d42c0 <_Z12dataReceivedi+0x204>)
   d419a:	701c      	strb	r4, [r3, #0]
   d419c:	e7ea      	b.n	d4174 <_Z12dataReceivedi+0xb8>
  }else if(size == 24){
   d419e:	2d18      	cmp	r5, #24
    for(int i = 0; i < 24; i++){
   d41a0:	f04f 0400 	mov.w	r4, #0
  }else if(size == 24){
   d41a4:	d138      	bne.n	d4218 <_Z12dataReceivedi+0x15c>
      if(deviceID.charAt(i) != inputBuffer[i]){
   d41a6:	f8df 9138 	ldr.w	r9, [pc, #312]	; d42e0 <_Z12dataReceivedi+0x224>
   d41aa:	4d46      	ldr	r5, [pc, #280]	; (d42c4 <_Z12dataReceivedi+0x208>)
      verifyAddress = true;
   d41ac:	2601      	movs	r6, #1
      if(deviceID.charAt(i) != inputBuffer[i]){
   d41ae:	4621      	mov	r1, r4
   d41b0:	4648      	mov	r0, r9
   d41b2:	f000 fed9 	bl	d4f68 <_ZNK6String6charAtEj>
   d41b6:	f818 3004 	ldrb.w	r3, [r8, r4]
   d41ba:	4283      	cmp	r3, r0
   d41bc:	d022      	beq.n	d4204 <_Z12dataReceivedi+0x148>
        verifyAddress = false;
   d41be:	2400      	movs	r4, #0
   d41c0:	702c      	strb	r4, [r5, #0]
      Serial.println("randomize address");
   d41c2:	f001 f8eb 	bl	d539c <_Z16_fetch_usbserialv>
   d41c6:	4940      	ldr	r1, [pc, #256]	; (d42c8 <_Z12dataReceivedi+0x20c>)
      address = random(64, 120);
   d41c8:	4d40      	ldr	r5, [pc, #256]	; (d42cc <_Z12dataReceivedi+0x210>)
      Serial.println("randomize address");
   d41ca:	f000 ff1e 	bl	d500a <_ZN5Print7printlnEPKc>
      address = random(64, 120);
   d41ce:	2178      	movs	r1, #120	; 0x78
   d41d0:	2040      	movs	r0, #64	; 0x40
   d41d2:	f001 f9e9 	bl	d55a8 <_Z6randomii>
   d41d6:	6028      	str	r0, [r5, #0]
      Wire.end();
   d41d8:	f001 fb46 	bl	d5868 <_Z19__fetch_global_Wirev>
   d41dc:	f001 f9cd 	bl	d557a <_ZN7TwoWire3endEv>
      Wire.begin(address);
   d41e0:	f001 fb42 	bl	d5868 <_Z19__fetch_global_Wirev>
   d41e4:	6829      	ldr	r1, [r5, #0]
   d41e6:	f001 f9c5 	bl	d5574 <_ZN7TwoWire5beginEi>
      Wire.onReceive(dataReceived);
   d41ea:	f001 fb3d 	bl	d5868 <_Z19__fetch_global_Wirev>
   d41ee:	4938      	ldr	r1, [pc, #224]	; (d42d0 <_Z12dataReceivedi+0x214>)
   d41f0:	f001 f9c7 	bl	d5582 <_ZN7TwoWire9onReceiveEPFviE>
      Wire.onRequest(dataRequest);
   d41f4:	f001 fb38 	bl	d5868 <_Z19__fetch_global_Wirev>
   d41f8:	4936      	ldr	r1, [pc, #216]	; (d42d4 <_Z12dataReceivedi+0x218>)
   d41fa:	f001 f9c6 	bl	d558a <_ZN7TwoWire9onRequestEPFvvE>
      requestMode = 0;
   d41fe:	4b2f      	ldr	r3, [pc, #188]	; (d42bc <_Z12dataReceivedi+0x200>)
   d4200:	601c      	str	r4, [r3, #0]
   d4202:	e7b7      	b.n	d4174 <_Z12dataReceivedi+0xb8>
    for(int i = 0; i < 24; i++){
   d4204:	3401      	adds	r4, #1
   d4206:	2c18      	cmp	r4, #24
      verifyAddress = true;
   d4208:	702e      	strb	r6, [r5, #0]
    for(int i = 0; i < 24; i++){
   d420a:	d1d0      	bne.n	d41ae <_Z12dataReceivedi+0xf2>
      Serial.println("correct address");
   d420c:	f001 f8c6 	bl	d539c <_Z16_fetch_usbserialv>
   d4210:	4931      	ldr	r1, [pc, #196]	; (d42d8 <_Z12dataReceivedi+0x21c>)
   d4212:	f000 fefa 	bl	d500a <_ZN5Print7printlnEPKc>
   d4216:	e7ad      	b.n	d4174 <_Z12dataReceivedi+0xb8>
        strip.setPixelColor(i - 1, brightRed);
   d4218:	f8df b0c8 	ldr.w	fp, [pc, #200]	; d42e4 <_Z12dataReceivedi+0x228>
   d421c:	4e2f      	ldr	r6, [pc, #188]	; (d42dc <_Z12dataReceivedi+0x220>)
        strip.setPixelColor(i, red);
   d421e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; d42e8 <_Z12dataReceivedi+0x22c>
    for(int i = 0; i < size; i++){
   d4222:	42ac      	cmp	r4, r5
   d4224:	da34      	bge.n	d4290 <_Z12dataReceivedi+0x1d4>
    if(inputBuffer[i] == '1'){
   d4226:	f818 3004 	ldrb.w	r3, [r8, r4]
   d422a:	2b31      	cmp	r3, #49	; 0x31
   d422c:	d119      	bne.n	d4262 <_Z12dataReceivedi+0x1a6>
        strip.setPixelColor(i - 1, red);
   d422e:	fa1f f984 	uxth.w	r9, r4
   d4232:	f109 31ff 	add.w	r1, r9, #4294967295
   d4236:	f8da 2000 	ldr.w	r2, [sl]
   d423a:	b289      	uxth	r1, r1
   d423c:	4630      	mov	r0, r6
   d423e:	f000 fa1d 	bl	d467c <_ZN16Adafruit_DotStar13setPixelColorEtm>
        strip.setPixelColor(i, red);
   d4242:	f8da 2000 	ldr.w	r2, [sl]
   d4246:	4649      	mov	r1, r9
   d4248:	4630      	mov	r0, r6
   d424a:	f000 fa17 	bl	d467c <_ZN16Adafruit_DotStar13setPixelColorEtm>
        strip.setPixelColor(i + 1, brightRed);
   d424e:	f8db 2000 	ldr.w	r2, [fp]
   d4252:	f109 0101 	add.w	r1, r9, #1
        strip.setPixelColor(i + 1, red);
   d4256:	b289      	uxth	r1, r1
   d4258:	4630      	mov	r0, r6
   d425a:	f000 fa0f 	bl	d467c <_ZN16Adafruit_DotStar13setPixelColorEtm>
    for(int i = 0; i < size; i++){
   d425e:	3401      	adds	r4, #1
   d4260:	e7df      	b.n	d4222 <_Z12dataReceivedi+0x166>
      }else if(inputBuffer[i] == '5'){
   d4262:	2b35      	cmp	r3, #53	; 0x35
   d4264:	d1fb      	bne.n	d425e <_Z12dataReceivedi+0x1a2>
        strip.setPixelColor(i - 1, brightRed);
   d4266:	fa1f f984 	uxth.w	r9, r4
   d426a:	f109 31ff 	add.w	r1, r9, #4294967295
   d426e:	f8db 2000 	ldr.w	r2, [fp]
   d4272:	b289      	uxth	r1, r1
   d4274:	4630      	mov	r0, r6
   d4276:	f000 fa01 	bl	d467c <_ZN16Adafruit_DotStar13setPixelColorEtm>
        strip.setPixelColor(i, red);
   d427a:	f8da 2000 	ldr.w	r2, [sl]
   d427e:	4649      	mov	r1, r9
   d4280:	4630      	mov	r0, r6
   d4282:	f000 f9fb 	bl	d467c <_ZN16Adafruit_DotStar13setPixelColorEtm>
        strip.setPixelColor(i + 1, red);
   d4286:	f8da 2000 	ldr.w	r2, [sl]
   d428a:	f109 0101 	add.w	r1, r9, #1
   d428e:	e7e2      	b.n	d4256 <_Z12dataReceivedi+0x19a>
    strip.show();
   d4290:	4812      	ldr	r0, [pc, #72]	; (d42dc <_Z12dataReceivedi+0x220>)
      strip.setPixelColor(i, 0);
   d4292:	4e12      	ldr	r6, [pc, #72]	; (d42dc <_Z12dataReceivedi+0x220>)
    strip.show();
   d4294:	f000 fa42 	bl	d471c <_ZN16Adafruit_DotStar4showEv>
    for(int i = 0; i < size; i++){
   d4298:	2400      	movs	r4, #0
   d429a:	42ac      	cmp	r4, r5
   d429c:	f6bf af6a 	bge.w	d4174 <_Z12dataReceivedi+0xb8>
      strip.setPixelColor(i, 0);
   d42a0:	b2a1      	uxth	r1, r4
   d42a2:	2200      	movs	r2, #0
   d42a4:	4630      	mov	r0, r6
   d42a6:	f000 f9e9 	bl	d467c <_ZN16Adafruit_DotStar13setPixelColorEtm>
    for(int i = 0; i < size; i++){
   d42aa:	3401      	adds	r4, #1
   d42ac:	e7f5      	b.n	d429a <_Z12dataReceivedi+0x1de>
   d42ae:	bf00      	nop
   d42b0:	000d59e8 	.word	0x000d59e8
   d42b4:	2003e615 	.word	0x2003e615
   d42b8:	000d59f0 	.word	0x000d59f0
   d42bc:	2003e628 	.word	0x2003e628
   d42c0:	2003e614 	.word	0x2003e614
   d42c4:	2003e63c 	.word	0x2003e63c
   d42c8:	000d5a00 	.word	0x000d5a00
   d42cc:	2003e610 	.word	0x2003e610
   d42d0:	000d40bd 	.word	0x000d40bd
   d42d4:	000d4311 	.word	0x000d4311
   d42d8:	000d5a12 	.word	0x000d5a12
   d42dc:	2003e62c 	.word	0x2003e62c
   d42e0:	2003e618 	.word	0x2003e618
   d42e4:	2003e590 	.word	0x2003e590
   d42e8:	2003e594 	.word	0x2003e594

000d42ec <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d42ec:	b513      	push	{r0, r1, r4, lr}
   d42ee:	4604      	mov	r4, r0
    }
   d42f0:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d42f2:	b159      	cbz	r1, d430c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d42f4:	9101      	str	r1, [sp, #4]
   d42f6:	f001 fb65 	bl	d59c4 <strlen>
   d42fa:	6823      	ldr	r3, [r4, #0]
   d42fc:	9901      	ldr	r1, [sp, #4]
   d42fe:	68db      	ldr	r3, [r3, #12]
   d4300:	4602      	mov	r2, r0
   d4302:	4620      	mov	r0, r4
    }
   d4304:	b002      	add	sp, #8
   d4306:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d430a:	4718      	bx	r3
    }
   d430c:	b002      	add	sp, #8
   d430e:	bd10      	pop	{r4, pc}

000d4310 <_Z11dataRequestv>:

void dataRequest(){
   d4310:	b510      	push	{r4, lr}
  Serial.println("request received");
   d4312:	f001 f843 	bl	d539c <_Z16_fetch_usbserialv>
   d4316:	4915      	ldr	r1, [pc, #84]	; (d436c <_Z11dataRequestv+0x5c>)
   d4318:	f000 fe77 	bl	d500a <_ZN5Print7printlnEPKc>
  switch(requestMode){
   d431c:	4b14      	ldr	r3, [pc, #80]	; (d4370 <_Z11dataRequestv+0x60>)
   d431e:	681b      	ldr	r3, [r3, #0]
   d4320:	2b01      	cmp	r3, #1
   d4322:	d002      	beq.n	d432a <_Z11dataRequestv+0x1a>
   d4324:	2b02      	cmp	r3, #2
   d4326:	d00c      	beq.n	d4342 <_Z11dataRequestv+0x32>
        Wire.write("fail");
      }
      break;
    }
  }
}
   d4328:	bd10      	pop	{r4, pc}
      Serial.println("request mode 1");
   d432a:	f001 f837 	bl	d539c <_Z16_fetch_usbserialv>
   d432e:	4911      	ldr	r1, [pc, #68]	; (d4374 <_Z11dataRequestv+0x64>)
   d4330:	f000 fe6b 	bl	d500a <_ZN5Print7printlnEPKc>
      Wire.write(deviceID);
   d4334:	f001 fa98 	bl	d5868 <_Z19__fetch_global_Wirev>
	#ifdef __GXX_EXPERIMENTAL_CXX0X__
	String & operator = (String &&rval);
	String & operator = (StringSumHelper &&rval);
	#endif

        operator const char*() const { return c_str(); }
   d4338:	4b0f      	ldr	r3, [pc, #60]	; (d4378 <_Z11dataRequestv+0x68>)
   d433a:	6819      	ldr	r1, [r3, #0]
        Wire.write("fail");
   d433c:	f7ff ffd6 	bl	d42ec <_ZN5Print5writeEPKc>
}
   d4340:	e7f2      	b.n	d4328 <_Z11dataRequestv+0x18>
      if(verifyAddress){
   d4342:	4c0e      	ldr	r4, [pc, #56]	; (d437c <_Z11dataRequestv+0x6c>)
      Serial.println("request mode 2");
   d4344:	f001 f82a 	bl	d539c <_Z16_fetch_usbserialv>
   d4348:	490d      	ldr	r1, [pc, #52]	; (d4380 <_Z11dataRequestv+0x70>)
   d434a:	f000 fe5e 	bl	d500a <_ZN5Print7printlnEPKc>
      if(verifyAddress){
   d434e:	7823      	ldrb	r3, [r4, #0]
   d4350:	b13b      	cbz	r3, d4362 <_Z11dataRequestv+0x52>
        Wire.write("pass");
   d4352:	f001 fa89 	bl	d5868 <_Z19__fetch_global_Wirev>
   d4356:	490b      	ldr	r1, [pc, #44]	; (d4384 <_Z11dataRequestv+0x74>)
   d4358:	f7ff ffc8 	bl	d42ec <_ZN5Print5writeEPKc>
        verifyAddress = false;
   d435c:	2300      	movs	r3, #0
   d435e:	7023      	strb	r3, [r4, #0]
}
   d4360:	e7e2      	b.n	d4328 <_Z11dataRequestv+0x18>
        Wire.write("fail");
   d4362:	f001 fa81 	bl	d5868 <_Z19__fetch_global_Wirev>
   d4366:	4908      	ldr	r1, [pc, #32]	; (d4388 <_Z11dataRequestv+0x78>)
   d4368:	e7e8      	b.n	d433c <_Z11dataRequestv+0x2c>
   d436a:	bf00      	nop
   d436c:	000d5a22 	.word	0x000d5a22
   d4370:	2003e628 	.word	0x2003e628
   d4374:	000d5a33 	.word	0x000d5a33
   d4378:	2003e618 	.word	0x2003e618
   d437c:	2003e63c 	.word	0x2003e63c
   d4380:	000d5a42 	.word	0x000d5a42
   d4384:	000d5a51 	.word	0x000d5a51
   d4388:	000d5a56 	.word	0x000d5a56

000d438c <loop>:
void loop() {
   d438c:	b508      	push	{r3, lr}
  if(blink){
   d438e:	4b0c      	ldr	r3, [pc, #48]	; (d43c0 <loop+0x34>)
   d4390:	781b      	ldrb	r3, [r3, #0]
   d4392:	b17b      	cbz	r3, d43b4 <loop+0x28>
    digitalWrite(D7, HIGH);
   d4394:	2101      	movs	r1, #1
   d4396:	2007      	movs	r0, #7
   d4398:	f001 fa4d 	bl	d5836 <digitalWrite>
    delay(500);
   d439c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d43a0:	f000 fe7e 	bl	d50a0 <delay>
    digitalWrite(D7, LOW);
   d43a4:	2007      	movs	r0, #7
   d43a6:	2100      	movs	r1, #0
   d43a8:	f001 fa45 	bl	d5836 <digitalWrite>
    delay(500);
   d43ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d43b0:	f000 fe76 	bl	d50a0 <delay>
}
   d43b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  delay(100);
   d43b8:	2064      	movs	r0, #100	; 0x64
   d43ba:	f000 be71 	b.w	d50a0 <delay>
   d43be:	bf00      	nop
   d43c0:	2003e614 	.word	0x2003e614

000d43c4 <_Z17acquireWireBufferv>:

hal_i2c_config_t acquireWireBuffer() {
   d43c4:	b538      	push	{r3, r4, r5, lr}
    hal_i2c_config_t config = {
   d43c6:	2300      	movs	r3, #0
   d43c8:	f44f 7500 	mov.w	r5, #512	; 0x200
   d43cc:	8043      	strh	r3, [r0, #2]
   d43ce:	2314      	movs	r3, #20
hal_i2c_config_t acquireWireBuffer() {
   d43d0:	4604      	mov	r4, r0
    hal_i2c_config_t config = {
   d43d2:	8003      	strh	r3, [r0, #0]
   d43d4:	6085      	str	r5, [r0, #8]
   d43d6:	6105      	str	r5, [r0, #16]
        .size = sizeof(hal_i2c_config_t),
        .version = HAL_I2C_CONFIG_VERSION_1,
        .rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_SIZE],
   d43d8:	4905      	ldr	r1, [pc, #20]	; (d43f0 <_Z17acquireWireBufferv+0x2c>)
   d43da:	4628      	mov	r0, r5
   d43dc:	f001 fa73 	bl	d58c6 <_ZnajRKSt9nothrow_t>
        .rx_buffer_size = I2C_BUFFER_SIZE,
        .tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_SIZE],
   d43e0:	4903      	ldr	r1, [pc, #12]	; (d43f0 <_Z17acquireWireBufferv+0x2c>)
        .tx_buffer_size = I2C_BUFFER_SIZE
    };
   d43e2:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_SIZE],
   d43e4:	4628      	mov	r0, r5
   d43e6:	f001 fa6e 	bl	d58c6 <_ZnajRKSt9nothrow_t>
    };
   d43ea:	60e0      	str	r0, [r4, #12]
    return config;
   d43ec:	4620      	mov	r0, r4
   d43ee:	bd38      	pop	{r3, r4, r5, pc}
   d43f0:	000d5bd4 	.word	0x000d5bd4

000d43f4 <setup>:
void setup() {
   d43f4:	b510      	push	{r4, lr}
   d43f6:	b086      	sub	sp, #24
  Serial.begin(9600);
   d43f8:	f000 ffd0 	bl	d539c <_Z16_fetch_usbserialv>
   d43fc:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4400:	f000 ffc0 	bl	d5384 <_ZN9USBSerial5beginEl>
  address = random(8, 64);
   d4404:	2140      	movs	r1, #64	; 0x40
   d4406:	2008      	movs	r0, #8
   d4408:	f001 f8ce 	bl	d55a8 <_Z6randomii>
   d440c:	4c10      	ldr	r4, [pc, #64]	; (d4450 <setup+0x5c>)
   d440e:	6020      	str	r0, [r4, #0]
  acquireWireBuffer();
   d4410:	a801      	add	r0, sp, #4
   d4412:	f7ff ffd7 	bl	d43c4 <_Z17acquireWireBufferv>
  Wire.begin(address);
   d4416:	f001 fa27 	bl	d5868 <_Z19__fetch_global_Wirev>
   d441a:	6821      	ldr	r1, [r4, #0]
   d441c:	f001 f8aa 	bl	d5574 <_ZN7TwoWire5beginEi>
  Wire.onReceive(dataReceived);
   d4420:	f001 fa22 	bl	d5868 <_Z19__fetch_global_Wirev>
   d4424:	490b      	ldr	r1, [pc, #44]	; (d4454 <setup+0x60>)
   d4426:	f001 f8ac 	bl	d5582 <_ZN7TwoWire9onReceiveEPFviE>
  Wire.onRequest(dataRequest);
   d442a:	f001 fa1d 	bl	d5868 <_Z19__fetch_global_Wirev>
   d442e:	490a      	ldr	r1, [pc, #40]	; (d4458 <setup+0x64>)
   d4430:	f001 f8ab 	bl	d558a <_ZN7TwoWire9onRequestEPFvvE>
  pinMode(D7, OUTPUT);
   d4434:	2101      	movs	r1, #1
   d4436:	2007      	movs	r0, #7
   d4438:	f001 f9ec 	bl	d5814 <pinMode>
  strip.begin();
   d443c:	4807      	ldr	r0, [pc, #28]	; (d445c <setup+0x68>)
   d443e:	f000 fa12 	bl	d4866 <_ZN16Adafruit_DotStar5beginEv>
  strip.show();
   d4442:	4806      	ldr	r0, [pc, #24]	; (d445c <setup+0x68>)
}
   d4444:	b006      	add	sp, #24
   d4446:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  strip.show();
   d444a:	f000 b967 	b.w	d471c <_ZN16Adafruit_DotStar4showEv>
   d444e:	bf00      	nop
   d4450:	2003e610 	.word	0x2003e610
   d4454:	000d40bd 	.word	0x000d40bd
   d4458:	000d4311 	.word	0x000d4311
   d445c:	2003e62c 	.word	0x2003e62c

000d4460 <_GLOBAL__sub_I_SystemMode>:
   d4460:	b538      	push	{r3, r4, r5, lr}
              error_(SYSTEM_ERROR_NONE) {
   d4462:	4c13      	ldr	r4, [pc, #76]	; (d44b0 <_GLOBAL__sub_I_SystemMode+0x50>)
SYSTEM_MODE(MANUAL)
   d4464:	4d13      	ldr	r5, [pc, #76]	; (d44b4 <_GLOBAL__sub_I_SystemMode+0x54>)
   d4466:	2300      	movs	r3, #0
   d4468:	6023      	str	r3, [r4, #0]
   d446a:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   d446c:	71a3      	strb	r3, [r4, #6]
   d446e:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
   d4472:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4474:	2003      	movs	r0, #3
   d4476:	f000 fb95 	bl	d4ba4 <set_system_mode>
   d447a:	462a      	mov	r2, r5
   d447c:	490e      	ldr	r1, [pc, #56]	; (d44b8 <_GLOBAL__sub_I_SystemMode+0x58>)
   d447e:	4620      	mov	r0, r4
   d4480:	f001 fa1a 	bl	d58b8 <__aeabi_atexit>
Adafruit_DotStar strip = Adafruit_DotStar(72);
   d4484:	4c0d      	ldr	r4, [pc, #52]	; (d44bc <_GLOBAL__sub_I_SystemMode+0x5c>)
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count());
    }

    static String deviceID(void) {
        return spark_deviceID();
   d4486:	480e      	ldr	r0, [pc, #56]	; (d44c0 <_GLOBAL__sub_I_SystemMode+0x60>)
   d4488:	f000 fc10 	bl	d4cac <spark_deviceID>
String deviceID = System.deviceID();
   d448c:	462a      	mov	r2, r5
   d448e:	490d      	ldr	r1, [pc, #52]	; (d44c4 <_GLOBAL__sub_I_SystemMode+0x64>)
   d4490:	480b      	ldr	r0, [pc, #44]	; (d44c0 <_GLOBAL__sub_I_SystemMode+0x60>)
   d4492:	f001 fa11 	bl	d58b8 <__aeabi_atexit>
Adafruit_DotStar strip = Adafruit_DotStar(72);
   d4496:	2212      	movs	r2, #18
   d4498:	2148      	movs	r1, #72	; 0x48
   d449a:	4620      	mov	r0, r4
   d449c:	f000 f8d9 	bl	d4652 <_ZN16Adafruit_DotStarC1Eth>
   d44a0:	462a      	mov	r2, r5
   d44a2:	4620      	mov	r0, r4
   d44a4:	4908      	ldr	r1, [pc, #32]	; (d44c8 <_GLOBAL__sub_I_SystemMode+0x68>)
   d44a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
Adafruit_DotStar strip = Adafruit_DotStar(72);
   d44aa:	f001 ba05 	b.w	d58b8 <__aeabi_atexit>
   d44ae:	bf00      	nop
   d44b0:	2003e604 	.word	0x2003e604
   d44b4:	2003e600 	.word	0x2003e600
   d44b8:	000d40ab 	.word	0x000d40ab
   d44bc:	2003e62c 	.word	0x2003e62c
   d44c0:	2003e618 	.word	0x2003e618
   d44c4:	000d4f49 	.word	0x000d4f49
   d44c8:	000d46e7 	.word	0x000d46e7

000d44cc <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d44cc:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d44ce:	6803      	ldr	r3, [r0, #0]
   d44d0:	2b2f      	cmp	r3, #47	; 0x2f
{
   d44d2:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d44d4:	d904      	bls.n	d44e0 <nrf_gpio_pin_port_decode+0x14>
   d44d6:	4a07      	ldr	r2, [pc, #28]	; (d44f4 <nrf_gpio_pin_port_decode+0x28>)
   d44d8:	2100      	movs	r1, #0
   d44da:	200a      	movs	r0, #10
   d44dc:	f000 fb5a 	bl	d4b94 <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   d44e0:	6823      	ldr	r3, [r4, #0]
   d44e2:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d44e4:	bf83      	ittte	hi
   d44e6:	f003 031f 	andhi.w	r3, r3, #31
        return NRF_P1;
   d44ea:	4803      	ldrhi	r0, [pc, #12]	; (d44f8 <nrf_gpio_pin_port_decode+0x2c>)
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d44ec:	6023      	strhi	r3, [r4, #0]
        return NRF_P0;
   d44ee:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    }
#endif
}
   d44f2:	bd10      	pop	{r4, pc}
   d44f4:	000d48f5 	.word	0x000d48f5
   d44f8:	50000300 	.word	0x50000300

000d44fc <nrf_gpio_pin_clear>:
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
}


__STATIC_INLINE void nrf_gpio_pin_clear(uint32_t pin_number)
{
   d44fc:	b507      	push	{r0, r1, r2, lr}
   d44fe:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4500:	a801      	add	r0, sp, #4
   d4502:	f7ff ffe3 	bl	d44cc <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   d4506:	9a01      	ldr	r2, [sp, #4]
   d4508:	2301      	movs	r3, #1
   d450a:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   d450c:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
}
   d4510:	b003      	add	sp, #12
   d4512:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4518 <_ZN16Adafruit_DotStar11sw_spi_initEv>:

void Adafruit_DotStar::hw_spi_end(void) { // Stop hardware SPI
  SPI.end();
}

void Adafruit_DotStar::sw_spi_init(void) { // Init 'soft' (bitbang) SPI
   d4518:	b538      	push	{r3, r4, r5, lr}
   d451a:	4604      	mov	r4, r0
  pinMode(dataPin , OUTPUT);
  pinMode(clockPin, OUTPUT);
  pinSet(dataPin , LOW);
   d451c:	4d12      	ldr	r5, [pc, #72]	; (d4568 <_ZN16Adafruit_DotStar11sw_spi_initEv+0x50>)
  pinMode(dataPin , OUTPUT);
   d451e:	7880      	ldrb	r0, [r0, #2]
   d4520:	2101      	movs	r1, #1
   d4522:	f001 f977 	bl	d5814 <pinMode>
  pinMode(clockPin, OUTPUT);
   d4526:	78e0      	ldrb	r0, [r4, #3]
   d4528:	2101      	movs	r1, #1
   d452a:	f001 f973 	bl	d5814 <pinMode>
  pinSet(dataPin , LOW);
   d452e:	682a      	ldr	r2, [r5, #0]
   d4530:	78a3      	ldrb	r3, [r4, #2]
   d4532:	0119      	lsls	r1, r3, #4
   d4534:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   d4538:	5c50      	ldrb	r0, [r2, r1]
   d453a:	785b      	ldrb	r3, [r3, #1]
   d453c:	f003 031f 	and.w	r3, r3, #31
   d4540:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   d4544:	f7ff ffda 	bl	d44fc <nrf_gpio_pin_clear>
  pinSet(clockPin, LOW);
   d4548:	78e3      	ldrb	r3, [r4, #3]
   d454a:	682a      	ldr	r2, [r5, #0]
   d454c:	0119      	lsls	r1, r3, #4
   d454e:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   d4552:	5c50      	ldrb	r0, [r2, r1]
   d4554:	785b      	ldrb	r3, [r3, #1]
   d4556:	f003 031f 	and.w	r3, r3, #31
   d455a:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
}
   d455e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  pinSet(clockPin, LOW);
   d4562:	f7ff bfcb 	b.w	d44fc <nrf_gpio_pin_clear>
   d4566:	bf00      	nop
   d4568:	2003e64c 	.word	0x2003e64c

000d456c <_ZN16Adafruit_DotStar10sw_spi_endEv>:

void Adafruit_DotStar::sw_spi_end() { // Stop 'soft' SPI
   d456c:	b510      	push	{r4, lr}
   d456e:	4604      	mov	r4, r0
  pinMode(dataPin , INPUT);
   d4570:	2100      	movs	r1, #0
   d4572:	7880      	ldrb	r0, [r0, #2]
   d4574:	f001 f94e 	bl	d5814 <pinMode>
  pinMode(clockPin, INPUT);
   d4578:	78e0      	ldrb	r0, [r4, #3]
   d457a:	2100      	movs	r1, #0
}
   d457c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pinMode(clockPin, INPUT);
   d4580:	f001 b948 	b.w	d5814 <pinMode>

000d4584 <_ZN16Adafruit_DotStar10sw_spi_outEh>:

void Adafruit_DotStar::sw_spi_out(uint8_t n) { // Bitbang SPI write
   d4584:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d4586:	4f23      	ldr	r7, [pc, #140]	; (d4614 <_ZN16Adafruit_DotStar10sw_spi_outEh+0x90>)
   d4588:	4605      	mov	r5, r0
   d458a:	460c      	mov	r4, r1
   d458c:	2609      	movs	r6, #9
  for(uint8_t i=8; i--; n <<= 1) {
   d458e:	3e01      	subs	r6, #1
   d4590:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   d4594:	d03c      	beq.n	d4610 <_ZN16Adafruit_DotStar10sw_spi_outEh+0x8c>
    if(n & 0x80) pinSet(dataPin, HIGH);
   d4596:	78ab      	ldrb	r3, [r5, #2]
   d4598:	683a      	ldr	r2, [r7, #0]
   d459a:	0119      	lsls	r1, r3, #4
   d459c:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   d45a0:	5c50      	ldrb	r0, [r2, r1]
   d45a2:	785b      	ldrb	r3, [r3, #1]
   d45a4:	f003 031f 	and.w	r3, r3, #31
   d45a8:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   d45ac:	0623      	lsls	r3, r4, #24
   d45ae:	d52c      	bpl.n	d460a <_ZN16Adafruit_DotStar10sw_spi_outEh+0x86>
   d45b0:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d45b2:	a801      	add	r0, sp, #4
   d45b4:	f7ff ff8a 	bl	d44cc <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d45b8:	9a01      	ldr	r2, [sp, #4]
   d45ba:	2301      	movs	r3, #1
   d45bc:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   d45be:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    else         pinSet(dataPin, LOW);
    pinSet(clockPin, HIGH);
   d45c2:	78eb      	ldrb	r3, [r5, #3]
   d45c4:	683a      	ldr	r2, [r7, #0]
   d45c6:	0119      	lsls	r1, r3, #4
   d45c8:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   d45cc:	5c52      	ldrb	r2, [r2, r1]
   d45ce:	785b      	ldrb	r3, [r3, #1]
   d45d0:	f003 031f 	and.w	r3, r3, #31
   d45d4:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d45d8:	a801      	add	r0, sp, #4
   d45da:	9301      	str	r3, [sp, #4]
   d45dc:	f7ff ff76 	bl	d44cc <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d45e0:	9a01      	ldr	r2, [sp, #4]
   d45e2:	2301      	movs	r3, #1
   d45e4:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   d45e6:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    pinSet(clockPin, LOW);
   d45ea:	78eb      	ldrb	r3, [r5, #3]
   d45ec:	683a      	ldr	r2, [r7, #0]
   d45ee:	0119      	lsls	r1, r3, #4
   d45f0:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   d45f4:	5c50      	ldrb	r0, [r2, r1]
   d45f6:	785b      	ldrb	r3, [r3, #1]
   d45f8:	f003 031f 	and.w	r3, r3, #31
   d45fc:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
  for(uint8_t i=8; i--; n <<= 1) {
   d4600:	0064      	lsls	r4, r4, #1
    pinSet(clockPin, LOW);
   d4602:	f7ff ff7b 	bl	d44fc <nrf_gpio_pin_clear>
  for(uint8_t i=8; i--; n <<= 1) {
   d4606:	b2e4      	uxtb	r4, r4
   d4608:	e7c1      	b.n	d458e <_ZN16Adafruit_DotStar10sw_spi_outEh+0xa>
    else         pinSet(dataPin, LOW);
   d460a:	f7ff ff77 	bl	d44fc <nrf_gpio_pin_clear>
   d460e:	e7d8      	b.n	d45c2 <_ZN16Adafruit_DotStar10sw_spi_outEh+0x3e>
  }
}
   d4610:	b003      	add	sp, #12
   d4612:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4614:	2003e64c 	.word	0x2003e64c

000d4618 <_ZN16Adafruit_DotStar5clearEv>:

  //__enable_irq();
}

void Adafruit_DotStar::clear() { // Write 0s (off) to full pixel buffer
  memset(pixels, 0, numLEDs * 3);
   d4618:	8802      	ldrh	r2, [r0, #0]
   d461a:	6880      	ldr	r0, [r0, #8]
   d461c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   d4620:	2100      	movs	r1, #0
   d4622:	f001 b96f 	b.w	d5904 <memset>

000d4626 <_ZN16Adafruit_DotStar12updateLengthEt>:
void Adafruit_DotStar::updateLength(uint16_t n) {
   d4626:	b538      	push	{r3, r4, r5, lr}
   d4628:	4604      	mov	r4, r0
  if(pixels) free(pixels);
   d462a:	6880      	ldr	r0, [r0, #8]
void Adafruit_DotStar::updateLength(uint16_t n) {
   d462c:	460d      	mov	r5, r1
  if(pixels) free(pixels);
   d462e:	b108      	cbz	r0, d4634 <_ZN16Adafruit_DotStar12updateLengthEt+0xe>
   d4630:	f000 fb54 	bl	d4cdc <free>
  uint16_t bytes = n * 3;
   d4634:	eb05 0045 	add.w	r0, r5, r5, lsl #1
  if((pixels = (uint8_t *)malloc(bytes))) {
   d4638:	b280      	uxth	r0, r0
   d463a:	f000 fb47 	bl	d4ccc <malloc>
   d463e:	60a0      	str	r0, [r4, #8]
   d4640:	b128      	cbz	r0, d464e <_ZN16Adafruit_DotStar12updateLengthEt+0x28>
    numLEDs = n;
   d4642:	8025      	strh	r5, [r4, #0]
    clear();
   d4644:	4620      	mov	r0, r4
}
   d4646:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    clear();
   d464a:	f7ff bfe5 	b.w	d4618 <_ZN16Adafruit_DotStar5clearEv>
    numLEDs = 0;
   d464e:	8020      	strh	r0, [r4, #0]
}
   d4650:	bd38      	pop	{r3, r4, r5, pc}

000d4652 <_ZN16Adafruit_DotStarC1Eth>:
Adafruit_DotStar::Adafruit_DotStar(uint16_t n, uint8_t o) :
   d4652:	b510      	push	{r4, lr}
 rOffset(o & 3), gOffset((o >> 2) & 3), bOffset((o >> 4) & 3)
   d4654:	23ff      	movs	r3, #255	; 0xff
   d4656:	7083      	strb	r3, [r0, #2]
   d4658:	2300      	movs	r3, #0
   d465a:	7103      	strb	r3, [r0, #4]
   d465c:	6083      	str	r3, [r0, #8]
   d465e:	f002 0303 	and.w	r3, r2, #3
   d4662:	7303      	strb	r3, [r0, #12]
   d4664:	f3c2 0381 	ubfx	r3, r2, #2, #2
   d4668:	f3c2 1201 	ubfx	r2, r2, #4, #2
Adafruit_DotStar::Adafruit_DotStar(uint16_t n, uint8_t o) :
   d466c:	4604      	mov	r4, r0
 rOffset(o & 3), gOffset((o >> 2) & 3), bOffset((o >> 4) & 3)
   d466e:	8001      	strh	r1, [r0, #0]
   d4670:	7343      	strb	r3, [r0, #13]
   d4672:	7382      	strb	r2, [r0, #14]
  updateLength(n);
   d4674:	f7ff ffd7 	bl	d4626 <_ZN16Adafruit_DotStar12updateLengthEt>
}
   d4678:	4620      	mov	r0, r4
   d467a:	bd10      	pop	{r4, pc}

000d467c <_ZN16Adafruit_DotStar13setPixelColorEtm>:
  }
}

// Set pixel color, 'packed' RGB value (0x000000 - 0xFFFFFF)
void Adafruit_DotStar::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
   d467c:	8803      	ldrh	r3, [r0, #0]
   d467e:	428b      	cmp	r3, r1
void Adafruit_DotStar::setPixelColor(uint16_t n, uint32_t c) {
   d4680:	b510      	push	{r4, lr}
  if(n < numLEDs) {
   d4682:	d90b      	bls.n	d469c <_ZN16Adafruit_DotStar13setPixelColorEtm+0x20>
    uint8_t *p = &pixels[n * 3];
   d4684:	6883      	ldr	r3, [r0, #8]
   d4686:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   d468a:	4419      	add	r1, r3
    p[rOffset] = (uint8_t)(c >> 16);
   d468c:	7b03      	ldrb	r3, [r0, #12]
   d468e:	0c14      	lsrs	r4, r2, #16
   d4690:	54cc      	strb	r4, [r1, r3]
    p[gOffset] = (uint8_t)(c >>  8);
   d4692:	7b43      	ldrb	r3, [r0, #13]
   d4694:	0a14      	lsrs	r4, r2, #8
   d4696:	54cc      	strb	r4, [r1, r3]
    p[bOffset] = (uint8_t)c;
   d4698:	7b83      	ldrb	r3, [r0, #14]
   d469a:	54ca      	strb	r2, [r1, r3]
  }
}
   d469c:	bd10      	pop	{r4, pc}
	...

000d46a0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d46a0:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   d46a2:	4c0b      	ldr	r4, [pc, #44]	; (d46d0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   d46a4:	7821      	ldrb	r1, [r4, #0]
   d46a6:	f3bf 8f5b 	dmb	ish
   d46aa:	f011 0101 	ands.w	r1, r1, #1
   d46ae:	d10b      	bne.n	d46c8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d46b0:	4620      	mov	r0, r4
   d46b2:	9101      	str	r1, [sp, #4]
   d46b4:	f7ff fcf1 	bl	d409a <__cxa_guard_acquire>
   d46b8:	9901      	ldr	r1, [sp, #4]
   d46ba:	b128      	cbz	r0, d46c8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d46bc:	4805      	ldr	r0, [pc, #20]	; (d46d4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d46be:	f000 fb61 	bl	d4d84 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d46c2:	4620      	mov	r0, r4
   d46c4:	f7ff fcee 	bl	d40a4 <__cxa_guard_release>
        return instance;
    }
   d46c8:	4802      	ldr	r0, [pc, #8]	; (d46d4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d46ca:	b002      	add	sp, #8
   d46cc:	bd10      	pop	{r4, pc}
   d46ce:	bf00      	nop
   d46d0:	2003e640 	.word	0x2003e640
   d46d4:	2003e644 	.word	0x2003e644

000d46d8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE3endEv.isra.0>:
        instance().begin(ss_pin);
    }
    void begin(hal_spi_mode_t mode, uint16_t ss_pin = SPI_DEFAULT_SS) {
        instance().begin(mode, ss_pin);
    }
    void end() {
   d46d8:	b508      	push	{r3, lr}
        instance().end();
   d46da:	f7ff ffe1 	bl	d46a0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    }
   d46de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        instance().end();
   d46e2:	f000 bb6a 	b.w	d4dba <_ZN8SPIClass3endEv>

000d46e6 <_ZN16Adafruit_DotStarD1Ev>:
Adafruit_DotStar::~Adafruit_DotStar(void) { // Destructor
   d46e6:	b510      	push	{r4, lr}
   d46e8:	4604      	mov	r4, r0
  if(pixels)                free(pixels);
   d46ea:	6880      	ldr	r0, [r0, #8]
   d46ec:	b108      	cbz	r0, d46f2 <_ZN16Adafruit_DotStarD1Ev+0xc>
   d46ee:	f000 faf5 	bl	d4cdc <free>
  if(dataPin == USE_HW_SPI) hw_spi_end();
   d46f2:	78a3      	ldrb	r3, [r4, #2]
   d46f4:	2bff      	cmp	r3, #255	; 0xff
   d46f6:	d103      	bne.n	d4700 <_ZN16Adafruit_DotStarD1Ev+0x1a>
  SPI.end();
   d46f8:	f7ff ffee 	bl	d46d8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE3endEv.isra.0>
}
   d46fc:	4620      	mov	r0, r4
   d46fe:	bd10      	pop	{r4, pc}
  else                      sw_spi_end();
   d4700:	4620      	mov	r0, r4
   d4702:	f7ff ff33 	bl	d456c <_ZN16Adafruit_DotStar10sw_spi_endEv>
   d4706:	e7f9      	b.n	d46fc <_ZN16Adafruit_DotStarD1Ev+0x16>

000d4708 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>:
        return instance().setClockSpeed(value, scale);
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
   d4708:	b507      	push	{r0, r1, r2, lr}
   d470a:	9001      	str	r0, [sp, #4]
        return instance().transfer(data);
   d470c:	f7ff ffc8 	bl	d46a0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d4710:	9901      	ldr	r1, [sp, #4]
    }
   d4712:	b003      	add	sp, #12
   d4714:	f85d eb04 	ldr.w	lr, [sp], #4
        return instance().transfer(data);
   d4718:	f000 bbf2 	b.w	d4f00 <_ZN8SPIClass8transferEh>

000d471c <_ZN16Adafruit_DotStar4showEv>:
void Adafruit_DotStar::show(void) {
   d471c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(!pixels) return;
   d4720:	6884      	ldr	r4, [r0, #8]
void Adafruit_DotStar::show(void) {
   d4722:	4606      	mov	r6, r0
  if(!pixels) return;
   d4724:	2c00      	cmp	r4, #0
   d4726:	d074      	beq.n	d4812 <_ZN16Adafruit_DotStar4showEv+0xf6>
  if(dataPin == USE_HW_SPI) {
   d4728:	7883      	ldrb	r3, [r0, #2]
  uint16_t n   = numLEDs;              // Counter
   d472a:	8805      	ldrh	r5, [r0, #0]
  uint16_t b16 = (uint16_t)brightness; // Type-convert for fixed-point math
   d472c:	7907      	ldrb	r7, [r0, #4]
  if(dataPin == USE_HW_SPI) {
   d472e:	2bff      	cmp	r3, #255	; 0xff
   d4730:	d143      	bne.n	d47ba <_ZN16Adafruit_DotStar4showEv+0x9e>
    for(i=0; i<4; i++) spi_out(0x00);    // 4 byte start-frame marker
   d4732:	2000      	movs	r0, #0
   d4734:	f7ff ffe8 	bl	d4708 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
   d4738:	2000      	movs	r0, #0
   d473a:	f7ff ffe5 	bl	d4708 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
   d473e:	2000      	movs	r0, #0
   d4740:	f7ff ffe2 	bl	d4708 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
   d4744:	2000      	movs	r0, #0
   d4746:	f7ff ffdf 	bl	d4708 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
    if(brightness) {                     // Scale pixel brightness on output
   d474a:	7933      	ldrb	r3, [r6, #4]
   d474c:	3403      	adds	r4, #3
   d474e:	b1fb      	cbz	r3, d4790 <_ZN16Adafruit_DotStar4showEv+0x74>
        spi_out(0xFF);                   //  Pixel start
   d4750:	20ff      	movs	r0, #255	; 0xff
   d4752:	1ee6      	subs	r6, r4, #3
   d4754:	f7ff ffd8 	bl	d4708 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
        for(i=0; i<3; i++) spi_out((*ptr++ * b16) >> 8); // Scale, write RGB
   d4758:	f816 0b01 	ldrb.w	r0, [r6], #1
   d475c:	fb10 f007 	smulbb	r0, r0, r7
   d4760:	0a00      	lsrs	r0, r0, #8
   d4762:	f7ff ffd1 	bl	d4708 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
   d4766:	42a6      	cmp	r6, r4
   d4768:	d1f6      	bne.n	d4758 <_ZN16Adafruit_DotStar4showEv+0x3c>
      } while(--n);
   d476a:	3d01      	subs	r5, #1
   d476c:	b2ad      	uxth	r5, r5
   d476e:	3403      	adds	r4, #3
   d4770:	2d00      	cmp	r5, #0
   d4772:	d1ed      	bne.n	d4750 <_ZN16Adafruit_DotStar4showEv+0x34>
    for(i=0; i<4; i++) spi_out(0xFF);
   d4774:	20ff      	movs	r0, #255	; 0xff
   d4776:	f7ff ffc7 	bl	d4708 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
   d477a:	20ff      	movs	r0, #255	; 0xff
   d477c:	f7ff ffc4 	bl	d4708 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
   d4780:	20ff      	movs	r0, #255	; 0xff
   d4782:	f7ff ffc1 	bl	d4708 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
}
   d4786:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    for(i=0; i<4; i++) spi_out(0xFF);
   d478a:	20ff      	movs	r0, #255	; 0xff
   d478c:	f7ff bfbc 	b.w	d4708 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
        spi_out(0xFF);                   //  Pixel start
   d4790:	20ff      	movs	r0, #255	; 0xff
   d4792:	f7ff ffb9 	bl	d4708 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
        for(i=0; i<3; i++) spi_out(*ptr++); // Write R,G,B
   d4796:	f814 0c03 	ldrb.w	r0, [r4, #-3]
   d479a:	f7ff ffb5 	bl	d4708 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
      } while(--n);
   d479e:	3d01      	subs	r5, #1
        for(i=0; i<3; i++) spi_out(*ptr++); // Write R,G,B
   d47a0:	f814 0c02 	ldrb.w	r0, [r4, #-2]
   d47a4:	f7ff ffb0 	bl	d4708 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
      } while(--n);
   d47a8:	b2ad      	uxth	r5, r5
        for(i=0; i<3; i++) spi_out(*ptr++); // Write R,G,B
   d47aa:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   d47ae:	f7ff ffab 	bl	d4708 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
      } while(--n);
   d47b2:	3403      	adds	r4, #3
   d47b4:	2d00      	cmp	r5, #0
   d47b6:	d1eb      	bne.n	d4790 <_ZN16Adafruit_DotStar4showEv+0x74>
   d47b8:	e7dc      	b.n	d4774 <_ZN16Adafruit_DotStar4showEv+0x58>
   d47ba:	f04f 0804 	mov.w	r8, #4
    for(i=0; i<4; i++) sw_spi_out(0);    // Start-frame marker
   d47be:	2100      	movs	r1, #0
   d47c0:	4630      	mov	r0, r6
   d47c2:	f108 38ff 	add.w	r8, r8, #4294967295
   d47c6:	f7ff fedd 	bl	d4584 <_ZN16Adafruit_DotStar10sw_spi_outEh>
   d47ca:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
   d47ce:	d1f6      	bne.n	d47be <_ZN16Adafruit_DotStar4showEv+0xa2>
    if(brightness) {                     // Scale pixel brightness on output
   d47d0:	7933      	ldrb	r3, [r6, #4]
   d47d2:	3403      	adds	r4, #3
   d47d4:	b1fb      	cbz	r3, d4816 <_ZN16Adafruit_DotStar4showEv+0xfa>
        sw_spi_out(0xFF);                //  Pixel start
   d47d6:	21ff      	movs	r1, #255	; 0xff
   d47d8:	4630      	mov	r0, r6
   d47da:	f1a4 0803 	sub.w	r8, r4, #3
   d47de:	f7ff fed1 	bl	d4584 <_ZN16Adafruit_DotStar10sw_spi_outEh>
        for(i=0; i<3; i++) sw_spi_out((*ptr++ * b16) >> 8); // Scale, write
   d47e2:	f818 1b01 	ldrb.w	r1, [r8], #1
   d47e6:	fb11 f107 	smulbb	r1, r1, r7
   d47ea:	0a09      	lsrs	r1, r1, #8
   d47ec:	4630      	mov	r0, r6
   d47ee:	f7ff fec9 	bl	d4584 <_ZN16Adafruit_DotStar10sw_spi_outEh>
   d47f2:	45a0      	cmp	r8, r4
   d47f4:	d1f5      	bne.n	d47e2 <_ZN16Adafruit_DotStar4showEv+0xc6>
      } while(--n);
   d47f6:	3d01      	subs	r5, #1
   d47f8:	b2ad      	uxth	r5, r5
   d47fa:	3403      	adds	r4, #3
   d47fc:	2d00      	cmp	r5, #0
   d47fe:	d1ea      	bne.n	d47d6 <_ZN16Adafruit_DotStar4showEv+0xba>
   d4800:	2404      	movs	r4, #4
    for(i=0; i<4; i++) sw_spi_out(0xFF); // End-frame marker (see note above)
   d4802:	21ff      	movs	r1, #255	; 0xff
   d4804:	4630      	mov	r0, r6
   d4806:	3c01      	subs	r4, #1
   d4808:	f7ff febc 	bl	d4584 <_ZN16Adafruit_DotStar10sw_spi_outEh>
   d480c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   d4810:	d1f7      	bne.n	d4802 <_ZN16Adafruit_DotStar4showEv+0xe6>
}
   d4812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        sw_spi_out(0xFF);                //  Pixel start
   d4816:	21ff      	movs	r1, #255	; 0xff
   d4818:	4630      	mov	r0, r6
   d481a:	1ee7      	subs	r7, r4, #3
   d481c:	f7ff feb2 	bl	d4584 <_ZN16Adafruit_DotStar10sw_spi_outEh>
        for(i=0; i<3; i++) sw_spi_out(*ptr++); // R,G,B
   d4820:	f817 1b01 	ldrb.w	r1, [r7], #1
   d4824:	4630      	mov	r0, r6
   d4826:	f7ff fead 	bl	d4584 <_ZN16Adafruit_DotStar10sw_spi_outEh>
   d482a:	42a7      	cmp	r7, r4
   d482c:	d1f8      	bne.n	d4820 <_ZN16Adafruit_DotStar4showEv+0x104>
      } while(--n);
   d482e:	3d01      	subs	r5, #1
   d4830:	b2ad      	uxth	r5, r5
   d4832:	3403      	adds	r4, #3
   d4834:	2d00      	cmp	r5, #0
   d4836:	d1ee      	bne.n	d4816 <_ZN16Adafruit_DotStar4showEv+0xfa>
   d4838:	e7e2      	b.n	d4800 <_ZN16Adafruit_DotStar4showEv+0xe4>

000d483a <_ZN16Adafruit_DotStar11hw_spi_initEv>:
void Adafruit_DotStar::hw_spi_init(void) { // Initialize hardware SPI
   d483a:	b508      	push	{r3, lr}
        instance().begin();
   d483c:	f7ff ff30 	bl	d46a0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d4840:	f000 faaa 	bl	d4d98 <_ZN8SPIClass5beginEv>
        instance().setClockDivider(divider);
   d4844:	f7ff ff2c 	bl	d46a0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d4848:	2108      	movs	r1, #8
   d484a:	f000 fb33 	bl	d4eb4 <_ZN8SPIClass15setClockDividerEh>
        instance().setBitOrder(order);
   d484e:	f7ff ff27 	bl	d46a0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d4852:	2101      	movs	r1, #1
   d4854:	f000 fac0 	bl	d4dd8 <_ZN8SPIClass11setBitOrderEh>
        instance().setDataMode(mode);
   d4858:	f7ff ff22 	bl	d46a0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
}
   d485c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4860:	2100      	movs	r1, #0
   d4862:	f000 bacc 	b.w	d4dfe <_ZN8SPIClass11setDataModeEh>

000d4866 <_ZN16Adafruit_DotStar5beginEv>:
  if(dataPin == USE_HW_SPI) hw_spi_init();
   d4866:	7883      	ldrb	r3, [r0, #2]
   d4868:	2bff      	cmp	r3, #255	; 0xff
   d486a:	d101      	bne.n	d4870 <_ZN16Adafruit_DotStar5beginEv+0xa>
   d486c:	f7ff bfe5 	b.w	d483a <_ZN16Adafruit_DotStar11hw_spi_initEv>
  else                      sw_spi_init();
   d4870:	f7ff be52 	b.w	d4518 <_ZN16Adafruit_DotStar11sw_spi_initEv>

000d4874 <_GLOBAL__sub_I_PIN_MAP2>:
// Return pointer to the library's pixel data buffer.  Use carefully,
// much opportunity for mayhem.  It's mostly for code that needs fast
// transfers, e.g. SD card to LEDs.  Color data is in BGR order.
uint8_t *Adafruit_DotStar::getPixels(void) const {
  return pixels;
}
   d4874:	b508      	push	{r3, lr}
  NRF5x_Pin_Info* PIN_MAP2 = HAL_Pin_Map();
   d4876:	f000 f815 	bl	d48a4 <HAL_Pin_Map>
   d487a:	4b01      	ldr	r3, [pc, #4]	; (d4880 <_GLOBAL__sub_I_PIN_MAP2+0xc>)
   d487c:	6018      	str	r0, [r3, #0]
}
   d487e:	bd08      	pop	{r3, pc}
   d4880:	2003e64c 	.word	0x2003e64c

000d4884 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4884:	b508      	push	{r3, lr}
   d4886:	4b02      	ldr	r3, [pc, #8]	; (d4890 <netdb_freeaddrinfo+0xc>)
   d4888:	681b      	ldr	r3, [r3, #0]
   d488a:	689b      	ldr	r3, [r3, #8]
   d488c:	9301      	str	r3, [sp, #4]
   d488e:	bd08      	pop	{r3, pc}
   d4890:	00030268 	.word	0x00030268

000d4894 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4894:	b508      	push	{r3, lr}
   d4896:	4b02      	ldr	r3, [pc, #8]	; (d48a0 <netdb_getaddrinfo+0xc>)
   d4898:	681b      	ldr	r3, [r3, #0]
   d489a:	68db      	ldr	r3, [r3, #12]
   d489c:	9301      	str	r3, [sp, #4]
   d489e:	bd08      	pop	{r3, pc}
   d48a0:	00030268 	.word	0x00030268

000d48a4 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d48a4:	b508      	push	{r3, lr}
   d48a6:	4b02      	ldr	r3, [pc, #8]	; (d48b0 <HAL_Pin_Map+0xc>)
   d48a8:	681b      	ldr	r3, [r3, #0]
   d48aa:	681b      	ldr	r3, [r3, #0]
   d48ac:	9301      	str	r3, [sp, #4]
   d48ae:	bd08      	pop	{r3, pc}
   d48b0:	0003022c 	.word	0x0003022c

000d48b4 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d48b4:	b508      	push	{r3, lr}
   d48b6:	4b02      	ldr	r3, [pc, #8]	; (d48c0 <HAL_Pin_Mode+0xc>)
   d48b8:	681b      	ldr	r3, [r3, #0]
   d48ba:	689b      	ldr	r3, [r3, #8]
   d48bc:	9301      	str	r3, [sp, #4]
   d48be:	bd08      	pop	{r3, pc}
   d48c0:	0003022c 	.word	0x0003022c

000d48c4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d48c4:	b508      	push	{r3, lr}
   d48c6:	4b02      	ldr	r3, [pc, #8]	; (d48d0 <HAL_Get_Pin_Mode+0xc>)
   d48c8:	681b      	ldr	r3, [r3, #0]
   d48ca:	68db      	ldr	r3, [r3, #12]
   d48cc:	9301      	str	r3, [sp, #4]
   d48ce:	bd08      	pop	{r3, pc}
   d48d0:	0003022c 	.word	0x0003022c

000d48d4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d48d4:	b508      	push	{r3, lr}
   d48d6:	4b02      	ldr	r3, [pc, #8]	; (d48e0 <HAL_GPIO_Write+0xc>)
   d48d8:	681b      	ldr	r3, [r3, #0]
   d48da:	691b      	ldr	r3, [r3, #16]
   d48dc:	9301      	str	r3, [sp, #4]
   d48de:	bd08      	pop	{r3, pc}
   d48e0:	0003022c 	.word	0x0003022c

000d48e4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d48e4:	b508      	push	{r3, lr}
   d48e6:	4b02      	ldr	r3, [pc, #8]	; (d48f0 <HAL_RNG_GetRandomNumber+0xc>)
   d48e8:	681b      	ldr	r3, [r3, #0]
   d48ea:	685b      	ldr	r3, [r3, #4]
   d48ec:	9301      	str	r3, [sp, #4]
   d48ee:	bd08      	pop	{r3, pc}
   d48f0:	00030218 	.word	0x00030218

000d48f4 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d48f4:	b508      	push	{r3, lr}
   d48f6:	4b02      	ldr	r3, [pc, #8]	; (d4900 <HAL_Delay_Microseconds+0xc>)
   d48f8:	681b      	ldr	r3, [r3, #0]
   d48fa:	68db      	ldr	r3, [r3, #12]
   d48fc:	9301      	str	r3, [sp, #4]
   d48fe:	bd08      	pop	{r3, pc}
   d4900:	00030218 	.word	0x00030218

000d4904 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4904:	b508      	push	{r3, lr}
   d4906:	4b02      	ldr	r3, [pc, #8]	; (d4910 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4908:	681b      	ldr	r3, [r3, #0]
   d490a:	695b      	ldr	r3, [r3, #20]
   d490c:	9301      	str	r3, [sp, #4]
   d490e:	bd08      	pop	{r3, pc}
   d4910:	00030218 	.word	0x00030218

000d4914 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4914:	b508      	push	{r3, lr}
   d4916:	4b02      	ldr	r3, [pc, #8]	; (d4920 <os_mutex_recursive_create+0xc>)
   d4918:	681b      	ldr	r3, [r3, #0]
   d491a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d491c:	9301      	str	r3, [sp, #4]
   d491e:	bd08      	pop	{r3, pc}
   d4920:	00030248 	.word	0x00030248

000d4924 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4924:	b508      	push	{r3, lr}
   d4926:	4b02      	ldr	r3, [pc, #8]	; (d4930 <os_mutex_recursive_destroy+0xc>)
   d4928:	681b      	ldr	r3, [r3, #0]
   d492a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d492c:	9301      	str	r3, [sp, #4]
   d492e:	bd08      	pop	{r3, pc}
   d4930:	00030248 	.word	0x00030248

000d4934 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4934:	b508      	push	{r3, lr}
   d4936:	4b02      	ldr	r3, [pc, #8]	; (d4940 <inet_inet_ntop+0xc>)
   d4938:	681b      	ldr	r3, [r3, #0]
   d493a:	695b      	ldr	r3, [r3, #20]
   d493c:	9301      	str	r3, [sp, #4]
   d493e:	bd08      	pop	{r3, pc}
   d4940:	00030264 	.word	0x00030264

000d4944 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d4944:	b508      	push	{r3, lr}
   d4946:	4b02      	ldr	r3, [pc, #8]	; (d4950 <hal_usart_init+0xc>)
   d4948:	681b      	ldr	r3, [r3, #0]
   d494a:	681b      	ldr	r3, [r3, #0]
   d494c:	9301      	str	r3, [sp, #4]
   d494e:	bd08      	pop	{r3, pc}
   d4950:	0003023c 	.word	0x0003023c

000d4954 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d4954:	b508      	push	{r3, lr}
   d4956:	4b02      	ldr	r3, [pc, #8]	; (d4960 <hal_usart_write+0xc>)
   d4958:	681b      	ldr	r3, [r3, #0]
   d495a:	68db      	ldr	r3, [r3, #12]
   d495c:	9301      	str	r3, [sp, #4]
   d495e:	bd08      	pop	{r3, pc}
   d4960:	0003023c 	.word	0x0003023c

000d4964 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d4964:	b508      	push	{r3, lr}
   d4966:	4b02      	ldr	r3, [pc, #8]	; (d4970 <hal_usart_available+0xc>)
   d4968:	681b      	ldr	r3, [r3, #0]
   d496a:	691b      	ldr	r3, [r3, #16]
   d496c:	9301      	str	r3, [sp, #4]
   d496e:	bd08      	pop	{r3, pc}
   d4970:	0003023c 	.word	0x0003023c

000d4974 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d4974:	b508      	push	{r3, lr}
   d4976:	4b02      	ldr	r3, [pc, #8]	; (d4980 <hal_usart_read+0xc>)
   d4978:	681b      	ldr	r3, [r3, #0]
   d497a:	695b      	ldr	r3, [r3, #20]
   d497c:	9301      	str	r3, [sp, #4]
   d497e:	bd08      	pop	{r3, pc}
   d4980:	0003023c 	.word	0x0003023c

000d4984 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d4984:	b508      	push	{r3, lr}
   d4986:	4b02      	ldr	r3, [pc, #8]	; (d4990 <hal_usart_peek+0xc>)
   d4988:	681b      	ldr	r3, [r3, #0]
   d498a:	699b      	ldr	r3, [r3, #24]
   d498c:	9301      	str	r3, [sp, #4]
   d498e:	bd08      	pop	{r3, pc}
   d4990:	0003023c 	.word	0x0003023c

000d4994 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d4994:	b508      	push	{r3, lr}
   d4996:	4b02      	ldr	r3, [pc, #8]	; (d49a0 <hal_usart_flush+0xc>)
   d4998:	681b      	ldr	r3, [r3, #0]
   d499a:	69db      	ldr	r3, [r3, #28]
   d499c:	9301      	str	r3, [sp, #4]
   d499e:	bd08      	pop	{r3, pc}
   d49a0:	0003023c 	.word	0x0003023c

000d49a4 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d49a4:	b508      	push	{r3, lr}
   d49a6:	4b02      	ldr	r3, [pc, #8]	; (d49b0 <hal_usart_is_enabled+0xc>)
   d49a8:	681b      	ldr	r3, [r3, #0]
   d49aa:	6a1b      	ldr	r3, [r3, #32]
   d49ac:	9301      	str	r3, [sp, #4]
   d49ae:	bd08      	pop	{r3, pc}
   d49b0:	0003023c 	.word	0x0003023c

000d49b4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d49b4:	b508      	push	{r3, lr}
   d49b6:	4b02      	ldr	r3, [pc, #8]	; (d49c0 <hal_usart_available_data_for_write+0xc>)
   d49b8:	681b      	ldr	r3, [r3, #0]
   d49ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d49bc:	9301      	str	r3, [sp, #4]
   d49be:	bd08      	pop	{r3, pc}
   d49c0:	0003023c 	.word	0x0003023c

000d49c4 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d49c4:	b508      	push	{r3, lr}
   d49c6:	4b02      	ldr	r3, [pc, #8]	; (d49d0 <hal_i2c_begin+0xc>)
   d49c8:	681b      	ldr	r3, [r3, #0]
   d49ca:	68db      	ldr	r3, [r3, #12]
   d49cc:	9301      	str	r3, [sp, #4]
   d49ce:	bd08      	pop	{r3, pc}
   d49d0:	00030228 	.word	0x00030228

000d49d4 <hal_i2c_end>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
   d49d4:	b508      	push	{r3, lr}
   d49d6:	4b02      	ldr	r3, [pc, #8]	; (d49e0 <hal_i2c_end+0xc>)
   d49d8:	681b      	ldr	r3, [r3, #0]
   d49da:	691b      	ldr	r3, [r3, #16]
   d49dc:	9301      	str	r3, [sp, #4]
   d49de:	bd08      	pop	{r3, pc}
   d49e0:	00030228 	.word	0x00030228

000d49e4 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d49e4:	b508      	push	{r3, lr}
   d49e6:	4b02      	ldr	r3, [pc, #8]	; (d49f0 <hal_i2c_write+0xc>)
   d49e8:	681b      	ldr	r3, [r3, #0]
   d49ea:	6a1b      	ldr	r3, [r3, #32]
   d49ec:	9301      	str	r3, [sp, #4]
   d49ee:	bd08      	pop	{r3, pc}
   d49f0:	00030228 	.word	0x00030228

000d49f4 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d49f4:	b508      	push	{r3, lr}
   d49f6:	4b02      	ldr	r3, [pc, #8]	; (d4a00 <hal_i2c_available+0xc>)
   d49f8:	681b      	ldr	r3, [r3, #0]
   d49fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d49fc:	9301      	str	r3, [sp, #4]
   d49fe:	bd08      	pop	{r3, pc}
   d4a00:	00030228 	.word	0x00030228

000d4a04 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d4a04:	b508      	push	{r3, lr}
   d4a06:	4b02      	ldr	r3, [pc, #8]	; (d4a10 <hal_i2c_read+0xc>)
   d4a08:	681b      	ldr	r3, [r3, #0]
   d4a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4a0c:	9301      	str	r3, [sp, #4]
   d4a0e:	bd08      	pop	{r3, pc}
   d4a10:	00030228 	.word	0x00030228

000d4a14 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d4a14:	b508      	push	{r3, lr}
   d4a16:	4b02      	ldr	r3, [pc, #8]	; (d4a20 <hal_i2c_peek+0xc>)
   d4a18:	681b      	ldr	r3, [r3, #0]
   d4a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4a1c:	9301      	str	r3, [sp, #4]
   d4a1e:	bd08      	pop	{r3, pc}
   d4a20:	00030228 	.word	0x00030228

000d4a24 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d4a24:	b508      	push	{r3, lr}
   d4a26:	4b02      	ldr	r3, [pc, #8]	; (d4a30 <hal_i2c_flush+0xc>)
   d4a28:	681b      	ldr	r3, [r3, #0]
   d4a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4a2c:	9301      	str	r3, [sp, #4]
   d4a2e:	bd08      	pop	{r3, pc}
   d4a30:	00030228 	.word	0x00030228

000d4a34 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d4a34:	b508      	push	{r3, lr}
   d4a36:	4b02      	ldr	r3, [pc, #8]	; (d4a40 <hal_i2c_is_enabled+0xc>)
   d4a38:	681b      	ldr	r3, [r3, #0]
   d4a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4a3c:	9301      	str	r3, [sp, #4]
   d4a3e:	bd08      	pop	{r3, pc}
   d4a40:	00030228 	.word	0x00030228

000d4a44 <hal_i2c_set_callback_on_received>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
   d4a44:	b508      	push	{r3, lr}
   d4a46:	4b02      	ldr	r3, [pc, #8]	; (d4a50 <hal_i2c_set_callback_on_received+0xc>)
   d4a48:	681b      	ldr	r3, [r3, #0]
   d4a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d4a4c:	9301      	str	r3, [sp, #4]
   d4a4e:	bd08      	pop	{r3, pc}
   d4a50:	00030228 	.word	0x00030228

000d4a54 <hal_i2c_set_callback_on_requested>:
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
   d4a54:	b508      	push	{r3, lr}
   d4a56:	4b02      	ldr	r3, [pc, #8]	; (d4a60 <hal_i2c_set_callback_on_requested+0xc>)
   d4a58:	681b      	ldr	r3, [r3, #0]
   d4a5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4a5c:	9301      	str	r3, [sp, #4]
   d4a5e:	bd08      	pop	{r3, pc}
   d4a60:	00030228 	.word	0x00030228

000d4a64 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d4a64:	b508      	push	{r3, lr}
   d4a66:	4b02      	ldr	r3, [pc, #8]	; (d4a70 <hal_i2c_init+0xc>)
   d4a68:	681b      	ldr	r3, [r3, #0]
   d4a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4a6c:	9301      	str	r3, [sp, #4]
   d4a6e:	bd08      	pop	{r3, pc}
   d4a70:	00030228 	.word	0x00030228

000d4a74 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d4a74:	b508      	push	{r3, lr}
   d4a76:	4b02      	ldr	r3, [pc, #8]	; (d4a80 <hal_spi_begin+0xc>)
   d4a78:	681b      	ldr	r3, [r3, #0]
   d4a7a:	681b      	ldr	r3, [r3, #0]
   d4a7c:	9301      	str	r3, [sp, #4]
   d4a7e:	bd08      	pop	{r3, pc}
   d4a80:	00030230 	.word	0x00030230

000d4a84 <hal_spi_end>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
   d4a84:	b508      	push	{r3, lr}
   d4a86:	4b02      	ldr	r3, [pc, #8]	; (d4a90 <hal_spi_end+0xc>)
   d4a88:	681b      	ldr	r3, [r3, #0]
   d4a8a:	685b      	ldr	r3, [r3, #4]
   d4a8c:	9301      	str	r3, [sp, #4]
   d4a8e:	bd08      	pop	{r3, pc}
   d4a90:	00030230 	.word	0x00030230

000d4a94 <hal_spi_set_bit_order>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
   d4a94:	b508      	push	{r3, lr}
   d4a96:	4b02      	ldr	r3, [pc, #8]	; (d4aa0 <hal_spi_set_bit_order+0xc>)
   d4a98:	681b      	ldr	r3, [r3, #0]
   d4a9a:	689b      	ldr	r3, [r3, #8]
   d4a9c:	9301      	str	r3, [sp, #4]
   d4a9e:	bd08      	pop	{r3, pc}
   d4aa0:	00030230 	.word	0x00030230

000d4aa4 <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
   d4aa4:	b508      	push	{r3, lr}
   d4aa6:	4b02      	ldr	r3, [pc, #8]	; (d4ab0 <hal_spi_set_data_mode+0xc>)
   d4aa8:	681b      	ldr	r3, [r3, #0]
   d4aaa:	68db      	ldr	r3, [r3, #12]
   d4aac:	9301      	str	r3, [sp, #4]
   d4aae:	bd08      	pop	{r3, pc}
   d4ab0:	00030230 	.word	0x00030230

000d4ab4 <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   d4ab4:	b508      	push	{r3, lr}
   d4ab6:	4b02      	ldr	r3, [pc, #8]	; (d4ac0 <hal_spi_set_clock_divider+0xc>)
   d4ab8:	681b      	ldr	r3, [r3, #0]
   d4aba:	691b      	ldr	r3, [r3, #16]
   d4abc:	9301      	str	r3, [sp, #4]
   d4abe:	bd08      	pop	{r3, pc}
   d4ac0:	00030230 	.word	0x00030230

000d4ac4 <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d4ac4:	b508      	push	{r3, lr}
   d4ac6:	4b02      	ldr	r3, [pc, #8]	; (d4ad0 <hal_spi_transfer+0xc>)
   d4ac8:	681b      	ldr	r3, [r3, #0]
   d4aca:	695b      	ldr	r3, [r3, #20]
   d4acc:	9301      	str	r3, [sp, #4]
   d4ace:	bd08      	pop	{r3, pc}
   d4ad0:	00030230 	.word	0x00030230

000d4ad4 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d4ad4:	b508      	push	{r3, lr}
   d4ad6:	4b02      	ldr	r3, [pc, #8]	; (d4ae0 <hal_spi_init+0xc>)
   d4ad8:	681b      	ldr	r3, [r3, #0]
   d4ada:	69db      	ldr	r3, [r3, #28]
   d4adc:	9301      	str	r3, [sp, #4]
   d4ade:	bd08      	pop	{r3, pc}
   d4ae0:	00030230 	.word	0x00030230

000d4ae4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d4ae4:	b508      	push	{r3, lr}
   d4ae6:	4b02      	ldr	r3, [pc, #8]	; (d4af0 <hal_spi_is_enabled+0xc>)
   d4ae8:	681b      	ldr	r3, [r3, #0]
   d4aea:	6a1b      	ldr	r3, [r3, #32]
   d4aec:	9301      	str	r3, [sp, #4]
   d4aee:	bd08      	pop	{r3, pc}
   d4af0:	00030230 	.word	0x00030230

000d4af4 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d4af4:	b508      	push	{r3, lr}
   d4af6:	4b02      	ldr	r3, [pc, #8]	; (d4b00 <hal_spi_info+0xc>)
   d4af8:	681b      	ldr	r3, [r3, #0]
   d4afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4afc:	9301      	str	r3, [sp, #4]
   d4afe:	bd08      	pop	{r3, pc}
   d4b00:	00030230 	.word	0x00030230

000d4b04 <hal_spi_acquire>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d4b04:	b508      	push	{r3, lr}
   d4b06:	4b02      	ldr	r3, [pc, #8]	; (d4b10 <hal_spi_acquire+0xc>)
   d4b08:	681b      	ldr	r3, [r3, #0]
   d4b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4b0c:	9301      	str	r3, [sp, #4]
   d4b0e:	bd08      	pop	{r3, pc}
   d4b10:	00030230 	.word	0x00030230

000d4b14 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d4b14:	b508      	push	{r3, lr}
   d4b16:	4b02      	ldr	r3, [pc, #8]	; (d4b20 <hal_spi_release+0xc>)
   d4b18:	681b      	ldr	r3, [r3, #0]
   d4b1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4b1c:	9301      	str	r3, [sp, #4]
   d4b1e:	bd08      	pop	{r3, pc}
   d4b20:	00030230 	.word	0x00030230

000d4b24 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4b24:	b508      	push	{r3, lr}
   d4b26:	4b02      	ldr	r3, [pc, #8]	; (d4b30 <HAL_USB_USART_Init+0xc>)
   d4b28:	681b      	ldr	r3, [r3, #0]
   d4b2a:	681b      	ldr	r3, [r3, #0]
   d4b2c:	9301      	str	r3, [sp, #4]
   d4b2e:	bd08      	pop	{r3, pc}
   d4b30:	0003024c 	.word	0x0003024c

000d4b34 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4b34:	b508      	push	{r3, lr}
   d4b36:	4b02      	ldr	r3, [pc, #8]	; (d4b40 <HAL_USB_USART_Begin+0xc>)
   d4b38:	681b      	ldr	r3, [r3, #0]
   d4b3a:	685b      	ldr	r3, [r3, #4]
   d4b3c:	9301      	str	r3, [sp, #4]
   d4b3e:	bd08      	pop	{r3, pc}
   d4b40:	0003024c 	.word	0x0003024c

000d4b44 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4b44:	b508      	push	{r3, lr}
   d4b46:	4b02      	ldr	r3, [pc, #8]	; (d4b50 <HAL_USB_USART_Available_Data+0xc>)
   d4b48:	681b      	ldr	r3, [r3, #0]
   d4b4a:	691b      	ldr	r3, [r3, #16]
   d4b4c:	9301      	str	r3, [sp, #4]
   d4b4e:	bd08      	pop	{r3, pc}
   d4b50:	0003024c 	.word	0x0003024c

000d4b54 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4b54:	b508      	push	{r3, lr}
   d4b56:	4b02      	ldr	r3, [pc, #8]	; (d4b60 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4b58:	681b      	ldr	r3, [r3, #0]
   d4b5a:	695b      	ldr	r3, [r3, #20]
   d4b5c:	9301      	str	r3, [sp, #4]
   d4b5e:	bd08      	pop	{r3, pc}
   d4b60:	0003024c 	.word	0x0003024c

000d4b64 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4b64:	b508      	push	{r3, lr}
   d4b66:	4b02      	ldr	r3, [pc, #8]	; (d4b70 <HAL_USB_USART_Receive_Data+0xc>)
   d4b68:	681b      	ldr	r3, [r3, #0]
   d4b6a:	699b      	ldr	r3, [r3, #24]
   d4b6c:	9301      	str	r3, [sp, #4]
   d4b6e:	bd08      	pop	{r3, pc}
   d4b70:	0003024c 	.word	0x0003024c

000d4b74 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4b74:	b508      	push	{r3, lr}
   d4b76:	4b02      	ldr	r3, [pc, #8]	; (d4b80 <HAL_USB_USART_Send_Data+0xc>)
   d4b78:	681b      	ldr	r3, [r3, #0]
   d4b7a:	69db      	ldr	r3, [r3, #28]
   d4b7c:	9301      	str	r3, [sp, #4]
   d4b7e:	bd08      	pop	{r3, pc}
   d4b80:	0003024c 	.word	0x0003024c

000d4b84 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4b84:	b508      	push	{r3, lr}
   d4b86:	4b02      	ldr	r3, [pc, #8]	; (d4b90 <HAL_USB_USART_Flush_Data+0xc>)
   d4b88:	681b      	ldr	r3, [r3, #0]
   d4b8a:	6a1b      	ldr	r3, [r3, #32]
   d4b8c:	9301      	str	r3, [sp, #4]
   d4b8e:	bd08      	pop	{r3, pc}
   d4b90:	0003024c 	.word	0x0003024c

000d4b94 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d4b94:	b508      	push	{r3, lr}
   d4b96:	4b02      	ldr	r3, [pc, #8]	; (d4ba0 <panic_+0xc>)
   d4b98:	681b      	ldr	r3, [r3, #0]
   d4b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4b9c:	9301      	str	r3, [sp, #4]
   d4b9e:	bd08      	pop	{r3, pc}
   d4ba0:	00030260 	.word	0x00030260

000d4ba4 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4ba4:	b508      	push	{r3, lr}
   d4ba6:	4b02      	ldr	r3, [pc, #8]	; (d4bb0 <set_system_mode+0xc>)
   d4ba8:	681b      	ldr	r3, [r3, #0]
   d4baa:	685b      	ldr	r3, [r3, #4]
   d4bac:	9301      	str	r3, [sp, #4]
   d4bae:	bd08      	pop	{r3, pc}
   d4bb0:	00030220 	.word	0x00030220

000d4bb4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4bb4:	b508      	push	{r3, lr}
   d4bb6:	4b02      	ldr	r3, [pc, #8]	; (d4bc0 <system_delay_ms+0xc>)
   d4bb8:	681b      	ldr	r3, [r3, #0]
   d4bba:	695b      	ldr	r3, [r3, #20]
   d4bbc:	9301      	str	r3, [sp, #4]
   d4bbe:	bd08      	pop	{r3, pc}
   d4bc0:	00030220 	.word	0x00030220

000d4bc4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4bc4:	b508      	push	{r3, lr}
   d4bc6:	4b03      	ldr	r3, [pc, #12]	; (d4bd4 <system_ctrl_set_app_request_handler+0x10>)
   d4bc8:	681b      	ldr	r3, [r3, #0]
   d4bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4bce:	9301      	str	r3, [sp, #4]
   d4bd0:	bd08      	pop	{r3, pc}
   d4bd2:	0000      	.short	0x0000
   d4bd4:	00030220 	.word	0x00030220

000d4bd8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4bd8:	b508      	push	{r3, lr}
   d4bda:	4b03      	ldr	r3, [pc, #12]	; (d4be8 <system_ctrl_set_result+0x10>)
   d4bdc:	681b      	ldr	r3, [r3, #0]
   d4bde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4be2:	9301      	str	r3, [sp, #4]
   d4be4:	bd08      	pop	{r3, pc}
   d4be6:	0000      	.short	0x0000
   d4be8:	00030220 	.word	0x00030220

000d4bec <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4bec:	b508      	push	{r3, lr}
   d4bee:	4b02      	ldr	r3, [pc, #8]	; (d4bf8 <network_connect+0xc>)
   d4bf0:	681b      	ldr	r3, [r3, #0]
   d4bf2:	685b      	ldr	r3, [r3, #4]
   d4bf4:	9301      	str	r3, [sp, #4]
   d4bf6:	bd08      	pop	{r3, pc}
   d4bf8:	00030240 	.word	0x00030240

000d4bfc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4bfc:	b508      	push	{r3, lr}
   d4bfe:	4b02      	ldr	r3, [pc, #8]	; (d4c08 <network_connecting+0xc>)
   d4c00:	681b      	ldr	r3, [r3, #0]
   d4c02:	689b      	ldr	r3, [r3, #8]
   d4c04:	9301      	str	r3, [sp, #4]
   d4c06:	bd08      	pop	{r3, pc}
   d4c08:	00030240 	.word	0x00030240

000d4c0c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4c0c:	b508      	push	{r3, lr}
   d4c0e:	4b02      	ldr	r3, [pc, #8]	; (d4c18 <network_disconnect+0xc>)
   d4c10:	681b      	ldr	r3, [r3, #0]
   d4c12:	68db      	ldr	r3, [r3, #12]
   d4c14:	9301      	str	r3, [sp, #4]
   d4c16:	bd08      	pop	{r3, pc}
   d4c18:	00030240 	.word	0x00030240

000d4c1c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4c1c:	b508      	push	{r3, lr}
   d4c1e:	4b02      	ldr	r3, [pc, #8]	; (d4c28 <network_ready+0xc>)
   d4c20:	681b      	ldr	r3, [r3, #0]
   d4c22:	691b      	ldr	r3, [r3, #16]
   d4c24:	9301      	str	r3, [sp, #4]
   d4c26:	bd08      	pop	{r3, pc}
   d4c28:	00030240 	.word	0x00030240

000d4c2c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4c2c:	b508      	push	{r3, lr}
   d4c2e:	4b02      	ldr	r3, [pc, #8]	; (d4c38 <network_on+0xc>)
   d4c30:	681b      	ldr	r3, [r3, #0]
   d4c32:	695b      	ldr	r3, [r3, #20]
   d4c34:	9301      	str	r3, [sp, #4]
   d4c36:	bd08      	pop	{r3, pc}
   d4c38:	00030240 	.word	0x00030240

000d4c3c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4c3c:	b508      	push	{r3, lr}
   d4c3e:	4b02      	ldr	r3, [pc, #8]	; (d4c48 <network_off+0xc>)
   d4c40:	681b      	ldr	r3, [r3, #0]
   d4c42:	699b      	ldr	r3, [r3, #24]
   d4c44:	9301      	str	r3, [sp, #4]
   d4c46:	bd08      	pop	{r3, pc}
   d4c48:	00030240 	.word	0x00030240

000d4c4c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4c4c:	b508      	push	{r3, lr}
   d4c4e:	4b02      	ldr	r3, [pc, #8]	; (d4c58 <network_listen+0xc>)
   d4c50:	681b      	ldr	r3, [r3, #0]
   d4c52:	69db      	ldr	r3, [r3, #28]
   d4c54:	9301      	str	r3, [sp, #4]
   d4c56:	bd08      	pop	{r3, pc}
   d4c58:	00030240 	.word	0x00030240

000d4c5c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4c5c:	b508      	push	{r3, lr}
   d4c5e:	4b02      	ldr	r3, [pc, #8]	; (d4c68 <network_listening+0xc>)
   d4c60:	681b      	ldr	r3, [r3, #0]
   d4c62:	6a1b      	ldr	r3, [r3, #32]
   d4c64:	9301      	str	r3, [sp, #4]
   d4c66:	bd08      	pop	{r3, pc}
   d4c68:	00030240 	.word	0x00030240

000d4c6c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4c6c:	b508      	push	{r3, lr}
   d4c6e:	4b02      	ldr	r3, [pc, #8]	; (d4c78 <network_set_listen_timeout+0xc>)
   d4c70:	681b      	ldr	r3, [r3, #0]
   d4c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4c74:	9301      	str	r3, [sp, #4]
   d4c76:	bd08      	pop	{r3, pc}
   d4c78:	00030240 	.word	0x00030240

000d4c7c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4c7c:	b508      	push	{r3, lr}
   d4c7e:	4b02      	ldr	r3, [pc, #8]	; (d4c88 <network_get_listen_timeout+0xc>)
   d4c80:	681b      	ldr	r3, [r3, #0]
   d4c82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4c84:	9301      	str	r3, [sp, #4]
   d4c86:	bd08      	pop	{r3, pc}
   d4c88:	00030240 	.word	0x00030240

000d4c8c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d4c8c:	b508      	push	{r3, lr}
   d4c8e:	4b02      	ldr	r3, [pc, #8]	; (d4c98 <network_is_on+0xc>)
   d4c90:	681b      	ldr	r3, [r3, #0]
   d4c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4c94:	9301      	str	r3, [sp, #4]
   d4c96:	bd08      	pop	{r3, pc}
   d4c98:	00030240 	.word	0x00030240

000d4c9c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d4c9c:	b508      	push	{r3, lr}
   d4c9e:	4b02      	ldr	r3, [pc, #8]	; (d4ca8 <network_is_off+0xc>)
   d4ca0:	681b      	ldr	r3, [r3, #0]
   d4ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4ca4:	9301      	str	r3, [sp, #4]
   d4ca6:	bd08      	pop	{r3, pc}
   d4ca8:	00030240 	.word	0x00030240

000d4cac <spark_deviceID>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d4cac:	b508      	push	{r3, lr}
   d4cae:	4b02      	ldr	r3, [pc, #8]	; (d4cb8 <spark_deviceID+0xc>)
   d4cb0:	681b      	ldr	r3, [r3, #0]
   d4cb2:	69db      	ldr	r3, [r3, #28]
   d4cb4:	9301      	str	r3, [sp, #4]
   d4cb6:	bd08      	pop	{r3, pc}
   d4cb8:	00030244 	.word	0x00030244

000d4cbc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4cbc:	b508      	push	{r3, lr}
   d4cbe:	4b02      	ldr	r3, [pc, #8]	; (d4cc8 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4cc0:	681b      	ldr	r3, [r3, #0]
   d4cc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4cc4:	9301      	str	r3, [sp, #4]
   d4cc6:	bd08      	pop	{r3, pc}
   d4cc8:	00030244 	.word	0x00030244

000d4ccc <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4ccc:	b508      	push	{r3, lr}
   d4cce:	4b02      	ldr	r3, [pc, #8]	; (d4cd8 <malloc+0xc>)
   d4cd0:	681b      	ldr	r3, [r3, #0]
   d4cd2:	681b      	ldr	r3, [r3, #0]
   d4cd4:	9301      	str	r3, [sp, #4]
   d4cd6:	bd08      	pop	{r3, pc}
   d4cd8:	0003021c 	.word	0x0003021c

000d4cdc <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4cdc:	b508      	push	{r3, lr}
   d4cde:	4b02      	ldr	r3, [pc, #8]	; (d4ce8 <free+0xc>)
   d4ce0:	681b      	ldr	r3, [r3, #0]
   d4ce2:	685b      	ldr	r3, [r3, #4]
   d4ce4:	9301      	str	r3, [sp, #4]
   d4ce6:	bd08      	pop	{r3, pc}
   d4ce8:	0003021c 	.word	0x0003021c

000d4cec <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d4cec:	b508      	push	{r3, lr}
   d4cee:	4b02      	ldr	r3, [pc, #8]	; (d4cf8 <newlib_impure_ptr_callback+0xc>)
   d4cf0:	681b      	ldr	r3, [r3, #0]
   d4cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4cf4:	9301      	str	r3, [sp, #4]
   d4cf6:	bd08      	pop	{r3, pc}
   d4cf8:	0003021c 	.word	0x0003021c

000d4cfc <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4cfc:	2200      	movs	r2, #0
   d4cfe:	6840      	ldr	r0, [r0, #4]
   d4d00:	4611      	mov	r1, r2
   d4d02:	f7ff bfab 	b.w	d4c5c <network_listening>

000d4d06 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d4d06:	2200      	movs	r2, #0
   d4d08:	6840      	ldr	r0, [r0, #4]
   d4d0a:	4611      	mov	r1, r2
   d4d0c:	f7ff bfb6 	b.w	d4c7c <network_get_listen_timeout>

000d4d10 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d4d10:	6840      	ldr	r0, [r0, #4]
   d4d12:	2200      	movs	r2, #0
   d4d14:	f7ff bfaa 	b.w	d4c6c <network_set_listen_timeout>

000d4d18 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d4d18:	6840      	ldr	r0, [r0, #4]
   d4d1a:	2200      	movs	r2, #0
   d4d1c:	f081 0101 	eor.w	r1, r1, #1
   d4d20:	f7ff bf94 	b.w	d4c4c <network_listen>

000d4d24 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d4d24:	2300      	movs	r3, #0
   d4d26:	6840      	ldr	r0, [r0, #4]
   d4d28:	461a      	mov	r2, r3
   d4d2a:	4619      	mov	r1, r3
   d4d2c:	f7ff bf86 	b.w	d4c3c <network_off>

000d4d30 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d4d30:	2300      	movs	r3, #0
   d4d32:	6840      	ldr	r0, [r0, #4]
   d4d34:	461a      	mov	r2, r3
   d4d36:	4619      	mov	r1, r3
   d4d38:	f7ff bf78 	b.w	d4c2c <network_on>

000d4d3c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4d3c:	2200      	movs	r2, #0
   d4d3e:	6840      	ldr	r0, [r0, #4]
   d4d40:	4611      	mov	r1, r2
   d4d42:	f7ff bf6b 	b.w	d4c1c <network_ready>

000d4d46 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d4d46:	2200      	movs	r2, #0
   d4d48:	6840      	ldr	r0, [r0, #4]
   d4d4a:	4611      	mov	r1, r2
   d4d4c:	f7ff bf56 	b.w	d4bfc <network_connecting>

000d4d50 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4d50:	6840      	ldr	r0, [r0, #4]
   d4d52:	2200      	movs	r2, #0
   d4d54:	2102      	movs	r1, #2
   d4d56:	f7ff bf59 	b.w	d4c0c <network_disconnect>

000d4d5a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d4d5a:	2300      	movs	r3, #0
   d4d5c:	6840      	ldr	r0, [r0, #4]
   d4d5e:	461a      	mov	r2, r3
   d4d60:	f7ff bf44 	b.w	d4bec <network_connect>

000d4d64 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4d64:	4b02      	ldr	r3, [pc, #8]	; (d4d70 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4d66:	2203      	movs	r2, #3
   d4d68:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4d6a:	4a02      	ldr	r2, [pc, #8]	; (d4d74 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4d6c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d4d6e:	4770      	bx	lr
   d4d70:	2003e650 	.word	0x2003e650
   d4d74:	000d5a64 	.word	0x000d5a64

000d4d78 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   d4d78:	2100      	movs	r1, #0
   d4d7a:	f7ff bec3 	b.w	d4b04 <hal_spi_acquire>

000d4d7e <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   d4d7e:	2100      	movs	r1, #0
   d4d80:	f7ff bec8 	b.w	d4b14 <hal_spi_release>

000d4d84 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d4d84:	b510      	push	{r4, lr}
   d4d86:	4604      	mov	r4, r0
   d4d88:	4608      	mov	r0, r1
{
    _spi = spi;
   d4d8a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d4d8c:	f7ff fea2 	bl	d4ad4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d4d90:	2300      	movs	r3, #0
   d4d92:	6063      	str	r3, [r4, #4]
}
   d4d94:	4620      	mov	r0, r4
   d4d96:	bd10      	pop	{r4, pc}

000d4d98 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d4d98:	b510      	push	{r4, lr}
   d4d9a:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d4d9c:	7800      	ldrb	r0, [r0, #0]
   d4d9e:	f7ff ffeb 	bl	d4d78 <_ZN8SPIClass4lockEv.isra.0>
   d4da2:	b948      	cbnz	r0, d4db8 <_ZN8SPIClass5beginEv+0x20>
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   d4da4:	7820      	ldrb	r0, [r4, #0]
   d4da6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d4daa:	f7ff fe63 	bl	d4a74 <hal_spi_begin>
        unlock();
   d4dae:	7820      	ldrb	r0, [r4, #0]
    }
}
   d4db0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d4db4:	f7ff bfe3 	b.w	d4d7e <_ZN8SPIClass6unlockEv.isra.0>
}
   d4db8:	bd10      	pop	{r4, pc}

000d4dba <_ZN8SPIClass3endEv>:
        unlock();
    }
}

void SPIClass::end()
{
   d4dba:	b510      	push	{r4, lr}
   d4dbc:	4604      	mov	r4, r0
    if (!lock())
   d4dbe:	7800      	ldrb	r0, [r0, #0]
   d4dc0:	f7ff ffda 	bl	d4d78 <_ZN8SPIClass4lockEv.isra.0>
   d4dc4:	b938      	cbnz	r0, d4dd6 <_ZN8SPIClass3endEv+0x1c>
    {
        hal_spi_end(_spi);
   d4dc6:	7820      	ldrb	r0, [r4, #0]
   d4dc8:	f7ff fe5c 	bl	d4a84 <hal_spi_end>
        unlock();
   d4dcc:	7820      	ldrb	r0, [r4, #0]
    }
}
   d4dce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d4dd2:	f7ff bfd4 	b.w	d4d7e <_ZN8SPIClass6unlockEv.isra.0>
}
   d4dd6:	bd10      	pop	{r4, pc}

000d4dd8 <_ZN8SPIClass11setBitOrderEh>:

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d4dd8:	b513      	push	{r0, r1, r4, lr}
   d4dda:	4604      	mov	r4, r0
    if (!lock())
   d4ddc:	7800      	ldrb	r0, [r0, #0]
{
   d4dde:	9101      	str	r1, [sp, #4]
    if (!lock())
   d4de0:	f7ff ffca 	bl	d4d78 <_ZN8SPIClass4lockEv.isra.0>
   d4de4:	9901      	ldr	r1, [sp, #4]
   d4de6:	b940      	cbnz	r0, d4dfa <_ZN8SPIClass11setBitOrderEh+0x22>
    {
        hal_spi_set_bit_order(_spi, bitOrder);
   d4de8:	7820      	ldrb	r0, [r4, #0]
   d4dea:	f7ff fe53 	bl	d4a94 <hal_spi_set_bit_order>
        unlock();
   d4dee:	7820      	ldrb	r0, [r4, #0]
    }
}
   d4df0:	b002      	add	sp, #8
   d4df2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d4df6:	f7ff bfc2 	b.w	d4d7e <_ZN8SPIClass6unlockEv.isra.0>
}
   d4dfa:	b002      	add	sp, #8
   d4dfc:	bd10      	pop	{r4, pc}

000d4dfe <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
   d4dfe:	b513      	push	{r0, r1, r4, lr}
   d4e00:	4604      	mov	r4, r0
    if (!lock())
   d4e02:	7800      	ldrb	r0, [r0, #0]
{
   d4e04:	9101      	str	r1, [sp, #4]
    if (!lock())
   d4e06:	f7ff ffb7 	bl	d4d78 <_ZN8SPIClass4lockEv.isra.0>
   d4e0a:	9901      	ldr	r1, [sp, #4]
   d4e0c:	b940      	cbnz	r0, d4e20 <_ZN8SPIClass11setDataModeEh+0x22>
    {
        hal_spi_set_data_mode(_spi, mode);
   d4e0e:	7820      	ldrb	r0, [r4, #0]
   d4e10:	f7ff fe48 	bl	d4aa4 <hal_spi_set_data_mode>
        unlock();
   d4e14:	7820      	ldrb	r0, [r4, #0]
    }
}
   d4e16:	b002      	add	sp, #8
   d4e18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d4e1c:	f7ff bfaf 	b.w	d4d7e <_ZN8SPIClass6unlockEv.isra.0>
}
   d4e20:	b002      	add	sp, #8
   d4e22:	bd10      	pop	{r4, pc}

000d4e24 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d4e24:	0840      	lsrs	r0, r0, #1
{
   d4e26:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   d4e28:	6018      	str	r0, [r3, #0]
   d4e2a:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d4e2c:	6818      	ldr	r0, [r3, #0]
   d4e2e:	4288      	cmp	r0, r1
   d4e30:	b2e5      	uxtb	r5, r4
   d4e32:	d906      	bls.n	d4e42 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d4e34:	3401      	adds	r4, #1
   d4e36:	2c08      	cmp	r4, #8
   d4e38:	d002      	beq.n	d4e40 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d4e3a:	0840      	lsrs	r0, r0, #1
   d4e3c:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   d4e3e:	e7f5      	b.n	d4e2c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d4e40:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   d4e42:	4b02      	ldr	r3, [pc, #8]	; (d4e4c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d4e44:	5d5b      	ldrb	r3, [r3, r5]
   d4e46:	7013      	strb	r3, [r2, #0]
}
   d4e48:	bd30      	pop	{r4, r5, pc}
   d4e4a:	bf00      	nop
   d4e4c:	000d5a98 	.word	0x000d5a98

000d4e50 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d4e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4e54:	b088      	sub	sp, #32
    unsigned clock = 0;
   d4e56:	2300      	movs	r3, #0
{
   d4e58:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d4e5a:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   d4e5c:	9302      	str	r3, [sp, #8]
{
   d4e5e:	460e      	mov	r6, r1
   d4e60:	4617      	mov	r7, r2
    if (!lock())
   d4e62:	f7ff ff89 	bl	d4d78 <_ZN8SPIClass4lockEv.isra.0>
   d4e66:	4605      	mov	r5, r0
   d4e68:	bb00      	cbnz	r0, d4eac <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   d4e6a:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   d4e6e:	4601      	mov	r1, r0
   d4e70:	2214      	movs	r2, #20
   d4e72:	a803      	add	r0, sp, #12
   d4e74:	f000 fd46 	bl	d5904 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d4e78:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d4e7a:	462a      	mov	r2, r5
   d4e7c:	a903      	add	r1, sp, #12
   d4e7e:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   d4e80:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   d4e84:	f7ff fe36 	bl	d4af4 <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d4e88:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   d4e8a:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d4e8e:	ab02      	add	r3, sp, #8
   d4e90:	f10d 0207 	add.w	r2, sp, #7
   d4e94:	fb07 f106 	mul.w	r1, r7, r6
   d4e98:	f7ff ffc4 	bl	d4e24 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   d4e9c:	7820      	ldrb	r0, [r4, #0]
   d4e9e:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d4ea2:	f7ff fe07 	bl	d4ab4 <hal_spi_set_clock_divider>
        unlock();
   d4ea6:	7820      	ldrb	r0, [r4, #0]
   d4ea8:	f7ff ff69 	bl	d4d7e <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   d4eac:	9802      	ldr	r0, [sp, #8]
   d4eae:	b008      	add	sp, #32
   d4eb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4eb4 <_ZN8SPIClass15setClockDividerEh>:
{
   d4eb4:	b538      	push	{r3, r4, r5, lr}
   d4eb6:	4604      	mov	r4, r0
    if (!lock())
   d4eb8:	7800      	ldrb	r0, [r0, #0]
{
   d4eba:	460d      	mov	r5, r1
    if (!lock())
   d4ebc:	f7ff ff5c 	bl	d4d78 <_ZN8SPIClass4lockEv.isra.0>
   d4ec0:	4603      	mov	r3, r0
   d4ec2:	b9d0      	cbnz	r0, d4efa <_ZN8SPIClass15setClockDividerEh+0x46>
        if (_dividerReference)
   d4ec4:	6861      	ldr	r1, [r4, #4]
   d4ec6:	b199      	cbz	r1, d4ef0 <_ZN8SPIClass15setClockDividerEh+0x3c>
   d4ec8:	4a0c      	ldr	r2, [pc, #48]	; (d4efc <_ZN8SPIClass15setClockDividerEh+0x48>)
        if (clock_divisors[result] == divider)
   d4eca:	f812 0b01 	ldrb.w	r0, [r2], #1
   d4ece:	4285      	cmp	r5, r0
   d4ed0:	d002      	beq.n	d4ed8 <_ZN8SPIClass15setClockDividerEh+0x24>
    for (; result < arraySize(clock_divisors); result++)
   d4ed2:	3301      	adds	r3, #1
   d4ed4:	2b08      	cmp	r3, #8
   d4ed6:	d1f8      	bne.n	d4eca <_ZN8SPIClass15setClockDividerEh+0x16>
    return result + 1;
   d4ed8:	3301      	adds	r3, #1
            unsigned targetSpeed = _dividerReference >> scale;
   d4eda:	b2db      	uxtb	r3, r3
            setClockSpeed(targetSpeed);
   d4edc:	2201      	movs	r2, #1
   d4ede:	40d9      	lsrs	r1, r3
   d4ee0:	4620      	mov	r0, r4
   d4ee2:	f7ff ffb5 	bl	d4e50 <_ZN8SPIClass13setClockSpeedEjj>
        unlock();
   d4ee6:	7820      	ldrb	r0, [r4, #0]
}
   d4ee8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unlock();
   d4eec:	f7ff bf47 	b.w	d4d7e <_ZN8SPIClass6unlockEv.isra.0>
            hal_spi_set_clock_divider(_spi, rate);
   d4ef0:	7820      	ldrb	r0, [r4, #0]
   d4ef2:	4629      	mov	r1, r5
   d4ef4:	f7ff fdde 	bl	d4ab4 <hal_spi_set_clock_divider>
   d4ef8:	e7f5      	b.n	d4ee6 <_ZN8SPIClass15setClockDividerEh+0x32>
}
   d4efa:	bd38      	pop	{r3, r4, r5, pc}
   d4efc:	000d5a98 	.word	0x000d5a98

000d4f00 <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   d4f00:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   d4f02:	7800      	ldrb	r0, [r0, #0]
   d4f04:	f7ff fdde 	bl	d4ac4 <hal_spi_transfer>
}
   d4f08:	b2c0      	uxtb	r0, r0
   d4f0a:	bd08      	pop	{r3, pc}

000d4f0c <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4f0c:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4f0e:	4b09      	ldr	r3, [pc, #36]	; (d4f34 <_GLOBAL__sub_I_System+0x28>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4f10:	4c09      	ldr	r4, [pc, #36]	; (d4f38 <_GLOBAL__sub_I_System+0x2c>)
   d4f12:	2202      	movs	r2, #2
   d4f14:	2000      	movs	r0, #0
   d4f16:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d4f18:	4b08      	ldr	r3, [pc, #32]	; (d4f3c <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d4f1a:	6020      	str	r0, [r4, #0]
   d4f1c:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d4f1e:	71a0      	strb	r0, [r4, #6]
   d4f20:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4f22:	f7ff fe3f 	bl	d4ba4 <set_system_mode>
SystemClass System;
   d4f26:	4620      	mov	r0, r4
   d4f28:	4a05      	ldr	r2, [pc, #20]	; (d4f40 <_GLOBAL__sub_I_System+0x34>)
   d4f2a:	4906      	ldr	r1, [pc, #24]	; (d4f44 <_GLOBAL__sub_I_System+0x38>)
   d4f2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d4f30:	f000 bcc2 	b.w	d58b8 <__aeabi_atexit>
   d4f34:	2003e664 	.word	0x2003e664
   d4f38:	2003e658 	.word	0x2003e658
   d4f3c:	ffff0000 	.word	0xffff0000
   d4f40:	2003e600 	.word	0x2003e600
   d4f44:	000d40ab 	.word	0x000d40ab

000d4f48 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d4f48:	b510      	push	{r4, lr}
   d4f4a:	4604      	mov	r4, r0
{
	free(buffer);
   d4f4c:	6800      	ldr	r0, [r0, #0]
   d4f4e:	f7ff fec5 	bl	d4cdc <free>
}
   d4f52:	4620      	mov	r0, r4
   d4f54:	bd10      	pop	{r4, pc}

000d4f56 <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
   d4f56:	6883      	ldr	r3, [r0, #8]
   d4f58:	428b      	cmp	r3, r1
   d4f5a:	d903      	bls.n	d4f64 <_ZNK6StringixEj+0xe>
   d4f5c:	6800      	ldr	r0, [r0, #0]
   d4f5e:	b110      	cbz	r0, d4f66 <_ZNK6StringixEj+0x10>
	return buffer[index];
   d4f60:	5c40      	ldrb	r0, [r0, r1]
   d4f62:	4770      	bx	lr
	if (index >= len || !buffer) return 0;
   d4f64:	2000      	movs	r0, #0
}
   d4f66:	4770      	bx	lr

000d4f68 <_ZNK6String6charAtEj>:
	return operator[](loc);
   d4f68:	f7ff bff5 	b.w	d4f56 <_ZNK6StringixEj>

000d4f6c <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4f6c:	b510      	push	{r4, lr}
   d4f6e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4f70:	6800      	ldr	r0, [r0, #0]
   d4f72:	b108      	cbz	r0, d4f78 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4f74:	f7ff fcd6 	bl	d4924 <os_mutex_recursive_destroy>
    }
   d4f78:	4620      	mov	r0, r4
   d4f7a:	bd10      	pop	{r4, pc}

000d4f7c <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4f7c:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4f7e:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d4f80:	4604      	mov	r4, r0
      if (_M_manager)
   d4f82:	b113      	cbz	r3, d4f8a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4f84:	2203      	movs	r2, #3
   d4f86:	4601      	mov	r1, r0
   d4f88:	4798      	blx	r3
    }
   d4f8a:	4620      	mov	r0, r4
   d4f8c:	bd10      	pop	{r4, pc}
	...

000d4f90 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d4f90:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d4f92:	4c06      	ldr	r4, [pc, #24]	; (d4fac <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d4f94:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d4f96:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d4f98:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d4f9a:	f7ff fcbb 	bl	d4914 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d4f9e:	4620      	mov	r0, r4
   d4fa0:	4a03      	ldr	r2, [pc, #12]	; (d4fb0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d4fa2:	4904      	ldr	r1, [pc, #16]	; (d4fb4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d4fa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d4fa8:	f000 bc86 	b.w	d58b8 <__aeabi_atexit>
   d4fac:	2003e668 	.word	0x2003e668
   d4fb0:	2003e600 	.word	0x2003e600
   d4fb4:	000d4f6d 	.word	0x000d4f6d

000d4fb8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4fba:	4606      	mov	r6, r0
   d4fbc:	460d      	mov	r5, r1
  size_t n = 0;
   d4fbe:	188f      	adds	r7, r1, r2
   d4fc0:	2400      	movs	r4, #0
  while (size--) {
   d4fc2:	42bd      	cmp	r5, r7
   d4fc4:	d00c      	beq.n	d4fe0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4fc6:	6833      	ldr	r3, [r6, #0]
   d4fc8:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4fcc:	689b      	ldr	r3, [r3, #8]
   d4fce:	4630      	mov	r0, r6
   d4fd0:	4798      	blx	r3
     if (chunk>=0)
   d4fd2:	1e03      	subs	r3, r0, #0
   d4fd4:	db01      	blt.n	d4fda <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4fd6:	441c      	add	r4, r3
  while (size--) {
   d4fd8:	e7f3      	b.n	d4fc2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4fda:	2c00      	cmp	r4, #0
   d4fdc:	bf08      	it	eq
   d4fde:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d4fe0:	4620      	mov	r0, r4
   d4fe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4fe4 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d4fe4:	b508      	push	{r3, lr}
  return write(str);
   d4fe6:	f7ff f981 	bl	d42ec <_ZN5Print5writeEPKc>
}
   d4fea:	bd08      	pop	{r3, pc}

000d4fec <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d4fec:	6803      	ldr	r3, [r0, #0]
   d4fee:	689b      	ldr	r3, [r3, #8]
   d4ff0:	4718      	bx	r3

000d4ff2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4ff2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d4ff4:	210d      	movs	r1, #13
{
   d4ff6:	4605      	mov	r5, r0
  size_t n = print('\r');
   d4ff8:	f7ff fff8 	bl	d4fec <_ZN5Print5printEc>
  n += print('\n');
   d4ffc:	210a      	movs	r1, #10
  size_t n = print('\r');
   d4ffe:	4604      	mov	r4, r0
  n += print('\n');
   d5000:	4628      	mov	r0, r5
   d5002:	f7ff fff3 	bl	d4fec <_ZN5Print5printEc>
  return n;
}
   d5006:	4420      	add	r0, r4
   d5008:	bd38      	pop	{r3, r4, r5, pc}

000d500a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d500a:	b538      	push	{r3, r4, r5, lr}
   d500c:	4605      	mov	r5, r0
  return write(str);
   d500e:	f7ff f96d 	bl	d42ec <_ZN5Print5writeEPKc>
   d5012:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d5014:	4628      	mov	r0, r5
   d5016:	f7ff ffec 	bl	d4ff2 <_ZN5Print7printlnEv>
  return n;
}
   d501a:	4420      	add	r0, r4
   d501c:	bd38      	pop	{r3, r4, r5, pc}

000d501e <_ZN5Print7printlnEc>:

size_t Print::println(char c)
{
   d501e:	b538      	push	{r3, r4, r5, lr}
   d5020:	4605      	mov	r5, r0
  size_t n = print(c);
   d5022:	f7ff ffe3 	bl	d4fec <_ZN5Print5printEc>
   d5026:	4604      	mov	r4, r0
  n += println();
   d5028:	4628      	mov	r0, r5
   d502a:	f7ff ffe2 	bl	d4ff2 <_ZN5Print7printlnEv>
  return n;
}
   d502e:	4420      	add	r0, r4
   d5030:	bd38      	pop	{r3, r4, r5, pc}

000d5032 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5032:	b530      	push	{r4, r5, lr}
   d5034:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5036:	2300      	movs	r3, #0
   d5038:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d503c:	2a01      	cmp	r2, #1
   d503e:	bf98      	it	ls
   d5040:	220a      	movls	r2, #10
   d5042:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d5044:	460d      	mov	r5, r1
   d5046:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d504a:	fb01 5312 	mls	r3, r1, r2, r5
   d504e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5052:	2b09      	cmp	r3, #9
   d5054:	bf94      	ite	ls
   d5056:	3330      	addls	r3, #48	; 0x30
   d5058:	3337      	addhi	r3, #55	; 0x37
   d505a:	b2db      	uxtb	r3, r3
  } while(n);
   d505c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d505e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d5062:	d9ef      	bls.n	d5044 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d5064:	4621      	mov	r1, r4
   d5066:	f7ff f941 	bl	d42ec <_ZN5Print5writeEPKc>
}
   d506a:	b00b      	add	sp, #44	; 0x2c
   d506c:	bd30      	pop	{r4, r5, pc}

000d506e <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d506e:	2300      	movs	r3, #0
   d5070:	6840      	ldr	r0, [r0, #4]
   d5072:	461a      	mov	r2, r3
   d5074:	4619      	mov	r1, r3
   d5076:	f7ff bdd9 	b.w	d4c2c <network_on>
	...

000d507c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d507c:	4b01      	ldr	r3, [pc, #4]	; (d5084 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d507e:	4a02      	ldr	r2, [pc, #8]	; (d5088 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5080:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d5082:	4770      	bx	lr
   d5084:	2003e66c 	.word	0x2003e66c
   d5088:	000d5aa0 	.word	0x000d5aa0

000d508c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d508c:	4b02      	ldr	r3, [pc, #8]	; (d5098 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d508e:	681a      	ldr	r2, [r3, #0]
   d5090:	4b02      	ldr	r3, [pc, #8]	; (d509c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5092:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d5094:	4770      	bx	lr
   d5096:	bf00      	nop
   d5098:	2003e598 	.word	0x2003e598
   d509c:	2003e670 	.word	0x2003e670

000d50a0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d50a0:	2100      	movs	r1, #0
   d50a2:	f7ff bd87 	b.w	d4bb4 <system_delay_ms>

000d50a6 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d50a6:	b510      	push	{r4, lr}
   d50a8:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d50aa:	f7ff ff67 	bl	d4f7c <_ZNSt14_Function_baseD1Ev>
   d50ae:	4620      	mov	r0, r4
   d50b0:	bd10      	pop	{r4, pc}
	...

000d50b4 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d50b4:	4803      	ldr	r0, [pc, #12]	; (d50c4 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d50b6:	4a04      	ldr	r2, [pc, #16]	; (d50c8 <_GLOBAL__sub_I_RGB+0x14>)
   d50b8:	4904      	ldr	r1, [pc, #16]	; (d50cc <_GLOBAL__sub_I_RGB+0x18>)
   d50ba:	2300      	movs	r3, #0
   d50bc:	6083      	str	r3, [r0, #8]
   d50be:	f000 bbfb 	b.w	d58b8 <__aeabi_atexit>
   d50c2:	bf00      	nop
   d50c4:	2003e674 	.word	0x2003e674
   d50c8:	2003e600 	.word	0x2003e600
   d50cc:	000d50a7 	.word	0x000d50a7

000d50d0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d50d0:	4b01      	ldr	r3, [pc, #4]	; (d50d8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d50d2:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d50d4:	4770      	bx	lr
   d50d6:	bf00      	nop
   d50d8:	2003e59c 	.word	0x2003e59c

000d50dc <serialEventRun>:
{
   d50dc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d50de:	4b0b      	ldr	r3, [pc, #44]	; (d510c <serialEventRun+0x30>)
   d50e0:	b143      	cbz	r3, d50f4 <serialEventRun+0x18>
   d50e2:	f000 f95b 	bl	d539c <_Z16_fetch_usbserialv>
   d50e6:	6803      	ldr	r3, [r0, #0]
   d50e8:	691b      	ldr	r3, [r3, #16]
   d50ea:	4798      	blx	r3
   d50ec:	2800      	cmp	r0, #0
   d50ee:	dd01      	ble.n	d50f4 <serialEventRun+0x18>
        serialEvent();
   d50f0:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d50f4:	4b06      	ldr	r3, [pc, #24]	; (d5110 <serialEventRun+0x34>)
   d50f6:	b143      	cbz	r3, d510a <serialEventRun+0x2e>
   d50f8:	f000 f9ce 	bl	d5498 <_Z22__fetch_global_Serial1v>
   d50fc:	6803      	ldr	r3, [r0, #0]
   d50fe:	691b      	ldr	r3, [r3, #16]
   d5100:	4798      	blx	r3
   d5102:	2800      	cmp	r0, #0
   d5104:	dd01      	ble.n	d510a <serialEventRun+0x2e>
        serialEvent1();
   d5106:	f3af 8000 	nop.w
}
   d510a:	bd08      	pop	{r3, pc}
	...

000d5114 <_post_loop>:
{
   d5114:	b508      	push	{r3, lr}
	serialEventRun();
   d5116:	f7ff ffe1 	bl	d50dc <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d511a:	f7ff fbf3 	bl	d4904 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d511e:	4b01      	ldr	r3, [pc, #4]	; (d5124 <_post_loop+0x10>)
   d5120:	6018      	str	r0, [r3, #0]
}
   d5122:	bd08      	pop	{r3, pc}
   d5124:	2003e7d4 	.word	0x2003e7d4

000d5128 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5128:	4802      	ldr	r0, [pc, #8]	; (d5134 <_Z33system_initialize_user_backup_ramv+0xc>)
   d512a:	4a03      	ldr	r2, [pc, #12]	; (d5138 <_Z33system_initialize_user_backup_ramv+0x10>)
   d512c:	4903      	ldr	r1, [pc, #12]	; (d513c <_Z33system_initialize_user_backup_ramv+0x14>)
   d512e:	1a12      	subs	r2, r2, r0
   d5130:	f000 bbda 	b.w	d58e8 <memcpy>
   d5134:	2003f400 	.word	0x2003f400
   d5138:	2003f404 	.word	0x2003f404
   d513c:	000d5c00 	.word	0x000d5c00

000d5140 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5140:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5142:	2300      	movs	r3, #0
   d5144:	9300      	str	r3, [sp, #0]
   d5146:	461a      	mov	r2, r3
   d5148:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d514c:	f7ff fd44 	bl	d4bd8 <system_ctrl_set_result>
}
   d5150:	b003      	add	sp, #12
   d5152:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5158 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d5158:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d515a:	8843      	ldrh	r3, [r0, #2]
   d515c:	2b0a      	cmp	r3, #10
   d515e:	d008      	beq.n	d5172 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5160:	2b50      	cmp	r3, #80	; 0x50
   d5162:	d10b      	bne.n	d517c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d5164:	4b09      	ldr	r3, [pc, #36]	; (d518c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5166:	681b      	ldr	r3, [r3, #0]
   d5168:	b14b      	cbz	r3, d517e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d516a:	b003      	add	sp, #12
   d516c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d5170:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d5172:	f7ff ffe5 	bl	d5140 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d5176:	b003      	add	sp, #12
   d5178:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d517c:	2300      	movs	r3, #0
   d517e:	9300      	str	r3, [sp, #0]
   d5180:	461a      	mov	r2, r3
   d5182:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5186:	f7ff fd27 	bl	d4bd8 <system_ctrl_set_result>
}
   d518a:	e7f4      	b.n	d5176 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d518c:	2003e688 	.word	0x2003e688

000d5190 <module_user_init_hook>:
{
   d5190:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5192:	4c12      	ldr	r4, [pc, #72]	; (d51dc <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d5194:	4812      	ldr	r0, [pc, #72]	; (d51e0 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5196:	4d13      	ldr	r5, [pc, #76]	; (d51e4 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d5198:	2100      	movs	r1, #0
   d519a:	f7ff fda7 	bl	d4cec <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d519e:	6823      	ldr	r3, [r4, #0]
   d51a0:	42ab      	cmp	r3, r5
   d51a2:	4b11      	ldr	r3, [pc, #68]	; (d51e8 <module_user_init_hook+0x58>)
   d51a4:	bf0c      	ite	eq
   d51a6:	2201      	moveq	r2, #1
   d51a8:	2200      	movne	r2, #0
   d51aa:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d51ac:	d002      	beq.n	d51b4 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d51ae:	f7ff ffbb 	bl	d5128 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d51b2:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d51b4:	f7ff fb96 	bl	d48e4 <HAL_RNG_GetRandomNumber>
   d51b8:	4604      	mov	r4, r0
    srand(seed);
   d51ba:	f000 fbab 	bl	d5914 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d51be:	4b0b      	ldr	r3, [pc, #44]	; (d51ec <module_user_init_hook+0x5c>)
   d51c0:	b113      	cbz	r3, d51c8 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d51c2:	4620      	mov	r0, r4
   d51c4:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d51c8:	2100      	movs	r1, #0
   d51ca:	4808      	ldr	r0, [pc, #32]	; (d51ec <module_user_init_hook+0x5c>)
   d51cc:	f7ff fd76 	bl	d4cbc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d51d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d51d4:	4806      	ldr	r0, [pc, #24]	; (d51f0 <module_user_init_hook+0x60>)
   d51d6:	2100      	movs	r1, #0
   d51d8:	f7ff bcf4 	b.w	d4bc4 <system_ctrl_set_app_request_handler>
   d51dc:	2003f400 	.word	0x2003f400
   d51e0:	000d50d1 	.word	0x000d50d1
   d51e4:	9a271c1e 	.word	0x9a271c1e
   d51e8:	2003e684 	.word	0x2003e684
   d51ec:	00000000 	.word	0x00000000
   d51f0:	000d5159 	.word	0x000d5159

000d51f4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d51f4:	4770      	bx	lr

000d51f6 <_ZN9IPAddressD0Ev>:
   d51f6:	b510      	push	{r4, lr}
   d51f8:	2118      	movs	r1, #24
   d51fa:	4604      	mov	r4, r0
   d51fc:	f000 fb61 	bl	d58c2 <_ZdlPvj>
   d5200:	4620      	mov	r0, r4
   d5202:	bd10      	pop	{r4, pc}

000d5204 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5204:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5206:	7d03      	ldrb	r3, [r0, #20]
   d5208:	2b06      	cmp	r3, #6
{
   d520a:	b08d      	sub	sp, #52	; 0x34
   d520c:	460e      	mov	r6, r1
   d520e:	f100 0704 	add.w	r7, r0, #4
   d5212:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d5216:	d012      	beq.n	d523e <_ZNK9IPAddress7printToER5Print+0x3a>
   d5218:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d521c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5220:	220a      	movs	r2, #10
   d5222:	4630      	mov	r0, r6
   d5224:	f7ff ff05 	bl	d5032 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5228:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d522a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d522c:	d019      	beq.n	d5262 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d522e:	2c00      	cmp	r4, #0
   d5230:	d0f4      	beq.n	d521c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d5232:	212e      	movs	r1, #46	; 0x2e
   d5234:	4630      	mov	r0, r6
   d5236:	f7ff fed9 	bl	d4fec <_ZN5Print5printEc>
   d523a:	4404      	add	r4, r0
   d523c:	e7ee      	b.n	d521c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d523e:	232f      	movs	r3, #47	; 0x2f
   d5240:	466a      	mov	r2, sp
   d5242:	4639      	mov	r1, r7
   d5244:	200a      	movs	r0, #10
		buf[0] = 0;
   d5246:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d524a:	f7ff fb73 	bl	d4934 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d524e:	4668      	mov	r0, sp
   d5250:	f000 fbb8 	bl	d59c4 <strlen>
   d5254:	6833      	ldr	r3, [r6, #0]
   d5256:	4602      	mov	r2, r0
   d5258:	68db      	ldr	r3, [r3, #12]
   d525a:	4669      	mov	r1, sp
   d525c:	4630      	mov	r0, r6
   d525e:	4798      	blx	r3
   d5260:	4604      	mov	r4, r0
    }
    return n;
}
   d5262:	4620      	mov	r0, r4
   d5264:	b00d      	add	sp, #52	; 0x34
   d5266:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5268 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d5268:	b510      	push	{r4, lr}
   d526a:	4b05      	ldr	r3, [pc, #20]	; (d5280 <_ZN9IPAddressC1Ev+0x18>)
   d526c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d526e:	2211      	movs	r2, #17
   d5270:	f840 3b04 	str.w	r3, [r0], #4
   d5274:	2100      	movs	r1, #0
   d5276:	f000 fb45 	bl	d5904 <memset>
}
   d527a:	4620      	mov	r0, r4
   d527c:	bd10      	pop	{r4, pc}
   d527e:	bf00      	nop
   d5280:	000d5ac8 	.word	0x000d5ac8

000d5284 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d5284:	4603      	mov	r3, r0
   d5286:	4a07      	ldr	r2, [pc, #28]	; (d52a4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5288:	b510      	push	{r4, lr}
   d528a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d528e:	f101 0210 	add.w	r2, r1, #16
   d5292:	f851 4b04 	ldr.w	r4, [r1], #4
   d5296:	f843 4b04 	str.w	r4, [r3], #4
   d529a:	4291      	cmp	r1, r2
   d529c:	d1f9      	bne.n	d5292 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d529e:	780a      	ldrb	r2, [r1, #0]
   d52a0:	701a      	strb	r2, [r3, #0]
}
   d52a2:	bd10      	pop	{r4, pc}
   d52a4:	000d5ac8 	.word	0x000d5ac8

000d52a8 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d52a8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d52aa:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d52ae:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d52b2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d52b6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d52ba:	2304      	movs	r3, #4
   d52bc:	6041      	str	r1, [r0, #4]
   d52be:	7503      	strb	r3, [r0, #20]
}
   d52c0:	bd10      	pop	{r4, pc}
	...

000d52c4 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d52c4:	b513      	push	{r0, r1, r4, lr}
   d52c6:	4b05      	ldr	r3, [pc, #20]	; (d52dc <_ZN9IPAddressC1EPKh+0x18>)
   d52c8:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d52ca:	78cb      	ldrb	r3, [r1, #3]
   d52cc:	9300      	str	r3, [sp, #0]
   d52ce:	788b      	ldrb	r3, [r1, #2]
   d52d0:	784a      	ldrb	r2, [r1, #1]
   d52d2:	7809      	ldrb	r1, [r1, #0]
   d52d4:	f7ff ffe8 	bl	d52a8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d52d8:	b002      	add	sp, #8
   d52da:	bd10      	pop	{r4, pc}
   d52dc:	000d5ac8 	.word	0x000d5ac8

000d52e0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d52e0:	7441      	strb	r1, [r0, #17]
}
   d52e2:	4770      	bx	lr

000d52e4 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d52e4:	4770      	bx	lr

000d52e6 <_ZN9USBSerial4readEv>:
{
   d52e6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d52e8:	2100      	movs	r1, #0
   d52ea:	7c00      	ldrb	r0, [r0, #16]
   d52ec:	f7ff fc3a 	bl	d4b64 <HAL_USB_USART_Receive_Data>
}
   d52f0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d52f4:	bd08      	pop	{r3, pc}

000d52f6 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d52f6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d52f8:	2101      	movs	r1, #1
   d52fa:	7c00      	ldrb	r0, [r0, #16]
   d52fc:	f7ff fc32 	bl	d4b64 <HAL_USB_USART_Receive_Data>
}
   d5300:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5304:	bd08      	pop	{r3, pc}

000d5306 <_ZN9USBSerial17availableForWriteEv>:
{
   d5306:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5308:	7c00      	ldrb	r0, [r0, #16]
   d530a:	f7ff fc23 	bl	d4b54 <HAL_USB_USART_Available_Data_For_Write>
}
   d530e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5312:	bd08      	pop	{r3, pc}

000d5314 <_ZN9USBSerial9availableEv>:
{
   d5314:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5316:	7c00      	ldrb	r0, [r0, #16]
   d5318:	f7ff fc14 	bl	d4b44 <HAL_USB_USART_Available_Data>
}
   d531c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5320:	bd08      	pop	{r3, pc}

000d5322 <_ZN9USBSerial5writeEh>:
{
   d5322:	b513      	push	{r0, r1, r4, lr}
   d5324:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5326:	7c00      	ldrb	r0, [r0, #16]
{
   d5328:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d532a:	f7ff fc13 	bl	d4b54 <HAL_USB_USART_Available_Data_For_Write>
   d532e:	2800      	cmp	r0, #0
   d5330:	9901      	ldr	r1, [sp, #4]
   d5332:	dc01      	bgt.n	d5338 <_ZN9USBSerial5writeEh+0x16>
   d5334:	7c60      	ldrb	r0, [r4, #17]
   d5336:	b120      	cbz	r0, d5342 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5338:	7c20      	ldrb	r0, [r4, #16]
   d533a:	f7ff fc1b 	bl	d4b74 <HAL_USB_USART_Send_Data>
   d533e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d5342:	b002      	add	sp, #8
   d5344:	bd10      	pop	{r4, pc}

000d5346 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d5346:	7c00      	ldrb	r0, [r0, #16]
   d5348:	f7ff bc1c 	b.w	d4b84 <HAL_USB_USART_Flush_Data>

000d534c <_ZN9USBSerialD0Ev>:
   d534c:	b510      	push	{r4, lr}
   d534e:	2114      	movs	r1, #20
   d5350:	4604      	mov	r4, r0
   d5352:	f000 fab6 	bl	d58c2 <_ZdlPvj>
   d5356:	4620      	mov	r0, r4
   d5358:	bd10      	pop	{r4, pc}
	...

000d535c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d535c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d535e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5362:	4604      	mov	r4, r0
   d5364:	4608      	mov	r0, r1
   d5366:	2100      	movs	r1, #0
   d5368:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d536c:	4b04      	ldr	r3, [pc, #16]	; (d5380 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d536e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d5370:	2301      	movs	r3, #1
  _serial = serial;
   d5372:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d5374:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d5376:	4611      	mov	r1, r2
   d5378:	f7ff fbd4 	bl	d4b24 <HAL_USB_USART_Init>
}
   d537c:	4620      	mov	r0, r4
   d537e:	bd10      	pop	{r4, pc}
   d5380:	000d5adc 	.word	0x000d5adc

000d5384 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d5384:	7c00      	ldrb	r0, [r0, #16]
   d5386:	2200      	movs	r2, #0
   d5388:	f7ff bbd4 	b.w	d4b34 <HAL_USB_USART_Begin>

000d538c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d538c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d538e:	2214      	movs	r2, #20
{
   d5390:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5392:	2100      	movs	r1, #0
   d5394:	f000 fab6 	bl	d5904 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5398:	4620      	mov	r0, r4
   d539a:	bd10      	pop	{r4, pc}

000d539c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d539c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d539e:	4c10      	ldr	r4, [pc, #64]	; (d53e0 <_Z16_fetch_usbserialv+0x44>)
{
   d53a0:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d53a2:	a803      	add	r0, sp, #12
   d53a4:	f7ff fff2 	bl	d538c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d53a8:	7821      	ldrb	r1, [r4, #0]
   d53aa:	f3bf 8f5b 	dmb	ish
   d53ae:	f011 0101 	ands.w	r1, r1, #1
   d53b2:	d111      	bne.n	d53d8 <_Z16_fetch_usbserialv+0x3c>
   d53b4:	4620      	mov	r0, r4
   d53b6:	9101      	str	r1, [sp, #4]
   d53b8:	f7fe fe6f 	bl	d409a <__cxa_guard_acquire>
   d53bc:	9901      	ldr	r1, [sp, #4]
   d53be:	b158      	cbz	r0, d53d8 <_Z16_fetch_usbserialv+0x3c>
   d53c0:	aa03      	add	r2, sp, #12
   d53c2:	4808      	ldr	r0, [pc, #32]	; (d53e4 <_Z16_fetch_usbserialv+0x48>)
   d53c4:	f7ff ffca 	bl	d535c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d53c8:	4620      	mov	r0, r4
   d53ca:	f7fe fe6b 	bl	d40a4 <__cxa_guard_release>
   d53ce:	4a06      	ldr	r2, [pc, #24]	; (d53e8 <_Z16_fetch_usbserialv+0x4c>)
   d53d0:	4906      	ldr	r1, [pc, #24]	; (d53ec <_Z16_fetch_usbserialv+0x50>)
   d53d2:	4804      	ldr	r0, [pc, #16]	; (d53e4 <_Z16_fetch_usbserialv+0x48>)
   d53d4:	f000 fa70 	bl	d58b8 <__aeabi_atexit>
	return _usbserial;
}
   d53d8:	4802      	ldr	r0, [pc, #8]	; (d53e4 <_Z16_fetch_usbserialv+0x48>)
   d53da:	b008      	add	sp, #32
   d53dc:	bd10      	pop	{r4, pc}
   d53de:	bf00      	nop
   d53e0:	2003e68c 	.word	0x2003e68c
   d53e4:	2003e690 	.word	0x2003e690
   d53e8:	2003e600 	.word	0x2003e600
   d53ec:	000d52e5 	.word	0x000d52e5

000d53f0 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d53f0:	4770      	bx	lr

000d53f2 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d53f2:	7441      	strb	r1, [r0, #17]
}
   d53f4:	4770      	bx	lr

000d53f6 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d53f6:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d53f8:	7c00      	ldrb	r0, [r0, #16]
   d53fa:	f7ff fadb 	bl	d49b4 <hal_usart_available_data_for_write>
}
   d53fe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5402:	bd08      	pop	{r3, pc}

000d5404 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5404:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d5406:	7c00      	ldrb	r0, [r0, #16]
   d5408:	f7ff faac 	bl	d4964 <hal_usart_available>
}
   d540c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5410:	bd08      	pop	{r3, pc}

000d5412 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d5412:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d5414:	7c00      	ldrb	r0, [r0, #16]
   d5416:	f7ff fab5 	bl	d4984 <hal_usart_peek>
}
   d541a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d541e:	bd08      	pop	{r3, pc}

000d5420 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5420:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d5422:	7c00      	ldrb	r0, [r0, #16]
   d5424:	f7ff faa6 	bl	d4974 <hal_usart_read>
}
   d5428:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d542c:	bd08      	pop	{r3, pc}

000d542e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d542e:	7c00      	ldrb	r0, [r0, #16]
   d5430:	f7ff bab0 	b.w	d4994 <hal_usart_flush>

000d5434 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5434:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5436:	7c45      	ldrb	r5, [r0, #17]
{
   d5438:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d543a:	b12d      	cbz	r5, d5448 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d543c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d543e:	b003      	add	sp, #12
   d5440:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d5444:	f7ff ba86 	b.w	d4954 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5448:	7c00      	ldrb	r0, [r0, #16]
   d544a:	9101      	str	r1, [sp, #4]
   d544c:	f7ff fab2 	bl	d49b4 <hal_usart_available_data_for_write>
   d5450:	2800      	cmp	r0, #0
   d5452:	9901      	ldr	r1, [sp, #4]
   d5454:	dcf2      	bgt.n	d543c <_ZN11USARTSerial5writeEh+0x8>
}
   d5456:	4628      	mov	r0, r5
   d5458:	b003      	add	sp, #12
   d545a:	bd30      	pop	{r4, r5, pc}

000d545c <_ZN11USARTSerialD0Ev>:
   d545c:	b510      	push	{r4, lr}
   d545e:	2114      	movs	r1, #20
   d5460:	4604      	mov	r4, r0
   d5462:	f000 fa2e 	bl	d58c2 <_ZdlPvj>
   d5466:	4620      	mov	r0, r4
   d5468:	bd10      	pop	{r4, pc}
	...

000d546c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d546c:	b510      	push	{r4, lr}
   d546e:	f04f 0c00 	mov.w	ip, #0
   d5472:	4604      	mov	r4, r0
   d5474:	4608      	mov	r0, r1
   d5476:	4611      	mov	r1, r2
   d5478:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d547c:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d5480:	4a04      	ldr	r2, [pc, #16]	; (d5494 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d5482:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d5484:	2201      	movs	r2, #1
  _serial = serial;
   d5486:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d5488:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d548a:	461a      	mov	r2, r3
   d548c:	f7ff fa5a 	bl	d4944 <hal_usart_init>
}
   d5490:	4620      	mov	r0, r4
   d5492:	bd10      	pop	{r4, pc}
   d5494:	000d5b0c 	.word	0x000d5b0c

000d5498 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5498:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d549a:	4c0e      	ldr	r4, [pc, #56]	; (d54d4 <_Z22__fetch_global_Serial1v+0x3c>)
   d549c:	7821      	ldrb	r1, [r4, #0]
   d549e:	f3bf 8f5b 	dmb	ish
   d54a2:	f011 0101 	ands.w	r1, r1, #1
   d54a6:	d112      	bne.n	d54ce <_Z22__fetch_global_Serial1v+0x36>
   d54a8:	4620      	mov	r0, r4
   d54aa:	9101      	str	r1, [sp, #4]
   d54ac:	f7fe fdf5 	bl	d409a <__cxa_guard_acquire>
   d54b0:	9901      	ldr	r1, [sp, #4]
   d54b2:	b160      	cbz	r0, d54ce <_Z22__fetch_global_Serial1v+0x36>
   d54b4:	4a08      	ldr	r2, [pc, #32]	; (d54d8 <_Z22__fetch_global_Serial1v+0x40>)
   d54b6:	4b09      	ldr	r3, [pc, #36]	; (d54dc <_Z22__fetch_global_Serial1v+0x44>)
   d54b8:	4809      	ldr	r0, [pc, #36]	; (d54e0 <_Z22__fetch_global_Serial1v+0x48>)
   d54ba:	f7ff ffd7 	bl	d546c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d54be:	4620      	mov	r0, r4
   d54c0:	f7fe fdf0 	bl	d40a4 <__cxa_guard_release>
   d54c4:	4a07      	ldr	r2, [pc, #28]	; (d54e4 <_Z22__fetch_global_Serial1v+0x4c>)
   d54c6:	4908      	ldr	r1, [pc, #32]	; (d54e8 <_Z22__fetch_global_Serial1v+0x50>)
   d54c8:	4805      	ldr	r0, [pc, #20]	; (d54e0 <_Z22__fetch_global_Serial1v+0x48>)
   d54ca:	f000 f9f5 	bl	d58b8 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d54ce:	4804      	ldr	r0, [pc, #16]	; (d54e0 <_Z22__fetch_global_Serial1v+0x48>)
   d54d0:	b002      	add	sp, #8
   d54d2:	bd10      	pop	{r4, pc}
   d54d4:	2003e6a4 	.word	0x2003e6a4
   d54d8:	2003e6a8 	.word	0x2003e6a8
   d54dc:	2003e72c 	.word	0x2003e72c
   d54e0:	2003e7b0 	.word	0x2003e7b0
   d54e4:	2003e600 	.word	0x2003e600
   d54e8:	000d53f1 	.word	0x000d53f1

000d54ec <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d54ec:	4770      	bx	lr

000d54ee <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d54ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d54f0:	4606      	mov	r6, r0
   d54f2:	4615      	mov	r5, r2
   d54f4:	460c      	mov	r4, r1
   d54f6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d54f8:	42bc      	cmp	r4, r7
   d54fa:	d006      	beq.n	d550a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d54fc:	6833      	ldr	r3, [r6, #0]
   d54fe:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5502:	689b      	ldr	r3, [r3, #8]
   d5504:	4630      	mov	r0, r6
   d5506:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d5508:	e7f6      	b.n	d54f8 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d550a:	4628      	mov	r0, r5
   d550c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d550e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d550e:	7c00      	ldrb	r0, [r0, #16]
   d5510:	2200      	movs	r2, #0
   d5512:	f7ff ba67 	b.w	d49e4 <hal_i2c_write>

000d5516 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d5516:	7c00      	ldrb	r0, [r0, #16]
   d5518:	2100      	movs	r1, #0
   d551a:	f7ff ba6b 	b.w	d49f4 <hal_i2c_available>

000d551e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d551e:	7c00      	ldrb	r0, [r0, #16]
   d5520:	2100      	movs	r1, #0
   d5522:	f7ff ba6f 	b.w	d4a04 <hal_i2c_read>

000d5526 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d5526:	7c00      	ldrb	r0, [r0, #16]
   d5528:	2100      	movs	r1, #0
   d552a:	f7ff ba73 	b.w	d4a14 <hal_i2c_peek>

000d552e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d552e:	7c00      	ldrb	r0, [r0, #16]
   d5530:	2100      	movs	r1, #0
   d5532:	f7ff ba77 	b.w	d4a24 <hal_i2c_flush>

000d5536 <_ZN7TwoWireD0Ev>:
   d5536:	b510      	push	{r4, lr}
   d5538:	2114      	movs	r1, #20
   d553a:	4604      	mov	r4, r0
   d553c:	f000 f9c1 	bl	d58c2 <_ZdlPvj>
   d5540:	4620      	mov	r0, r4
   d5542:	bd10      	pop	{r4, pc}

000d5544 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d5544:	b510      	push	{r4, lr}
   d5546:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d554a:	4604      	mov	r4, r0
   d554c:	4608      	mov	r0, r1
   d554e:	2100      	movs	r1, #0
   d5550:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d5554:	4b03      	ldr	r3, [pc, #12]	; (d5564 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d5556:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d5558:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d555a:	4611      	mov	r1, r2
   d555c:	f7ff fa82 	bl	d4a64 <hal_i2c_init>
}
   d5560:	4620      	mov	r0, r4
   d5562:	bd10      	pop	{r4, pc}
   d5564:	000d5b3c 	.word	0x000d5b3c

000d5568 <_ZN7TwoWire5beginEh>:
{
   d5568:	460a      	mov	r2, r1
	hal_i2c_begin(_i2c, I2C_MODE_SLAVE, address, NULL);
   d556a:	7c00      	ldrb	r0, [r0, #16]
   d556c:	2300      	movs	r3, #0
   d556e:	2101      	movs	r1, #1
   d5570:	f7ff ba28 	b.w	d49c4 <hal_i2c_begin>

000d5574 <_ZN7TwoWire5beginEi>:
  begin((uint8_t)address);
   d5574:	b2c9      	uxtb	r1, r1
   d5576:	f7ff bff7 	b.w	d5568 <_ZN7TwoWire5beginEh>

000d557a <_ZN7TwoWire3endEv>:
	hal_i2c_end(_i2c, NULL);
   d557a:	7c00      	ldrb	r0, [r0, #16]
   d557c:	2100      	movs	r1, #0
   d557e:	f7ff ba29 	b.w	d49d4 <hal_i2c_end>

000d5582 <_ZN7TwoWire9onReceiveEPFviE>:
}

// sets function called on slave write
void TwoWire::onReceive( void (*function)(int) )
{
  hal_i2c_set_callback_on_received(_i2c, function, NULL);
   d5582:	7c00      	ldrb	r0, [r0, #16]
   d5584:	2200      	movs	r2, #0
   d5586:	f7ff ba5d 	b.w	d4a44 <hal_i2c_set_callback_on_received>

000d558a <_ZN7TwoWire9onRequestEPFvvE>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  hal_i2c_set_callback_on_requested(_i2c, function, NULL);
   d558a:	7c00      	ldrb	r0, [r0, #16]
   d558c:	2200      	movs	r2, #0
   d558e:	f7ff ba61 	b.w	d4a54 <hal_i2c_set_callback_on_requested>

000d5592 <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   d5592:	b510      	push	{r4, lr}
  if (0 == max) {
   d5594:	4604      	mov	r4, r0
   d5596:	b128      	cbz	r0, d55a4 <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
   d5598:	f000 f9e0 	bl	d595c <rand>
   d559c:	fb90 f3f4 	sdiv	r3, r0, r4
   d55a0:	fb03 0414 	mls	r4, r3, r4, r0
}
   d55a4:	4620      	mov	r0, r4
   d55a6:	bd10      	pop	{r4, pc}

000d55a8 <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
   d55a8:	4288      	cmp	r0, r1
{
   d55aa:	b510      	push	{r4, lr}
   d55ac:	4604      	mov	r4, r0
  if (min >= max) {
   d55ae:	da03      	bge.n	d55b8 <_Z6randomii+0x10>
    return min;
  }
  return random(max - min) + min;
   d55b0:	1a08      	subs	r0, r1, r0
   d55b2:	f7ff ffee 	bl	d5592 <_Z6randomi>
   d55b6:	4404      	add	r4, r0
}
   d55b8:	4620      	mov	r0, r4
   d55ba:	bd10      	pop	{r4, pc}

000d55bc <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d55bc:	2200      	movs	r2, #0
   d55be:	6840      	ldr	r0, [r0, #4]
   d55c0:	4611      	mov	r1, r2
   d55c2:	f7ff bb2b 	b.w	d4c1c <network_ready>

000d55c6 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d55c6:	2200      	movs	r2, #0
   d55c8:	6840      	ldr	r0, [r0, #4]
   d55ca:	4611      	mov	r1, r2
   d55cc:	f7ff bb46 	b.w	d4c5c <network_listening>

000d55d0 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d55d0:	2200      	movs	r2, #0
   d55d2:	6840      	ldr	r0, [r0, #4]
   d55d4:	4611      	mov	r1, r2
   d55d6:	f7ff bb51 	b.w	d4c7c <network_get_listen_timeout>

000d55da <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d55da:	6840      	ldr	r0, [r0, #4]
   d55dc:	2200      	movs	r2, #0
   d55de:	f7ff bb45 	b.w	d4c6c <network_set_listen_timeout>

000d55e2 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d55e2:	6840      	ldr	r0, [r0, #4]
   d55e4:	2200      	movs	r2, #0
   d55e6:	f081 0101 	eor.w	r1, r1, #1
   d55ea:	f7ff bb2f 	b.w	d4c4c <network_listen>

000d55ee <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d55ee:	2300      	movs	r3, #0
   d55f0:	6840      	ldr	r0, [r0, #4]
   d55f2:	461a      	mov	r2, r3
   d55f4:	4619      	mov	r1, r3
   d55f6:	f7ff bb21 	b.w	d4c3c <network_off>

000d55fa <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d55fa:	2200      	movs	r2, #0
   d55fc:	6840      	ldr	r0, [r0, #4]
   d55fe:	4611      	mov	r1, r2
   d5600:	f7ff bafc 	b.w	d4bfc <network_connecting>

000d5604 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5604:	6840      	ldr	r0, [r0, #4]
   d5606:	2200      	movs	r2, #0
   d5608:	2102      	movs	r1, #2
   d560a:	f7ff baff 	b.w	d4c0c <network_disconnect>

000d560e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d560e:	2300      	movs	r3, #0
   d5610:	6840      	ldr	r0, [r0, #4]
   d5612:	461a      	mov	r2, r3
   d5614:	f7ff baea 	b.w	d4bec <network_connect>

000d5618 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d5618:	4b02      	ldr	r3, [pc, #8]	; (d5624 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d561a:	2204      	movs	r2, #4
   d561c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d561e:	4a02      	ldr	r2, [pc, #8]	; (d5628 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d5620:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d5622:	4770      	bx	lr
   d5624:	2003e7c4 	.word	0x2003e7c4
   d5628:	000d5b64 	.word	0x000d5b64

000d562c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d562c:	2300      	movs	r3, #0
   d562e:	6840      	ldr	r0, [r0, #4]
   d5630:	461a      	mov	r2, r3
   d5632:	f7ff badb 	b.w	d4bec <network_connect>

000d5636 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5636:	6840      	ldr	r0, [r0, #4]
   d5638:	2200      	movs	r2, #0
   d563a:	2102      	movs	r1, #2
   d563c:	f7ff bae6 	b.w	d4c0c <network_disconnect>

000d5640 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5640:	2200      	movs	r2, #0
   d5642:	6840      	ldr	r0, [r0, #4]
   d5644:	4611      	mov	r1, r2
   d5646:	f7ff bad9 	b.w	d4bfc <network_connecting>

000d564a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d564a:	2200      	movs	r2, #0
   d564c:	6840      	ldr	r0, [r0, #4]
   d564e:	4611      	mov	r1, r2
   d5650:	f7ff bae4 	b.w	d4c1c <network_ready>

000d5654 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5654:	2300      	movs	r3, #0
   d5656:	6840      	ldr	r0, [r0, #4]
   d5658:	461a      	mov	r2, r3
   d565a:	4619      	mov	r1, r3
   d565c:	f7ff bae6 	b.w	d4c2c <network_on>

000d5660 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5660:	2300      	movs	r3, #0
   d5662:	6840      	ldr	r0, [r0, #4]
   d5664:	461a      	mov	r2, r3
   d5666:	4619      	mov	r1, r3
   d5668:	f7ff bae8 	b.w	d4c3c <network_off>

000d566c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d566c:	6840      	ldr	r0, [r0, #4]
   d566e:	2100      	movs	r1, #0
   d5670:	f7ff bb0c 	b.w	d4c8c <network_is_on>

000d5674 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d5674:	6840      	ldr	r0, [r0, #4]
   d5676:	2100      	movs	r1, #0
   d5678:	f7ff bb10 	b.w	d4c9c <network_is_off>

000d567c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d567c:	6840      	ldr	r0, [r0, #4]
   d567e:	2200      	movs	r2, #0
   d5680:	f081 0101 	eor.w	r1, r1, #1
   d5684:	f7ff bae2 	b.w	d4c4c <network_listen>

000d5688 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5688:	6840      	ldr	r0, [r0, #4]
   d568a:	2200      	movs	r2, #0
   d568c:	f7ff baee 	b.w	d4c6c <network_set_listen_timeout>

000d5690 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5690:	2200      	movs	r2, #0
   d5692:	6840      	ldr	r0, [r0, #4]
   d5694:	4611      	mov	r1, r2
   d5696:	f7ff baf1 	b.w	d4c7c <network_get_listen_timeout>

000d569a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d569a:	2200      	movs	r2, #0
   d569c:	6840      	ldr	r0, [r0, #4]
   d569e:	4611      	mov	r1, r2
   d56a0:	f7ff badc 	b.w	d4c5c <network_listening>

000d56a4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d56a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d56a8:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d56aa:	b095      	sub	sp, #84	; 0x54
   d56ac:	4616      	mov	r6, r2
   d56ae:	460d      	mov	r5, r1
   d56b0:	4607      	mov	r7, r0
    IPAddress addr;
   d56b2:	f7ff fdd9 	bl	d5268 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d56b6:	4621      	mov	r1, r4
   d56b8:	2218      	movs	r2, #24
   d56ba:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d56bc:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d56be:	f000 f921 	bl	d5904 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d56c2:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d56c4:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d56c8:	4621      	mov	r1, r4
   d56ca:	466b      	mov	r3, sp
   d56cc:	aa0c      	add	r2, sp, #48	; 0x30
   d56ce:	4630      	mov	r0, r6
   d56d0:	f7ff f8e0 	bl	d4894 <netdb_getaddrinfo>
    if (!r) {
   d56d4:	4604      	mov	r4, r0
   d56d6:	2800      	cmp	r0, #0
   d56d8:	d14c      	bne.n	d5774 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d56da:	4602      	mov	r2, r0
   d56dc:	2101      	movs	r1, #1
   d56de:	6868      	ldr	r0, [r5, #4]
   d56e0:	f7ff fa9c 	bl	d4c1c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d56e4:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d56e6:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d56e8:	4622      	mov	r2, r4
   d56ea:	6868      	ldr	r0, [r5, #4]
   d56ec:	f7ff fa96 	bl	d4c1c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d56f0:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d56f2:	4681      	mov	r9, r0
        bool ok = false;
   d56f4:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d56f6:	2e00      	cmp	r6, #0
   d56f8:	d03c      	beq.n	d5774 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d56fa:	2900      	cmp	r1, #0
   d56fc:	d13a      	bne.n	d5774 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d56fe:	6873      	ldr	r3, [r6, #4]
   d5700:	2b02      	cmp	r3, #2
   d5702:	d003      	beq.n	d570c <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d5704:	2b0a      	cmp	r3, #10
   d5706:	d011      	beq.n	d572c <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5708:	69f6      	ldr	r6, [r6, #28]
   d570a:	e7f4      	b.n	d56f6 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d570c:	f1b8 0f00 	cmp.w	r8, #0
   d5710:	d00a      	beq.n	d5728 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5712:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d5714:	a806      	add	r0, sp, #24
   d5716:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d5718:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d571a:	f7ff fdd3 	bl	d52c4 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d571e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5720:	1d3c      	adds	r4, r7, #4
   d5722:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5724:	682b      	ldr	r3, [r5, #0]
   d5726:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d5728:	4641      	mov	r1, r8
   d572a:	e7ed      	b.n	d5708 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d572c:	f1b9 0f00 	cmp.w	r9, #0
   d5730:	d101      	bne.n	d5736 <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d5732:	4649      	mov	r1, r9
   d5734:	e7e8      	b.n	d5708 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5736:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5738:	2210      	movs	r2, #16
   d573a:	a801      	add	r0, sp, #4
   d573c:	f000 f8e2 	bl	d5904 <memset>
                    a.v = 6;
   d5740:	2306      	movs	r3, #6
   d5742:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5746:	ad01      	add	r5, sp, #4
   d5748:	f104 0308 	add.w	r3, r4, #8
   d574c:	3418      	adds	r4, #24
   d574e:	6818      	ldr	r0, [r3, #0]
   d5750:	6859      	ldr	r1, [r3, #4]
   d5752:	462a      	mov	r2, r5
   d5754:	c203      	stmia	r2!, {r0, r1}
   d5756:	3308      	adds	r3, #8
   d5758:	42a3      	cmp	r3, r4
   d575a:	4615      	mov	r5, r2
   d575c:	d1f7      	bne.n	d574e <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d575e:	a901      	add	r1, sp, #4
   d5760:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d5762:	ad07      	add	r5, sp, #28
   d5764:	f7ff fd8e 	bl	d5284 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5768:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d576a:	1d3c      	adds	r4, r7, #4
   d576c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d576e:	682b      	ldr	r3, [r5, #0]
   d5770:	7023      	strb	r3, [r4, #0]
   d5772:	e7de      	b.n	d5732 <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5774:	9800      	ldr	r0, [sp, #0]
   d5776:	f7ff f885 	bl	d4884 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d577a:	4638      	mov	r0, r7
   d577c:	b015      	add	sp, #84	; 0x54
   d577e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d5784 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5784:	4b02      	ldr	r3, [pc, #8]	; (d5790 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5786:	4a03      	ldr	r2, [pc, #12]	; (d5794 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5788:	601a      	str	r2, [r3, #0]
   d578a:	2200      	movs	r2, #0
   d578c:	605a      	str	r2, [r3, #4]

} // spark
   d578e:	4770      	bx	lr
   d5790:	2003e7cc 	.word	0x2003e7cc
   d5794:	000d5ba0 	.word	0x000d5ba0

000d5798 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d5798:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d579a:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d579c:	d902      	bls.n	d57a4 <pinAvailable+0xc>
    return false;
   d579e:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d57a0:	b002      	add	sp, #8
   d57a2:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d57a4:	f1a0 030b 	sub.w	r3, r0, #11
   d57a8:	2b02      	cmp	r3, #2
   d57aa:	d81a      	bhi.n	d57e2 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d57ac:	4c17      	ldr	r4, [pc, #92]	; (d580c <pinAvailable+0x74>)
   d57ae:	7821      	ldrb	r1, [r4, #0]
   d57b0:	f3bf 8f5b 	dmb	ish
   d57b4:	f011 0101 	ands.w	r1, r1, #1
   d57b8:	d10b      	bne.n	d57d2 <pinAvailable+0x3a>
   d57ba:	4620      	mov	r0, r4
   d57bc:	9101      	str	r1, [sp, #4]
   d57be:	f7fe fc6c 	bl	d409a <__cxa_guard_acquire>
   d57c2:	9901      	ldr	r1, [sp, #4]
   d57c4:	b128      	cbz	r0, d57d2 <pinAvailable+0x3a>
   d57c6:	4812      	ldr	r0, [pc, #72]	; (d5810 <pinAvailable+0x78>)
   d57c8:	f7ff fadc 	bl	d4d84 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d57cc:	4620      	mov	r0, r4
   d57ce:	f7fe fc69 	bl	d40a4 <__cxa_guard_release>
   d57d2:	4b0f      	ldr	r3, [pc, #60]	; (d5810 <pinAvailable+0x78>)
   d57d4:	7818      	ldrb	r0, [r3, #0]
   d57d6:	f7ff f985 	bl	d4ae4 <hal_spi_is_enabled>
   d57da:	2800      	cmp	r0, #0
   d57dc:	d1df      	bne.n	d579e <pinAvailable+0x6>
  return true; // 'pin' is available
   d57de:	2001      	movs	r0, #1
   d57e0:	e7de      	b.n	d57a0 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d57e2:	2801      	cmp	r0, #1
   d57e4:	d809      	bhi.n	d57fa <pinAvailable+0x62>
   d57e6:	f000 f83f 	bl	d5868 <_Z19__fetch_global_Wirev>
   d57ea:	2100      	movs	r1, #0
   d57ec:	7c00      	ldrb	r0, [r0, #16]
   d57ee:	f7ff f921 	bl	d4a34 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d57f2:	f080 0001 	eor.w	r0, r0, #1
   d57f6:	b2c0      	uxtb	r0, r0
   d57f8:	e7d2      	b.n	d57a0 <pinAvailable+0x8>
   d57fa:	3809      	subs	r0, #9
   d57fc:	2801      	cmp	r0, #1
   d57fe:	d8ee      	bhi.n	d57de <pinAvailable+0x46>
   d5800:	f7ff fe4a 	bl	d5498 <_Z22__fetch_global_Serial1v>
   d5804:	7c00      	ldrb	r0, [r0, #16]
   d5806:	f7ff f8cd 	bl	d49a4 <hal_usart_is_enabled>
   d580a:	e7f2      	b.n	d57f2 <pinAvailable+0x5a>
   d580c:	2003e640 	.word	0x2003e640
   d5810:	2003e644 	.word	0x2003e644

000d5814 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5814:	2823      	cmp	r0, #35	; 0x23
{
   d5816:	b538      	push	{r3, r4, r5, lr}
   d5818:	4604      	mov	r4, r0
   d581a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d581c:	d80a      	bhi.n	d5834 <pinMode+0x20>
   d581e:	29ff      	cmp	r1, #255	; 0xff
   d5820:	d008      	beq.n	d5834 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d5822:	f7ff ffb9 	bl	d5798 <pinAvailable>
   d5826:	b128      	cbz	r0, d5834 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d5828:	4629      	mov	r1, r5
   d582a:	4620      	mov	r0, r4
}
   d582c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d5830:	f7ff b840 	b.w	d48b4 <HAL_Pin_Mode>
}
   d5834:	bd38      	pop	{r3, r4, r5, pc}

000d5836 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d5836:	b538      	push	{r3, r4, r5, lr}
   d5838:	4604      	mov	r4, r0
   d583a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d583c:	f7ff f842 	bl	d48c4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d5840:	28ff      	cmp	r0, #255	; 0xff
   d5842:	d010      	beq.n	d5866 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d5844:	2806      	cmp	r0, #6
   d5846:	d804      	bhi.n	d5852 <digitalWrite+0x1c>
   d5848:	234d      	movs	r3, #77	; 0x4d
   d584a:	fa23 f000 	lsr.w	r0, r3, r0
   d584e:	07c3      	lsls	r3, r0, #31
   d5850:	d409      	bmi.n	d5866 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d5852:	4620      	mov	r0, r4
   d5854:	f7ff ffa0 	bl	d5798 <pinAvailable>
   d5858:	b128      	cbz	r0, d5866 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d585a:	4629      	mov	r1, r5
   d585c:	4620      	mov	r0, r4
}
   d585e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d5862:	f7ff b837 	b.w	d48d4 <HAL_GPIO_Write>
}
   d5866:	bd38      	pop	{r3, r4, r5, pc}

000d5868 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d5868:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d586a:	4d0f      	ldr	r5, [pc, #60]	; (d58a8 <_Z19__fetch_global_Wirev+0x40>)
   d586c:	7829      	ldrb	r1, [r5, #0]
   d586e:	f3bf 8f5b 	dmb	ish
   d5872:	f011 0401 	ands.w	r4, r1, #1
{
   d5876:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5878:	d113      	bne.n	d58a2 <_Z19__fetch_global_Wirev+0x3a>
   d587a:	4628      	mov	r0, r5
   d587c:	f7fe fc0d 	bl	d409a <__cxa_guard_acquire>
   d5880:	b178      	cbz	r0, d58a2 <_Z19__fetch_global_Wirev+0x3a>
   d5882:	a801      	add	r0, sp, #4
   d5884:	f7fe fd9e 	bl	d43c4 <_Z17acquireWireBufferv>
   d5888:	aa01      	add	r2, sp, #4
   d588a:	4621      	mov	r1, r4
   d588c:	4807      	ldr	r0, [pc, #28]	; (d58ac <_Z19__fetch_global_Wirev+0x44>)
   d588e:	f7ff fe59 	bl	d5544 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d5892:	4628      	mov	r0, r5
   d5894:	f7fe fc06 	bl	d40a4 <__cxa_guard_release>
   d5898:	4a05      	ldr	r2, [pc, #20]	; (d58b0 <_Z19__fetch_global_Wirev+0x48>)
   d589a:	4906      	ldr	r1, [pc, #24]	; (d58b4 <_Z19__fetch_global_Wirev+0x4c>)
   d589c:	4803      	ldr	r0, [pc, #12]	; (d58ac <_Z19__fetch_global_Wirev+0x44>)
   d589e:	f000 f80b 	bl	d58b8 <__aeabi_atexit>
	return wire;
}
   d58a2:	4802      	ldr	r0, [pc, #8]	; (d58ac <_Z19__fetch_global_Wirev+0x44>)
   d58a4:	b007      	add	sp, #28
   d58a6:	bd30      	pop	{r4, r5, pc}
   d58a8:	2003e7d8 	.word	0x2003e7d8
   d58ac:	2003e7dc 	.word	0x2003e7dc
   d58b0:	2003e600 	.word	0x2003e600
   d58b4:	000d54ed 	.word	0x000d54ed

000d58b8 <__aeabi_atexit>:
   d58b8:	460b      	mov	r3, r1
   d58ba:	4601      	mov	r1, r0
   d58bc:	4618      	mov	r0, r3
   d58be:	f000 b805 	b.w	d58cc <__cxa_atexit>

000d58c2 <_ZdlPvj>:
   d58c2:	f7fe bbe8 	b.w	d4096 <_ZdlPv>

000d58c6 <_ZnajRKSt9nothrow_t>:
   d58c6:	f7fe bbe4 	b.w	d4092 <_Znaj>
	...

000d58cc <__cxa_atexit>:
   d58cc:	b510      	push	{r4, lr}
   d58ce:	4c05      	ldr	r4, [pc, #20]	; (d58e4 <__cxa_atexit+0x18>)
   d58d0:	4613      	mov	r3, r2
   d58d2:	b12c      	cbz	r4, d58e0 <__cxa_atexit+0x14>
   d58d4:	460a      	mov	r2, r1
   d58d6:	4601      	mov	r1, r0
   d58d8:	2002      	movs	r0, #2
   d58da:	f3af 8000 	nop.w
   d58de:	bd10      	pop	{r4, pc}
   d58e0:	4620      	mov	r0, r4
   d58e2:	e7fc      	b.n	d58de <__cxa_atexit+0x12>
   d58e4:	00000000 	.word	0x00000000

000d58e8 <memcpy>:
   d58e8:	440a      	add	r2, r1
   d58ea:	4291      	cmp	r1, r2
   d58ec:	f100 33ff 	add.w	r3, r0, #4294967295
   d58f0:	d100      	bne.n	d58f4 <memcpy+0xc>
   d58f2:	4770      	bx	lr
   d58f4:	b510      	push	{r4, lr}
   d58f6:	f811 4b01 	ldrb.w	r4, [r1], #1
   d58fa:	f803 4f01 	strb.w	r4, [r3, #1]!
   d58fe:	4291      	cmp	r1, r2
   d5900:	d1f9      	bne.n	d58f6 <memcpy+0xe>
   d5902:	bd10      	pop	{r4, pc}

000d5904 <memset>:
   d5904:	4402      	add	r2, r0
   d5906:	4603      	mov	r3, r0
   d5908:	4293      	cmp	r3, r2
   d590a:	d100      	bne.n	d590e <memset+0xa>
   d590c:	4770      	bx	lr
   d590e:	f803 1b01 	strb.w	r1, [r3], #1
   d5912:	e7f9      	b.n	d5908 <memset+0x4>

000d5914 <srand>:
   d5914:	b538      	push	{r3, r4, r5, lr}
   d5916:	4b0d      	ldr	r3, [pc, #52]	; (d594c <srand+0x38>)
   d5918:	681d      	ldr	r5, [r3, #0]
   d591a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d591c:	4604      	mov	r4, r0
   d591e:	b97b      	cbnz	r3, d5940 <srand+0x2c>
   d5920:	2018      	movs	r0, #24
   d5922:	f7ff f9d3 	bl	d4ccc <malloc>
   d5926:	4a0a      	ldr	r2, [pc, #40]	; (d5950 <srand+0x3c>)
   d5928:	4b0a      	ldr	r3, [pc, #40]	; (d5954 <srand+0x40>)
   d592a:	63a8      	str	r0, [r5, #56]	; 0x38
   d592c:	e9c0 2300 	strd	r2, r3, [r0]
   d5930:	4b09      	ldr	r3, [pc, #36]	; (d5958 <srand+0x44>)
   d5932:	6083      	str	r3, [r0, #8]
   d5934:	230b      	movs	r3, #11
   d5936:	8183      	strh	r3, [r0, #12]
   d5938:	2201      	movs	r2, #1
   d593a:	2300      	movs	r3, #0
   d593c:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d5940:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d5942:	2200      	movs	r2, #0
   d5944:	611c      	str	r4, [r3, #16]
   d5946:	615a      	str	r2, [r3, #20]
   d5948:	bd38      	pop	{r3, r4, r5, pc}
   d594a:	bf00      	nop
   d594c:	2003e59c 	.word	0x2003e59c
   d5950:	abcd330e 	.word	0xabcd330e
   d5954:	e66d1234 	.word	0xe66d1234
   d5958:	0005deec 	.word	0x0005deec

000d595c <rand>:
   d595c:	4b13      	ldr	r3, [pc, #76]	; (d59ac <rand+0x50>)
   d595e:	b510      	push	{r4, lr}
   d5960:	681c      	ldr	r4, [r3, #0]
   d5962:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d5964:	b97b      	cbnz	r3, d5986 <rand+0x2a>
   d5966:	2018      	movs	r0, #24
   d5968:	f7ff f9b0 	bl	d4ccc <malloc>
   d596c:	4a10      	ldr	r2, [pc, #64]	; (d59b0 <rand+0x54>)
   d596e:	4b11      	ldr	r3, [pc, #68]	; (d59b4 <rand+0x58>)
   d5970:	63a0      	str	r0, [r4, #56]	; 0x38
   d5972:	e9c0 2300 	strd	r2, r3, [r0]
   d5976:	4b10      	ldr	r3, [pc, #64]	; (d59b8 <rand+0x5c>)
   d5978:	6083      	str	r3, [r0, #8]
   d597a:	230b      	movs	r3, #11
   d597c:	8183      	strh	r3, [r0, #12]
   d597e:	2201      	movs	r2, #1
   d5980:	2300      	movs	r3, #0
   d5982:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d5986:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d5988:	480c      	ldr	r0, [pc, #48]	; (d59bc <rand+0x60>)
   d598a:	690a      	ldr	r2, [r1, #16]
   d598c:	694b      	ldr	r3, [r1, #20]
   d598e:	4c0c      	ldr	r4, [pc, #48]	; (d59c0 <rand+0x64>)
   d5990:	4350      	muls	r0, r2
   d5992:	fb04 0003 	mla	r0, r4, r3, r0
   d5996:	fba2 3404 	umull	r3, r4, r2, r4
   d599a:	1c5a      	adds	r2, r3, #1
   d599c:	4404      	add	r4, r0
   d599e:	f144 0000 	adc.w	r0, r4, #0
   d59a2:	e9c1 2004 	strd	r2, r0, [r1, #16]
   d59a6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   d59aa:	bd10      	pop	{r4, pc}
   d59ac:	2003e59c 	.word	0x2003e59c
   d59b0:	abcd330e 	.word	0xabcd330e
   d59b4:	e66d1234 	.word	0xe66d1234
   d59b8:	0005deec 	.word	0x0005deec
   d59bc:	5851f42d 	.word	0x5851f42d
   d59c0:	4c957f2d 	.word	0x4c957f2d

000d59c4 <strlen>:
   d59c4:	4603      	mov	r3, r0
   d59c6:	f813 2b01 	ldrb.w	r2, [r3], #1
   d59ca:	2a00      	cmp	r2, #0
   d59cc:	d1fb      	bne.n	d59c6 <strlen+0x2>
   d59ce:	1a18      	subs	r0, r3, r0
   d59d0:	3801      	subs	r0, #1
   d59d2:	4770      	bx	lr

000d59d4 <dynalib_user>:
   d59d4:	401d 000d 4059 000d 4081 000d 4085 000d     .@..Y@...@...@..
   d59e4:	0000 0000 6f63 6e75 3a74 0020 6164 6174     ....count: .data
   d59f4:	7220 6365 6965 6576 3a64 0020 6172 646e      received: .rand
   d5a04:	6d6f 7a69 2065 6461 7264 7365 0073 6f63     omize address.co
   d5a14:	7272 6365 2074 6461 7264 7365 0073 6572     rrect address.re
   d5a24:	7571 7365 2074 6572 6563 7669 6465 7200     quest received.r
   d5a34:	7165 6575 7473 6d20 646f 2065 0031 6572     equest mode 1.re
   d5a44:	7571 7365 2074 6f6d 6564 3220 7000 7361     quest mode 2.pas
   d5a54:	0073 6166 6c69 0000                         s.fail..

000d5a5c <_ZTVN5spark13EthernetClassE>:
	...
   d5a64:	4d5b 000d 4d51 000d 4d47 000d 4d3d 000d     [M..QM..GM..=M..
   d5a74:	4d31 000d 4d25 000d 566d 000d 5675 000d     1M..%M..mV..uV..
   d5a84:	4d19 000d 4d11 000d 4d07 000d 4cfd 000d     .M...M...M...L..
   d5a94:	56a5 000d                                   .V..

000d5a98 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d5a98:	0800 1810 2820 3830 7061 0070 5925 252d     .... (08app.%Y-%
   d5aa8:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
   d5ab8:	7361 7463 6d69 0065                         asctime.

000d5ac0 <_ZTV9IPAddress>:
	...
   d5ac8:	5205 000d 51f5 000d 51f7 000d               .R...Q...Q..

000d5ad4 <_ZTV9USBSerial>:
	...
   d5adc:	52e5 000d 534d 000d 5323 000d 4fb9 000d     .R..MS..#S...O..
   d5aec:	5315 000d 52e7 000d 52f7 000d 5347 000d     .S...R...R..GS..
   d5afc:	5307 000d 52e1 000d                         .S...R..

000d5b04 <_ZTV11USARTSerial>:
	...
   d5b0c:	53f1 000d 545d 000d 5435 000d 4fb9 000d     .S..]T..5T...O..
   d5b1c:	5405 000d 5421 000d 5413 000d 542f 000d     .T..!T...T../T..
   d5b2c:	53f3 000d 53f7 000d                         .S...S..

000d5b34 <_ZTV7TwoWire>:
	...
   d5b3c:	54ed 000d 5537 000d 550f 000d 54ef 000d     .T..7U...U...T..
   d5b4c:	5517 000d 551f 000d 5527 000d 552f 000d     .U...U..'U../U..

000d5b5c <_ZTVN5spark9WiFiClassE>:
	...
   d5b64:	560f 000d 5605 000d 55fb 000d 55bd 000d     .V...V...U...U..
   d5b74:	506f 000d 55ef 000d 566d 000d 5675 000d     oP...U..mV..uV..
   d5b84:	55e3 000d 55db 000d 55d1 000d 55c7 000d     .U...U...U...U..
   d5b94:	56a5 000d                                   .V..

000d5b98 <_ZTVN5spark12NetworkClassE>:
	...
   d5ba0:	562d 000d 5637 000d 5641 000d 564b 000d     -V..7V..AV..KV..
   d5bb0:	5655 000d 5661 000d 566d 000d 5675 000d     UV..aV..mV..uV..
   d5bc0:	567d 000d 5689 000d 5691 000d 569b 000d     }V...V...V...V..
   d5bd0:	56a5 000d                                   .V..

000d5bd4 <_ZSt7nothrow>:
	...

000d5bd5 <link_const_variable_data_end>:
   d5bd5:	00          	.byte	0x00
	...

000d5bd8 <link_constructors_location>:
   d5bd8:	000d4461 	.word	0x000d4461
   d5bdc:	000d4875 	.word	0x000d4875
   d5be0:	000d4d65 	.word	0x000d4d65
   d5be4:	000d4f0d 	.word	0x000d4f0d
   d5be8:	000d4f91 	.word	0x000d4f91
   d5bec:	000d507d 	.word	0x000d507d
   d5bf0:	000d508d 	.word	0x000d508d
   d5bf4:	000d50b5 	.word	0x000d50b5
   d5bf8:	000d5619 	.word	0x000d5619
   d5bfc:	000d5785 	.word	0x000d5785
