
c:/Users/Arjun/Documents/GitHub/loop_tracks/slave/target/1.5.2/xenon/slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001884  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d58a0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  2003e368  000d58a4  0001e368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000420  2003e3d0  2003e3d0  0002e3d0  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d590c  000d590c  0002590c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d5934  000d5934  00025934  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000af64f  00000000  00000000  00025938  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000d87a  00000000  00000000  000d4f87  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001b1f1  00000000  00000000  000e2801  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002180  00000000  00000000  000fd9f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003ff8  00000000  00000000  000ffb72  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002fbf4  00000000  00000000  00103b6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000201fb  00000000  00000000  0013375e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000fd898  00000000  00000000  00153959  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000c38c  00000000  00000000  002511f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f001 fa15 	bl	d545c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f001 fa1a 	bl	d5472 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e368 	.word	0x2003e368
   d4048:	000d58a4 	.word	0x000d58a4
   d404c:	2003e3d0 	.word	0x2003e3d0
   d4050:	2003e3d0 	.word	0x2003e3d0
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f000 fcd9 	bl	d4a10 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d589c 	.word	0x000d589c
   d4080:	000d5868 	.word	0x000d5868

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b86c 	b.w	d4160 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f88d 	bl	d41a8 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f000 bc7f 	b.w	d4994 <_post_loop>

000d4096 <_ZdlPv>:
   d4096:	f000 ba5d 	b.w	d4554 <free>

000d409a <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409a:	f000 ba5b 	b.w	d4554 <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr
	...

000d40b0 <_Z11dataRequestv>:
    Wire.end();
    Wire.begin(address);
  }
}

void dataRequest(){
   d40b0:	b510      	push	{r4, lr}
  Serial.println("request received");
   d40b2:	f000 fdad 	bl	d4c10 <_Z16_fetch_usbserialv>
   d40b6:	4906      	ldr	r1, [pc, #24]	; (d40d0 <_Z11dataRequestv+0x20>)
   d40b8:	f000 fbe9 	bl	d488e <_ZN5Print7printlnEPKc>
  Wire.write(address);
   d40bc:	f001 f830 	bl	d5120 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d40c0:	4a04      	ldr	r2, [pc, #16]	; (d40d4 <_Z11dataRequestv+0x24>)
   d40c2:	6803      	ldr	r3, [r0, #0]
   d40c4:	7811      	ldrb	r1, [r2, #0]
   d40c6:	689b      	ldr	r3, [r3, #8]
   d40c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d40cc:	4718      	bx	r3
   d40ce:	bf00      	nop
   d40d0:	000d5590 	.word	0x000d5590
   d40d4:	2003e3d4 	.word	0x2003e3d4

000d40d8 <_Z12dataReceivedi>:
void loop() {
  Serial.println(Wire.available());
  delay(100);
}

void dataReceived(int count){
   d40d8:	b530      	push	{r4, r5, lr}
   d40da:	b085      	sub	sp, #20
  String inputBuffer = "";
   d40dc:	4918      	ldr	r1, [pc, #96]	; (d4140 <_Z12dataReceivedi+0x68>)
void loop() {
  Serial.println(Wire.available());
  delay(100);
}

void dataReceived(int count){
   d40de:	4605      	mov	r5, r0
  String inputBuffer = "";
   d40e0:	4668      	mov	r0, sp
   d40e2:	f000 fb35 	bl	d4750 <_ZN6StringC1EPK19__FlashStringHelper>

  Serial.println("data received");
   d40e6:	f000 fd93 	bl	d4c10 <_Z16_fetch_usbserialv>
   d40ea:	4916      	ldr	r1, [pc, #88]	; (d4144 <_Z12dataReceivedi+0x6c>)
   d40ec:	f000 fbcf 	bl	d488e <_ZN5Print7printlnEPKc>
  for(int i = 0; i < count; i++){
   d40f0:	2400      	movs	r4, #0
   d40f2:	42ac      	cmp	r4, r5
   d40f4:	da0a      	bge.n	d410c <_Z12dataReceivedi+0x34>
    inputBuffer += Wire.read();
   d40f6:	f001 f813 	bl	d5120 <_Z19__fetch_global_Wirev>
   d40fa:	6803      	ldr	r3, [r0, #0]
   d40fc:	695b      	ldr	r3, [r3, #20]
   d40fe:	4798      	blx	r3
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
	String & operator += (unsigned char num)		{concat(num); return (*this);}
	String & operator += (int num)			{concat(num); return (*this);}
   d4100:	4601      	mov	r1, r0
   d4102:	4668      	mov	r0, sp
   d4104:	f000 fb4e 	bl	d47a4 <_ZN6String6concatEi>

void dataReceived(int count){
  String inputBuffer = "";

  Serial.println("data received");
  for(int i = 0; i < count; i++){
   d4108:	3401      	adds	r4, #1
   d410a:	e7f2      	b.n	d40f2 <_Z12dataReceivedi+0x1a>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d410c:	490e      	ldr	r1, [pc, #56]	; (d4148 <_Z12dataReceivedi+0x70>)
   d410e:	4668      	mov	r0, sp
   d4110:	f000 fb59 	bl	d47c6 <_ZNK6String6equalsEPKc>
    inputBuffer += Wire.read();
  }
  if(inputBuffer == "randomize"){
   d4114:	b170      	cbz	r0, d4134 <_Z12dataReceivedi+0x5c>
    address = random(64, 120);
   d4116:	2178      	movs	r1, #120	; 0x78
   d4118:	2040      	movs	r0, #64	; 0x40
   d411a:	f000 fe7b 	bl	d4e14 <_Z6randomii>
   d411e:	4c0b      	ldr	r4, [pc, #44]	; (d414c <_Z12dataReceivedi+0x74>)
   d4120:	6020      	str	r0, [r4, #0]
    Wire.end();
   d4122:	f000 fffd 	bl	d5120 <_Z19__fetch_global_Wirev>
   d4126:	f000 fe5e 	bl	d4de6 <_ZN7TwoWire3endEv>
    Wire.begin(address);
   d412a:	f000 fff9 	bl	d5120 <_Z19__fetch_global_Wirev>
   d412e:	6821      	ldr	r1, [r4, #0]
   d4130:	f000 fe56 	bl	d4de0 <_ZN7TwoWire5beginEi>
  Serial.println(Wire.available());
  delay(100);
}

void dataReceived(int count){
  String inputBuffer = "";
   d4134:	4668      	mov	r0, sp
   d4136:	f000 fac4 	bl	d46c2 <_ZN6StringD1Ev>
  if(inputBuffer == "randomize"){
    address = random(64, 120);
    Wire.end();
    Wire.begin(address);
  }
}
   d413a:	b005      	add	sp, #20
   d413c:	bd30      	pop	{r4, r5, pc}
   d413e:	bf00      	nop
   d4140:	000d5697 	.word	0x000d5697
   d4144:	000d55a1 	.word	0x000d55a1
   d4148:	000d55af 	.word	0x000d55af
   d414c:	2003e3d4 	.word	0x2003e3d4

000d4150 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4150:	b510      	push	{r4, lr}
   d4152:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d4154:	6800      	ldr	r0, [r0, #0]
   d4156:	b108      	cbz	r0, d415c <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d4158:	f000 f9fc 	bl	d4554 <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d415c:	4620      	mov	r0, r4
   d415e:	bd10      	pop	{r4, pc}

000d4160 <setup>:
SYSTEM_MODE(MANUAL)

int address;

void setup() {
   d4160:	b510      	push	{r4, lr}
  Serial.begin(9600);
   d4162:	f000 fd55 	bl	d4c10 <_Z16_fetch_usbserialv>
   d4166:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d416a:	f000 fd45 	bl	d4bf8 <_ZN9USBSerial5beginEl>
  address = random(8, 64);
   d416e:	2140      	movs	r1, #64	; 0x40
   d4170:	2008      	movs	r0, #8
   d4172:	f000 fe4f 	bl	d4e14 <_Z6randomii>
   d4176:	4c09      	ldr	r4, [pc, #36]	; (d419c <setup+0x3c>)
   d4178:	6020      	str	r0, [r4, #0]
  Wire.begin(address);
   d417a:	f000 ffd1 	bl	d5120 <_Z19__fetch_global_Wirev>
   d417e:	6821      	ldr	r1, [r4, #0]
   d4180:	f000 fe2e 	bl	d4de0 <_ZN7TwoWire5beginEi>
  Wire.onReceive(dataReceived);
   d4184:	f000 ffcc 	bl	d5120 <_Z19__fetch_global_Wirev>
   d4188:	4905      	ldr	r1, [pc, #20]	; (d41a0 <setup+0x40>)
   d418a:	f000 fe30 	bl	d4dee <_ZN7TwoWire9onReceiveEPFviE>
  Wire.onRequest(dataRequest);
   d418e:	f000 ffc7 	bl	d5120 <_Z19__fetch_global_Wirev>
   d4192:	4904      	ldr	r1, [pc, #16]	; (d41a4 <setup+0x44>)
}
   d4194:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void setup() {
  Serial.begin(9600);
  address = random(8, 64);
  Wire.begin(address);
  Wire.onReceive(dataReceived);
  Wire.onRequest(dataRequest);
   d4198:	f000 be2d 	b.w	d4df6 <_ZN7TwoWire9onRequestEPFvvE>
   d419c:	2003e3d4 	.word	0x2003e3d4
   d41a0:	000d40d9 	.word	0x000d40d9
   d41a4:	000d40b1 	.word	0x000d40b1

000d41a8 <loop>:
}

void loop() {
   d41a8:	b538      	push	{r3, r4, r5, lr}
  Serial.println(Wire.available());
   d41aa:	f000 fd31 	bl	d4c10 <_Z16_fetch_usbserialv>
   d41ae:	4605      	mov	r5, r0
   d41b0:	f000 ffb6 	bl	d5120 <_Z19__fetch_global_Wirev>
   d41b4:	6803      	ldr	r3, [r0, #0]
   d41b6:	691b      	ldr	r3, [r3, #16]
   d41b8:	4798      	blx	r3
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d41ba:	1e04      	subs	r4, r0, #0
   d41bc:	da05      	bge.n	d41ca <loop+0x22>
            t = print('-');
   d41be:	212d      	movs	r1, #45	; 0x2d
   d41c0:	4628      	mov	r0, r5
   d41c2:	f000 fb55 	bl	d4870 <_ZN5Print5printEc>
            val = -n;
   d41c6:	4261      	negs	r1, r4
   d41c8:	e000      	b.n	d41cc <loop+0x24>
        } else {
            val = n;
   d41ca:	4621      	mov	r1, r4
        }
        return printNumber(val, base) + t;
   d41cc:	220a      	movs	r2, #10
   d41ce:	4628      	mov	r0, r5
   d41d0:	f000 fb67 	bl	d48a2 <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d41d4:	4628      	mov	r0, r5
   d41d6:	f000 fb4e 	bl	d4876 <_ZN5Print7printlnEv>
  delay(100);
   d41da:	2064      	movs	r0, #100	; 0x64
}
   d41dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  Wire.onRequest(dataRequest);
}

void loop() {
  Serial.println(Wire.available());
  delay(100);
   d41e0:	f000 bb92 	b.w	d4908 <delay>

000d41e4 <_GLOBAL__sub_I_SystemMode>:
}

void dataRequest(){
  Serial.println("request received");
  Wire.write(address);
   d41e4:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d41e6:	4c0a      	ldr	r4, [pc, #40]	; (d4210 <_GLOBAL__sub_I_SystemMode+0x2c>)

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d41e8:	f000 f828 	bl	d423c <HAL_Pin_Map>
   d41ec:	2300      	movs	r3, #0
   d41ee:	6023      	str	r3, [r4, #0]
   d41f0:	80a3      	strh	r3, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d41f2:	71a3      	strb	r3, [r4, #6]
   d41f4:	8123      	strh	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d41f6:	2003      	movs	r0, #3
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d41f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d41fc:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d41fe:	f000 f925 	bl	d444c <set_system_mode>
SYSTEM_MODE(MANUAL)
   d4202:	4620      	mov	r0, r4
   d4204:	4a03      	ldr	r2, [pc, #12]	; (d4214 <_GLOBAL__sub_I_SystemMode+0x30>)
   d4206:	4904      	ldr	r1, [pc, #16]	; (d4218 <_GLOBAL__sub_I_SystemMode+0x34>)
}

void dataRequest(){
  Serial.println("request received");
  Wire.write(address);
   d4208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SYSTEM_MODE(MANUAL)
   d420c:	f000 bfae 	b.w	d516c <__aeabi_atexit>
   d4210:	2003e3d8 	.word	0x2003e3d8
   d4214:	2003e3d0 	.word	0x2003e3d0
   d4218:	000d4151 	.word	0x000d4151

000d421c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d421c:	b508      	push	{r3, lr}
   d421e:	4b02      	ldr	r3, [pc, #8]	; (d4228 <netdb_freeaddrinfo+0xc>)
   d4220:	681b      	ldr	r3, [r3, #0]
   d4222:	689b      	ldr	r3, [r3, #8]
   d4224:	9301      	str	r3, [sp, #4]
   d4226:	bd08      	pop	{r3, pc}
   d4228:	00030268 	.word	0x00030268

000d422c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d422c:	b508      	push	{r3, lr}
   d422e:	4b02      	ldr	r3, [pc, #8]	; (d4238 <netdb_getaddrinfo+0xc>)
   d4230:	681b      	ldr	r3, [r3, #0]
   d4232:	68db      	ldr	r3, [r3, #12]
   d4234:	9301      	str	r3, [sp, #4]
   d4236:	bd08      	pop	{r3, pc}
   d4238:	00030268 	.word	0x00030268

000d423c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d423c:	b508      	push	{r3, lr}
   d423e:	4b02      	ldr	r3, [pc, #8]	; (d4248 <HAL_Pin_Map+0xc>)
   d4240:	681b      	ldr	r3, [r3, #0]
   d4242:	681b      	ldr	r3, [r3, #0]
   d4244:	9301      	str	r3, [sp, #4]
   d4246:	bd08      	pop	{r3, pc}
   d4248:	0003022c 	.word	0x0003022c

000d424c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d424c:	b508      	push	{r3, lr}
   d424e:	4b02      	ldr	r3, [pc, #8]	; (d4258 <HAL_RNG_GetRandomNumber+0xc>)
   d4250:	681b      	ldr	r3, [r3, #0]
   d4252:	685b      	ldr	r3, [r3, #4]
   d4254:	9301      	str	r3, [sp, #4]
   d4256:	bd08      	pop	{r3, pc}
   d4258:	00030218 	.word	0x00030218

000d425c <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d425c:	b508      	push	{r3, lr}
   d425e:	4b02      	ldr	r3, [pc, #8]	; (d4268 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4260:	681b      	ldr	r3, [r3, #0]
   d4262:	695b      	ldr	r3, [r3, #20]
   d4264:	9301      	str	r3, [sp, #4]
   d4266:	bd08      	pop	{r3, pc}
   d4268:	00030218 	.word	0x00030218

000d426c <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d426c:	b508      	push	{r3, lr}
   d426e:	4b02      	ldr	r3, [pc, #8]	; (d4278 <os_thread_is_current+0xc>)
   d4270:	681b      	ldr	r3, [r3, #0]
   d4272:	689b      	ldr	r3, [r3, #8]
   d4274:	9301      	str	r3, [sp, #4]
   d4276:	bd08      	pop	{r3, pc}
   d4278:	00030248 	.word	0x00030248

000d427c <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d427c:	b508      	push	{r3, lr}
   d427e:	4b02      	ldr	r3, [pc, #8]	; (d4288 <os_thread_join+0xc>)
   d4280:	681b      	ldr	r3, [r3, #0]
   d4282:	691b      	ldr	r3, [r3, #16]
   d4284:	9301      	str	r3, [sp, #4]
   d4286:	bd08      	pop	{r3, pc}
   d4288:	00030248 	.word	0x00030248

000d428c <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d428c:	b508      	push	{r3, lr}
   d428e:	4b02      	ldr	r3, [pc, #8]	; (d4298 <os_thread_cleanup+0xc>)
   d4290:	681b      	ldr	r3, [r3, #0]
   d4292:	695b      	ldr	r3, [r3, #20]
   d4294:	9301      	str	r3, [sp, #4]
   d4296:	bd08      	pop	{r3, pc}
   d4298:	00030248 	.word	0x00030248

000d429c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d429c:	b508      	push	{r3, lr}
   d429e:	4b02      	ldr	r3, [pc, #8]	; (d42a8 <os_mutex_recursive_create+0xc>)
   d42a0:	681b      	ldr	r3, [r3, #0]
   d42a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d42a4:	9301      	str	r3, [sp, #4]
   d42a6:	bd08      	pop	{r3, pc}
   d42a8:	00030248 	.word	0x00030248

000d42ac <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d42ac:	b508      	push	{r3, lr}
   d42ae:	4b02      	ldr	r3, [pc, #8]	; (d42b8 <os_mutex_recursive_destroy+0xc>)
   d42b0:	681b      	ldr	r3, [r3, #0]
   d42b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d42b4:	9301      	str	r3, [sp, #4]
   d42b6:	bd08      	pop	{r3, pc}
   d42b8:	00030248 	.word	0x00030248

000d42bc <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d42bc:	b508      	push	{r3, lr}
   d42be:	4b02      	ldr	r3, [pc, #8]	; (d42c8 <inet_inet_ntop+0xc>)
   d42c0:	681b      	ldr	r3, [r3, #0]
   d42c2:	695b      	ldr	r3, [r3, #20]
   d42c4:	9301      	str	r3, [sp, #4]
   d42c6:	bd08      	pop	{r3, pc}
   d42c8:	00030264 	.word	0x00030264

000d42cc <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d42cc:	b508      	push	{r3, lr}
   d42ce:	4b02      	ldr	r3, [pc, #8]	; (d42d8 <HAL_USART_Init+0xc>)
   d42d0:	681b      	ldr	r3, [r3, #0]
   d42d2:	681b      	ldr	r3, [r3, #0]
   d42d4:	9301      	str	r3, [sp, #4]
   d42d6:	bd08      	pop	{r3, pc}
   d42d8:	0003023c 	.word	0x0003023c

000d42dc <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d42dc:	b508      	push	{r3, lr}
   d42de:	4b02      	ldr	r3, [pc, #8]	; (d42e8 <HAL_USART_Write_Data+0xc>)
   d42e0:	681b      	ldr	r3, [r3, #0]
   d42e2:	68db      	ldr	r3, [r3, #12]
   d42e4:	9301      	str	r3, [sp, #4]
   d42e6:	bd08      	pop	{r3, pc}
   d42e8:	0003023c 	.word	0x0003023c

000d42ec <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d42ec:	b508      	push	{r3, lr}
   d42ee:	4b02      	ldr	r3, [pc, #8]	; (d42f8 <HAL_USART_Available_Data+0xc>)
   d42f0:	681b      	ldr	r3, [r3, #0]
   d42f2:	691b      	ldr	r3, [r3, #16]
   d42f4:	9301      	str	r3, [sp, #4]
   d42f6:	bd08      	pop	{r3, pc}
   d42f8:	0003023c 	.word	0x0003023c

000d42fc <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d42fc:	b508      	push	{r3, lr}
   d42fe:	4b02      	ldr	r3, [pc, #8]	; (d4308 <HAL_USART_Read_Data+0xc>)
   d4300:	681b      	ldr	r3, [r3, #0]
   d4302:	695b      	ldr	r3, [r3, #20]
   d4304:	9301      	str	r3, [sp, #4]
   d4306:	bd08      	pop	{r3, pc}
   d4308:	0003023c 	.word	0x0003023c

000d430c <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d430c:	b508      	push	{r3, lr}
   d430e:	4b02      	ldr	r3, [pc, #8]	; (d4318 <HAL_USART_Peek_Data+0xc>)
   d4310:	681b      	ldr	r3, [r3, #0]
   d4312:	699b      	ldr	r3, [r3, #24]
   d4314:	9301      	str	r3, [sp, #4]
   d4316:	bd08      	pop	{r3, pc}
   d4318:	0003023c 	.word	0x0003023c

000d431c <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d431c:	b508      	push	{r3, lr}
   d431e:	4b02      	ldr	r3, [pc, #8]	; (d4328 <HAL_USART_Flush_Data+0xc>)
   d4320:	681b      	ldr	r3, [r3, #0]
   d4322:	69db      	ldr	r3, [r3, #28]
   d4324:	9301      	str	r3, [sp, #4]
   d4326:	bd08      	pop	{r3, pc}
   d4328:	0003023c 	.word	0x0003023c

000d432c <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d432c:	b508      	push	{r3, lr}
   d432e:	4b02      	ldr	r3, [pc, #8]	; (d4338 <HAL_USART_Available_Data_For_Write+0xc>)
   d4330:	681b      	ldr	r3, [r3, #0]
   d4332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4334:	9301      	str	r3, [sp, #4]
   d4336:	bd08      	pop	{r3, pc}
   d4338:	0003023c 	.word	0x0003023c

000d433c <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d433c:	b508      	push	{r3, lr}
   d433e:	4b02      	ldr	r3, [pc, #8]	; (d4348 <HAL_I2C_Begin+0xc>)
   d4340:	681b      	ldr	r3, [r3, #0]
   d4342:	68db      	ldr	r3, [r3, #12]
   d4344:	9301      	str	r3, [sp, #4]
   d4346:	bd08      	pop	{r3, pc}
   d4348:	00030228 	.word	0x00030228

000d434c <HAL_I2C_End>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
   d434c:	b508      	push	{r3, lr}
   d434e:	4b02      	ldr	r3, [pc, #8]	; (d4358 <HAL_I2C_End+0xc>)
   d4350:	681b      	ldr	r3, [r3, #0]
   d4352:	691b      	ldr	r3, [r3, #16]
   d4354:	9301      	str	r3, [sp, #4]
   d4356:	bd08      	pop	{r3, pc}
   d4358:	00030228 	.word	0x00030228

000d435c <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d435c:	b508      	push	{r3, lr}
   d435e:	4b02      	ldr	r3, [pc, #8]	; (d4368 <HAL_I2C_Write_Data+0xc>)
   d4360:	681b      	ldr	r3, [r3, #0]
   d4362:	6a1b      	ldr	r3, [r3, #32]
   d4364:	9301      	str	r3, [sp, #4]
   d4366:	bd08      	pop	{r3, pc}
   d4368:	00030228 	.word	0x00030228

000d436c <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d436c:	b508      	push	{r3, lr}
   d436e:	4b02      	ldr	r3, [pc, #8]	; (d4378 <HAL_I2C_Available_Data+0xc>)
   d4370:	681b      	ldr	r3, [r3, #0]
   d4372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4374:	9301      	str	r3, [sp, #4]
   d4376:	bd08      	pop	{r3, pc}
   d4378:	00030228 	.word	0x00030228

000d437c <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d437c:	b508      	push	{r3, lr}
   d437e:	4b02      	ldr	r3, [pc, #8]	; (d4388 <HAL_I2C_Read_Data+0xc>)
   d4380:	681b      	ldr	r3, [r3, #0]
   d4382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4384:	9301      	str	r3, [sp, #4]
   d4386:	bd08      	pop	{r3, pc}
   d4388:	00030228 	.word	0x00030228

000d438c <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d438c:	b508      	push	{r3, lr}
   d438e:	4b02      	ldr	r3, [pc, #8]	; (d4398 <HAL_I2C_Peek_Data+0xc>)
   d4390:	681b      	ldr	r3, [r3, #0]
   d4392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4394:	9301      	str	r3, [sp, #4]
   d4396:	bd08      	pop	{r3, pc}
   d4398:	00030228 	.word	0x00030228

000d439c <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d439c:	b508      	push	{r3, lr}
   d439e:	4b02      	ldr	r3, [pc, #8]	; (d43a8 <HAL_I2C_Flush_Data+0xc>)
   d43a0:	681b      	ldr	r3, [r3, #0]
   d43a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d43a4:	9301      	str	r3, [sp, #4]
   d43a6:	bd08      	pop	{r3, pc}
   d43a8:	00030228 	.word	0x00030228

000d43ac <HAL_I2C_Set_Callback_On_Receive>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
   d43ac:	b508      	push	{r3, lr}
   d43ae:	4b02      	ldr	r3, [pc, #8]	; (d43b8 <HAL_I2C_Set_Callback_On_Receive+0xc>)
   d43b0:	681b      	ldr	r3, [r3, #0]
   d43b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d43b4:	9301      	str	r3, [sp, #4]
   d43b6:	bd08      	pop	{r3, pc}
   d43b8:	00030228 	.word	0x00030228

000d43bc <HAL_I2C_Set_Callback_On_Request>:
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
   d43bc:	b508      	push	{r3, lr}
   d43be:	4b02      	ldr	r3, [pc, #8]	; (d43c8 <HAL_I2C_Set_Callback_On_Request+0xc>)
   d43c0:	681b      	ldr	r3, [r3, #0]
   d43c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d43c4:	9301      	str	r3, [sp, #4]
   d43c6:	bd08      	pop	{r3, pc}
   d43c8:	00030228 	.word	0x00030228

000d43cc <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d43cc:	b508      	push	{r3, lr}
   d43ce:	4b02      	ldr	r3, [pc, #8]	; (d43d8 <HAL_I2C_Init+0xc>)
   d43d0:	681b      	ldr	r3, [r3, #0]
   d43d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d43d4:	9301      	str	r3, [sp, #4]
   d43d6:	bd08      	pop	{r3, pc}
   d43d8:	00030228 	.word	0x00030228

000d43dc <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d43dc:	b508      	push	{r3, lr}
   d43de:	4b02      	ldr	r3, [pc, #8]	; (d43e8 <HAL_USB_USART_Init+0xc>)
   d43e0:	681b      	ldr	r3, [r3, #0]
   d43e2:	681b      	ldr	r3, [r3, #0]
   d43e4:	9301      	str	r3, [sp, #4]
   d43e6:	bd08      	pop	{r3, pc}
   d43e8:	0003024c 	.word	0x0003024c

000d43ec <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d43ec:	b508      	push	{r3, lr}
   d43ee:	4b02      	ldr	r3, [pc, #8]	; (d43f8 <HAL_USB_USART_Begin+0xc>)
   d43f0:	681b      	ldr	r3, [r3, #0]
   d43f2:	685b      	ldr	r3, [r3, #4]
   d43f4:	9301      	str	r3, [sp, #4]
   d43f6:	bd08      	pop	{r3, pc}
   d43f8:	0003024c 	.word	0x0003024c

000d43fc <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d43fc:	b508      	push	{r3, lr}
   d43fe:	4b02      	ldr	r3, [pc, #8]	; (d4408 <HAL_USB_USART_Available_Data+0xc>)
   d4400:	681b      	ldr	r3, [r3, #0]
   d4402:	691b      	ldr	r3, [r3, #16]
   d4404:	9301      	str	r3, [sp, #4]
   d4406:	bd08      	pop	{r3, pc}
   d4408:	0003024c 	.word	0x0003024c

000d440c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d440c:	b508      	push	{r3, lr}
   d440e:	4b02      	ldr	r3, [pc, #8]	; (d4418 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4410:	681b      	ldr	r3, [r3, #0]
   d4412:	695b      	ldr	r3, [r3, #20]
   d4414:	9301      	str	r3, [sp, #4]
   d4416:	bd08      	pop	{r3, pc}
   d4418:	0003024c 	.word	0x0003024c

000d441c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d441c:	b508      	push	{r3, lr}
   d441e:	4b02      	ldr	r3, [pc, #8]	; (d4428 <HAL_USB_USART_Receive_Data+0xc>)
   d4420:	681b      	ldr	r3, [r3, #0]
   d4422:	699b      	ldr	r3, [r3, #24]
   d4424:	9301      	str	r3, [sp, #4]
   d4426:	bd08      	pop	{r3, pc}
   d4428:	0003024c 	.word	0x0003024c

000d442c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d442c:	b508      	push	{r3, lr}
   d442e:	4b02      	ldr	r3, [pc, #8]	; (d4438 <HAL_USB_USART_Send_Data+0xc>)
   d4430:	681b      	ldr	r3, [r3, #0]
   d4432:	69db      	ldr	r3, [r3, #28]
   d4434:	9301      	str	r3, [sp, #4]
   d4436:	bd08      	pop	{r3, pc}
   d4438:	0003024c 	.word	0x0003024c

000d443c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d443c:	b508      	push	{r3, lr}
   d443e:	4b02      	ldr	r3, [pc, #8]	; (d4448 <HAL_USB_USART_Flush_Data+0xc>)
   d4440:	681b      	ldr	r3, [r3, #0]
   d4442:	6a1b      	ldr	r3, [r3, #32]
   d4444:	9301      	str	r3, [sp, #4]
   d4446:	bd08      	pop	{r3, pc}
   d4448:	0003024c 	.word	0x0003024c

000d444c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d444c:	b508      	push	{r3, lr}
   d444e:	4b02      	ldr	r3, [pc, #8]	; (d4458 <set_system_mode+0xc>)
   d4450:	681b      	ldr	r3, [r3, #0]
   d4452:	685b      	ldr	r3, [r3, #4]
   d4454:	9301      	str	r3, [sp, #4]
   d4456:	bd08      	pop	{r3, pc}
   d4458:	00030220 	.word	0x00030220

000d445c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d445c:	b508      	push	{r3, lr}
   d445e:	4b02      	ldr	r3, [pc, #8]	; (d4468 <system_delay_ms+0xc>)
   d4460:	681b      	ldr	r3, [r3, #0]
   d4462:	695b      	ldr	r3, [r3, #20]
   d4464:	9301      	str	r3, [sp, #4]
   d4466:	bd08      	pop	{r3, pc}
   d4468:	00030220 	.word	0x00030220

000d446c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d446c:	b508      	push	{r3, lr}
   d446e:	4b03      	ldr	r3, [pc, #12]	; (d447c <system_ctrl_set_app_request_handler+0x10>)
   d4470:	681b      	ldr	r3, [r3, #0]
   d4472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4476:	9301      	str	r3, [sp, #4]
   d4478:	bd08      	pop	{r3, pc}
   d447a:	0000      	.short	0x0000
   d447c:	00030220 	.word	0x00030220

000d4480 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4480:	b508      	push	{r3, lr}
   d4482:	4b03      	ldr	r3, [pc, #12]	; (d4490 <system_ctrl_set_result+0x10>)
   d4484:	681b      	ldr	r3, [r3, #0]
   d4486:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d448a:	9301      	str	r3, [sp, #4]
   d448c:	bd08      	pop	{r3, pc}
   d448e:	0000      	.short	0x0000
   d4490:	00030220 	.word	0x00030220

000d4494 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4494:	b508      	push	{r3, lr}
   d4496:	4b02      	ldr	r3, [pc, #8]	; (d44a0 <network_connect+0xc>)
   d4498:	681b      	ldr	r3, [r3, #0]
   d449a:	685b      	ldr	r3, [r3, #4]
   d449c:	9301      	str	r3, [sp, #4]
   d449e:	bd08      	pop	{r3, pc}
   d44a0:	00030240 	.word	0x00030240

000d44a4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d44a4:	b508      	push	{r3, lr}
   d44a6:	4b02      	ldr	r3, [pc, #8]	; (d44b0 <network_connecting+0xc>)
   d44a8:	681b      	ldr	r3, [r3, #0]
   d44aa:	689b      	ldr	r3, [r3, #8]
   d44ac:	9301      	str	r3, [sp, #4]
   d44ae:	bd08      	pop	{r3, pc}
   d44b0:	00030240 	.word	0x00030240

000d44b4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d44b4:	b508      	push	{r3, lr}
   d44b6:	4b02      	ldr	r3, [pc, #8]	; (d44c0 <network_disconnect+0xc>)
   d44b8:	681b      	ldr	r3, [r3, #0]
   d44ba:	68db      	ldr	r3, [r3, #12]
   d44bc:	9301      	str	r3, [sp, #4]
   d44be:	bd08      	pop	{r3, pc}
   d44c0:	00030240 	.word	0x00030240

000d44c4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d44c4:	b508      	push	{r3, lr}
   d44c6:	4b02      	ldr	r3, [pc, #8]	; (d44d0 <network_ready+0xc>)
   d44c8:	681b      	ldr	r3, [r3, #0]
   d44ca:	691b      	ldr	r3, [r3, #16]
   d44cc:	9301      	str	r3, [sp, #4]
   d44ce:	bd08      	pop	{r3, pc}
   d44d0:	00030240 	.word	0x00030240

000d44d4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d44d4:	b508      	push	{r3, lr}
   d44d6:	4b02      	ldr	r3, [pc, #8]	; (d44e0 <network_on+0xc>)
   d44d8:	681b      	ldr	r3, [r3, #0]
   d44da:	695b      	ldr	r3, [r3, #20]
   d44dc:	9301      	str	r3, [sp, #4]
   d44de:	bd08      	pop	{r3, pc}
   d44e0:	00030240 	.word	0x00030240

000d44e4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d44e4:	b508      	push	{r3, lr}
   d44e6:	4b02      	ldr	r3, [pc, #8]	; (d44f0 <network_off+0xc>)
   d44e8:	681b      	ldr	r3, [r3, #0]
   d44ea:	699b      	ldr	r3, [r3, #24]
   d44ec:	9301      	str	r3, [sp, #4]
   d44ee:	bd08      	pop	{r3, pc}
   d44f0:	00030240 	.word	0x00030240

000d44f4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d44f4:	b508      	push	{r3, lr}
   d44f6:	4b02      	ldr	r3, [pc, #8]	; (d4500 <network_listen+0xc>)
   d44f8:	681b      	ldr	r3, [r3, #0]
   d44fa:	69db      	ldr	r3, [r3, #28]
   d44fc:	9301      	str	r3, [sp, #4]
   d44fe:	bd08      	pop	{r3, pc}
   d4500:	00030240 	.word	0x00030240

000d4504 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4504:	b508      	push	{r3, lr}
   d4506:	4b02      	ldr	r3, [pc, #8]	; (d4510 <network_listening+0xc>)
   d4508:	681b      	ldr	r3, [r3, #0]
   d450a:	6a1b      	ldr	r3, [r3, #32]
   d450c:	9301      	str	r3, [sp, #4]
   d450e:	bd08      	pop	{r3, pc}
   d4510:	00030240 	.word	0x00030240

000d4514 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4514:	b508      	push	{r3, lr}
   d4516:	4b02      	ldr	r3, [pc, #8]	; (d4520 <network_set_listen_timeout+0xc>)
   d4518:	681b      	ldr	r3, [r3, #0]
   d451a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d451c:	9301      	str	r3, [sp, #4]
   d451e:	bd08      	pop	{r3, pc}
   d4520:	00030240 	.word	0x00030240

000d4524 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4524:	b508      	push	{r3, lr}
   d4526:	4b02      	ldr	r3, [pc, #8]	; (d4530 <network_get_listen_timeout+0xc>)
   d4528:	681b      	ldr	r3, [r3, #0]
   d452a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d452c:	9301      	str	r3, [sp, #4]
   d452e:	bd08      	pop	{r3, pc}
   d4530:	00030240 	.word	0x00030240

000d4534 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4534:	b508      	push	{r3, lr}
   d4536:	4b02      	ldr	r3, [pc, #8]	; (d4540 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4538:	681b      	ldr	r3, [r3, #0]
   d453a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d453c:	9301      	str	r3, [sp, #4]
   d453e:	bd08      	pop	{r3, pc}
   d4540:	00030244 	.word	0x00030244

000d4544 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4544:	b508      	push	{r3, lr}
   d4546:	4b02      	ldr	r3, [pc, #8]	; (d4550 <malloc+0xc>)
   d4548:	681b      	ldr	r3, [r3, #0]
   d454a:	681b      	ldr	r3, [r3, #0]
   d454c:	9301      	str	r3, [sp, #4]
   d454e:	bd08      	pop	{r3, pc}
   d4550:	0003021c 	.word	0x0003021c

000d4554 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4554:	b508      	push	{r3, lr}
   d4556:	4b02      	ldr	r3, [pc, #8]	; (d4560 <free+0xc>)
   d4558:	681b      	ldr	r3, [r3, #0]
   d455a:	685b      	ldr	r3, [r3, #4]
   d455c:	9301      	str	r3, [sp, #4]
   d455e:	bd08      	pop	{r3, pc}
   d4560:	0003021c 	.word	0x0003021c

000d4564 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4564:	b508      	push	{r3, lr}
   d4566:	4b02      	ldr	r3, [pc, #8]	; (d4570 <realloc+0xc>)
   d4568:	681b      	ldr	r3, [r3, #0]
   d456a:	689b      	ldr	r3, [r3, #8]
   d456c:	9301      	str	r3, [sp, #4]
   d456e:	bd08      	pop	{r3, pc}
   d4570:	0003021c 	.word	0x0003021c

000d4574 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4574:	2200      	movs	r2, #0
   d4576:	4611      	mov	r1, r2
   d4578:	6840      	ldr	r0, [r0, #4]
   d457a:	f7ff bfc3 	b.w	d4504 <network_listening>

000d457e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d457e:	2200      	movs	r2, #0
   d4580:	4611      	mov	r1, r2
   d4582:	6840      	ldr	r0, [r0, #4]
   d4584:	f7ff bfce 	b.w	d4524 <network_get_listen_timeout>

000d4588 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4588:	2200      	movs	r2, #0
   d458a:	6840      	ldr	r0, [r0, #4]
   d458c:	f7ff bfc2 	b.w	d4514 <network_set_listen_timeout>

000d4590 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4590:	2200      	movs	r2, #0
   d4592:	f081 0101 	eor.w	r1, r1, #1
   d4596:	6840      	ldr	r0, [r0, #4]
   d4598:	f7ff bfac 	b.w	d44f4 <network_listen>

000d459c <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d459c:	2300      	movs	r3, #0
   d459e:	461a      	mov	r2, r3
   d45a0:	4619      	mov	r1, r3
   d45a2:	6840      	ldr	r0, [r0, #4]
   d45a4:	f7ff bf9e 	b.w	d44e4 <network_off>

000d45a8 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d45a8:	2300      	movs	r3, #0
   d45aa:	461a      	mov	r2, r3
   d45ac:	4619      	mov	r1, r3
   d45ae:	6840      	ldr	r0, [r0, #4]
   d45b0:	f7ff bf90 	b.w	d44d4 <network_on>

000d45b4 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d45b4:	2200      	movs	r2, #0
   d45b6:	4611      	mov	r1, r2
   d45b8:	6840      	ldr	r0, [r0, #4]
   d45ba:	f7ff bf83 	b.w	d44c4 <network_ready>

000d45be <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d45be:	2200      	movs	r2, #0
   d45c0:	4611      	mov	r1, r2
   d45c2:	6840      	ldr	r0, [r0, #4]
   d45c4:	f7ff bf6e 	b.w	d44a4 <network_connecting>

000d45c8 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d45c8:	2200      	movs	r2, #0
   d45ca:	2102      	movs	r1, #2
   d45cc:	6840      	ldr	r0, [r0, #4]
   d45ce:	f7ff bf71 	b.w	d44b4 <network_disconnect>

000d45d2 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d45d2:	2300      	movs	r3, #0
   d45d4:	461a      	mov	r2, r3
   d45d6:	6840      	ldr	r0, [r0, #4]
   d45d8:	f7ff bf5c 	b.w	d4494 <network_connect>

000d45dc <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d45dc:	4b02      	ldr	r3, [pc, #8]	; (d45e8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d45de:	2203      	movs	r2, #3
   d45e0:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d45e2:	4a02      	ldr	r2, [pc, #8]	; (d45ec <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d45e4:	601a      	str	r2, [r3, #0]
   d45e6:	4770      	bx	lr
   d45e8:	2003e3e4 	.word	0x2003e3e4
   d45ec:	000d55c4 	.word	0x000d55c4

000d45f0 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d45f0:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d45f2:	4c09      	ldr	r4, [pc, #36]	; (d4618 <_GLOBAL__sub_I_System+0x28>)
   d45f4:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d45f6:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d45fa:	6020      	str	r0, [r4, #0]
   d45fc:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d45fe:	71a0      	strb	r0, [r4, #6]
   d4600:	8120      	strh	r0, [r4, #8]
   d4602:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4604:	f7ff ff22 	bl	d444c <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d4608:	4620      	mov	r0, r4
   d460a:	4a04      	ldr	r2, [pc, #16]	; (d461c <_GLOBAL__sub_I_System+0x2c>)
   d460c:	4904      	ldr	r1, [pc, #16]	; (d4620 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d460e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d4612:	f000 bdab 	b.w	d516c <__aeabi_atexit>
   d4616:	bf00      	nop
   d4618:	2003e3ec 	.word	0x2003e3ec
   d461c:	2003e3d0 	.word	0x2003e3d0
   d4620:	000d4151 	.word	0x000d4151

000d4624 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d4624:	b510      	push	{r4, lr}
   d4626:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d4628:	f000 ffa0 	bl	d556c <strlen>
   d462c:	3801      	subs	r0, #1
   d462e:	1823      	adds	r3, r4, r0
   d4630:	4620      	mov	r0, r4
	while(i<j){
   d4632:	4298      	cmp	r0, r3
   d4634:	d206      	bcs.n	d4644 <_Z11str_reversePc+0x20>
		c = *i;
   d4636:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d4638:	7819      	ldrb	r1, [r3, #0]
   d463a:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d463e:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
   d4642:	e7f6      	b.n	d4632 <_Z11str_reversePc+0xe>
   d4644:	bd10      	pop	{r4, pc}

000d4646 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d4646:	b570      	push	{r4, r5, r6, lr}
   d4648:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d464a:	1e91      	subs	r1, r2, #2
   d464c:	2922      	cmp	r1, #34	; 0x22
   d464e:	d820      	bhi.n	d4692 <ultoa+0x4c>
   d4650:	4625      	mov	r5, r4
   d4652:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d4654:	b910      	cbnz	r0, d465c <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d4656:	4423      	add	r3, r4
            *ptr++ = '0';
   d4658:	2230      	movs	r2, #48	; 0x30
   d465a:	e00e      	b.n	d467a <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d465c:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   d4660:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   d4664:	b2c1      	uxtb	r1, r0
   d4666:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
   d466a:	2809      	cmp	r0, #9
                *ptr += '0';
   d466c:	bf94      	ite	ls
   d466e:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d4670:	3157      	addhi	r1, #87	; 0x57
   d4672:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
   d4676:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
   d4678:	e7eb      	b.n	d4652 <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d467a:	4299      	cmp	r1, r3
   d467c:	d202      	bcs.n	d4684 <ultoa+0x3e>
            *ptr++ = '0';
   d467e:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   d4682:	e7fa      	b.n	d467a <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
   d4684:	2300      	movs	r3, #0
	str_reverse(buffer);
   d4686:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
   d4688:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
   d468a:	f7ff ffcb 	bl	d4624 <_Z11str_reversePc>
	return buffer;
   d468e:	4620      	mov	r0, r4
   d4690:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
   d4692:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
   d4694:	bd70      	pop	{r4, r5, r6, pc}

000d4696 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d4696:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   d4698:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d469a:	460c      	mov	r4, r1
   d469c:	4615      	mov	r5, r2
	if(a<0){
   d469e:	da0b      	bge.n	d46b8 <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d46a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   d46a4:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d46a8:	bf14      	ite	ne
   d46aa:	4258      	negne	r0, r3
   d46ac:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   d46ae:	2301      	movs	r3, #1
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
   d46b0:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
   d46b2:	462a      	mov	r2, r5
   d46b4:	4419      	add	r1, r3
   d46b6:	e000      	b.n	d46ba <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
   d46b8:	2301      	movs	r3, #1
   d46ba:	f7ff ffc4 	bl	d4646 <ultoa>
	}
	return buffer;
}
   d46be:	4620      	mov	r0, r4
   d46c0:	bd38      	pop	{r3, r4, r5, pc}

000d46c2 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d46c2:	b510      	push	{r4, lr}
   d46c4:	4604      	mov	r4, r0
{
	free(buffer);
   d46c6:	6800      	ldr	r0, [r0, #0]
   d46c8:	f7ff ff44 	bl	d4554 <free>
}
   d46cc:	4620      	mov	r0, r4
   d46ce:	bd10      	pop	{r4, pc}

000d46d0 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d46d0:	b510      	push	{r4, lr}
   d46d2:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d46d4:	6800      	ldr	r0, [r0, #0]
   d46d6:	b108      	cbz	r0, d46dc <_ZN6String10invalidateEv+0xc>
   d46d8:	f7ff ff3c 	bl	d4554 <free>
	buffer = NULL;
   d46dc:	2300      	movs	r3, #0
   d46de:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d46e0:	60a3      	str	r3, [r4, #8]
   d46e2:	6063      	str	r3, [r4, #4]
   d46e4:	bd10      	pop	{r4, pc}

000d46e6 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d46e6:	b538      	push	{r3, r4, r5, lr}
   d46e8:	4604      	mov	r4, r0
   d46ea:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d46ec:	6800      	ldr	r0, [r0, #0]
   d46ee:	3101      	adds	r1, #1
   d46f0:	f7ff ff38 	bl	d4564 <realloc>
	if (newbuffer) {
   d46f4:	b110      	cbz	r0, d46fc <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d46f6:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d46fa:	2001      	movs	r0, #1
	}
	return 0;
}
   d46fc:	bd38      	pop	{r3, r4, r5, pc}

000d46fe <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d46fe:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d4700:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d4702:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d4704:	b113      	cbz	r3, d470c <_ZN6String7reserveEj+0xe>
   d4706:	6843      	ldr	r3, [r0, #4]
   d4708:	428b      	cmp	r3, r1
   d470a:	d207      	bcs.n	d471c <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d470c:	4620      	mov	r0, r4
   d470e:	f7ff ffea 	bl	d46e6 <_ZN6String12changeBufferEj>
   d4712:	b120      	cbz	r0, d471e <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d4714:	68a3      	ldr	r3, [r4, #8]
   d4716:	b90b      	cbnz	r3, d471c <_ZN6String7reserveEj+0x1e>
   d4718:	6822      	ldr	r2, [r4, #0]
   d471a:	7013      	strb	r3, [r2, #0]
   d471c:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d471e:	bd10      	pop	{r4, pc}

000d4720 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4720:	b570      	push	{r4, r5, r6, lr}
   d4722:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d4724:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4726:	4604      	mov	r4, r0
   d4728:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d472a:	f7ff ffe8 	bl	d46fe <_ZN6String7reserveEj>
   d472e:	b918      	cbnz	r0, d4738 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d4730:	4620      	mov	r0, r4
   d4732:	f7ff ffcd 	bl	d46d0 <_ZN6String10invalidateEv>
		return *this;
   d4736:	e009      	b.n	d474c <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d4738:	462a      	mov	r2, r5
   d473a:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d473c:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d473e:	6820      	ldr	r0, [r4, #0]
   d4740:	f000 fe8c 	bl	d545c <memcpy>
	buffer[len] = 0;
   d4744:	6822      	ldr	r2, [r4, #0]
   d4746:	68a3      	ldr	r3, [r4, #8]
   d4748:	2100      	movs	r1, #0
   d474a:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d474c:	4620      	mov	r0, r4
   d474e:	bd70      	pop	{r4, r5, r6, pc}

000d4750 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d4750:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4752:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d4754:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4756:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d4758:	6043      	str	r3, [r0, #4]
	len = 0;
   d475a:	6083      	str	r3, [r0, #8]
	flags = 0;
   d475c:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d475e:	460d      	mov	r5, r1
   d4760:	b139      	cbz	r1, d4772 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d4762:	4608      	mov	r0, r1
   d4764:	f000 ff02 	bl	d556c <strlen>
   d4768:	4629      	mov	r1, r5
   d476a:	4602      	mov	r2, r0
   d476c:	4620      	mov	r0, r4
   d476e:	f7ff ffd7 	bl	d4720 <_ZN6String4copyEPKcj>
}
   d4772:	4620      	mov	r0, r4
   d4774:	bd38      	pop	{r3, r4, r5, pc}

000d4776 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d4776:	b570      	push	{r4, r5, r6, lr}
   d4778:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d477a:	460e      	mov	r6, r1
   d477c:	b909      	cbnz	r1, d4782 <_ZN6String6concatEPKcj+0xc>
   d477e:	2000      	movs	r0, #0
   d4780:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d4782:	b16a      	cbz	r2, d47a0 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   d4784:	6883      	ldr	r3, [r0, #8]
   d4786:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   d4788:	4629      	mov	r1, r5
   d478a:	f7ff ffb8 	bl	d46fe <_ZN6String7reserveEj>
   d478e:	2800      	cmp	r0, #0
   d4790:	d0f5      	beq.n	d477e <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d4792:	6820      	ldr	r0, [r4, #0]
   d4794:	68a3      	ldr	r3, [r4, #8]
   d4796:	4631      	mov	r1, r6
   d4798:	4418      	add	r0, r3
   d479a:	f000 fedf 	bl	d555c <strcpy>
	len = newlen;
   d479e:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   d47a0:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d47a2:	bd70      	pop	{r4, r5, r6, pc}

000d47a4 <_ZN6String6concatEi>:
	itoa(num, buf, 10);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(int num)
{
   d47a4:	b513      	push	{r0, r1, r4, lr}
	char buf[7];
	itoa(num, buf, 10);
   d47a6:	220a      	movs	r2, #10
	itoa(num, buf, 10);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(int num)
{
   d47a8:	4604      	mov	r4, r0
   d47aa:	4608      	mov	r0, r1
	char buf[7];
	itoa(num, buf, 10);
   d47ac:	4669      	mov	r1, sp
   d47ae:	f7ff ff72 	bl	d4696 <itoa>
	return concat(buf, strlen(buf));
   d47b2:	4668      	mov	r0, sp
   d47b4:	f000 feda 	bl	d556c <strlen>
   d47b8:	4669      	mov	r1, sp
   d47ba:	4602      	mov	r2, r0
   d47bc:	4620      	mov	r0, r4
   d47be:	f7ff ffda 	bl	d4776 <_ZN6String6concatEPKcj>
}
   d47c2:	b002      	add	sp, #8
   d47c4:	bd10      	pop	{r4, pc}

000d47c6 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d47c6:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d47c8:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d47ca:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d47cc:	b912      	cbnz	r2, d47d4 <_ZNK6String6equalsEPKc+0xe>
   d47ce:	b919      	cbnz	r1, d47d8 <_ZNK6String6equalsEPKc+0x12>
   d47d0:	2001      	movs	r0, #1
   d47d2:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d47d4:	b911      	cbnz	r1, d47dc <_ZNK6String6equalsEPKc+0x16>
   d47d6:	6803      	ldr	r3, [r0, #0]
   d47d8:	7818      	ldrb	r0, [r3, #0]
   d47da:	e002      	b.n	d47e2 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
   d47dc:	6800      	ldr	r0, [r0, #0]
   d47de:	f000 feb3 	bl	d5548 <strcmp>
   d47e2:	fab0 f080 	clz	r0, r0
   d47e6:	0940      	lsrs	r0, r0, #5
}
   d47e8:	bd08      	pop	{r3, pc}

000d47ea <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d47ea:	b510      	push	{r4, lr}
   d47ec:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d47ee:	6800      	ldr	r0, [r0, #0]
   d47f0:	b108      	cbz	r0, d47f6 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d47f2:	f7ff fd5b 	bl	d42ac <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d47f6:	4620      	mov	r0, r4
   d47f8:	bd10      	pop	{r4, pc}
	...

000d47fc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d47fc:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d47fe:	4c06      	ldr	r4, [pc, #24]	; (d4818 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d4800:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d4802:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4804:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d4806:	f7ff fd49 	bl	d429c <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d480a:	4620      	mov	r0, r4
   d480c:	4a03      	ldr	r2, [pc, #12]	; (d481c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d480e:	4904      	ldr	r1, [pc, #16]	; (d4820 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4810:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d4814:	f000 bcaa 	b.w	d516c <__aeabi_atexit>
   d4818:	2003e3f8 	.word	0x2003e3f8
   d481c:	2003e3d0 	.word	0x2003e3d0
   d4820:	000d47eb 	.word	0x000d47eb

000d4824 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4826:	4606      	mov	r6, r0
   d4828:	460d      	mov	r5, r1
   d482a:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d482c:	2400      	movs	r4, #0
  while (size--) {
   d482e:	42bd      	cmp	r5, r7
   d4830:	d00c      	beq.n	d484c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4832:	6833      	ldr	r3, [r6, #0]
   d4834:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4838:	689b      	ldr	r3, [r3, #8]
   d483a:	4630      	mov	r0, r6
   d483c:	4798      	blx	r3
     if (chunk>=0)
   d483e:	2800      	cmp	r0, #0
   d4840:	db01      	blt.n	d4846 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4842:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d4844:	e7f3      	b.n	d482e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4846:	2c00      	cmp	r4, #0
   d4848:	bf08      	it	eq
   d484a:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d484c:	4620      	mov	r0, r4
   d484e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4850 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4850:	b570      	push	{r4, r5, r6, lr}
   d4852:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d4854:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d4856:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d4858:	b149      	cbz	r1, d486e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d485a:	f000 fe87 	bl	d556c <strlen>
   d485e:	682b      	ldr	r3, [r5, #0]
   d4860:	4602      	mov	r2, r0
   d4862:	4621      	mov	r1, r4
   d4864:	4628      	mov	r0, r5
   d4866:	68db      	ldr	r3, [r3, #12]
    }
   d4868:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d486c:	4718      	bx	r3
    }
   d486e:	bd70      	pop	{r4, r5, r6, pc}

000d4870 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4870:	6803      	ldr	r3, [r0, #0]
   d4872:	689b      	ldr	r3, [r3, #8]
   d4874:	4718      	bx	r3

000d4876 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4876:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d4878:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d487a:	4605      	mov	r5, r0
  size_t n = print('\r');
   d487c:	f7ff fff8 	bl	d4870 <_ZN5Print5printEc>
  n += print('\n');
   d4880:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d4882:	4604      	mov	r4, r0
  n += print('\n');
   d4884:	4628      	mov	r0, r5
   d4886:	f7ff fff3 	bl	d4870 <_ZN5Print5printEc>
  return n;
}
   d488a:	4420      	add	r0, r4
   d488c:	bd38      	pop	{r3, r4, r5, pc}

000d488e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d488e:	b538      	push	{r3, r4, r5, lr}
   d4890:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4892:	f7ff ffdd 	bl	d4850 <_ZN5Print5writeEPKc>
   d4896:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d4898:	4628      	mov	r0, r5
   d489a:	f7ff ffec 	bl	d4876 <_ZN5Print7printlnEv>
  return n;
}
   d489e:	4420      	add	r0, r4
   d48a0:	bd38      	pop	{r3, r4, r5, pc}

000d48a2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d48a2:	b530      	push	{r4, r5, lr}
   d48a4:	b08b      	sub	sp, #44	; 0x2c
   d48a6:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d48a8:	2100      	movs	r1, #0
   d48aa:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d48ae:	2a01      	cmp	r2, #1
   d48b0:	bf98      	it	ls
   d48b2:	220a      	movls	r2, #10
   d48b4:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d48b8:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d48bc:	fb05 3312 	mls	r3, r5, r2, r3
   d48c0:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d48c4:	2b09      	cmp	r3, #9
   d48c6:	bf94      	ite	ls
   d48c8:	3330      	addls	r3, #48	; 0x30
   d48ca:	3337      	addhi	r3, #55	; 0x37
   d48cc:	b2db      	uxtb	r3, r3
   d48ce:	4621      	mov	r1, r4
   d48d0:	f804 3901 	strb.w	r3, [r4], #-1
   d48d4:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d48d6:	2d00      	cmp	r5, #0
   d48d8:	d1ee      	bne.n	d48b8 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d48da:	f7ff ffb9 	bl	d4850 <_ZN5Print5writeEPKc>
}
   d48de:	b00b      	add	sp, #44	; 0x2c
   d48e0:	bd30      	pop	{r4, r5, pc}
	...

000d48e4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d48e4:	4b01      	ldr	r3, [pc, #4]	; (d48ec <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d48e6:	4a02      	ldr	r2, [pc, #8]	; (d48f0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d48e8:	601a      	str	r2, [r3, #0]
   d48ea:	4770      	bx	lr
   d48ec:	2003e3fc 	.word	0x2003e3fc
   d48f0:	000d5663 	.word	0x000d5663

000d48f4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d48f4:	4b02      	ldr	r3, [pc, #8]	; (d4900 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d48f6:	681a      	ldr	r2, [r3, #0]
   d48f8:	4b02      	ldr	r3, [pc, #8]	; (d4904 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d48fa:	601a      	str	r2, [r3, #0]
   d48fc:	4770      	bx	lr
   d48fe:	bf00      	nop
   d4900:	2003e368 	.word	0x2003e368
   d4904:	2003e400 	.word	0x2003e400

000d4908 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4908:	2100      	movs	r1, #0
   d490a:	f7ff bda7 	b.w	d445c <system_delay_ms>

000d490e <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d490e:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4910:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4912:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4914:	b113      	cbz	r3, d491c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4916:	2203      	movs	r2, #3
   d4918:	4601      	mov	r1, r0
   d491a:	4798      	blx	r3
    }
   d491c:	4620      	mov	r0, r4
   d491e:	bd10      	pop	{r4, pc}

000d4920 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4920:	b510      	push	{r4, lr}
   d4922:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4924:	f7ff fff3 	bl	d490e <_ZNSt14_Function_baseD1Ev>
   d4928:	4620      	mov	r0, r4
   d492a:	bd10      	pop	{r4, pc}

000d492c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d492c:	4803      	ldr	r0, [pc, #12]	; (d493c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d492e:	4a04      	ldr	r2, [pc, #16]	; (d4940 <_GLOBAL__sub_I_RGB+0x14>)
   d4930:	4904      	ldr	r1, [pc, #16]	; (d4944 <_GLOBAL__sub_I_RGB+0x18>)
   d4932:	2300      	movs	r3, #0
   d4934:	6083      	str	r3, [r0, #8]
   d4936:	f000 bc19 	b.w	d516c <__aeabi_atexit>
   d493a:	bf00      	nop
   d493c:	2003e404 	.word	0x2003e404
   d4940:	2003e3d0 	.word	0x2003e3d0
   d4944:	000d4921 	.word	0x000d4921

000d4948 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d4948:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d494a:	4b0f      	ldr	r3, [pc, #60]	; (d4988 <serialEventRun+0x40>)
   d494c:	b133      	cbz	r3, d495c <serialEventRun+0x14>
   d494e:	f000 f95f 	bl	d4c10 <_Z16_fetch_usbserialv>
   d4952:	6803      	ldr	r3, [r0, #0]
   d4954:	691b      	ldr	r3, [r3, #16]
   d4956:	4798      	blx	r3
   d4958:	2800      	cmp	r0, #0
   d495a:	dc0d      	bgt.n	d4978 <serialEventRun+0x30>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d495c:	4b0b      	ldr	r3, [pc, #44]	; (d498c <serialEventRun+0x44>)
   d495e:	b133      	cbz	r3, d496e <serialEventRun+0x26>
   d4960:	f000 f9d4 	bl	d4d0c <_Z22__fetch_global_Serial1v>
   d4964:	6803      	ldr	r3, [r0, #0]
   d4966:	691b      	ldr	r3, [r3, #16]
   d4968:	4798      	blx	r3
   d496a:	2800      	cmp	r0, #0
   d496c:	dc07      	bgt.n	d497e <serialEventRun+0x36>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
   d496e:	4b08      	ldr	r3, [pc, #32]	; (d4990 <serialEventRun+0x48>)
   d4970:	b143      	cbz	r3, d4984 <serialEventRun+0x3c>
   d4972:	f3af 8000 	nop.w

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
#endif
}
   d4976:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d4978:	f3af 8000 	nop.w
   d497c:	e7ee      	b.n	d495c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d497e:	f3af 8000 	nop.w
   d4982:	e7f4      	b.n	d496e <serialEventRun+0x26>
   d4984:	bd08      	pop	{r3, pc}
   d4986:	bf00      	nop
	...

000d4994 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d4994:	b508      	push	{r3, lr}
	serialEventRun();
   d4996:	f7ff ffd7 	bl	d4948 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d499a:	f7ff fc5f 	bl	d425c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d499e:	4b01      	ldr	r3, [pc, #4]	; (d49a4 <_post_loop+0x10>)
   d49a0:	6018      	str	r0, [r3, #0]
   d49a2:	bd08      	pop	{r3, pc}
   d49a4:	2003e730 	.word	0x2003e730

000d49a8 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d49a8:	4802      	ldr	r0, [pc, #8]	; (d49b4 <_Z33system_initialize_user_backup_ramv+0xc>)
   d49aa:	4a03      	ldr	r2, [pc, #12]	; (d49b8 <_Z33system_initialize_user_backup_ramv+0x10>)
   d49ac:	4903      	ldr	r1, [pc, #12]	; (d49bc <_Z33system_initialize_user_backup_ramv+0x14>)
   d49ae:	1a12      	subs	r2, r2, r0
   d49b0:	f000 bd54 	b.w	d545c <memcpy>
   d49b4:	2003f400 	.word	0x2003f400
   d49b8:	2003f404 	.word	0x2003f404
   d49bc:	000d58a0 	.word	0x000d58a0

000d49c0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d49c0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d49c2:	2300      	movs	r3, #0
   d49c4:	9300      	str	r3, [sp, #0]
   d49c6:	461a      	mov	r2, r3
   d49c8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d49cc:	f7ff fd58 	bl	d4480 <system_ctrl_set_result>
}
   d49d0:	b003      	add	sp, #12
   d49d2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d49d8 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d49d8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d49da:	8843      	ldrh	r3, [r0, #2]
   d49dc:	2b0a      	cmp	r3, #10
   d49de:	d008      	beq.n	d49f2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d49e0:	2b50      	cmp	r3, #80	; 0x50
   d49e2:	d109      	bne.n	d49f8 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d49e4:	4b09      	ldr	r3, [pc, #36]	; (d4a0c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d49e6:	681b      	ldr	r3, [r3, #0]
   d49e8:	b13b      	cbz	r3, d49fa <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d49ea:	b003      	add	sp, #12
   d49ec:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d49f0:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d49f2:	f7ff ffe5 	bl	d49c0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d49f6:	e006      	b.n	d4a06 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d49f8:	2300      	movs	r3, #0
   d49fa:	9300      	str	r3, [sp, #0]
   d49fc:	461a      	mov	r2, r3
   d49fe:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4a02:	f7ff fd3d 	bl	d4480 <system_ctrl_set_result>
        break;
    }
}
   d4a06:	b003      	add	sp, #12
   d4a08:	f85d fb04 	ldr.w	pc, [sp], #4
   d4a0c:	2003e414 	.word	0x2003e414

000d4a10 <module_user_init_hook>:

void module_user_init_hook()
{
   d4a10:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d4a12:	4c10      	ldr	r4, [pc, #64]	; (d4a54 <module_user_init_hook+0x44>)
   d4a14:	4d10      	ldr	r5, [pc, #64]	; (d4a58 <module_user_init_hook+0x48>)
   d4a16:	6823      	ldr	r3, [r4, #0]
   d4a18:	42ab      	cmp	r3, r5
   d4a1a:	4b10      	ldr	r3, [pc, #64]	; (d4a5c <module_user_init_hook+0x4c>)
   d4a1c:	bf0c      	ite	eq
   d4a1e:	2201      	moveq	r2, #1
   d4a20:	2200      	movne	r2, #0
   d4a22:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d4a24:	d002      	beq.n	d4a2c <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d4a26:	f7ff ffbf 	bl	d49a8 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d4a2a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d4a2c:	f7ff fc0e 	bl	d424c <HAL_RNG_GetRandomNumber>
   d4a30:	4604      	mov	r4, r0
    srand(seed);
   d4a32:	f000 fd27 	bl	d5484 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d4a36:	4b0a      	ldr	r3, [pc, #40]	; (d4a60 <module_user_init_hook+0x50>)
   d4a38:	b113      	cbz	r3, d4a40 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d4a3a:	4620      	mov	r0, r4
   d4a3c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d4a40:	2100      	movs	r1, #0
   d4a42:	4807      	ldr	r0, [pc, #28]	; (d4a60 <module_user_init_hook+0x50>)
   d4a44:	f7ff fd76 	bl	d4534 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4a48:	2100      	movs	r1, #0
   d4a4a:	4806      	ldr	r0, [pc, #24]	; (d4a64 <module_user_init_hook+0x54>)
}
   d4a4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4a50:	f7ff bd0c 	b.w	d446c <system_ctrl_set_app_request_handler>
   d4a54:	2003f400 	.word	0x2003f400
   d4a58:	9a271c1e 	.word	0x9a271c1e
   d4a5c:	2003e418 	.word	0x2003e418
   d4a60:	00000000 	.word	0x00000000
   d4a64:	000d49d9 	.word	0x000d49d9

000d4a68 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4a68:	4770      	bx	lr

000d4a6a <_ZN9IPAddressD0Ev>:
   d4a6a:	b510      	push	{r4, lr}
   d4a6c:	2118      	movs	r1, #24
   d4a6e:	4604      	mov	r4, r0
   d4a70:	f000 fb8a 	bl	d5188 <_ZdlPvj>
   d4a74:	4620      	mov	r0, r4
   d4a76:	bd10      	pop	{r4, pc}

000d4a78 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4a78:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4a7a:	7d03      	ldrb	r3, [r0, #20]
   d4a7c:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4a7e:	b08d      	sub	sp, #52	; 0x34
   d4a80:	460e      	mov	r6, r1
   d4a82:	f100 0704 	add.w	r7, r0, #4
   d4a86:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4a8a:	d002      	beq.n	d4a92 <_ZNK9IPAddress7printToER5Print+0x1a>
   d4a8c:	f100 0508 	add.w	r5, r0, #8
   d4a90:	e018      	b.n	d4ac4 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4a92:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4a94:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4a96:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4a9a:	232f      	movs	r3, #47	; 0x2f
   d4a9c:	462a      	mov	r2, r5
   d4a9e:	200a      	movs	r0, #10
   d4aa0:	f7ff fc0c 	bl	d42bc <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4aa4:	4628      	mov	r0, r5
   d4aa6:	f000 fd61 	bl	d556c <strlen>
   d4aaa:	6833      	ldr	r3, [r6, #0]
   d4aac:	4602      	mov	r2, r0
   d4aae:	68db      	ldr	r3, [r3, #12]
   d4ab0:	4629      	mov	r1, r5
   d4ab2:	4630      	mov	r0, r6
   d4ab4:	4798      	blx	r3
   d4ab6:	e00f      	b.n	d4ad8 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d4ab8:	b124      	cbz	r4, d4ac4 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d4aba:	212e      	movs	r1, #46	; 0x2e
   d4abc:	4630      	mov	r0, r6
   d4abe:	f7ff fed7 	bl	d4870 <_ZN5Print5printEc>
   d4ac2:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4ac4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4ac8:	220a      	movs	r2, #10
   d4aca:	4630      	mov	r0, r6
   d4acc:	f7ff fee9 	bl	d48a2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4ad0:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4ad2:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4ad4:	d1f0      	bne.n	d4ab8 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4ad6:	4620      	mov	r0, r4
    }
    return n;
}
   d4ad8:	b00d      	add	sp, #52	; 0x34
   d4ada:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4adc <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d4adc:	b510      	push	{r4, lr}
   d4ade:	4b05      	ldr	r3, [pc, #20]	; (d4af4 <_ZN9IPAddressC1Ev+0x18>)
   d4ae0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d4ae2:	2211      	movs	r2, #17
   d4ae4:	f840 3b04 	str.w	r3, [r0], #4
   d4ae8:	2100      	movs	r1, #0
   d4aea:	f000 fcc2 	bl	d5472 <memset>
{
    clear();
}
   d4aee:	4620      	mov	r0, r4
   d4af0:	bd10      	pop	{r4, pc}
   d4af2:	bf00      	nop
   d4af4:	000d5704 	.word	0x000d5704

000d4af8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d4af8:	4603      	mov	r3, r0
   d4afa:	4a07      	ldr	r2, [pc, #28]	; (d4b18 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d4afc:	b510      	push	{r4, lr}
   d4afe:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d4b02:	f101 0210 	add.w	r2, r1, #16
   d4b06:	f851 4b04 	ldr.w	r4, [r1], #4
   d4b0a:	f843 4b04 	str.w	r4, [r3], #4
   d4b0e:	4291      	cmp	r1, r2
   d4b10:	d1f9      	bne.n	d4b06 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d4b12:	780a      	ldrb	r2, [r1, #0]
   d4b14:	701a      	strb	r2, [r3, #0]
}
   d4b16:	bd10      	pop	{r4, pc}
   d4b18:	000d5704 	.word	0x000d5704

000d4b1c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d4b1c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d4b1e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d4b22:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d4b26:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d4b2a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d4b2e:	2304      	movs	r3, #4
   d4b30:	6041      	str	r1, [r0, #4]
   d4b32:	7503      	strb	r3, [r0, #20]
   d4b34:	bd10      	pop	{r4, pc}

000d4b36 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d4b36:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d4b38:	780d      	ldrb	r5, [r1, #0]
   d4b3a:	788b      	ldrb	r3, [r1, #2]
   d4b3c:	784a      	ldrb	r2, [r1, #1]
   d4b3e:	78c9      	ldrb	r1, [r1, #3]
   d4b40:	9100      	str	r1, [sp, #0]
   d4b42:	4629      	mov	r1, r5
   d4b44:	f7ff ffea 	bl	d4b1c <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d4b48:	b003      	add	sp, #12
   d4b4a:	bd30      	pop	{r4, r5, pc}

000d4b4c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4b4c:	7441      	strb	r1, [r0, #17]
   d4b4e:	4770      	bx	lr

000d4b50 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d4b50:	4770      	bx	lr

000d4b52 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d4b52:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d4b54:	2100      	movs	r1, #0
   d4b56:	7c00      	ldrb	r0, [r0, #16]
   d4b58:	f7ff fc60 	bl	d441c <HAL_USB_USART_Receive_Data>
}
   d4b5c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4b60:	bf28      	it	cs
   d4b62:	f04f 30ff 	movcs.w	r0, #4294967295
   d4b66:	bd08      	pop	{r3, pc}

000d4b68 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d4b68:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d4b6a:	2101      	movs	r1, #1
   d4b6c:	7c00      	ldrb	r0, [r0, #16]
   d4b6e:	f7ff fc55 	bl	d441c <HAL_USB_USART_Receive_Data>
}
   d4b72:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4b76:	bf28      	it	cs
   d4b78:	f04f 30ff 	movcs.w	r0, #4294967295
   d4b7c:	bd08      	pop	{r3, pc}

000d4b7e <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d4b7e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d4b80:	7c00      	ldrb	r0, [r0, #16]
   d4b82:	f7ff fc43 	bl	d440c <HAL_USB_USART_Available_Data_For_Write>
}
   d4b86:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4b8a:	bd08      	pop	{r3, pc}

000d4b8c <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d4b8c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d4b8e:	7c00      	ldrb	r0, [r0, #16]
   d4b90:	f7ff fc34 	bl	d43fc <HAL_USB_USART_Available_Data>
}
   d4b94:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4b98:	bd08      	pop	{r3, pc}

000d4b9a <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d4b9a:	7c00      	ldrb	r0, [r0, #16]
   d4b9c:	f7ff bc4e 	b.w	d443c <HAL_USB_USART_Flush_Data>

000d4ba0 <_ZN9USBSerialD0Ev>:
   d4ba0:	b510      	push	{r4, lr}
   d4ba2:	2114      	movs	r1, #20
   d4ba4:	4604      	mov	r4, r0
   d4ba6:	f000 faef 	bl	d5188 <_ZdlPvj>
   d4baa:	4620      	mov	r0, r4
   d4bac:	bd10      	pop	{r4, pc}

000d4bae <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d4bae:	b538      	push	{r3, r4, r5, lr}
   d4bb0:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4bb2:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d4bb4:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4bb6:	f7ff fc29 	bl	d440c <HAL_USB_USART_Available_Data_For_Write>
   d4bba:	2800      	cmp	r0, #0
   d4bbc:	dc01      	bgt.n	d4bc2 <_ZN9USBSerial5writeEh+0x14>
   d4bbe:	7c60      	ldrb	r0, [r4, #17]
   d4bc0:	b128      	cbz	r0, d4bce <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d4bc2:	4629      	mov	r1, r5
   d4bc4:	7c20      	ldrb	r0, [r4, #16]
   d4bc6:	f7ff fc31 	bl	d442c <HAL_USB_USART_Send_Data>
   d4bca:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d4bce:	bd38      	pop	{r3, r4, r5, pc}

000d4bd0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4bd0:	b510      	push	{r4, lr}
   d4bd2:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4bd4:	2300      	movs	r3, #0
   d4bd6:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4bd8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4bdc:	60a3      	str	r3, [r4, #8]
   d4bde:	4b05      	ldr	r3, [pc, #20]	; (d4bf4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d4be0:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d4be2:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4be4:	4608      	mov	r0, r1
{
  _serial = serial;
   d4be6:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d4be8:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d4bea:	4611      	mov	r1, r2
   d4bec:	f7ff fbf6 	bl	d43dc <HAL_USB_USART_Init>
}
   d4bf0:	4620      	mov	r0, r4
   d4bf2:	bd10      	pop	{r4, pc}
   d4bf4:	000d5718 	.word	0x000d5718

000d4bf8 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d4bf8:	2200      	movs	r2, #0
   d4bfa:	7c00      	ldrb	r0, [r0, #16]
   d4bfc:	f7ff bbf6 	b.w	d43ec <HAL_USB_USART_Begin>

000d4c00 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4c00:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d4c02:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4c04:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d4c06:	2100      	movs	r1, #0
   d4c08:	f000 fc33 	bl	d5472 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d4c0c:	4620      	mov	r0, r4
   d4c0e:	bd10      	pop	{r4, pc}

000d4c10 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d4c10:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4c12:	4d0e      	ldr	r5, [pc, #56]	; (d4c4c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d4c14:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d4c16:	a801      	add	r0, sp, #4
   d4c18:	f7ff fff2 	bl	d4c00 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4c1c:	6829      	ldr	r1, [r5, #0]
   d4c1e:	f011 0401 	ands.w	r4, r1, #1
   d4c22:	d110      	bne.n	d4c46 <_Z16_fetch_usbserialv+0x36>
   d4c24:	4628      	mov	r0, r5
   d4c26:	f7ff fa3a 	bl	d409e <__cxa_guard_acquire>
   d4c2a:	b160      	cbz	r0, d4c46 <_Z16_fetch_usbserialv+0x36>
   d4c2c:	aa01      	add	r2, sp, #4
   d4c2e:	4621      	mov	r1, r4
   d4c30:	4807      	ldr	r0, [pc, #28]	; (d4c50 <_Z16_fetch_usbserialv+0x40>)
   d4c32:	f7ff ffcd 	bl	d4bd0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d4c36:	4628      	mov	r0, r5
   d4c38:	f7ff fa36 	bl	d40a8 <__cxa_guard_release>
   d4c3c:	4a05      	ldr	r2, [pc, #20]	; (d4c54 <_Z16_fetch_usbserialv+0x44>)
   d4c3e:	4906      	ldr	r1, [pc, #24]	; (d4c58 <_Z16_fetch_usbserialv+0x48>)
   d4c40:	4803      	ldr	r0, [pc, #12]	; (d4c50 <_Z16_fetch_usbserialv+0x40>)
   d4c42:	f000 fa93 	bl	d516c <__aeabi_atexit>
	return _usbserial;
}
   d4c46:	4802      	ldr	r0, [pc, #8]	; (d4c50 <_Z16_fetch_usbserialv+0x40>)
   d4c48:	b007      	add	sp, #28
   d4c4a:	bd30      	pop	{r4, r5, pc}
   d4c4c:	2003e41c 	.word	0x2003e41c
   d4c50:	2003e420 	.word	0x2003e420
   d4c54:	2003e3d0 	.word	0x2003e3d0
   d4c58:	000d4b51 	.word	0x000d4b51

000d4c5c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d4c5c:	4770      	bx	lr

000d4c5e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4c5e:	7441      	strb	r1, [r0, #17]
   d4c60:	4770      	bx	lr

000d4c62 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d4c62:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d4c64:	7c00      	ldrb	r0, [r0, #16]
   d4c66:	f7ff fb61 	bl	d432c <HAL_USART_Available_Data_For_Write>
}
   d4c6a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4c6e:	bd08      	pop	{r3, pc}

000d4c70 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d4c70:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d4c72:	7c00      	ldrb	r0, [r0, #16]
   d4c74:	f7ff fb3a 	bl	d42ec <HAL_USART_Available_Data>
}
   d4c78:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4c7c:	bd08      	pop	{r3, pc}

000d4c7e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d4c7e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d4c80:	7c00      	ldrb	r0, [r0, #16]
   d4c82:	f7ff fb43 	bl	d430c <HAL_USART_Peek_Data>
}
   d4c86:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4c8a:	bf28      	it	cs
   d4c8c:	f04f 30ff 	movcs.w	r0, #4294967295
   d4c90:	bd08      	pop	{r3, pc}

000d4c92 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d4c92:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d4c94:	7c00      	ldrb	r0, [r0, #16]
   d4c96:	f7ff fb31 	bl	d42fc <HAL_USART_Read_Data>
}
   d4c9a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4c9e:	bf28      	it	cs
   d4ca0:	f04f 30ff 	movcs.w	r0, #4294967295
   d4ca4:	bd08      	pop	{r3, pc}

000d4ca6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d4ca6:	7c00      	ldrb	r0, [r0, #16]
   d4ca8:	f7ff bb38 	b.w	d431c <HAL_USART_Flush_Data>

000d4cac <_ZN11USARTSerialD0Ev>:
   d4cac:	b510      	push	{r4, lr}
   d4cae:	2114      	movs	r1, #20
   d4cb0:	4604      	mov	r4, r0
   d4cb2:	f000 fa69 	bl	d5188 <_ZdlPvj>
   d4cb6:	4620      	mov	r0, r4
   d4cb8:	bd10      	pop	{r4, pc}

000d4cba <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d4cba:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d4cbc:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d4cbe:	4604      	mov	r4, r0
   d4cc0:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d4cc2:	b925      	cbnz	r5, d4cce <_ZN11USARTSerial5writeEh+0x14>
   d4cc4:	7c00      	ldrb	r0, [r0, #16]
   d4cc6:	f7ff fb31 	bl	d432c <HAL_USART_Available_Data_For_Write>
   d4cca:	2800      	cmp	r0, #0
   d4ccc:	dd05      	ble.n	d4cda <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d4cce:	4631      	mov	r1, r6
   d4cd0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d4cd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d4cd6:	f7ff bb01 	b.w	d42dc <HAL_USART_Write_Data>
  }
  return 0;
}
   d4cda:	4628      	mov	r0, r5
   d4cdc:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4ce0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d4ce0:	b510      	push	{r4, lr}
   d4ce2:	4604      	mov	r4, r0
   d4ce4:	4608      	mov	r0, r1
   d4ce6:	4611      	mov	r1, r2
   d4ce8:	2200      	movs	r2, #0
   d4cea:	6062      	str	r2, [r4, #4]
   d4cec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d4cf0:	60a2      	str	r2, [r4, #8]
   d4cf2:	4a05      	ldr	r2, [pc, #20]	; (d4d08 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d4cf4:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d4cf6:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d4cf8:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d4cfa:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d4cfc:	461a      	mov	r2, r3
   d4cfe:	f7ff fae5 	bl	d42cc <HAL_USART_Init>
}
   d4d02:	4620      	mov	r0, r4
   d4d04:	bd10      	pop	{r4, pc}
   d4d06:	bf00      	nop
   d4d08:	000d5748 	.word	0x000d5748

000d4d0c <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d4d0c:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d4d0e:	4d0c      	ldr	r5, [pc, #48]	; (d4d40 <_Z22__fetch_global_Serial1v+0x34>)
   d4d10:	6829      	ldr	r1, [r5, #0]
   d4d12:	f011 0401 	ands.w	r4, r1, #1
   d4d16:	d111      	bne.n	d4d3c <_Z22__fetch_global_Serial1v+0x30>
   d4d18:	4628      	mov	r0, r5
   d4d1a:	f7ff f9c0 	bl	d409e <__cxa_guard_acquire>
   d4d1e:	b168      	cbz	r0, d4d3c <_Z22__fetch_global_Serial1v+0x30>
   d4d20:	4a08      	ldr	r2, [pc, #32]	; (d4d44 <_Z22__fetch_global_Serial1v+0x38>)
   d4d22:	4b09      	ldr	r3, [pc, #36]	; (d4d48 <_Z22__fetch_global_Serial1v+0x3c>)
   d4d24:	4809      	ldr	r0, [pc, #36]	; (d4d4c <_Z22__fetch_global_Serial1v+0x40>)
   d4d26:	4621      	mov	r1, r4
   d4d28:	f7ff ffda 	bl	d4ce0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d4d2c:	4628      	mov	r0, r5
   d4d2e:	f7ff f9bb 	bl	d40a8 <__cxa_guard_release>
   d4d32:	4a07      	ldr	r2, [pc, #28]	; (d4d50 <_Z22__fetch_global_Serial1v+0x44>)
   d4d34:	4907      	ldr	r1, [pc, #28]	; (d4d54 <_Z22__fetch_global_Serial1v+0x48>)
   d4d36:	4805      	ldr	r0, [pc, #20]	; (d4d4c <_Z22__fetch_global_Serial1v+0x40>)
   d4d38:	f000 fa18 	bl	d516c <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d4d3c:	4803      	ldr	r0, [pc, #12]	; (d4d4c <_Z22__fetch_global_Serial1v+0x40>)
   d4d3e:	bd38      	pop	{r3, r4, r5, pc}
   d4d40:	2003e4cc 	.word	0x2003e4cc
   d4d44:	2003e4d0 	.word	0x2003e4d0
   d4d48:	2003e448 	.word	0x2003e448
   d4d4c:	2003e434 	.word	0x2003e434
   d4d50:	2003e3d0 	.word	0x2003e3d0
   d4d54:	000d4c5d 	.word	0x000d4c5d

000d4d58 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d4d58:	4770      	bx	lr

000d4d5a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d4d5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4d5c:	4606      	mov	r6, r0
   d4d5e:	4615      	mov	r5, r2
   d4d60:	460c      	mov	r4, r1
   d4d62:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4d64:	42bc      	cmp	r4, r7
   d4d66:	d006      	beq.n	d4d76 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d4d68:	6833      	ldr	r3, [r6, #0]
   d4d6a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d4d6e:	689b      	ldr	r3, [r3, #8]
   d4d70:	4630      	mov	r0, r6
   d4d72:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4d74:	e7f6      	b.n	d4d64 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d4d76:	4628      	mov	r0, r5
   d4d78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4d7a <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d4d7a:	2200      	movs	r2, #0
   d4d7c:	7c00      	ldrb	r0, [r0, #16]
   d4d7e:	f7ff baed 	b.w	d435c <HAL_I2C_Write_Data>

000d4d82 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d4d82:	2100      	movs	r1, #0
   d4d84:	7c00      	ldrb	r0, [r0, #16]
   d4d86:	f7ff baf1 	b.w	d436c <HAL_I2C_Available_Data>

000d4d8a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d4d8a:	2100      	movs	r1, #0
   d4d8c:	7c00      	ldrb	r0, [r0, #16]
   d4d8e:	f7ff baf5 	b.w	d437c <HAL_I2C_Read_Data>

000d4d92 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d4d92:	2100      	movs	r1, #0
   d4d94:	7c00      	ldrb	r0, [r0, #16]
   d4d96:	f7ff baf9 	b.w	d438c <HAL_I2C_Peek_Data>

000d4d9a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d4d9a:	2100      	movs	r1, #0
   d4d9c:	7c00      	ldrb	r0, [r0, #16]
   d4d9e:	f7ff bafd 	b.w	d439c <HAL_I2C_Flush_Data>

000d4da2 <_ZN7TwoWireD0Ev>:
   d4da2:	b510      	push	{r4, lr}
   d4da4:	2114      	movs	r1, #20
   d4da6:	4604      	mov	r4, r0
   d4da8:	f000 f9ee 	bl	d5188 <_ZdlPvj>
   d4dac:	4620      	mov	r0, r4
   d4dae:	bd10      	pop	{r4, pc}

000d4db0 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d4db0:	b510      	push	{r4, lr}
   d4db2:	4604      	mov	r4, r0
   d4db4:	2300      	movs	r3, #0
   d4db6:	6063      	str	r3, [r4, #4]
   d4db8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4dbc:	60a3      	str	r3, [r4, #8]
   d4dbe:	4b04      	ldr	r3, [pc, #16]	; (d4dd0 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d4dc0:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d4dc2:	4608      	mov	r0, r1
   d4dc4:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d4dc6:	4611      	mov	r1, r2
   d4dc8:	f7ff fb00 	bl	d43cc <HAL_I2C_Init>
}
   d4dcc:	4620      	mov	r0, r4
   d4dce:	bd10      	pop	{r4, pc}
   d4dd0:	000d5778 	.word	0x000d5778

000d4dd4 <_ZN7TwoWire5beginEh>:
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
}

void TwoWire::begin(uint8_t address)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_SLAVE, address, NULL);
   d4dd4:	460a      	mov	r2, r1
   d4dd6:	2300      	movs	r3, #0
   d4dd8:	2101      	movs	r1, #1
   d4dda:	7c00      	ldrb	r0, [r0, #16]
   d4ddc:	f7ff baae 	b.w	d433c <HAL_I2C_Begin>

000d4de0 <_ZN7TwoWire5beginEi>:
}

void TwoWire::begin(int address)
{
  begin((uint8_t)address);
   d4de0:	b2c9      	uxtb	r1, r1
   d4de2:	f7ff bff7 	b.w	d4dd4 <_ZN7TwoWire5beginEh>

000d4de6 <_ZN7TwoWire3endEv>:
}

void TwoWire::end()
{
	HAL_I2C_End(_i2c, NULL);
   d4de6:	2100      	movs	r1, #0
   d4de8:	7c00      	ldrb	r0, [r0, #16]
   d4dea:	f7ff baaf 	b.w	d434c <HAL_I2C_End>

000d4dee <_ZN7TwoWire9onReceiveEPFviE>:
}

// sets function called on slave write
void TwoWire::onReceive( void (*function)(int) )
{
  HAL_I2C_Set_Callback_On_Receive(_i2c, function, NULL);
   d4dee:	2200      	movs	r2, #0
   d4df0:	7c00      	ldrb	r0, [r0, #16]
   d4df2:	f7ff badb 	b.w	d43ac <HAL_I2C_Set_Callback_On_Receive>

000d4df6 <_ZN7TwoWire9onRequestEPFvvE>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
   d4df6:	2200      	movs	r2, #0
   d4df8:	7c00      	ldrb	r0, [r0, #16]
   d4dfa:	f7ff badf 	b.w	d43bc <HAL_I2C_Set_Callback_On_Request>

000d4dfe <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   d4dfe:	b510      	push	{r4, lr}
  if (0 == max) {
   d4e00:	4604      	mov	r4, r0
   d4e02:	b130      	cbz	r0, d4e12 <_Z6randomi+0x14>
    return 0;
  }
  return rand() % max;
   d4e04:	f000 fb66 	bl	d54d4 <rand>
   d4e08:	fb90 f3f4 	sdiv	r3, r0, r4
   d4e0c:	fb03 0014 	mls	r0, r3, r4, r0
   d4e10:	bd10      	pop	{r4, pc}
}
   d4e12:	bd10      	pop	{r4, pc}

000d4e14 <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
   d4e14:	4288      	cmp	r0, r1
  }
  return rand() % max;
}

int random(int min, int max)
{
   d4e16:	b510      	push	{r4, lr}
   d4e18:	4604      	mov	r4, r0
  if (min >= max) {
   d4e1a:	da04      	bge.n	d4e26 <_Z6randomii+0x12>
    return min;
  }
  return random(max - min) + min;
   d4e1c:	1a08      	subs	r0, r1, r0
   d4e1e:	f7ff ffee 	bl	d4dfe <_Z6randomi>
   d4e22:	4420      	add	r0, r4
   d4e24:	bd10      	pop	{r4, pc}
}
   d4e26:	bd10      	pop	{r4, pc}

000d4e28 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4e28:	2200      	movs	r2, #0
   d4e2a:	4611      	mov	r1, r2
   d4e2c:	6840      	ldr	r0, [r0, #4]
   d4e2e:	f7ff bb69 	b.w	d4504 <network_listening>

000d4e32 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4e32:	2200      	movs	r2, #0
   d4e34:	4611      	mov	r1, r2
   d4e36:	6840      	ldr	r0, [r0, #4]
   d4e38:	f7ff bb74 	b.w	d4524 <network_get_listen_timeout>

000d4e3c <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4e3c:	2200      	movs	r2, #0
   d4e3e:	6840      	ldr	r0, [r0, #4]
   d4e40:	f7ff bb68 	b.w	d4514 <network_set_listen_timeout>

000d4e44 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4e44:	2200      	movs	r2, #0
   d4e46:	f081 0101 	eor.w	r1, r1, #1
   d4e4a:	6840      	ldr	r0, [r0, #4]
   d4e4c:	f7ff bb52 	b.w	d44f4 <network_listen>

000d4e50 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d4e50:	2300      	movs	r3, #0
   d4e52:	461a      	mov	r2, r3
   d4e54:	2101      	movs	r1, #1
   d4e56:	6840      	ldr	r0, [r0, #4]
   d4e58:	f7ff bb44 	b.w	d44e4 <network_off>

000d4e5c <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4e5c:	2300      	movs	r3, #0
   d4e5e:	461a      	mov	r2, r3
   d4e60:	4619      	mov	r1, r3
   d4e62:	6840      	ldr	r0, [r0, #4]
   d4e64:	f7ff bb36 	b.w	d44d4 <network_on>

000d4e68 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4e68:	2200      	movs	r2, #0
   d4e6a:	4611      	mov	r1, r2
   d4e6c:	6840      	ldr	r0, [r0, #4]
   d4e6e:	f7ff bb29 	b.w	d44c4 <network_ready>

000d4e72 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4e72:	2200      	movs	r2, #0
   d4e74:	4611      	mov	r1, r2
   d4e76:	6840      	ldr	r0, [r0, #4]
   d4e78:	f7ff bb14 	b.w	d44a4 <network_connecting>

000d4e7c <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4e7c:	2200      	movs	r2, #0
   d4e7e:	2102      	movs	r1, #2
   d4e80:	6840      	ldr	r0, [r0, #4]
   d4e82:	f7ff bb17 	b.w	d44b4 <network_disconnect>

000d4e86 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4e86:	2300      	movs	r3, #0
   d4e88:	461a      	mov	r2, r3
   d4e8a:	6840      	ldr	r0, [r0, #4]
   d4e8c:	f7ff bb02 	b.w	d4494 <network_connect>

000d4e90 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d4e90:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4e92:	4605      	mov	r5, r0
   d4e94:	b188      	cbz	r0, d4eba <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4e96:	6804      	ldr	r4, [r0, #0]
   d4e98:	b14c      	cbz	r4, d4eae <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d4e9a:	68a3      	ldr	r3, [r4, #8]
   d4e9c:	b11b      	cbz	r3, d4ea6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4e9e:	2203      	movs	r2, #3
   d4ea0:	4621      	mov	r1, r4
   d4ea2:	4620      	mov	r0, r4
   d4ea4:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4ea6:	2110      	movs	r1, #16
   d4ea8:	4620      	mov	r0, r4
   d4eaa:	f000 f96d 	bl	d5188 <_ZdlPvj>
   d4eae:	4628      	mov	r0, r5
   d4eb0:	2114      	movs	r1, #20
      }
   d4eb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4eb6:	f000 b967 	b.w	d5188 <_ZdlPvj>
   d4eba:	bd38      	pop	{r3, r4, r5, pc}

000d4ebc <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d4ebc:	b110      	cbz	r0, d4ec4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d4ebe:	6803      	ldr	r3, [r0, #0]
   d4ec0:	685b      	ldr	r3, [r3, #4]
   d4ec2:	4718      	bx	r3
   d4ec4:	4770      	bx	lr

000d4ec6 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d4ec6:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d4ec8:	6803      	ldr	r3, [r0, #0]
   d4eca:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d4ecc:	b1bb      	cbz	r3, d4efe <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d4ece:	6858      	ldr	r0, [r3, #4]
   d4ed0:	f7ff f9cc 	bl	d426c <os_thread_is_current>
   d4ed4:	b978      	cbnz	r0, d4ef6 <_ZN6ThreadD1Ev+0x30>
   d4ed6:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d4ed8:	7c5a      	ldrb	r2, [r3, #17]
   d4eda:	b912      	cbnz	r2, d4ee2 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d4edc:	6858      	ldr	r0, [r3, #4]
   d4ede:	f7ff f9cd 	bl	d427c <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d4ee2:	6823      	ldr	r3, [r4, #0]
   d4ee4:	6858      	ldr	r0, [r3, #4]
   d4ee6:	f7ff f9d1 	bl	d428c <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4eea:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d4eec:	2300      	movs	r3, #0
   d4eee:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d4ef0:	b128      	cbz	r0, d4efe <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d4ef2:	f7ff ffcd 	bl	d4e90 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4ef6:	6820      	ldr	r0, [r4, #0]
   d4ef8:	b108      	cbz	r0, d4efe <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d4efa:	f7ff ffc9 	bl	d4e90 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d4efe:	4620      	mov	r0, r4
   d4f00:	bd10      	pop	{r4, pc}

000d4f02 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d4f02:	b538      	push	{r3, r4, r5, lr}
   d4f04:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4f06:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d4f0a:	b108      	cbz	r0, d4f10 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d4f0c:	f7ff f8c5 	bl	d409a <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4f10:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d4f14:	b108      	cbz	r0, d4f1a <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d4f16:	f7ff f9c9 	bl	d42ac <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4f1a:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d4f1e:	b135      	cbz	r5, d4f2e <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4f20:	4628      	mov	r0, r5
   d4f22:	f7ff ffd0 	bl	d4ec6 <_ZN6ThreadD1Ev>
   d4f26:	2104      	movs	r1, #4
   d4f28:	4628      	mov	r0, r5
   d4f2a:	f000 f92d 	bl	d5188 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4f2e:	6820      	ldr	r0, [r4, #0]
   d4f30:	b108      	cbz	r0, d4f36 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d4f32:	f7ff ffc3 	bl	d4ebc <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d4f36:	4620      	mov	r0, r4
   d4f38:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4f3c <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d4f3c:	b510      	push	{r4, lr}
   d4f3e:	4b04      	ldr	r3, [pc, #16]	; (d4f50 <_ZN5spark9MeshClassD1Ev+0x14>)
   d4f40:	4604      	mov	r4, r0
   d4f42:	f840 3b08 	str.w	r3, [r0], #8
   d4f46:	f7ff ffdc 	bl	d4f02 <_ZN5spark11MeshPublishD1Ev>
   d4f4a:	4620      	mov	r0, r4
   d4f4c:	bd10      	pop	{r4, pc}
   d4f4e:	bf00      	nop
   d4f50:	000d57a0 	.word	0x000d57a0

000d4f54 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d4f54:	b538      	push	{r3, r4, r5, lr}
   d4f56:	4c0e      	ldr	r4, [pc, #56]	; (d4f90 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d4f58:	4b0e      	ldr	r3, [pc, #56]	; (d4f94 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d4f5a:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d4f5c:	2500      	movs	r5, #0
   d4f5e:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d4f60:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d4f64:	6063      	str	r3, [r4, #4]
   d4f66:	60a5      	str	r5, [r4, #8]
   d4f68:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4f6c:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d4f70:	f7ff f994 	bl	d429c <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d4f74:	4b08      	ldr	r3, [pc, #32]	; (d4f98 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d4f76:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4f7a:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d4f7e:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d4f80:	4620      	mov	r0, r4
   d4f82:	4a06      	ldr	r2, [pc, #24]	; (d4f9c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d4f84:	4906      	ldr	r1, [pc, #24]	; (d4fa0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d4f86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d4f8a:	f000 b8ef 	b.w	d516c <__aeabi_atexit>
   d4f8e:	bf00      	nop
   d4f90:	2003e554 	.word	0x2003e554
   d4f94:	000d57d4 	.word	0x000d57d4
   d4f98:	000d57a0 	.word	0x000d57a0
   d4f9c:	2003e3d0 	.word	0x2003e3d0
   d4fa0:	000d4f3d 	.word	0x000d4f3d

000d4fa4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d4fa4:	2300      	movs	r3, #0
   d4fa6:	461a      	mov	r2, r3
   d4fa8:	6840      	ldr	r0, [r0, #4]
   d4faa:	f7ff ba73 	b.w	d4494 <network_connect>

000d4fae <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d4fae:	2200      	movs	r2, #0
   d4fb0:	2102      	movs	r1, #2
   d4fb2:	6840      	ldr	r0, [r0, #4]
   d4fb4:	f7ff ba7e 	b.w	d44b4 <network_disconnect>

000d4fb8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d4fb8:	2200      	movs	r2, #0
   d4fba:	4611      	mov	r1, r2
   d4fbc:	6840      	ldr	r0, [r0, #4]
   d4fbe:	f7ff ba71 	b.w	d44a4 <network_connecting>

000d4fc2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d4fc2:	2200      	movs	r2, #0
   d4fc4:	4611      	mov	r1, r2
   d4fc6:	6840      	ldr	r0, [r0, #4]
   d4fc8:	f7ff ba7c 	b.w	d44c4 <network_ready>

000d4fcc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d4fcc:	2300      	movs	r3, #0
   d4fce:	461a      	mov	r2, r3
   d4fd0:	4619      	mov	r1, r3
   d4fd2:	6840      	ldr	r0, [r0, #4]
   d4fd4:	f7ff ba7e 	b.w	d44d4 <network_on>

000d4fd8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d4fd8:	2300      	movs	r3, #0
   d4fda:	461a      	mov	r2, r3
   d4fdc:	4619      	mov	r1, r3
   d4fde:	6840      	ldr	r0, [r0, #4]
   d4fe0:	f7ff ba80 	b.w	d44e4 <network_off>

000d4fe4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d4fe4:	2200      	movs	r2, #0
   d4fe6:	f081 0101 	eor.w	r1, r1, #1
   d4fea:	6840      	ldr	r0, [r0, #4]
   d4fec:	f7ff ba82 	b.w	d44f4 <network_listen>

000d4ff0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d4ff0:	2200      	movs	r2, #0
   d4ff2:	6840      	ldr	r0, [r0, #4]
   d4ff4:	f7ff ba8e 	b.w	d4514 <network_set_listen_timeout>

000d4ff8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d4ff8:	2200      	movs	r2, #0
   d4ffa:	4611      	mov	r1, r2
   d4ffc:	6840      	ldr	r0, [r0, #4]
   d4ffe:	f7ff ba91 	b.w	d4524 <network_get_listen_timeout>

000d5002 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5002:	2200      	movs	r2, #0
   d5004:	4611      	mov	r1, r2
   d5006:	6840      	ldr	r0, [r0, #4]
   d5008:	f7ff ba7c 	b.w	d4504 <network_listening>

000d500c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d500c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5010:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d5012:	b095      	sub	sp, #84	; 0x54
   d5014:	4616      	mov	r6, r2
   d5016:	460d      	mov	r5, r1
   d5018:	4607      	mov	r7, r0
    IPAddress addr;
   d501a:	f7ff fd5f 	bl	d4adc <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d501e:	4621      	mov	r1, r4
   d5020:	2220      	movs	r2, #32
   d5022:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5024:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5026:	f000 fa24 	bl	d5472 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d502a:	2340      	movs	r3, #64	; 0x40
   d502c:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d502e:	4621      	mov	r1, r4
   d5030:	466b      	mov	r3, sp
   d5032:	aa0c      	add	r2, sp, #48	; 0x30
   d5034:	4630      	mov	r0, r6
   d5036:	f7ff f8f9 	bl	d422c <netdb_getaddrinfo>
    if (!r) {
   d503a:	4604      	mov	r4, r0
   d503c:	2800      	cmp	r0, #0
   d503e:	d144      	bne.n	d50ca <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5040:	4602      	mov	r2, r0
   d5042:	2101      	movs	r1, #1
   d5044:	6868      	ldr	r0, [r5, #4]
   d5046:	f7ff fa3d 	bl	d44c4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d504a:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d504c:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d504e:	4622      	mov	r2, r4
   d5050:	6868      	ldr	r0, [r5, #4]
   d5052:	f7ff fa37 	bl	d44c4 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5056:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5058:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d505a:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d505c:	2e00      	cmp	r6, #0
   d505e:	d034      	beq.n	d50ca <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d5060:	2900      	cmp	r1, #0
   d5062:	d132      	bne.n	d50ca <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5064:	6873      	ldr	r3, [r6, #4]
   d5066:	2b02      	cmp	r3, #2
   d5068:	d002      	beq.n	d5070 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d506a:	2b0a      	cmp	r3, #10
   d506c:	d009      	beq.n	d5082 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d506e:	e02a      	b.n	d50c6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d5070:	f1b8 0f00 	cmp.w	r8, #0
   d5074:	d027      	beq.n	d50c6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5076:	6971      	ldr	r1, [r6, #20]
   d5078:	4638      	mov	r0, r7
   d507a:	3104      	adds	r1, #4
   d507c:	f7ff fd5b 	bl	d4b36 <_ZN9IPAddressaSEPKh>
   d5080:	e020      	b.n	d50c4 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5082:	f1b9 0f00 	cmp.w	r9, #0
   d5086:	d01e      	beq.n	d50c6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5088:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d508a:	2211      	movs	r2, #17
   d508c:	a801      	add	r0, sp, #4
   d508e:	f000 f9f0 	bl	d5472 <memset>
                    a.v = 6;
   d5092:	2306      	movs	r3, #6
   d5094:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5098:	ad01      	add	r5, sp, #4
   d509a:	f104 0308 	add.w	r3, r4, #8
   d509e:	3418      	adds	r4, #24
   d50a0:	6818      	ldr	r0, [r3, #0]
   d50a2:	6859      	ldr	r1, [r3, #4]
   d50a4:	462a      	mov	r2, r5
   d50a6:	c203      	stmia	r2!, {r0, r1}
   d50a8:	3308      	adds	r3, #8
   d50aa:	42a3      	cmp	r3, r4
   d50ac:	4615      	mov	r5, r2
   d50ae:	d1f7      	bne.n	d50a0 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d50b0:	a901      	add	r1, sp, #4
   d50b2:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d50b4:	ad07      	add	r5, sp, #28
   d50b6:	f7ff fd1f 	bl	d4af8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d50ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d50bc:	1d3c      	adds	r4, r7, #4
   d50be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d50c0:	682b      	ldr	r3, [r5, #0]
   d50c2:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d50c4:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d50c6:	69f6      	ldr	r6, [r6, #28]
   d50c8:	e7c8      	b.n	d505c <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d50ca:	9800      	ldr	r0, [sp, #0]
   d50cc:	f7ff f8a6 	bl	d421c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d50d0:	4638      	mov	r0, r7
   d50d2:	b015      	add	sp, #84	; 0x54
   d50d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d50d8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d50d8:	4b02      	ldr	r3, [pc, #8]	; (d50e4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d50da:	4a03      	ldr	r2, [pc, #12]	; (d50e8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d50dc:	601a      	str	r2, [r3, #0]
   d50de:	2200      	movs	r2, #0
   d50e0:	605a      	str	r2, [r3, #4]
   d50e2:	4770      	bx	lr
   d50e4:	2003e728 	.word	0x2003e728
   d50e8:	000d57d4 	.word	0x000d57d4

000d50ec <_Z17acquireWireBufferv>:
   d50ec:	b570      	push	{r4, r5, r6, lr}
   d50ee:	4604      	mov	r4, r0
   d50f0:	2514      	movs	r5, #20
   d50f2:	462a      	mov	r2, r5
   d50f4:	4e09      	ldr	r6, [pc, #36]	; (d511c <_Z17acquireWireBufferv+0x30>)
   d50f6:	2100      	movs	r1, #0
   d50f8:	f000 f9bb 	bl	d5472 <memset>
   d50fc:	8025      	strh	r5, [r4, #0]
   d50fe:	2520      	movs	r5, #32
   d5100:	4631      	mov	r1, r6
   d5102:	60a5      	str	r5, [r4, #8]
   d5104:	6125      	str	r5, [r4, #16]
   d5106:	4628      	mov	r0, r5
   d5108:	f000 f840 	bl	d518c <_ZnajRKSt9nothrow_t>
   d510c:	4631      	mov	r1, r6
   d510e:	6060      	str	r0, [r4, #4]
   d5110:	4628      	mov	r0, r5
   d5112:	f000 f83b 	bl	d518c <_ZnajRKSt9nothrow_t>
   d5116:	60e0      	str	r0, [r4, #12]
   d5118:	4620      	mov	r0, r4
   d511a:	bd70      	pop	{r4, r5, r6, pc}
   d511c:	000d5800 	.word	0x000d5800

000d5120 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d5120:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5122:	4d0e      	ldr	r5, [pc, #56]	; (d515c <_Z19__fetch_global_Wirev+0x3c>)
   d5124:	6829      	ldr	r1, [r5, #0]
   d5126:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d512a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d512c:	d113      	bne.n	d5156 <_Z19__fetch_global_Wirev+0x36>
   d512e:	4628      	mov	r0, r5
   d5130:	f7fe ffb5 	bl	d409e <__cxa_guard_acquire>
   d5134:	b178      	cbz	r0, d5156 <_Z19__fetch_global_Wirev+0x36>
   d5136:	a801      	add	r0, sp, #4
   d5138:	f7ff ffd8 	bl	d50ec <_Z17acquireWireBufferv>
   d513c:	aa01      	add	r2, sp, #4
   d513e:	4621      	mov	r1, r4
   d5140:	4807      	ldr	r0, [pc, #28]	; (d5160 <_Z19__fetch_global_Wirev+0x40>)
   d5142:	f7ff fe35 	bl	d4db0 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d5146:	4628      	mov	r0, r5
   d5148:	f7fe ffae 	bl	d40a8 <__cxa_guard_release>
   d514c:	4a05      	ldr	r2, [pc, #20]	; (d5164 <_Z19__fetch_global_Wirev+0x44>)
   d514e:	4906      	ldr	r1, [pc, #24]	; (d5168 <_Z19__fetch_global_Wirev+0x48>)
   d5150:	4803      	ldr	r0, [pc, #12]	; (d5160 <_Z19__fetch_global_Wirev+0x40>)
   d5152:	f000 f80b 	bl	d516c <__aeabi_atexit>
	return wire;
}
   d5156:	4802      	ldr	r0, [pc, #8]	; (d5160 <_Z19__fetch_global_Wirev+0x40>)
   d5158:	b007      	add	sp, #28
   d515a:	bd30      	pop	{r4, r5, pc}
   d515c:	2003e734 	.word	0x2003e734
   d5160:	2003e738 	.word	0x2003e738
   d5164:	2003e3d0 	.word	0x2003e3d0
   d5168:	000d4d59 	.word	0x000d4d59

000d516c <__aeabi_atexit>:
   d516c:	460b      	mov	r3, r1
   d516e:	4601      	mov	r1, r0
   d5170:	4618      	mov	r0, r3
   d5172:	f000 b965 	b.w	d5440 <__cxa_atexit>
	...

000d5178 <_ZSt15get_new_handlerv>:
   d5178:	4b02      	ldr	r3, [pc, #8]	; (d5184 <_ZSt15get_new_handlerv+0xc>)
   d517a:	6818      	ldr	r0, [r3, #0]
   d517c:	f3bf 8f5f 	dmb	sy
   d5180:	4770      	bx	lr
   d5182:	bf00      	nop
   d5184:	2003e74c 	.word	0x2003e74c

000d5188 <_ZdlPvj>:
   d5188:	f7fe bf85 	b.w	d4096 <_ZdlPv>

000d518c <_ZnajRKSt9nothrow_t>:
   d518c:	f000 b800 	b.w	d5190 <_ZnwjRKSt9nothrow_t>

000d5190 <_ZnwjRKSt9nothrow_t>:
   d5190:	b510      	push	{r4, lr}
   d5192:	2800      	cmp	r0, #0
   d5194:	bf14      	ite	ne
   d5196:	4604      	movne	r4, r0
   d5198:	2401      	moveq	r4, #1
   d519a:	4620      	mov	r0, r4
   d519c:	f7ff f9d2 	bl	d4544 <malloc>
   d51a0:	b920      	cbnz	r0, d51ac <_ZnwjRKSt9nothrow_t+0x1c>
   d51a2:	f7ff ffe9 	bl	d5178 <_ZSt15get_new_handlerv>
   d51a6:	b108      	cbz	r0, d51ac <_ZnwjRKSt9nothrow_t+0x1c>
   d51a8:	4780      	blx	r0
   d51aa:	e7f6      	b.n	d519a <_ZnwjRKSt9nothrow_t+0xa>
   d51ac:	bd10      	pop	{r4, pc}
	...

000d51b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d51b0:	4b18      	ldr	r3, [pc, #96]	; (d5214 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d51b2:	681a      	ldr	r2, [r3, #0]
   d51b4:	07d1      	lsls	r1, r2, #31
   d51b6:	bf5c      	itt	pl
   d51b8:	2201      	movpl	r2, #1
   d51ba:	601a      	strpl	r2, [r3, #0]
   d51bc:	4b16      	ldr	r3, [pc, #88]	; (d5218 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d51be:	681a      	ldr	r2, [r3, #0]
   d51c0:	07d2      	lsls	r2, r2, #31
   d51c2:	bf5c      	itt	pl
   d51c4:	2201      	movpl	r2, #1
   d51c6:	601a      	strpl	r2, [r3, #0]
   d51c8:	4b14      	ldr	r3, [pc, #80]	; (d521c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d51ca:	681a      	ldr	r2, [r3, #0]
   d51cc:	07d0      	lsls	r0, r2, #31
   d51ce:	bf5c      	itt	pl
   d51d0:	2201      	movpl	r2, #1
   d51d2:	601a      	strpl	r2, [r3, #0]
   d51d4:	4b12      	ldr	r3, [pc, #72]	; (d5220 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d51d6:	681a      	ldr	r2, [r3, #0]
   d51d8:	07d1      	lsls	r1, r2, #31
   d51da:	bf5c      	itt	pl
   d51dc:	2201      	movpl	r2, #1
   d51de:	601a      	strpl	r2, [r3, #0]
   d51e0:	4b10      	ldr	r3, [pc, #64]	; (d5224 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d51e2:	681a      	ldr	r2, [r3, #0]
   d51e4:	07d2      	lsls	r2, r2, #31
   d51e6:	bf5c      	itt	pl
   d51e8:	2201      	movpl	r2, #1
   d51ea:	601a      	strpl	r2, [r3, #0]
   d51ec:	4b0e      	ldr	r3, [pc, #56]	; (d5228 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d51ee:	681a      	ldr	r2, [r3, #0]
   d51f0:	07d0      	lsls	r0, r2, #31
   d51f2:	bf5c      	itt	pl
   d51f4:	2201      	movpl	r2, #1
   d51f6:	601a      	strpl	r2, [r3, #0]
   d51f8:	4b0c      	ldr	r3, [pc, #48]	; (d522c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d51fa:	681a      	ldr	r2, [r3, #0]
   d51fc:	07d1      	lsls	r1, r2, #31
   d51fe:	bf5c      	itt	pl
   d5200:	2201      	movpl	r2, #1
   d5202:	601a      	strpl	r2, [r3, #0]
   d5204:	4b0a      	ldr	r3, [pc, #40]	; (d5230 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5206:	681a      	ldr	r2, [r3, #0]
   d5208:	07d2      	lsls	r2, r2, #31
   d520a:	bf5c      	itt	pl
   d520c:	2201      	movpl	r2, #1
   d520e:	601a      	strpl	r2, [r3, #0]
   d5210:	4770      	bx	lr
   d5212:	bf00      	nop
   d5214:	2003e76c 	.word	0x2003e76c
   d5218:	2003e768 	.word	0x2003e768
   d521c:	2003e764 	.word	0x2003e764
   d5220:	2003e760 	.word	0x2003e760
   d5224:	2003e75c 	.word	0x2003e75c
   d5228:	2003e758 	.word	0x2003e758
   d522c:	2003e754 	.word	0x2003e754
   d5230:	2003e750 	.word	0x2003e750

000d5234 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d5234:	4b24      	ldr	r3, [pc, #144]	; (d52c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d5236:	681a      	ldr	r2, [r3, #0]
   d5238:	07d0      	lsls	r0, r2, #31
   d523a:	bf5c      	itt	pl
   d523c:	2201      	movpl	r2, #1
   d523e:	601a      	strpl	r2, [r3, #0]
   d5240:	4b22      	ldr	r3, [pc, #136]	; (d52cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d5242:	681a      	ldr	r2, [r3, #0]
   d5244:	07d1      	lsls	r1, r2, #31
   d5246:	bf5c      	itt	pl
   d5248:	2201      	movpl	r2, #1
   d524a:	601a      	strpl	r2, [r3, #0]
   d524c:	4b20      	ldr	r3, [pc, #128]	; (d52d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d524e:	681a      	ldr	r2, [r3, #0]
   d5250:	07d2      	lsls	r2, r2, #31
   d5252:	bf5c      	itt	pl
   d5254:	2201      	movpl	r2, #1
   d5256:	601a      	strpl	r2, [r3, #0]
   d5258:	4b1e      	ldr	r3, [pc, #120]	; (d52d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d525a:	681a      	ldr	r2, [r3, #0]
   d525c:	07d0      	lsls	r0, r2, #31
   d525e:	bf5c      	itt	pl
   d5260:	2201      	movpl	r2, #1
   d5262:	601a      	strpl	r2, [r3, #0]
   d5264:	4b1c      	ldr	r3, [pc, #112]	; (d52d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d5266:	681a      	ldr	r2, [r3, #0]
   d5268:	07d1      	lsls	r1, r2, #31
   d526a:	bf5c      	itt	pl
   d526c:	2201      	movpl	r2, #1
   d526e:	601a      	strpl	r2, [r3, #0]
   d5270:	4b1a      	ldr	r3, [pc, #104]	; (d52dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d5272:	681a      	ldr	r2, [r3, #0]
   d5274:	07d2      	lsls	r2, r2, #31
   d5276:	bf5c      	itt	pl
   d5278:	2201      	movpl	r2, #1
   d527a:	601a      	strpl	r2, [r3, #0]
   d527c:	4b18      	ldr	r3, [pc, #96]	; (d52e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d527e:	681a      	ldr	r2, [r3, #0]
   d5280:	07d0      	lsls	r0, r2, #31
   d5282:	bf5c      	itt	pl
   d5284:	2201      	movpl	r2, #1
   d5286:	601a      	strpl	r2, [r3, #0]
   d5288:	4b16      	ldr	r3, [pc, #88]	; (d52e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d528a:	681a      	ldr	r2, [r3, #0]
   d528c:	07d1      	lsls	r1, r2, #31
   d528e:	bf5c      	itt	pl
   d5290:	2201      	movpl	r2, #1
   d5292:	601a      	strpl	r2, [r3, #0]
   d5294:	4b14      	ldr	r3, [pc, #80]	; (d52e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d5296:	681a      	ldr	r2, [r3, #0]
   d5298:	07d2      	lsls	r2, r2, #31
   d529a:	bf5c      	itt	pl
   d529c:	2201      	movpl	r2, #1
   d529e:	601a      	strpl	r2, [r3, #0]
   d52a0:	4b12      	ldr	r3, [pc, #72]	; (d52ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d52a2:	681a      	ldr	r2, [r3, #0]
   d52a4:	07d0      	lsls	r0, r2, #31
   d52a6:	bf5c      	itt	pl
   d52a8:	2201      	movpl	r2, #1
   d52aa:	601a      	strpl	r2, [r3, #0]
   d52ac:	4b10      	ldr	r3, [pc, #64]	; (d52f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d52ae:	681a      	ldr	r2, [r3, #0]
   d52b0:	07d1      	lsls	r1, r2, #31
   d52b2:	bf5c      	itt	pl
   d52b4:	2201      	movpl	r2, #1
   d52b6:	601a      	strpl	r2, [r3, #0]
   d52b8:	4b0e      	ldr	r3, [pc, #56]	; (d52f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d52ba:	681a      	ldr	r2, [r3, #0]
   d52bc:	07d2      	lsls	r2, r2, #31
   d52be:	bf5c      	itt	pl
   d52c0:	2201      	movpl	r2, #1
   d52c2:	601a      	strpl	r2, [r3, #0]
   d52c4:	4770      	bx	lr
   d52c6:	bf00      	nop
   d52c8:	2003e79c 	.word	0x2003e79c
   d52cc:	2003e798 	.word	0x2003e798
   d52d0:	2003e794 	.word	0x2003e794
   d52d4:	2003e790 	.word	0x2003e790
   d52d8:	2003e78c 	.word	0x2003e78c
   d52dc:	2003e788 	.word	0x2003e788
   d52e0:	2003e784 	.word	0x2003e784
   d52e4:	2003e780 	.word	0x2003e780
   d52e8:	2003e77c 	.word	0x2003e77c
   d52ec:	2003e778 	.word	0x2003e778
   d52f0:	2003e774 	.word	0x2003e774
   d52f4:	2003e770 	.word	0x2003e770

000d52f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d52f8:	4b24      	ldr	r3, [pc, #144]	; (d538c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d52fa:	681a      	ldr	r2, [r3, #0]
   d52fc:	07d0      	lsls	r0, r2, #31
   d52fe:	bf5c      	itt	pl
   d5300:	2201      	movpl	r2, #1
   d5302:	601a      	strpl	r2, [r3, #0]
   d5304:	4b22      	ldr	r3, [pc, #136]	; (d5390 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d5306:	681a      	ldr	r2, [r3, #0]
   d5308:	07d1      	lsls	r1, r2, #31
   d530a:	bf5c      	itt	pl
   d530c:	2201      	movpl	r2, #1
   d530e:	601a      	strpl	r2, [r3, #0]
   d5310:	4b20      	ldr	r3, [pc, #128]	; (d5394 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d5312:	681a      	ldr	r2, [r3, #0]
   d5314:	07d2      	lsls	r2, r2, #31
   d5316:	bf5c      	itt	pl
   d5318:	2201      	movpl	r2, #1
   d531a:	601a      	strpl	r2, [r3, #0]
   d531c:	4b1e      	ldr	r3, [pc, #120]	; (d5398 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d531e:	681a      	ldr	r2, [r3, #0]
   d5320:	07d0      	lsls	r0, r2, #31
   d5322:	bf5c      	itt	pl
   d5324:	2201      	movpl	r2, #1
   d5326:	601a      	strpl	r2, [r3, #0]
   d5328:	4b1c      	ldr	r3, [pc, #112]	; (d539c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d532a:	681a      	ldr	r2, [r3, #0]
   d532c:	07d1      	lsls	r1, r2, #31
   d532e:	bf5c      	itt	pl
   d5330:	2201      	movpl	r2, #1
   d5332:	601a      	strpl	r2, [r3, #0]
   d5334:	4b1a      	ldr	r3, [pc, #104]	; (d53a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d5336:	681a      	ldr	r2, [r3, #0]
   d5338:	07d2      	lsls	r2, r2, #31
   d533a:	bf5c      	itt	pl
   d533c:	2201      	movpl	r2, #1
   d533e:	601a      	strpl	r2, [r3, #0]
   d5340:	4b18      	ldr	r3, [pc, #96]	; (d53a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d5342:	681a      	ldr	r2, [r3, #0]
   d5344:	07d0      	lsls	r0, r2, #31
   d5346:	bf5c      	itt	pl
   d5348:	2201      	movpl	r2, #1
   d534a:	601a      	strpl	r2, [r3, #0]
   d534c:	4b16      	ldr	r3, [pc, #88]	; (d53a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d534e:	681a      	ldr	r2, [r3, #0]
   d5350:	07d1      	lsls	r1, r2, #31
   d5352:	bf5c      	itt	pl
   d5354:	2201      	movpl	r2, #1
   d5356:	601a      	strpl	r2, [r3, #0]
   d5358:	4b14      	ldr	r3, [pc, #80]	; (d53ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d535a:	681a      	ldr	r2, [r3, #0]
   d535c:	07d2      	lsls	r2, r2, #31
   d535e:	bf5c      	itt	pl
   d5360:	2201      	movpl	r2, #1
   d5362:	601a      	strpl	r2, [r3, #0]
   d5364:	4b12      	ldr	r3, [pc, #72]	; (d53b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d5366:	681a      	ldr	r2, [r3, #0]
   d5368:	07d0      	lsls	r0, r2, #31
   d536a:	bf5c      	itt	pl
   d536c:	2201      	movpl	r2, #1
   d536e:	601a      	strpl	r2, [r3, #0]
   d5370:	4b10      	ldr	r3, [pc, #64]	; (d53b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d5372:	681a      	ldr	r2, [r3, #0]
   d5374:	07d1      	lsls	r1, r2, #31
   d5376:	bf5c      	itt	pl
   d5378:	2201      	movpl	r2, #1
   d537a:	601a      	strpl	r2, [r3, #0]
   d537c:	4b0e      	ldr	r3, [pc, #56]	; (d53b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d537e:	681a      	ldr	r2, [r3, #0]
   d5380:	07d2      	lsls	r2, r2, #31
   d5382:	bf5c      	itt	pl
   d5384:	2201      	movpl	r2, #1
   d5386:	601a      	strpl	r2, [r3, #0]
   d5388:	4770      	bx	lr
   d538a:	bf00      	nop
   d538c:	2003e7cc 	.word	0x2003e7cc
   d5390:	2003e7c8 	.word	0x2003e7c8
   d5394:	2003e7c4 	.word	0x2003e7c4
   d5398:	2003e7c0 	.word	0x2003e7c0
   d539c:	2003e7bc 	.word	0x2003e7bc
   d53a0:	2003e7b8 	.word	0x2003e7b8
   d53a4:	2003e7b4 	.word	0x2003e7b4
   d53a8:	2003e7b0 	.word	0x2003e7b0
   d53ac:	2003e7ac 	.word	0x2003e7ac
   d53b0:	2003e7a8 	.word	0x2003e7a8
   d53b4:	2003e7a4 	.word	0x2003e7a4
   d53b8:	2003e7a0 	.word	0x2003e7a0

000d53bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d53bc:	4b18      	ldr	r3, [pc, #96]	; (d5420 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d53be:	681a      	ldr	r2, [r3, #0]
   d53c0:	07d1      	lsls	r1, r2, #31
   d53c2:	bf5c      	itt	pl
   d53c4:	2201      	movpl	r2, #1
   d53c6:	601a      	strpl	r2, [r3, #0]
   d53c8:	4b16      	ldr	r3, [pc, #88]	; (d5424 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d53ca:	681a      	ldr	r2, [r3, #0]
   d53cc:	07d2      	lsls	r2, r2, #31
   d53ce:	bf5c      	itt	pl
   d53d0:	2201      	movpl	r2, #1
   d53d2:	601a      	strpl	r2, [r3, #0]
   d53d4:	4b14      	ldr	r3, [pc, #80]	; (d5428 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d53d6:	681a      	ldr	r2, [r3, #0]
   d53d8:	07d0      	lsls	r0, r2, #31
   d53da:	bf5c      	itt	pl
   d53dc:	2201      	movpl	r2, #1
   d53de:	601a      	strpl	r2, [r3, #0]
   d53e0:	4b12      	ldr	r3, [pc, #72]	; (d542c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d53e2:	681a      	ldr	r2, [r3, #0]
   d53e4:	07d1      	lsls	r1, r2, #31
   d53e6:	bf5c      	itt	pl
   d53e8:	2201      	movpl	r2, #1
   d53ea:	601a      	strpl	r2, [r3, #0]
   d53ec:	4b10      	ldr	r3, [pc, #64]	; (d5430 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d53ee:	681a      	ldr	r2, [r3, #0]
   d53f0:	07d2      	lsls	r2, r2, #31
   d53f2:	bf5c      	itt	pl
   d53f4:	2201      	movpl	r2, #1
   d53f6:	601a      	strpl	r2, [r3, #0]
   d53f8:	4b0e      	ldr	r3, [pc, #56]	; (d5434 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d53fa:	681a      	ldr	r2, [r3, #0]
   d53fc:	07d0      	lsls	r0, r2, #31
   d53fe:	bf5c      	itt	pl
   d5400:	2201      	movpl	r2, #1
   d5402:	601a      	strpl	r2, [r3, #0]
   d5404:	4b0c      	ldr	r3, [pc, #48]	; (d5438 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5406:	681a      	ldr	r2, [r3, #0]
   d5408:	07d1      	lsls	r1, r2, #31
   d540a:	bf5c      	itt	pl
   d540c:	2201      	movpl	r2, #1
   d540e:	601a      	strpl	r2, [r3, #0]
   d5410:	4b0a      	ldr	r3, [pc, #40]	; (d543c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5412:	681a      	ldr	r2, [r3, #0]
   d5414:	07d2      	lsls	r2, r2, #31
   d5416:	bf5c      	itt	pl
   d5418:	2201      	movpl	r2, #1
   d541a:	601a      	strpl	r2, [r3, #0]
   d541c:	4770      	bx	lr
   d541e:	bf00      	nop
   d5420:	2003e7ec 	.word	0x2003e7ec
   d5424:	2003e7e8 	.word	0x2003e7e8
   d5428:	2003e7e4 	.word	0x2003e7e4
   d542c:	2003e7e0 	.word	0x2003e7e0
   d5430:	2003e7dc 	.word	0x2003e7dc
   d5434:	2003e7d8 	.word	0x2003e7d8
   d5438:	2003e7d4 	.word	0x2003e7d4
   d543c:	2003e7d0 	.word	0x2003e7d0

000d5440 <__cxa_atexit>:
   d5440:	b510      	push	{r4, lr}
   d5442:	4c05      	ldr	r4, [pc, #20]	; (d5458 <__cxa_atexit+0x18>)
   d5444:	4613      	mov	r3, r2
   d5446:	b12c      	cbz	r4, d5454 <__cxa_atexit+0x14>
   d5448:	460a      	mov	r2, r1
   d544a:	4601      	mov	r1, r0
   d544c:	2002      	movs	r0, #2
   d544e:	f3af 8000 	nop.w
   d5452:	bd10      	pop	{r4, pc}
   d5454:	4620      	mov	r0, r4
   d5456:	bd10      	pop	{r4, pc}
   d5458:	00000000 	.word	0x00000000

000d545c <memcpy>:
   d545c:	b510      	push	{r4, lr}
   d545e:	1e43      	subs	r3, r0, #1
   d5460:	440a      	add	r2, r1
   d5462:	4291      	cmp	r1, r2
   d5464:	d004      	beq.n	d5470 <memcpy+0x14>
   d5466:	f811 4b01 	ldrb.w	r4, [r1], #1
   d546a:	f803 4f01 	strb.w	r4, [r3, #1]!
   d546e:	e7f8      	b.n	d5462 <memcpy+0x6>
   d5470:	bd10      	pop	{r4, pc}

000d5472 <memset>:
   d5472:	4402      	add	r2, r0
   d5474:	4603      	mov	r3, r0
   d5476:	4293      	cmp	r3, r2
   d5478:	d002      	beq.n	d5480 <memset+0xe>
   d547a:	f803 1b01 	strb.w	r1, [r3], #1
   d547e:	e7fa      	b.n	d5476 <memset+0x4>
   d5480:	4770      	bx	lr
	...

000d5484 <srand>:
   d5484:	b538      	push	{r3, r4, r5, lr}
   d5486:	4b12      	ldr	r3, [pc, #72]	; (d54d0 <srand+0x4c>)
   d5488:	681c      	ldr	r4, [r3, #0]
   d548a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d548c:	4605      	mov	r5, r0
   d548e:	b9d3      	cbnz	r3, d54c6 <srand+0x42>
   d5490:	2018      	movs	r0, #24
   d5492:	f7ff f857 	bl	d4544 <malloc>
   d5496:	f243 330e 	movw	r3, #13070	; 0x330e
   d549a:	63a0      	str	r0, [r4, #56]	; 0x38
   d549c:	8003      	strh	r3, [r0, #0]
   d549e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d54a2:	8043      	strh	r3, [r0, #2]
   d54a4:	f241 2334 	movw	r3, #4660	; 0x1234
   d54a8:	8083      	strh	r3, [r0, #4]
   d54aa:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d54ae:	80c3      	strh	r3, [r0, #6]
   d54b0:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d54b4:	8103      	strh	r3, [r0, #8]
   d54b6:	2305      	movs	r3, #5
   d54b8:	8143      	strh	r3, [r0, #10]
   d54ba:	230b      	movs	r3, #11
   d54bc:	8183      	strh	r3, [r0, #12]
   d54be:	2201      	movs	r2, #1
   d54c0:	2300      	movs	r3, #0
   d54c2:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d54c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d54c8:	2200      	movs	r2, #0
   d54ca:	611d      	str	r5, [r3, #16]
   d54cc:	615a      	str	r2, [r3, #20]
   d54ce:	bd38      	pop	{r3, r4, r5, pc}
   d54d0:	2003e3cc 	.word	0x2003e3cc

000d54d4 <rand>:
   d54d4:	4b19      	ldr	r3, [pc, #100]	; (d553c <rand+0x68>)
   d54d6:	b510      	push	{r4, lr}
   d54d8:	681c      	ldr	r4, [r3, #0]
   d54da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d54dc:	b9d3      	cbnz	r3, d5514 <rand+0x40>
   d54de:	2018      	movs	r0, #24
   d54e0:	f7ff f830 	bl	d4544 <malloc>
   d54e4:	f243 330e 	movw	r3, #13070	; 0x330e
   d54e8:	63a0      	str	r0, [r4, #56]	; 0x38
   d54ea:	8003      	strh	r3, [r0, #0]
   d54ec:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d54f0:	8043      	strh	r3, [r0, #2]
   d54f2:	f241 2334 	movw	r3, #4660	; 0x1234
   d54f6:	8083      	strh	r3, [r0, #4]
   d54f8:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d54fc:	80c3      	strh	r3, [r0, #6]
   d54fe:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d5502:	8103      	strh	r3, [r0, #8]
   d5504:	2305      	movs	r3, #5
   d5506:	8143      	strh	r3, [r0, #10]
   d5508:	230b      	movs	r3, #11
   d550a:	8183      	strh	r3, [r0, #12]
   d550c:	2201      	movs	r2, #1
   d550e:	2300      	movs	r3, #0
   d5510:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d5514:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d5516:	4c0a      	ldr	r4, [pc, #40]	; (d5540 <rand+0x6c>)
   d5518:	690b      	ldr	r3, [r1, #16]
   d551a:	6948      	ldr	r0, [r1, #20]
   d551c:	4a09      	ldr	r2, [pc, #36]	; (d5544 <rand+0x70>)
   d551e:	435c      	muls	r4, r3
   d5520:	fb02 4000 	mla	r0, r2, r0, r4
   d5524:	fba3 2302 	umull	r2, r3, r3, r2
   d5528:	3201      	adds	r2, #1
   d552a:	4403      	add	r3, r0
   d552c:	f143 0300 	adc.w	r3, r3, #0
   d5530:	e9c1 2304 	strd	r2, r3, [r1, #16]
   d5534:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   d5538:	bd10      	pop	{r4, pc}
   d553a:	bf00      	nop
   d553c:	2003e3cc 	.word	0x2003e3cc
   d5540:	5851f42d 	.word	0x5851f42d
   d5544:	4c957f2d 	.word	0x4c957f2d

000d5548 <strcmp>:
   d5548:	f810 2b01 	ldrb.w	r2, [r0], #1
   d554c:	f811 3b01 	ldrb.w	r3, [r1], #1
   d5550:	2a01      	cmp	r2, #1
   d5552:	bf28      	it	cs
   d5554:	429a      	cmpcs	r2, r3
   d5556:	d0f7      	beq.n	d5548 <strcmp>
   d5558:	1ad0      	subs	r0, r2, r3
   d555a:	4770      	bx	lr

000d555c <strcpy>:
   d555c:	4603      	mov	r3, r0
   d555e:	f811 2b01 	ldrb.w	r2, [r1], #1
   d5562:	f803 2b01 	strb.w	r2, [r3], #1
   d5566:	2a00      	cmp	r2, #0
   d5568:	d1f9      	bne.n	d555e <strcpy+0x2>
   d556a:	4770      	bx	lr

000d556c <strlen>:
   d556c:	4603      	mov	r3, r0
   d556e:	f813 2b01 	ldrb.w	r2, [r3], #1
   d5572:	2a00      	cmp	r2, #0
   d5574:	d1fb      	bne.n	d556e <strlen+0x2>
   d5576:	1a18      	subs	r0, r3, r0
   d5578:	3801      	subs	r0, #1
   d557a:	4770      	bx	lr

000d557c <dynalib_user>:
   d557c:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d558c:	0000 0000 6572 7571 7365 2074 6572 6563     ....request rece
   d559c:	7669 6465 6400 7461 2061 6572 6563 7669     ived.data receiv
   d55ac:	6465 7200 6e61 6f64 696d 657a 0000 0000     ed.randomize....

000d55bc <_ZTVN5spark13EthernetClassE>:
	...
   d55c4:	45d3 000d 45c9 000d 45bf 000d 45b5 000d     .E...E...E...E..
   d55d4:	45a9 000d 459d 000d 4591 000d 4589 000d     .E...E...E...E..
   d55e4:	457f 000d 4575 000d 500d 000d 6162 6475     .E..uE...P..baud
   d55f4:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   d5604:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   d5614:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   d5624:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   d5634:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   d5644:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   d5654:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   d5664:	7070 2500 3130 7530 0020 205d 2500 0064     pp.%010u .] .%d.
   d5674:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
   d5684:	203d 2500 0069 6564 6174 6c69 2073 203d     = .%i.details = 
   d5694:	0d00 000a 0066 6e6c 6600 006e 6f63 6564     ....f.ln.fn.code
   d56a4:	6400 7465 6961 006c 6f6e 656e 7400 6172     .detail.none.tra
   d56b4:	6563 6900 666e 006f 6177 6e72 6500 7272     ce.info.warn.err
   d56c4:	726f 7000 6e61 6369 6100 6c6c 5a00 2500     or.panic.all.Z.%
   d56d4:	302b 6433 253a 3230 0075 5925 252d 2d6d     +03d:%02u.%Y-%m-
   d56e4:	6425 2554 3a48 4d25 253a 2553 007a 7361     %dT%H:%M:%S%z.as
   d56f4:	7463 6d69 0065 0000                         ctime...

000d56fc <_ZTV9IPAddress>:
	...
   d5704:	4a79 000d 4a69 000d 4a6b 000d               yJ..iJ..kJ..

000d5710 <_ZTV9USBSerial>:
	...
   d5718:	4b51 000d 4ba1 000d 4baf 000d 4825 000d     QK...K...K..%H..
   d5728:	4b8d 000d 4b53 000d 4b69 000d 4b9b 000d     .K..SK..iK...K..
   d5738:	4b7f 000d 4b4d 000d                         .K..MK..

000d5740 <_ZTV11USARTSerial>:
	...
   d5748:	4c5d 000d 4cad 000d 4cbb 000d 4825 000d     ]L...L...L..%H..
   d5758:	4c71 000d 4c93 000d 4c7f 000d 4ca7 000d     qL...L...L...L..
   d5768:	4c5f 000d 4c63 000d                         _L..cL..

000d5770 <_ZTV7TwoWire>:
	...
   d5778:	4d59 000d 4da3 000d 4d7b 000d 4d5b 000d     YM...M..{M..[M..
   d5788:	4d83 000d 4d8b 000d 4d93 000d 4d9b 000d     .M...M...M...M..

000d5798 <_ZTVN5spark9MeshClassE>:
	...
   d57a0:	4e87 000d 4e7d 000d 4e73 000d 4e69 000d     .N..}N..sN..iN..
   d57b0:	4e5d 000d 4e51 000d 4e45 000d 4e3d 000d     ]N..QN..EN..=N..
   d57c0:	4e33 000d 4e29 000d 500d 000d               3N..)N...P..

000d57cc <_ZTVN5spark12NetworkClassE>:
	...
   d57d4:	4fa5 000d 4faf 000d 4fb9 000d 4fc3 000d     .O...O...O...O..
   d57e4:	4fcd 000d 4fd9 000d 4fe5 000d 4ff1 000d     .O...O...O...O..
   d57f4:	4ff9 000d 5003 000d 500d 000d               .O...P...P..

000d5800 <_ZSt7nothrow>:
   d5800:	0000 0000                                   ....

000d5804 <__sf_fake_stdin>:
	...

000d5824 <__sf_fake_stdout>:
	...

000d5844 <__sf_fake_stderr>:
	...
   d5864:	0043                                        C.

000d5866 <link_const_variable_data_end>:
	...

000d5868 <link_constructors_location>:
   d5868:	000d41e5 	.word	0x000d41e5
   d586c:	000d45dd 	.word	0x000d45dd
   d5870:	000d45f1 	.word	0x000d45f1
   d5874:	000d47fd 	.word	0x000d47fd
   d5878:	000d48e5 	.word	0x000d48e5
   d587c:	000d48f5 	.word	0x000d48f5
   d5880:	000d492d 	.word	0x000d492d
   d5884:	000d4f55 	.word	0x000d4f55
   d5888:	000d50d9 	.word	0x000d50d9
   d588c:	000d51b1 	.word	0x000d51b1
   d5890:	000d5235 	.word	0x000d5235
   d5894:	000d52f9 	.word	0x000d52f9
   d5898:	000d53bd 	.word	0x000d53bd

000d589c <link_constructors_end>:
   d589c:	00000000 	.word	0x00000000
