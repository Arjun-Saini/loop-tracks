
c:/Users/Arjun/Documents/GitHub/loop_tracks/slave/target/1.5.2/argon/slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000018f4  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d5910  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  2003e344  000d5914  0001e344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000444  2003e3ac  2003e3ac  0002e3ac  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d597c  000d597c  0002597c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d59a4  000d59a4  000259a4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000b985a  00000000  00000000  000259a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000e357  00000000  00000000  000df202  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001b358  00000000  00000000  000ed559  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002228  00000000  00000000  001088b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004140  00000000  00000000  0010aad9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00030693  00000000  00000000  0010ec19  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00021510  00000000  00000000  0013f2ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000ff0a1  00000000  00000000  001607bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000c4c0  00000000  00000000  0025f860  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f001 fa1b 	bl	d5468 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f001 fa20 	bl	d547e <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e344 	.word	0x2003e344
   d4048:	000d5914 	.word	0x000d5914
   d404c:	2003e3ac 	.word	0x2003e3ac
   d4050:	2003e3ac 	.word	0x2003e3ac
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f000 fca1 	bl	d49a0 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d5904 	.word	0x000d5904
   d4080:	000d58cc 	.word	0x000d58cc

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b91c 	b.w	d42c0 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f93d 	bl	d4308 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f000 bc47 	b.w	d4924 <_post_loop>

000d4096 <_ZdlPv>:
   d4096:	f000 bb09 	b.w	d46ac <free>

000d409a <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409a:	f000 bb07 	b.w	d46ac <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr

000d40ae <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40ae:	b510      	push	{r4, lr}
   d40b0:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d40b2:	6800      	ldr	r0, [r0, #0]
   d40b4:	b108      	cbz	r0, d40ba <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d40b6:	f000 faf9 	bl	d46ac <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40ba:	4620      	mov	r0, r4
   d40bc:	bd10      	pop	{r4, pc}
	...

000d40c0 <_Z12dataReceivedi>:
  delay(100);
}

char c;

void dataReceived(int count){
   d40c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d40c4:	af00      	add	r7, sp, #0
  char inputBuffer[Wire.available()];
   d40c6:	f001 f831 	bl	d512c <_Z19__fetch_global_Wirev>
   d40ca:	6803      	ldr	r3, [r0, #0]
   d40cc:	691b      	ldr	r3, [r3, #16]
   d40ce:	4798      	blx	r3
   d40d0:	3007      	adds	r0, #7
   d40d2:	f020 0007 	bic.w	r0, r0, #7
   d40d6:	ebad 0d00 	sub.w	sp, sp, r0
  int counter = 0;

  Serial.println("count: ");
   d40da:	f000 fd61 	bl	d4ba0 <_Z16_fetch_usbserialv>
   d40de:	4946      	ldr	r1, [pc, #280]	; (d41f8 <_Z12dataReceivedi+0x138>)
   d40e0:	f000 fb9b 	bl	d481a <_ZN5Print7printlnEPKc>
  Serial.print(Wire.available());
   d40e4:	f000 fd5c 	bl	d4ba0 <_Z16_fetch_usbserialv>
   d40e8:	4606      	mov	r6, r0
   d40ea:	f001 f81f 	bl	d512c <_Z19__fetch_global_Wirev>
   d40ee:	6803      	ldr	r3, [r0, #0]
   d40f0:	691b      	ldr	r3, [r3, #16]
   d40f2:	4798      	blx	r3
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d40f4:	1e04      	subs	r4, r0, #0
}

char c;

void dataReceived(int count){
  char inputBuffer[Wire.available()];
   d40f6:	466d      	mov	r5, sp
   d40f8:	da05      	bge.n	d4106 <_Z12dataReceivedi+0x46>
            t = print('-');
   d40fa:	212d      	movs	r1, #45	; 0x2d
   d40fc:	4630      	mov	r0, r6
   d40fe:	f000 fb7d 	bl	d47fc <_ZN5Print5printEc>
            val = -n;
   d4102:	4261      	negs	r1, r4
   d4104:	e000      	b.n	d4108 <_Z12dataReceivedi+0x48>
        } else {
            val = n;
   d4106:	4621      	mov	r1, r4
        }
        return printNumber(val, base) + t;
   d4108:	220a      	movs	r2, #10
   d410a:	4630      	mov	r0, r6
   d410c:	f000 fb99 	bl	d4842 <_ZN5Print11printNumberEmh>
  int counter = 0;

  Serial.println("count: ");
  Serial.print(Wire.available());
  Serial.println();
   d4110:	f000 fd46 	bl	d4ba0 <_Z16_fetch_usbserialv>
   d4114:	f000 fb75 	bl	d4802 <_ZN5Print7printlnEv>

  while(Wire.available() > 0){
    c = Wire.read();
   d4118:	4c38      	ldr	r4, [pc, #224]	; (d41fc <_Z12dataReceivedi+0x13c>)
   d411a:	1e6e      	subs	r6, r5, #1

  Serial.println("count: ");
  Serial.print(Wire.available());
  Serial.println();

  while(Wire.available() > 0){
   d411c:	f001 f806 	bl	d512c <_Z19__fetch_global_Wirev>
   d4120:	6803      	ldr	r3, [r0, #0]
   d4122:	691b      	ldr	r3, [r3, #16]
   d4124:	4798      	blx	r3
   d4126:	2800      	cmp	r0, #0
   d4128:	dd0e      	ble.n	d4148 <_Z12dataReceivedi+0x88>
    c = Wire.read();
   d412a:	f000 ffff 	bl	d512c <_Z19__fetch_global_Wirev>
   d412e:	6803      	ldr	r3, [r0, #0]
   d4130:	695b      	ldr	r3, [r3, #20]
   d4132:	4798      	blx	r3
   d4134:	7020      	strb	r0, [r4, #0]
    Serial.println(c);
   d4136:	f000 fd33 	bl	d4ba0 <_Z16_fetch_usbserialv>
   d413a:	7821      	ldrb	r1, [r4, #0]
   d413c:	f000 fb77 	bl	d482e <_ZN5Print7printlnEc>
    inputBuffer[counter] = c;
   d4140:	7823      	ldrb	r3, [r4, #0]
   d4142:	f806 3f01 	strb.w	r3, [r6, #1]!

  Serial.println("count: ");
  Serial.print(Wire.available());
  Serial.println();

  while(Wire.available() > 0){
   d4146:	e7e9      	b.n	d411c <_Z12dataReceivedi+0x5c>
    c = Wire.read();
    Serial.println(c);
    inputBuffer[counter] = c;
    counter++;
  }
  Serial.println("data received: ");
   d4148:	f000 fd2a 	bl	d4ba0 <_Z16_fetch_usbserialv>
   d414c:	492c      	ldr	r1, [pc, #176]	; (d4200 <_Z12dataReceivedi+0x140>)
   d414e:	f000 fb64 	bl	d481a <_ZN5Print7printlnEPKc>
  Serial.print(inputBuffer);
   d4152:	f000 fd25 	bl	d4ba0 <_Z16_fetch_usbserialv>
   d4156:	4629      	mov	r1, r5
   d4158:	f000 fb4c 	bl	d47f4 <_ZN5Print5printEPKc>
  Serial.println();
   d415c:	f000 fd20 	bl	d4ba0 <_Z16_fetch_usbserialv>
   d4160:	f000 fb4f 	bl	d4802 <_ZN5Print7printlnEv>

  if(inputBuffer[0] == '1'){
   d4164:	782b      	ldrb	r3, [r5, #0]
   d4166:	2b31      	cmp	r3, #49	; 0x31
   d4168:	d101      	bne.n	d416e <_Z12dataReceivedi+0xae>
    requestMode = 1;
   d416a:	2201      	movs	r2, #1
   d416c:	e002      	b.n	d4174 <_Z12dataReceivedi+0xb4>
  }else if(inputBuffer[0] == '2'){
   d416e:	2b32      	cmp	r3, #50	; 0x32
   d4170:	d103      	bne.n	d417a <_Z12dataReceivedi+0xba>
    requestMode = 2;
   d4172:	2202      	movs	r2, #2
   d4174:	4b23      	ldr	r3, [pc, #140]	; (d4204 <_Z12dataReceivedi+0x144>)
   d4176:	601a      	str	r2, [r3, #0]
   d4178:	e03b      	b.n	d41f2 <_Z12dataReceivedi+0x132>
   d417a:	4e23      	ldr	r6, [pc, #140]	; (d4208 <_Z12dataReceivedi+0x148>)
   d417c:	2400      	movs	r4, #0
    for(int i = 0; i < 24; i++){
      if(deviceID.charAt(i) != inputBuffer[i]){
        verifyAddress = false;
        break;
      }
      verifyAddress = true;
   d417e:	f04f 0801 	mov.w	r8, #1
    requestMode = 1;
  }else if(inputBuffer[0] == '2'){
    requestMode = 2;
  }else{
    for(int i = 0; i < 24; i++){
      if(deviceID.charAt(i) != inputBuffer[i]){
   d4182:	4621      	mov	r1, r4
   d4184:	4821      	ldr	r0, [pc, #132]	; (d420c <_Z12dataReceivedi+0x14c>)
   d4186:	f000 fb01 	bl	d478c <_ZNK6String6charAtEj>
   d418a:	5d2b      	ldrb	r3, [r5, r4]
   d418c:	4283      	cmp	r3, r0
   d418e:	4b1e      	ldr	r3, [pc, #120]	; (d4208 <_Z12dataReceivedi+0x148>)
   d4190:	d002      	beq.n	d4198 <_Z12dataReceivedi+0xd8>
        verifyAddress = false;
   d4192:	2200      	movs	r2, #0
   d4194:	701a      	strb	r2, [r3, #0]
        break;
   d4196:	e004      	b.n	d41a2 <_Z12dataReceivedi+0xe2>
  if(inputBuffer[0] == '1'){
    requestMode = 1;
  }else if(inputBuffer[0] == '2'){
    requestMode = 2;
  }else{
    for(int i = 0; i < 24; i++){
   d4198:	3401      	adds	r4, #1
   d419a:	2c18      	cmp	r4, #24
      if(deviceID.charAt(i) != inputBuffer[i]){
        verifyAddress = false;
        break;
      }
      verifyAddress = true;
   d419c:	f886 8000 	strb.w	r8, [r6]
  if(inputBuffer[0] == '1'){
    requestMode = 1;
  }else if(inputBuffer[0] == '2'){
    requestMode = 2;
  }else{
    for(int i = 0; i < 24; i++){
   d41a0:	d1ef      	bne.n	d4182 <_Z12dataReceivedi+0xc2>
        verifyAddress = false;
        break;
      }
      verifyAddress = true;
    }
    if(verifyAddress){
   d41a2:	781c      	ldrb	r4, [r3, #0]
   d41a4:	b12c      	cbz	r4, d41b2 <_Z12dataReceivedi+0xf2>
      Serial.println("correct address");
   d41a6:	f000 fcfb 	bl	d4ba0 <_Z16_fetch_usbserialv>
   d41aa:	4919      	ldr	r1, [pc, #100]	; (d4210 <_Z12dataReceivedi+0x150>)
   d41ac:	f000 fb35 	bl	d481a <_ZN5Print7printlnEPKc>
   d41b0:	e01f      	b.n	d41f2 <_Z12dataReceivedi+0x132>
    }else{
      Serial.println("randomize address");
   d41b2:	f000 fcf5 	bl	d4ba0 <_Z16_fetch_usbserialv>
   d41b6:	4917      	ldr	r1, [pc, #92]	; (d4214 <_Z12dataReceivedi+0x154>)
      address = random(64, 120);
   d41b8:	4d17      	ldr	r5, [pc, #92]	; (d4218 <_Z12dataReceivedi+0x158>)
      verifyAddress = true;
    }
    if(verifyAddress){
      Serial.println("correct address");
    }else{
      Serial.println("randomize address");
   d41ba:	f000 fb2e 	bl	d481a <_ZN5Print7printlnEPKc>
      address = random(64, 120);
   d41be:	2178      	movs	r1, #120	; 0x78
   d41c0:	2040      	movs	r0, #64	; 0x40
   d41c2:	f000 fdef 	bl	d4da4 <_Z6randomii>
   d41c6:	6028      	str	r0, [r5, #0]
      Wire.end();
   d41c8:	f000 ffb0 	bl	d512c <_Z19__fetch_global_Wirev>
   d41cc:	f000 fdd3 	bl	d4d76 <_ZN7TwoWire3endEv>
      Wire.begin(address);
   d41d0:	f000 ffac 	bl	d512c <_Z19__fetch_global_Wirev>
   d41d4:	6829      	ldr	r1, [r5, #0]
   d41d6:	f000 fdcb 	bl	d4d70 <_ZN7TwoWire5beginEi>
      Wire.onReceive(dataReceived);
   d41da:	f000 ffa7 	bl	d512c <_Z19__fetch_global_Wirev>
   d41de:	490f      	ldr	r1, [pc, #60]	; (d421c <_Z12dataReceivedi+0x15c>)
   d41e0:	f000 fdcd 	bl	d4d7e <_ZN7TwoWire9onReceiveEPFviE>
      Wire.onRequest(dataRequest);
   d41e4:	f000 ffa2 	bl	d512c <_Z19__fetch_global_Wirev>
   d41e8:	490d      	ldr	r1, [pc, #52]	; (d4220 <_Z12dataReceivedi+0x160>)
   d41ea:	f000 fdcc 	bl	d4d86 <_ZN7TwoWire9onRequestEPFvvE>
      requestMode = 0;
   d41ee:	4b05      	ldr	r3, [pc, #20]	; (d4204 <_Z12dataReceivedi+0x144>)
   d41f0:	601c      	str	r4, [r3, #0]
    }
  }
}
   d41f2:	46bd      	mov	sp, r7
   d41f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d41f8:	000d5578 	.word	0x000d5578
   d41fc:	2003e3d0 	.word	0x2003e3d0
   d4200:	000d5580 	.word	0x000d5580
   d4204:	2003e3d8 	.word	0x2003e3d8
   d4208:	2003e3c0 	.word	0x2003e3c0
   d420c:	2003e3b0 	.word	0x2003e3b0
   d4210:	000d5590 	.word	0x000d5590
   d4214:	000d55a0 	.word	0x000d55a0
   d4218:	2003e3d4 	.word	0x2003e3d4
   d421c:	000d40c1 	.word	0x000d40c1
   d4220:	000d4245 	.word	0x000d4245

000d4224 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4224:	b570      	push	{r4, r5, r6, lr}
   d4226:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d4228:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d422a:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d422c:	b149      	cbz	r1, d4242 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d422e:	f001 f991 	bl	d5554 <strlen>
   d4232:	682b      	ldr	r3, [r5, #0]
   d4234:	4602      	mov	r2, r0
   d4236:	4621      	mov	r1, r4
   d4238:	4628      	mov	r0, r5
   d423a:	68db      	ldr	r3, [r3, #12]
    }
   d423c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4240:	4718      	bx	r3
    }
   d4242:	bd70      	pop	{r4, r5, r6, pc}

000d4244 <_Z11dataRequestv>:

void dataRequest(){
   d4244:	b510      	push	{r4, lr}
  Serial.println("request received");
   d4246:	f000 fcab 	bl	d4ba0 <_Z16_fetch_usbserialv>
   d424a:	4915      	ldr	r1, [pc, #84]	; (d42a0 <_Z11dataRequestv+0x5c>)
   d424c:	f000 fae5 	bl	d481a <_ZN5Print7printlnEPKc>
  switch(requestMode){
   d4250:	4b14      	ldr	r3, [pc, #80]	; (d42a4 <_Z11dataRequestv+0x60>)
   d4252:	681b      	ldr	r3, [r3, #0]
   d4254:	2b01      	cmp	r3, #1
   d4256:	d002      	beq.n	d425e <_Z11dataRequestv+0x1a>
   d4258:	2b02      	cmp	r3, #2
   d425a:	d00a      	beq.n	d4272 <_Z11dataRequestv+0x2e>
   d425c:	bd10      	pop	{r4, pc}
    case 1:{
      Serial.println("request mode 1");
   d425e:	f000 fc9f 	bl	d4ba0 <_Z16_fetch_usbserialv>
   d4262:	4911      	ldr	r1, [pc, #68]	; (d42a8 <_Z11dataRequestv+0x64>)
   d4264:	f000 fad9 	bl	d481a <_ZN5Print7printlnEPKc>
      Wire.write(deviceID);
   d4268:	f000 ff60 	bl	d512c <_Z19__fetch_global_Wirev>
   d426c:	4b0f      	ldr	r3, [pc, #60]	; (d42ac <_Z11dataRequestv+0x68>)
   d426e:	6819      	ldr	r1, [r3, #0]
   d4270:	e012      	b.n	d4298 <_Z11dataRequestv+0x54>
      break;
    }
    case 2:{
      Serial.println("request mode 2");
      if(verifyAddress){
   d4272:	4c0f      	ldr	r4, [pc, #60]	; (d42b0 <_Z11dataRequestv+0x6c>)
      Serial.println("request mode 1");
      Wire.write(deviceID);
      break;
    }
    case 2:{
      Serial.println("request mode 2");
   d4274:	f000 fc94 	bl	d4ba0 <_Z16_fetch_usbserialv>
   d4278:	490e      	ldr	r1, [pc, #56]	; (d42b4 <_Z11dataRequestv+0x70>)
   d427a:	f000 face 	bl	d481a <_ZN5Print7printlnEPKc>
      if(verifyAddress){
   d427e:	7823      	ldrb	r3, [r4, #0]
   d4280:	b13b      	cbz	r3, d4292 <_Z11dataRequestv+0x4e>
        Wire.write("pass");
   d4282:	f000 ff53 	bl	d512c <_Z19__fetch_global_Wirev>
   d4286:	490c      	ldr	r1, [pc, #48]	; (d42b8 <_Z11dataRequestv+0x74>)
   d4288:	f7ff ffcc 	bl	d4224 <_ZN5Print5writeEPKc>
        verifyAddress = false;
   d428c:	2300      	movs	r3, #0
   d428e:	7023      	strb	r3, [r4, #0]
   d4290:	bd10      	pop	{r4, pc}
      }else{
        Wire.write("fail");
   d4292:	f000 ff4b 	bl	d512c <_Z19__fetch_global_Wirev>
   d4296:	4909      	ldr	r1, [pc, #36]	; (d42bc <_Z11dataRequestv+0x78>)
   d4298:	f7ff ffc4 	bl	d4224 <_ZN5Print5writeEPKc>
   d429c:	bd10      	pop	{r4, pc}
   d429e:	bf00      	nop
   d42a0:	000d55b2 	.word	0x000d55b2
   d42a4:	2003e3d8 	.word	0x2003e3d8
   d42a8:	000d55c3 	.word	0x000d55c3
   d42ac:	2003e3b0 	.word	0x2003e3b0
   d42b0:	2003e3c0 	.word	0x2003e3c0
   d42b4:	000d55d2 	.word	0x000d55d2
   d42b8:	000d55e1 	.word	0x000d55e1
   d42bc:	000d55e6 	.word	0x000d55e6

000d42c0 <setup>:
int address;
int requestMode = 0;
bool verifyAddress = false;
String deviceID = System.deviceID();

void setup() {
   d42c0:	b508      	push	{r3, lr}
  Serial.begin(9600);
   d42c2:	f000 fc6d 	bl	d4ba0 <_Z16_fetch_usbserialv>
   d42c6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d42ca:	f000 fc5d 	bl	d4b88 <_ZN9USBSerial5beginEl>
  address = random(8, 64);
   d42ce:	2140      	movs	r1, #64	; 0x40
   d42d0:	2008      	movs	r0, #8
   d42d2:	f000 fd67 	bl	d4da4 <_Z6randomii>
   d42d6:	4b09      	ldr	r3, [pc, #36]	; (d42fc <setup+0x3c>)
   d42d8:	6018      	str	r0, [r3, #0]
  Wire.begin(15);
   d42da:	f000 ff27 	bl	d512c <_Z19__fetch_global_Wirev>
   d42de:	210f      	movs	r1, #15
   d42e0:	f000 fd46 	bl	d4d70 <_ZN7TwoWire5beginEi>
  Wire.onReceive(dataReceived);
   d42e4:	f000 ff22 	bl	d512c <_Z19__fetch_global_Wirev>
   d42e8:	4905      	ldr	r1, [pc, #20]	; (d4300 <setup+0x40>)
   d42ea:	f000 fd48 	bl	d4d7e <_ZN7TwoWire9onReceiveEPFviE>
  Wire.onRequest(dataRequest);
   d42ee:	f000 ff1d 	bl	d512c <_Z19__fetch_global_Wirev>
   d42f2:	4904      	ldr	r1, [pc, #16]	; (d4304 <setup+0x44>)
}
   d42f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void setup() {
  Serial.begin(9600);
  address = random(8, 64);
  Wire.begin(15);
  Wire.onReceive(dataReceived);
  Wire.onRequest(dataRequest);
   d42f8:	f000 bd45 	b.w	d4d86 <_ZN7TwoWire9onRequestEPFvvE>
   d42fc:	2003e3d4 	.word	0x2003e3d4
   d4300:	000d40c1 	.word	0x000d40c1
   d4304:	000d4245 	.word	0x000d4245

000d4308 <loop>:
}

void loop() {
  delay(100);
   d4308:	2064      	movs	r0, #100	; 0x64
   d430a:	f000 bacd 	b.w	d48a8 <delay>
	...

000d4310 <_GLOBAL__sub_I_SystemMode>:
        Wire.write("fail");
      }
      break;
    }
  }
   d4310:	b538      	push	{r3, r4, r5, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4312:	4c0f      	ldr	r4, [pc, #60]	; (d4350 <_GLOBAL__sub_I_SystemMode+0x40>)
SYSTEM_MODE(MANUAL)
   d4314:	4d0f      	ldr	r5, [pc, #60]	; (d4354 <_GLOBAL__sub_I_SystemMode+0x44>)

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4316:	f000 f835 	bl	d4384 <HAL_Pin_Map>
   d431a:	2300      	movs	r3, #0
   d431c:	6023      	str	r3, [r4, #0]
   d431e:	80a3      	strh	r3, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4320:	71a3      	strb	r3, [r4, #6]
   d4322:	8123      	strh	r3, [r4, #8]
   d4324:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d4328:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d432a:	2003      	movs	r0, #3
   d432c:	f000 f932 	bl	d4594 <set_system_mode>
   d4330:	4620      	mov	r0, r4
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, long seconds = 0, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleepPinImpl(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, std::chrono::seconds s, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, s.count(), flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count()); }

    static String deviceID(void) { return spark_deviceID(); }
   d4332:	4c09      	ldr	r4, [pc, #36]	; (d4358 <_GLOBAL__sub_I_SystemMode+0x48>)
   d4334:	4909      	ldr	r1, [pc, #36]	; (d435c <_GLOBAL__sub_I_SystemMode+0x4c>)
   d4336:	462a      	mov	r2, r5
   d4338:	f000 ff1e 	bl	d5178 <__aeabi_atexit>
   d433c:	4620      	mov	r0, r4
   d433e:	f000 f99d 	bl	d467c <spark_deviceID>

int address;
int requestMode = 0;
bool verifyAddress = false;
String deviceID = System.deviceID();
   d4342:	462a      	mov	r2, r5
   d4344:	4620      	mov	r0, r4
   d4346:	4906      	ldr	r1, [pc, #24]	; (d4360 <_GLOBAL__sub_I_SystemMode+0x50>)
        Wire.write("fail");
      }
      break;
    }
  }
   d4348:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
SYSTEM_MODE(MANUAL)

int address;
int requestMode = 0;
bool verifyAddress = false;
String deviceID = System.deviceID();
   d434c:	f000 bf14 	b.w	d5178 <__aeabi_atexit>
   d4350:	2003e3c4 	.word	0x2003e3c4
   d4354:	2003e3ac 	.word	0x2003e3ac
   d4358:	2003e3b0 	.word	0x2003e3b0
   d435c:	000d40af 	.word	0x000d40af
   d4360:	000d476d 	.word	0x000d476d

000d4364 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4364:	b508      	push	{r3, lr}
   d4366:	4b02      	ldr	r3, [pc, #8]	; (d4370 <netdb_freeaddrinfo+0xc>)
   d4368:	681b      	ldr	r3, [r3, #0]
   d436a:	689b      	ldr	r3, [r3, #8]
   d436c:	9301      	str	r3, [sp, #4]
   d436e:	bd08      	pop	{r3, pc}
   d4370:	00030268 	.word	0x00030268

000d4374 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4374:	b508      	push	{r3, lr}
   d4376:	4b02      	ldr	r3, [pc, #8]	; (d4380 <netdb_getaddrinfo+0xc>)
   d4378:	681b      	ldr	r3, [r3, #0]
   d437a:	68db      	ldr	r3, [r3, #12]
   d437c:	9301      	str	r3, [sp, #4]
   d437e:	bd08      	pop	{r3, pc}
   d4380:	00030268 	.word	0x00030268

000d4384 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4384:	b508      	push	{r3, lr}
   d4386:	4b02      	ldr	r3, [pc, #8]	; (d4390 <HAL_Pin_Map+0xc>)
   d4388:	681b      	ldr	r3, [r3, #0]
   d438a:	681b      	ldr	r3, [r3, #0]
   d438c:	9301      	str	r3, [sp, #4]
   d438e:	bd08      	pop	{r3, pc}
   d4390:	0003022c 	.word	0x0003022c

000d4394 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4394:	b508      	push	{r3, lr}
   d4396:	4b02      	ldr	r3, [pc, #8]	; (d43a0 <HAL_RNG_GetRandomNumber+0xc>)
   d4398:	681b      	ldr	r3, [r3, #0]
   d439a:	685b      	ldr	r3, [r3, #4]
   d439c:	9301      	str	r3, [sp, #4]
   d439e:	bd08      	pop	{r3, pc}
   d43a0:	00030218 	.word	0x00030218

000d43a4 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d43a4:	b508      	push	{r3, lr}
   d43a6:	4b02      	ldr	r3, [pc, #8]	; (d43b0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d43a8:	681b      	ldr	r3, [r3, #0]
   d43aa:	695b      	ldr	r3, [r3, #20]
   d43ac:	9301      	str	r3, [sp, #4]
   d43ae:	bd08      	pop	{r3, pc}
   d43b0:	00030218 	.word	0x00030218

000d43b4 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d43b4:	b508      	push	{r3, lr}
   d43b6:	4b02      	ldr	r3, [pc, #8]	; (d43c0 <os_thread_is_current+0xc>)
   d43b8:	681b      	ldr	r3, [r3, #0]
   d43ba:	689b      	ldr	r3, [r3, #8]
   d43bc:	9301      	str	r3, [sp, #4]
   d43be:	bd08      	pop	{r3, pc}
   d43c0:	00030248 	.word	0x00030248

000d43c4 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d43c4:	b508      	push	{r3, lr}
   d43c6:	4b02      	ldr	r3, [pc, #8]	; (d43d0 <os_thread_join+0xc>)
   d43c8:	681b      	ldr	r3, [r3, #0]
   d43ca:	691b      	ldr	r3, [r3, #16]
   d43cc:	9301      	str	r3, [sp, #4]
   d43ce:	bd08      	pop	{r3, pc}
   d43d0:	00030248 	.word	0x00030248

000d43d4 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d43d4:	b508      	push	{r3, lr}
   d43d6:	4b02      	ldr	r3, [pc, #8]	; (d43e0 <os_thread_cleanup+0xc>)
   d43d8:	681b      	ldr	r3, [r3, #0]
   d43da:	695b      	ldr	r3, [r3, #20]
   d43dc:	9301      	str	r3, [sp, #4]
   d43de:	bd08      	pop	{r3, pc}
   d43e0:	00030248 	.word	0x00030248

000d43e4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d43e4:	b508      	push	{r3, lr}
   d43e6:	4b02      	ldr	r3, [pc, #8]	; (d43f0 <os_mutex_recursive_create+0xc>)
   d43e8:	681b      	ldr	r3, [r3, #0]
   d43ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d43ec:	9301      	str	r3, [sp, #4]
   d43ee:	bd08      	pop	{r3, pc}
   d43f0:	00030248 	.word	0x00030248

000d43f4 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d43f4:	b508      	push	{r3, lr}
   d43f6:	4b02      	ldr	r3, [pc, #8]	; (d4400 <os_mutex_recursive_destroy+0xc>)
   d43f8:	681b      	ldr	r3, [r3, #0]
   d43fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d43fc:	9301      	str	r3, [sp, #4]
   d43fe:	bd08      	pop	{r3, pc}
   d4400:	00030248 	.word	0x00030248

000d4404 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4404:	b508      	push	{r3, lr}
   d4406:	4b02      	ldr	r3, [pc, #8]	; (d4410 <inet_inet_ntop+0xc>)
   d4408:	681b      	ldr	r3, [r3, #0]
   d440a:	695b      	ldr	r3, [r3, #20]
   d440c:	9301      	str	r3, [sp, #4]
   d440e:	bd08      	pop	{r3, pc}
   d4410:	00030264 	.word	0x00030264

000d4414 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4414:	b508      	push	{r3, lr}
   d4416:	4b02      	ldr	r3, [pc, #8]	; (d4420 <HAL_USART_Init+0xc>)
   d4418:	681b      	ldr	r3, [r3, #0]
   d441a:	681b      	ldr	r3, [r3, #0]
   d441c:	9301      	str	r3, [sp, #4]
   d441e:	bd08      	pop	{r3, pc}
   d4420:	0003023c 	.word	0x0003023c

000d4424 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4424:	b508      	push	{r3, lr}
   d4426:	4b02      	ldr	r3, [pc, #8]	; (d4430 <HAL_USART_Write_Data+0xc>)
   d4428:	681b      	ldr	r3, [r3, #0]
   d442a:	68db      	ldr	r3, [r3, #12]
   d442c:	9301      	str	r3, [sp, #4]
   d442e:	bd08      	pop	{r3, pc}
   d4430:	0003023c 	.word	0x0003023c

000d4434 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4434:	b508      	push	{r3, lr}
   d4436:	4b02      	ldr	r3, [pc, #8]	; (d4440 <HAL_USART_Available_Data+0xc>)
   d4438:	681b      	ldr	r3, [r3, #0]
   d443a:	691b      	ldr	r3, [r3, #16]
   d443c:	9301      	str	r3, [sp, #4]
   d443e:	bd08      	pop	{r3, pc}
   d4440:	0003023c 	.word	0x0003023c

000d4444 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4444:	b508      	push	{r3, lr}
   d4446:	4b02      	ldr	r3, [pc, #8]	; (d4450 <HAL_USART_Read_Data+0xc>)
   d4448:	681b      	ldr	r3, [r3, #0]
   d444a:	695b      	ldr	r3, [r3, #20]
   d444c:	9301      	str	r3, [sp, #4]
   d444e:	bd08      	pop	{r3, pc}
   d4450:	0003023c 	.word	0x0003023c

000d4454 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4454:	b508      	push	{r3, lr}
   d4456:	4b02      	ldr	r3, [pc, #8]	; (d4460 <HAL_USART_Peek_Data+0xc>)
   d4458:	681b      	ldr	r3, [r3, #0]
   d445a:	699b      	ldr	r3, [r3, #24]
   d445c:	9301      	str	r3, [sp, #4]
   d445e:	bd08      	pop	{r3, pc}
   d4460:	0003023c 	.word	0x0003023c

000d4464 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4464:	b508      	push	{r3, lr}
   d4466:	4b02      	ldr	r3, [pc, #8]	; (d4470 <HAL_USART_Flush_Data+0xc>)
   d4468:	681b      	ldr	r3, [r3, #0]
   d446a:	69db      	ldr	r3, [r3, #28]
   d446c:	9301      	str	r3, [sp, #4]
   d446e:	bd08      	pop	{r3, pc}
   d4470:	0003023c 	.word	0x0003023c

000d4474 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4474:	b508      	push	{r3, lr}
   d4476:	4b02      	ldr	r3, [pc, #8]	; (d4480 <HAL_USART_Available_Data_For_Write+0xc>)
   d4478:	681b      	ldr	r3, [r3, #0]
   d447a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d447c:	9301      	str	r3, [sp, #4]
   d447e:	bd08      	pop	{r3, pc}
   d4480:	0003023c 	.word	0x0003023c

000d4484 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d4484:	b508      	push	{r3, lr}
   d4486:	4b02      	ldr	r3, [pc, #8]	; (d4490 <HAL_I2C_Begin+0xc>)
   d4488:	681b      	ldr	r3, [r3, #0]
   d448a:	68db      	ldr	r3, [r3, #12]
   d448c:	9301      	str	r3, [sp, #4]
   d448e:	bd08      	pop	{r3, pc}
   d4490:	00030228 	.word	0x00030228

000d4494 <HAL_I2C_End>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
   d4494:	b508      	push	{r3, lr}
   d4496:	4b02      	ldr	r3, [pc, #8]	; (d44a0 <HAL_I2C_End+0xc>)
   d4498:	681b      	ldr	r3, [r3, #0]
   d449a:	691b      	ldr	r3, [r3, #16]
   d449c:	9301      	str	r3, [sp, #4]
   d449e:	bd08      	pop	{r3, pc}
   d44a0:	00030228 	.word	0x00030228

000d44a4 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d44a4:	b508      	push	{r3, lr}
   d44a6:	4b02      	ldr	r3, [pc, #8]	; (d44b0 <HAL_I2C_Write_Data+0xc>)
   d44a8:	681b      	ldr	r3, [r3, #0]
   d44aa:	6a1b      	ldr	r3, [r3, #32]
   d44ac:	9301      	str	r3, [sp, #4]
   d44ae:	bd08      	pop	{r3, pc}
   d44b0:	00030228 	.word	0x00030228

000d44b4 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d44b4:	b508      	push	{r3, lr}
   d44b6:	4b02      	ldr	r3, [pc, #8]	; (d44c0 <HAL_I2C_Available_Data+0xc>)
   d44b8:	681b      	ldr	r3, [r3, #0]
   d44ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d44bc:	9301      	str	r3, [sp, #4]
   d44be:	bd08      	pop	{r3, pc}
   d44c0:	00030228 	.word	0x00030228

000d44c4 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d44c4:	b508      	push	{r3, lr}
   d44c6:	4b02      	ldr	r3, [pc, #8]	; (d44d0 <HAL_I2C_Read_Data+0xc>)
   d44c8:	681b      	ldr	r3, [r3, #0]
   d44ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d44cc:	9301      	str	r3, [sp, #4]
   d44ce:	bd08      	pop	{r3, pc}
   d44d0:	00030228 	.word	0x00030228

000d44d4 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d44d4:	b508      	push	{r3, lr}
   d44d6:	4b02      	ldr	r3, [pc, #8]	; (d44e0 <HAL_I2C_Peek_Data+0xc>)
   d44d8:	681b      	ldr	r3, [r3, #0]
   d44da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d44dc:	9301      	str	r3, [sp, #4]
   d44de:	bd08      	pop	{r3, pc}
   d44e0:	00030228 	.word	0x00030228

000d44e4 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d44e4:	b508      	push	{r3, lr}
   d44e6:	4b02      	ldr	r3, [pc, #8]	; (d44f0 <HAL_I2C_Flush_Data+0xc>)
   d44e8:	681b      	ldr	r3, [r3, #0]
   d44ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d44ec:	9301      	str	r3, [sp, #4]
   d44ee:	bd08      	pop	{r3, pc}
   d44f0:	00030228 	.word	0x00030228

000d44f4 <HAL_I2C_Set_Callback_On_Receive>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
   d44f4:	b508      	push	{r3, lr}
   d44f6:	4b02      	ldr	r3, [pc, #8]	; (d4500 <HAL_I2C_Set_Callback_On_Receive+0xc>)
   d44f8:	681b      	ldr	r3, [r3, #0]
   d44fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d44fc:	9301      	str	r3, [sp, #4]
   d44fe:	bd08      	pop	{r3, pc}
   d4500:	00030228 	.word	0x00030228

000d4504 <HAL_I2C_Set_Callback_On_Request>:
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
   d4504:	b508      	push	{r3, lr}
   d4506:	4b02      	ldr	r3, [pc, #8]	; (d4510 <HAL_I2C_Set_Callback_On_Request+0xc>)
   d4508:	681b      	ldr	r3, [r3, #0]
   d450a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d450c:	9301      	str	r3, [sp, #4]
   d450e:	bd08      	pop	{r3, pc}
   d4510:	00030228 	.word	0x00030228

000d4514 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d4514:	b508      	push	{r3, lr}
   d4516:	4b02      	ldr	r3, [pc, #8]	; (d4520 <HAL_I2C_Init+0xc>)
   d4518:	681b      	ldr	r3, [r3, #0]
   d451a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d451c:	9301      	str	r3, [sp, #4]
   d451e:	bd08      	pop	{r3, pc}
   d4520:	00030228 	.word	0x00030228

000d4524 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4524:	b508      	push	{r3, lr}
   d4526:	4b02      	ldr	r3, [pc, #8]	; (d4530 <HAL_USB_USART_Init+0xc>)
   d4528:	681b      	ldr	r3, [r3, #0]
   d452a:	681b      	ldr	r3, [r3, #0]
   d452c:	9301      	str	r3, [sp, #4]
   d452e:	bd08      	pop	{r3, pc}
   d4530:	0003024c 	.word	0x0003024c

000d4534 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4534:	b508      	push	{r3, lr}
   d4536:	4b02      	ldr	r3, [pc, #8]	; (d4540 <HAL_USB_USART_Begin+0xc>)
   d4538:	681b      	ldr	r3, [r3, #0]
   d453a:	685b      	ldr	r3, [r3, #4]
   d453c:	9301      	str	r3, [sp, #4]
   d453e:	bd08      	pop	{r3, pc}
   d4540:	0003024c 	.word	0x0003024c

000d4544 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4544:	b508      	push	{r3, lr}
   d4546:	4b02      	ldr	r3, [pc, #8]	; (d4550 <HAL_USB_USART_Available_Data+0xc>)
   d4548:	681b      	ldr	r3, [r3, #0]
   d454a:	691b      	ldr	r3, [r3, #16]
   d454c:	9301      	str	r3, [sp, #4]
   d454e:	bd08      	pop	{r3, pc}
   d4550:	0003024c 	.word	0x0003024c

000d4554 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4554:	b508      	push	{r3, lr}
   d4556:	4b02      	ldr	r3, [pc, #8]	; (d4560 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4558:	681b      	ldr	r3, [r3, #0]
   d455a:	695b      	ldr	r3, [r3, #20]
   d455c:	9301      	str	r3, [sp, #4]
   d455e:	bd08      	pop	{r3, pc}
   d4560:	0003024c 	.word	0x0003024c

000d4564 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4564:	b508      	push	{r3, lr}
   d4566:	4b02      	ldr	r3, [pc, #8]	; (d4570 <HAL_USB_USART_Receive_Data+0xc>)
   d4568:	681b      	ldr	r3, [r3, #0]
   d456a:	699b      	ldr	r3, [r3, #24]
   d456c:	9301      	str	r3, [sp, #4]
   d456e:	bd08      	pop	{r3, pc}
   d4570:	0003024c 	.word	0x0003024c

000d4574 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4574:	b508      	push	{r3, lr}
   d4576:	4b02      	ldr	r3, [pc, #8]	; (d4580 <HAL_USB_USART_Send_Data+0xc>)
   d4578:	681b      	ldr	r3, [r3, #0]
   d457a:	69db      	ldr	r3, [r3, #28]
   d457c:	9301      	str	r3, [sp, #4]
   d457e:	bd08      	pop	{r3, pc}
   d4580:	0003024c 	.word	0x0003024c

000d4584 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4584:	b508      	push	{r3, lr}
   d4586:	4b02      	ldr	r3, [pc, #8]	; (d4590 <HAL_USB_USART_Flush_Data+0xc>)
   d4588:	681b      	ldr	r3, [r3, #0]
   d458a:	6a1b      	ldr	r3, [r3, #32]
   d458c:	9301      	str	r3, [sp, #4]
   d458e:	bd08      	pop	{r3, pc}
   d4590:	0003024c 	.word	0x0003024c

000d4594 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4594:	b508      	push	{r3, lr}
   d4596:	4b02      	ldr	r3, [pc, #8]	; (d45a0 <set_system_mode+0xc>)
   d4598:	681b      	ldr	r3, [r3, #0]
   d459a:	685b      	ldr	r3, [r3, #4]
   d459c:	9301      	str	r3, [sp, #4]
   d459e:	bd08      	pop	{r3, pc}
   d45a0:	00030220 	.word	0x00030220

000d45a4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d45a4:	b508      	push	{r3, lr}
   d45a6:	4b02      	ldr	r3, [pc, #8]	; (d45b0 <system_delay_ms+0xc>)
   d45a8:	681b      	ldr	r3, [r3, #0]
   d45aa:	695b      	ldr	r3, [r3, #20]
   d45ac:	9301      	str	r3, [sp, #4]
   d45ae:	bd08      	pop	{r3, pc}
   d45b0:	00030220 	.word	0x00030220

000d45b4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d45b4:	b508      	push	{r3, lr}
   d45b6:	4b03      	ldr	r3, [pc, #12]	; (d45c4 <system_ctrl_set_app_request_handler+0x10>)
   d45b8:	681b      	ldr	r3, [r3, #0]
   d45ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d45be:	9301      	str	r3, [sp, #4]
   d45c0:	bd08      	pop	{r3, pc}
   d45c2:	0000      	.short	0x0000
   d45c4:	00030220 	.word	0x00030220

000d45c8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d45c8:	b508      	push	{r3, lr}
   d45ca:	4b03      	ldr	r3, [pc, #12]	; (d45d8 <system_ctrl_set_result+0x10>)
   d45cc:	681b      	ldr	r3, [r3, #0]
   d45ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d45d2:	9301      	str	r3, [sp, #4]
   d45d4:	bd08      	pop	{r3, pc}
   d45d6:	0000      	.short	0x0000
   d45d8:	00030220 	.word	0x00030220

000d45dc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d45dc:	b508      	push	{r3, lr}
   d45de:	4b02      	ldr	r3, [pc, #8]	; (d45e8 <network_connect+0xc>)
   d45e0:	681b      	ldr	r3, [r3, #0]
   d45e2:	685b      	ldr	r3, [r3, #4]
   d45e4:	9301      	str	r3, [sp, #4]
   d45e6:	bd08      	pop	{r3, pc}
   d45e8:	00030240 	.word	0x00030240

000d45ec <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d45ec:	b508      	push	{r3, lr}
   d45ee:	4b02      	ldr	r3, [pc, #8]	; (d45f8 <network_connecting+0xc>)
   d45f0:	681b      	ldr	r3, [r3, #0]
   d45f2:	689b      	ldr	r3, [r3, #8]
   d45f4:	9301      	str	r3, [sp, #4]
   d45f6:	bd08      	pop	{r3, pc}
   d45f8:	00030240 	.word	0x00030240

000d45fc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d45fc:	b508      	push	{r3, lr}
   d45fe:	4b02      	ldr	r3, [pc, #8]	; (d4608 <network_disconnect+0xc>)
   d4600:	681b      	ldr	r3, [r3, #0]
   d4602:	68db      	ldr	r3, [r3, #12]
   d4604:	9301      	str	r3, [sp, #4]
   d4606:	bd08      	pop	{r3, pc}
   d4608:	00030240 	.word	0x00030240

000d460c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d460c:	b508      	push	{r3, lr}
   d460e:	4b02      	ldr	r3, [pc, #8]	; (d4618 <network_ready+0xc>)
   d4610:	681b      	ldr	r3, [r3, #0]
   d4612:	691b      	ldr	r3, [r3, #16]
   d4614:	9301      	str	r3, [sp, #4]
   d4616:	bd08      	pop	{r3, pc}
   d4618:	00030240 	.word	0x00030240

000d461c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d461c:	b508      	push	{r3, lr}
   d461e:	4b02      	ldr	r3, [pc, #8]	; (d4628 <network_on+0xc>)
   d4620:	681b      	ldr	r3, [r3, #0]
   d4622:	695b      	ldr	r3, [r3, #20]
   d4624:	9301      	str	r3, [sp, #4]
   d4626:	bd08      	pop	{r3, pc}
   d4628:	00030240 	.word	0x00030240

000d462c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d462c:	b508      	push	{r3, lr}
   d462e:	4b02      	ldr	r3, [pc, #8]	; (d4638 <network_off+0xc>)
   d4630:	681b      	ldr	r3, [r3, #0]
   d4632:	699b      	ldr	r3, [r3, #24]
   d4634:	9301      	str	r3, [sp, #4]
   d4636:	bd08      	pop	{r3, pc}
   d4638:	00030240 	.word	0x00030240

000d463c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d463c:	b508      	push	{r3, lr}
   d463e:	4b02      	ldr	r3, [pc, #8]	; (d4648 <network_listen+0xc>)
   d4640:	681b      	ldr	r3, [r3, #0]
   d4642:	69db      	ldr	r3, [r3, #28]
   d4644:	9301      	str	r3, [sp, #4]
   d4646:	bd08      	pop	{r3, pc}
   d4648:	00030240 	.word	0x00030240

000d464c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d464c:	b508      	push	{r3, lr}
   d464e:	4b02      	ldr	r3, [pc, #8]	; (d4658 <network_listening+0xc>)
   d4650:	681b      	ldr	r3, [r3, #0]
   d4652:	6a1b      	ldr	r3, [r3, #32]
   d4654:	9301      	str	r3, [sp, #4]
   d4656:	bd08      	pop	{r3, pc}
   d4658:	00030240 	.word	0x00030240

000d465c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d465c:	b508      	push	{r3, lr}
   d465e:	4b02      	ldr	r3, [pc, #8]	; (d4668 <network_set_listen_timeout+0xc>)
   d4660:	681b      	ldr	r3, [r3, #0]
   d4662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4664:	9301      	str	r3, [sp, #4]
   d4666:	bd08      	pop	{r3, pc}
   d4668:	00030240 	.word	0x00030240

000d466c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d466c:	b508      	push	{r3, lr}
   d466e:	4b02      	ldr	r3, [pc, #8]	; (d4678 <network_get_listen_timeout+0xc>)
   d4670:	681b      	ldr	r3, [r3, #0]
   d4672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4674:	9301      	str	r3, [sp, #4]
   d4676:	bd08      	pop	{r3, pc}
   d4678:	00030240 	.word	0x00030240

000d467c <spark_deviceID>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d467c:	b508      	push	{r3, lr}
   d467e:	4b02      	ldr	r3, [pc, #8]	; (d4688 <spark_deviceID+0xc>)
   d4680:	681b      	ldr	r3, [r3, #0]
   d4682:	69db      	ldr	r3, [r3, #28]
   d4684:	9301      	str	r3, [sp, #4]
   d4686:	bd08      	pop	{r3, pc}
   d4688:	00030244 	.word	0x00030244

000d468c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d468c:	b508      	push	{r3, lr}
   d468e:	4b02      	ldr	r3, [pc, #8]	; (d4698 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4690:	681b      	ldr	r3, [r3, #0]
   d4692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4694:	9301      	str	r3, [sp, #4]
   d4696:	bd08      	pop	{r3, pc}
   d4698:	00030244 	.word	0x00030244

000d469c <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d469c:	b508      	push	{r3, lr}
   d469e:	4b02      	ldr	r3, [pc, #8]	; (d46a8 <malloc+0xc>)
   d46a0:	681b      	ldr	r3, [r3, #0]
   d46a2:	681b      	ldr	r3, [r3, #0]
   d46a4:	9301      	str	r3, [sp, #4]
   d46a6:	bd08      	pop	{r3, pc}
   d46a8:	0003021c 	.word	0x0003021c

000d46ac <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d46ac:	b508      	push	{r3, lr}
   d46ae:	4b02      	ldr	r3, [pc, #8]	; (d46b8 <free+0xc>)
   d46b0:	681b      	ldr	r3, [r3, #0]
   d46b2:	685b      	ldr	r3, [r3, #4]
   d46b4:	9301      	str	r3, [sp, #4]
   d46b6:	bd08      	pop	{r3, pc}
   d46b8:	0003021c 	.word	0x0003021c

000d46bc <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d46bc:	2200      	movs	r2, #0
   d46be:	4611      	mov	r1, r2
   d46c0:	6840      	ldr	r0, [r0, #4]
   d46c2:	f7ff bfc3 	b.w	d464c <network_listening>

000d46c6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d46c6:	2200      	movs	r2, #0
   d46c8:	4611      	mov	r1, r2
   d46ca:	6840      	ldr	r0, [r0, #4]
   d46cc:	f7ff bfce 	b.w	d466c <network_get_listen_timeout>

000d46d0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d46d0:	2200      	movs	r2, #0
   d46d2:	6840      	ldr	r0, [r0, #4]
   d46d4:	f7ff bfc2 	b.w	d465c <network_set_listen_timeout>

000d46d8 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d46d8:	2200      	movs	r2, #0
   d46da:	f081 0101 	eor.w	r1, r1, #1
   d46de:	6840      	ldr	r0, [r0, #4]
   d46e0:	f7ff bfac 	b.w	d463c <network_listen>

000d46e4 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d46e4:	2300      	movs	r3, #0
   d46e6:	461a      	mov	r2, r3
   d46e8:	4619      	mov	r1, r3
   d46ea:	6840      	ldr	r0, [r0, #4]
   d46ec:	f7ff bf9e 	b.w	d462c <network_off>

000d46f0 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d46f0:	2300      	movs	r3, #0
   d46f2:	461a      	mov	r2, r3
   d46f4:	4619      	mov	r1, r3
   d46f6:	6840      	ldr	r0, [r0, #4]
   d46f8:	f7ff bf90 	b.w	d461c <network_on>

000d46fc <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d46fc:	2200      	movs	r2, #0
   d46fe:	4611      	mov	r1, r2
   d4700:	6840      	ldr	r0, [r0, #4]
   d4702:	f7ff bf83 	b.w	d460c <network_ready>

000d4706 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4706:	2200      	movs	r2, #0
   d4708:	4611      	mov	r1, r2
   d470a:	6840      	ldr	r0, [r0, #4]
   d470c:	f7ff bf6e 	b.w	d45ec <network_connecting>

000d4710 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4710:	2200      	movs	r2, #0
   d4712:	2102      	movs	r1, #2
   d4714:	6840      	ldr	r0, [r0, #4]
   d4716:	f7ff bf71 	b.w	d45fc <network_disconnect>

000d471a <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d471a:	2300      	movs	r3, #0
   d471c:	461a      	mov	r2, r3
   d471e:	6840      	ldr	r0, [r0, #4]
   d4720:	f7ff bf5c 	b.w	d45dc <network_connect>

000d4724 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4724:	4b02      	ldr	r3, [pc, #8]	; (d4730 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4726:	2203      	movs	r2, #3
   d4728:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d472a:	4a02      	ldr	r2, [pc, #8]	; (d4734 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d472c:	601a      	str	r2, [r3, #0]
   d472e:	4770      	bx	lr
   d4730:	2003e3dc 	.word	0x2003e3dc
   d4734:	000d55f4 	.word	0x000d55f4

000d4738 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4738:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d473a:	4c09      	ldr	r4, [pc, #36]	; (d4760 <_GLOBAL__sub_I_System+0x28>)
   d473c:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d473e:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4742:	6020      	str	r0, [r4, #0]
   d4744:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4746:	71a0      	strb	r0, [r4, #6]
   d4748:	8120      	strh	r0, [r4, #8]
   d474a:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d474c:	f7ff ff22 	bl	d4594 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d4750:	4620      	mov	r0, r4
   d4752:	4a04      	ldr	r2, [pc, #16]	; (d4764 <_GLOBAL__sub_I_System+0x2c>)
   d4754:	4904      	ldr	r1, [pc, #16]	; (d4768 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4756:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d475a:	f000 bd0d 	b.w	d5178 <__aeabi_atexit>
   d475e:	bf00      	nop
   d4760:	2003e3e4 	.word	0x2003e3e4
   d4764:	2003e3ac 	.word	0x2003e3ac
   d4768:	000d40af 	.word	0x000d40af

000d476c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d476c:	b510      	push	{r4, lr}
   d476e:	4604      	mov	r4, r0
{
	free(buffer);
   d4770:	6800      	ldr	r0, [r0, #0]
   d4772:	f7ff ff9b 	bl	d46ac <free>
}
   d4776:	4620      	mov	r0, r4
   d4778:	bd10      	pop	{r4, pc}

000d477a <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
   d477a:	6883      	ldr	r3, [r0, #8]
   d477c:	428b      	cmp	r3, r1
   d477e:	d903      	bls.n	d4788 <_ZNK6StringixEj+0xe>
   d4780:	6800      	ldr	r0, [r0, #0]
   d4782:	b110      	cbz	r0, d478a <_ZNK6StringixEj+0x10>
	return buffer[index];
   d4784:	5c40      	ldrb	r0, [r0, r1]
   d4786:	4770      	bx	lr
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
   d4788:	2000      	movs	r0, #0
	return buffer[index];
}
   d478a:	4770      	bx	lr

000d478c <_ZNK6String6charAtEj>:
/*  Character Access                         */
/*********************************************/

char String::charAt(unsigned int loc) const
{
	return operator[](loc);
   d478c:	f7ff bff5 	b.w	d477a <_ZNK6StringixEj>

000d4790 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4790:	b510      	push	{r4, lr}
   d4792:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4794:	6800      	ldr	r0, [r0, #0]
   d4796:	b108      	cbz	r0, d479c <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4798:	f7ff fe2c 	bl	d43f4 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d479c:	4620      	mov	r0, r4
   d479e:	bd10      	pop	{r4, pc}

000d47a0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d47a0:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d47a2:	4c06      	ldr	r4, [pc, #24]	; (d47bc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d47a4:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d47a6:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d47a8:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d47aa:	f7ff fe1b 	bl	d43e4 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d47ae:	4620      	mov	r0, r4
   d47b0:	4a03      	ldr	r2, [pc, #12]	; (d47c0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d47b2:	4904      	ldr	r1, [pc, #16]	; (d47c4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d47b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d47b8:	f000 bcde 	b.w	d5178 <__aeabi_atexit>
   d47bc:	2003e3f0 	.word	0x2003e3f0
   d47c0:	2003e3ac 	.word	0x2003e3ac
   d47c4:	000d4791 	.word	0x000d4791

000d47c8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d47c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d47ca:	4606      	mov	r6, r0
   d47cc:	460d      	mov	r5, r1
   d47ce:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d47d0:	2400      	movs	r4, #0
  while (size--) {
   d47d2:	42bd      	cmp	r5, r7
   d47d4:	d00c      	beq.n	d47f0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d47d6:	6833      	ldr	r3, [r6, #0]
   d47d8:	f815 1b01 	ldrb.w	r1, [r5], #1
   d47dc:	689b      	ldr	r3, [r3, #8]
   d47de:	4630      	mov	r0, r6
   d47e0:	4798      	blx	r3
     if (chunk>=0)
   d47e2:	2800      	cmp	r0, #0
   d47e4:	db01      	blt.n	d47ea <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d47e6:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d47e8:	e7f3      	b.n	d47d2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d47ea:	2c00      	cmp	r4, #0
   d47ec:	bf08      	it	eq
   d47ee:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d47f0:	4620      	mov	r0, r4
   d47f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d47f4 <_ZN5Print5printEPKc>:
   d47f4:	b508      	push	{r3, lr}
   d47f6:	f7ff fd15 	bl	d4224 <_ZN5Print5writeEPKc>
   d47fa:	bd08      	pop	{r3, pc}

000d47fc <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d47fc:	6803      	ldr	r3, [r0, #0]
   d47fe:	689b      	ldr	r3, [r3, #8]
   d4800:	4718      	bx	r3

000d4802 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4802:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d4804:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4806:	4605      	mov	r5, r0
  size_t n = print('\r');
   d4808:	f7ff fff8 	bl	d47fc <_ZN5Print5printEc>
  n += print('\n');
   d480c:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d480e:	4604      	mov	r4, r0
  n += print('\n');
   d4810:	4628      	mov	r0, r5
   d4812:	f7ff fff3 	bl	d47fc <_ZN5Print5printEc>
  return n;
}
   d4816:	4420      	add	r0, r4
   d4818:	bd38      	pop	{r3, r4, r5, pc}

000d481a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d481a:	b538      	push	{r3, r4, r5, lr}
   d481c:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d481e:	f7ff fd01 	bl	d4224 <_ZN5Print5writeEPKc>
   d4822:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d4824:	4628      	mov	r0, r5
   d4826:	f7ff ffec 	bl	d4802 <_ZN5Print7printlnEv>
  return n;
}
   d482a:	4420      	add	r0, r4
   d482c:	bd38      	pop	{r3, r4, r5, pc}

000d482e <_ZN5Print7printlnEc>:

size_t Print::println(char c)
{
   d482e:	b538      	push	{r3, r4, r5, lr}
   d4830:	4605      	mov	r5, r0
  size_t n = print(c);
   d4832:	f7ff ffe3 	bl	d47fc <_ZN5Print5printEc>
   d4836:	4604      	mov	r4, r0
  n += println();
   d4838:	4628      	mov	r0, r5
   d483a:	f7ff ffe2 	bl	d4802 <_ZN5Print7printlnEv>
  return n;
}
   d483e:	4420      	add	r0, r4
   d4840:	bd38      	pop	{r3, r4, r5, pc}

000d4842 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4842:	b530      	push	{r4, r5, lr}
   d4844:	b08b      	sub	sp, #44	; 0x2c
   d4846:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4848:	2100      	movs	r1, #0
   d484a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d484e:	2a01      	cmp	r2, #1
   d4850:	bf98      	it	ls
   d4852:	220a      	movls	r2, #10
   d4854:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d4858:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d485c:	fb05 3312 	mls	r3, r5, r2, r3
   d4860:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4864:	2b09      	cmp	r3, #9
   d4866:	bf94      	ite	ls
   d4868:	3330      	addls	r3, #48	; 0x30
   d486a:	3337      	addhi	r3, #55	; 0x37
   d486c:	b2db      	uxtb	r3, r3
   d486e:	4621      	mov	r1, r4
   d4870:	f804 3901 	strb.w	r3, [r4], #-1
   d4874:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d4876:	2d00      	cmp	r5, #0
   d4878:	d1ee      	bne.n	d4858 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d487a:	f7ff fcd3 	bl	d4224 <_ZN5Print5writeEPKc>
}
   d487e:	b00b      	add	sp, #44	; 0x2c
   d4880:	bd30      	pop	{r4, r5, pc}
	...

000d4884 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4884:	4b01      	ldr	r3, [pc, #4]	; (d488c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4886:	4a02      	ldr	r2, [pc, #8]	; (d4890 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4888:	601a      	str	r2, [r3, #0]
   d488a:	4770      	bx	lr
   d488c:	2003e3f4 	.word	0x2003e3f4
   d4890:	000d5693 	.word	0x000d5693

000d4894 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d4894:	4b02      	ldr	r3, [pc, #8]	; (d48a0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d4896:	681a      	ldr	r2, [r3, #0]
   d4898:	4b02      	ldr	r3, [pc, #8]	; (d48a4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d489a:	601a      	str	r2, [r3, #0]
   d489c:	4770      	bx	lr
   d489e:	bf00      	nop
   d48a0:	2003e344 	.word	0x2003e344
   d48a4:	2003e3f8 	.word	0x2003e3f8

000d48a8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d48a8:	2100      	movs	r1, #0
   d48aa:	f7ff be7b 	b.w	d45a4 <system_delay_ms>

000d48ae <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d48ae:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d48b0:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d48b2:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d48b4:	b113      	cbz	r3, d48bc <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d48b6:	2203      	movs	r2, #3
   d48b8:	4601      	mov	r1, r0
   d48ba:	4798      	blx	r3
    }
   d48bc:	4620      	mov	r0, r4
   d48be:	bd10      	pop	{r4, pc}

000d48c0 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d48c0:	b510      	push	{r4, lr}
   d48c2:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d48c4:	f7ff fff3 	bl	d48ae <_ZNSt14_Function_baseD1Ev>
   d48c8:	4620      	mov	r0, r4
   d48ca:	bd10      	pop	{r4, pc}

000d48cc <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d48cc:	4803      	ldr	r0, [pc, #12]	; (d48dc <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d48ce:	4a04      	ldr	r2, [pc, #16]	; (d48e0 <_GLOBAL__sub_I_RGB+0x14>)
   d48d0:	4904      	ldr	r1, [pc, #16]	; (d48e4 <_GLOBAL__sub_I_RGB+0x18>)
   d48d2:	2300      	movs	r3, #0
   d48d4:	6083      	str	r3, [r0, #8]
   d48d6:	f000 bc4f 	b.w	d5178 <__aeabi_atexit>
   d48da:	bf00      	nop
   d48dc:	2003e3fc 	.word	0x2003e3fc
   d48e0:	2003e3ac 	.word	0x2003e3ac
   d48e4:	000d48c1 	.word	0x000d48c1

000d48e8 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d48e8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d48ea:	4b0c      	ldr	r3, [pc, #48]	; (d491c <serialEventRun+0x34>)
   d48ec:	b133      	cbz	r3, d48fc <serialEventRun+0x14>
   d48ee:	f000 f957 	bl	d4ba0 <_Z16_fetch_usbserialv>
   d48f2:	6803      	ldr	r3, [r0, #0]
   d48f4:	691b      	ldr	r3, [r3, #16]
   d48f6:	4798      	blx	r3
   d48f8:	2800      	cmp	r0, #0
   d48fa:	dc09      	bgt.n	d4910 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d48fc:	4b08      	ldr	r3, [pc, #32]	; (d4920 <serialEventRun+0x38>)
   d48fe:	b163      	cbz	r3, d491a <serialEventRun+0x32>
   d4900:	f000 f9cc 	bl	d4c9c <_Z22__fetch_global_Serial1v>
   d4904:	6803      	ldr	r3, [r0, #0]
   d4906:	691b      	ldr	r3, [r3, #16]
   d4908:	4798      	blx	r3
   d490a:	2800      	cmp	r0, #0
   d490c:	dc03      	bgt.n	d4916 <serialEventRun+0x2e>
   d490e:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d4910:	f3af 8000 	nop.w
   d4914:	e7f2      	b.n	d48fc <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d4916:	f3af 8000 	nop.w
   d491a:	bd08      	pop	{r3, pc}
	...

000d4924 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d4924:	b508      	push	{r3, lr}
	serialEventRun();
   d4926:	f7ff ffdf 	bl	d48e8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d492a:	f7ff fd3b 	bl	d43a4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d492e:	4b01      	ldr	r3, [pc, #4]	; (d4934 <_post_loop+0x10>)
   d4930:	6018      	str	r0, [r3, #0]
   d4932:	bd08      	pop	{r3, pc}
   d4934:	2003e730 	.word	0x2003e730

000d4938 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d4938:	4802      	ldr	r0, [pc, #8]	; (d4944 <_Z33system_initialize_user_backup_ramv+0xc>)
   d493a:	4a03      	ldr	r2, [pc, #12]	; (d4948 <_Z33system_initialize_user_backup_ramv+0x10>)
   d493c:	4903      	ldr	r1, [pc, #12]	; (d494c <_Z33system_initialize_user_backup_ramv+0x14>)
   d493e:	1a12      	subs	r2, r2, r0
   d4940:	f000 bd92 	b.w	d5468 <memcpy>
   d4944:	2003f400 	.word	0x2003f400
   d4948:	2003f404 	.word	0x2003f404
   d494c:	000d5910 	.word	0x000d5910

000d4950 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d4950:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4952:	2300      	movs	r3, #0
   d4954:	9300      	str	r3, [sp, #0]
   d4956:	461a      	mov	r2, r3
   d4958:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d495c:	f7ff fe34 	bl	d45c8 <system_ctrl_set_result>
}
   d4960:	b003      	add	sp, #12
   d4962:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4968 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d4968:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d496a:	8843      	ldrh	r3, [r0, #2]
   d496c:	2b0a      	cmp	r3, #10
   d496e:	d008      	beq.n	d4982 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d4970:	2b50      	cmp	r3, #80	; 0x50
   d4972:	d109      	bne.n	d4988 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d4974:	4b09      	ldr	r3, [pc, #36]	; (d499c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d4976:	681b      	ldr	r3, [r3, #0]
   d4978:	b13b      	cbz	r3, d498a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d497a:	b003      	add	sp, #12
   d497c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d4980:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d4982:	f7ff ffe5 	bl	d4950 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d4986:	e006      	b.n	d4996 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4988:	2300      	movs	r3, #0
   d498a:	9300      	str	r3, [sp, #0]
   d498c:	461a      	mov	r2, r3
   d498e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4992:	f7ff fe19 	bl	d45c8 <system_ctrl_set_result>
        break;
    }
}
   d4996:	b003      	add	sp, #12
   d4998:	f85d fb04 	ldr.w	pc, [sp], #4
   d499c:	2003e40c 	.word	0x2003e40c

000d49a0 <module_user_init_hook>:

void module_user_init_hook()
{
   d49a0:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d49a2:	4c10      	ldr	r4, [pc, #64]	; (d49e4 <module_user_init_hook+0x44>)
   d49a4:	4d10      	ldr	r5, [pc, #64]	; (d49e8 <module_user_init_hook+0x48>)
   d49a6:	6823      	ldr	r3, [r4, #0]
   d49a8:	42ab      	cmp	r3, r5
   d49aa:	4b10      	ldr	r3, [pc, #64]	; (d49ec <module_user_init_hook+0x4c>)
   d49ac:	bf0c      	ite	eq
   d49ae:	2201      	moveq	r2, #1
   d49b0:	2200      	movne	r2, #0
   d49b2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d49b4:	d002      	beq.n	d49bc <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d49b6:	f7ff ffbf 	bl	d4938 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d49ba:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d49bc:	f7ff fcea 	bl	d4394 <HAL_RNG_GetRandomNumber>
   d49c0:	4604      	mov	r4, r0
    srand(seed);
   d49c2:	f000 fd65 	bl	d5490 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d49c6:	4b0a      	ldr	r3, [pc, #40]	; (d49f0 <module_user_init_hook+0x50>)
   d49c8:	b113      	cbz	r3, d49d0 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d49ca:	4620      	mov	r0, r4
   d49cc:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d49d0:	2100      	movs	r1, #0
   d49d2:	4807      	ldr	r0, [pc, #28]	; (d49f0 <module_user_init_hook+0x50>)
   d49d4:	f7ff fe5a 	bl	d468c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d49d8:	2100      	movs	r1, #0
   d49da:	4806      	ldr	r0, [pc, #24]	; (d49f4 <module_user_init_hook+0x54>)
}
   d49dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d49e0:	f7ff bde8 	b.w	d45b4 <system_ctrl_set_app_request_handler>
   d49e4:	2003f400 	.word	0x2003f400
   d49e8:	9a271c1e 	.word	0x9a271c1e
   d49ec:	2003e410 	.word	0x2003e410
   d49f0:	00000000 	.word	0x00000000
   d49f4:	000d4969 	.word	0x000d4969

000d49f8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d49f8:	4770      	bx	lr

000d49fa <_ZN9IPAddressD0Ev>:
   d49fa:	b510      	push	{r4, lr}
   d49fc:	2118      	movs	r1, #24
   d49fe:	4604      	mov	r4, r0
   d4a00:	f000 fbc8 	bl	d5194 <_ZdlPvj>
   d4a04:	4620      	mov	r0, r4
   d4a06:	bd10      	pop	{r4, pc}

000d4a08 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4a08:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4a0a:	7d03      	ldrb	r3, [r0, #20]
   d4a0c:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4a0e:	b08d      	sub	sp, #52	; 0x34
   d4a10:	460e      	mov	r6, r1
   d4a12:	f100 0704 	add.w	r7, r0, #4
   d4a16:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4a1a:	d002      	beq.n	d4a22 <_ZNK9IPAddress7printToER5Print+0x1a>
   d4a1c:	f100 0508 	add.w	r5, r0, #8
   d4a20:	e018      	b.n	d4a54 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4a22:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4a24:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4a26:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4a2a:	232f      	movs	r3, #47	; 0x2f
   d4a2c:	462a      	mov	r2, r5
   d4a2e:	200a      	movs	r0, #10
   d4a30:	f7ff fce8 	bl	d4404 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4a34:	4628      	mov	r0, r5
   d4a36:	f000 fd8d 	bl	d5554 <strlen>
   d4a3a:	6833      	ldr	r3, [r6, #0]
   d4a3c:	4602      	mov	r2, r0
   d4a3e:	68db      	ldr	r3, [r3, #12]
   d4a40:	4629      	mov	r1, r5
   d4a42:	4630      	mov	r0, r6
   d4a44:	4798      	blx	r3
   d4a46:	e00f      	b.n	d4a68 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d4a48:	b124      	cbz	r4, d4a54 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d4a4a:	212e      	movs	r1, #46	; 0x2e
   d4a4c:	4630      	mov	r0, r6
   d4a4e:	f7ff fed5 	bl	d47fc <_ZN5Print5printEc>
   d4a52:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4a54:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4a58:	220a      	movs	r2, #10
   d4a5a:	4630      	mov	r0, r6
   d4a5c:	f7ff fef1 	bl	d4842 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4a60:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4a62:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4a64:	d1f0      	bne.n	d4a48 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4a66:	4620      	mov	r0, r4
    }
    return n;
}
   d4a68:	b00d      	add	sp, #52	; 0x34
   d4a6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4a6c <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d4a6c:	b510      	push	{r4, lr}
   d4a6e:	4b05      	ldr	r3, [pc, #20]	; (d4a84 <_ZN9IPAddressC1Ev+0x18>)
   d4a70:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d4a72:	2211      	movs	r2, #17
   d4a74:	f840 3b04 	str.w	r3, [r0], #4
   d4a78:	2100      	movs	r1, #0
   d4a7a:	f000 fd00 	bl	d547e <memset>
{
    clear();
}
   d4a7e:	4620      	mov	r0, r4
   d4a80:	bd10      	pop	{r4, pc}
   d4a82:	bf00      	nop
   d4a84:	000d5734 	.word	0x000d5734

000d4a88 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d4a88:	4603      	mov	r3, r0
   d4a8a:	4a07      	ldr	r2, [pc, #28]	; (d4aa8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d4a8c:	b510      	push	{r4, lr}
   d4a8e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d4a92:	f101 0210 	add.w	r2, r1, #16
   d4a96:	f851 4b04 	ldr.w	r4, [r1], #4
   d4a9a:	f843 4b04 	str.w	r4, [r3], #4
   d4a9e:	4291      	cmp	r1, r2
   d4aa0:	d1f9      	bne.n	d4a96 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d4aa2:	780a      	ldrb	r2, [r1, #0]
   d4aa4:	701a      	strb	r2, [r3, #0]
}
   d4aa6:	bd10      	pop	{r4, pc}
   d4aa8:	000d5734 	.word	0x000d5734

000d4aac <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d4aac:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d4aae:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d4ab2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d4ab6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d4aba:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d4abe:	2304      	movs	r3, #4
   d4ac0:	6041      	str	r1, [r0, #4]
   d4ac2:	7503      	strb	r3, [r0, #20]
   d4ac4:	bd10      	pop	{r4, pc}

000d4ac6 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d4ac6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d4ac8:	780d      	ldrb	r5, [r1, #0]
   d4aca:	788b      	ldrb	r3, [r1, #2]
   d4acc:	784a      	ldrb	r2, [r1, #1]
   d4ace:	78c9      	ldrb	r1, [r1, #3]
   d4ad0:	9100      	str	r1, [sp, #0]
   d4ad2:	4629      	mov	r1, r5
   d4ad4:	f7ff ffea 	bl	d4aac <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d4ad8:	b003      	add	sp, #12
   d4ada:	bd30      	pop	{r4, r5, pc}

000d4adc <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4adc:	7441      	strb	r1, [r0, #17]
   d4ade:	4770      	bx	lr

000d4ae0 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d4ae0:	4770      	bx	lr

000d4ae2 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d4ae2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d4ae4:	2100      	movs	r1, #0
   d4ae6:	7c00      	ldrb	r0, [r0, #16]
   d4ae8:	f7ff fd3c 	bl	d4564 <HAL_USB_USART_Receive_Data>
}
   d4aec:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4af0:	bf28      	it	cs
   d4af2:	f04f 30ff 	movcs.w	r0, #4294967295
   d4af6:	bd08      	pop	{r3, pc}

000d4af8 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d4af8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d4afa:	2101      	movs	r1, #1
   d4afc:	7c00      	ldrb	r0, [r0, #16]
   d4afe:	f7ff fd31 	bl	d4564 <HAL_USB_USART_Receive_Data>
}
   d4b02:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4b06:	bf28      	it	cs
   d4b08:	f04f 30ff 	movcs.w	r0, #4294967295
   d4b0c:	bd08      	pop	{r3, pc}

000d4b0e <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d4b0e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d4b10:	7c00      	ldrb	r0, [r0, #16]
   d4b12:	f7ff fd1f 	bl	d4554 <HAL_USB_USART_Available_Data_For_Write>
}
   d4b16:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4b1a:	bd08      	pop	{r3, pc}

000d4b1c <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d4b1c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d4b1e:	7c00      	ldrb	r0, [r0, #16]
   d4b20:	f7ff fd10 	bl	d4544 <HAL_USB_USART_Available_Data>
}
   d4b24:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4b28:	bd08      	pop	{r3, pc}

000d4b2a <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d4b2a:	7c00      	ldrb	r0, [r0, #16]
   d4b2c:	f7ff bd2a 	b.w	d4584 <HAL_USB_USART_Flush_Data>

000d4b30 <_ZN9USBSerialD0Ev>:
   d4b30:	b510      	push	{r4, lr}
   d4b32:	2114      	movs	r1, #20
   d4b34:	4604      	mov	r4, r0
   d4b36:	f000 fb2d 	bl	d5194 <_ZdlPvj>
   d4b3a:	4620      	mov	r0, r4
   d4b3c:	bd10      	pop	{r4, pc}

000d4b3e <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d4b3e:	b538      	push	{r3, r4, r5, lr}
   d4b40:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4b42:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d4b44:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4b46:	f7ff fd05 	bl	d4554 <HAL_USB_USART_Available_Data_For_Write>
   d4b4a:	2800      	cmp	r0, #0
   d4b4c:	dc01      	bgt.n	d4b52 <_ZN9USBSerial5writeEh+0x14>
   d4b4e:	7c60      	ldrb	r0, [r4, #17]
   d4b50:	b128      	cbz	r0, d4b5e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d4b52:	4629      	mov	r1, r5
   d4b54:	7c20      	ldrb	r0, [r4, #16]
   d4b56:	f7ff fd0d 	bl	d4574 <HAL_USB_USART_Send_Data>
   d4b5a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d4b5e:	bd38      	pop	{r3, r4, r5, pc}

000d4b60 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4b60:	b510      	push	{r4, lr}
   d4b62:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4b64:	2300      	movs	r3, #0
   d4b66:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4b68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4b6c:	60a3      	str	r3, [r4, #8]
   d4b6e:	4b05      	ldr	r3, [pc, #20]	; (d4b84 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d4b70:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d4b72:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4b74:	4608      	mov	r0, r1
{
  _serial = serial;
   d4b76:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d4b78:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d4b7a:	4611      	mov	r1, r2
   d4b7c:	f7ff fcd2 	bl	d4524 <HAL_USB_USART_Init>
}
   d4b80:	4620      	mov	r0, r4
   d4b82:	bd10      	pop	{r4, pc}
   d4b84:	000d5748 	.word	0x000d5748

000d4b88 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d4b88:	2200      	movs	r2, #0
   d4b8a:	7c00      	ldrb	r0, [r0, #16]
   d4b8c:	f7ff bcd2 	b.w	d4534 <HAL_USB_USART_Begin>

000d4b90 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4b90:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d4b92:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4b94:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d4b96:	2100      	movs	r1, #0
   d4b98:	f000 fc71 	bl	d547e <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d4b9c:	4620      	mov	r0, r4
   d4b9e:	bd10      	pop	{r4, pc}

000d4ba0 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d4ba0:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4ba2:	4d0e      	ldr	r5, [pc, #56]	; (d4bdc <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d4ba4:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d4ba6:	a801      	add	r0, sp, #4
   d4ba8:	f7ff fff2 	bl	d4b90 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4bac:	6829      	ldr	r1, [r5, #0]
   d4bae:	f011 0401 	ands.w	r4, r1, #1
   d4bb2:	d110      	bne.n	d4bd6 <_Z16_fetch_usbserialv+0x36>
   d4bb4:	4628      	mov	r0, r5
   d4bb6:	f7ff fa72 	bl	d409e <__cxa_guard_acquire>
   d4bba:	b160      	cbz	r0, d4bd6 <_Z16_fetch_usbserialv+0x36>
   d4bbc:	aa01      	add	r2, sp, #4
   d4bbe:	4621      	mov	r1, r4
   d4bc0:	4807      	ldr	r0, [pc, #28]	; (d4be0 <_Z16_fetch_usbserialv+0x40>)
   d4bc2:	f7ff ffcd 	bl	d4b60 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d4bc6:	4628      	mov	r0, r5
   d4bc8:	f7ff fa6e 	bl	d40a8 <__cxa_guard_release>
   d4bcc:	4a05      	ldr	r2, [pc, #20]	; (d4be4 <_Z16_fetch_usbserialv+0x44>)
   d4bce:	4906      	ldr	r1, [pc, #24]	; (d4be8 <_Z16_fetch_usbserialv+0x48>)
   d4bd0:	4803      	ldr	r0, [pc, #12]	; (d4be0 <_Z16_fetch_usbserialv+0x40>)
   d4bd2:	f000 fad1 	bl	d5178 <__aeabi_atexit>
	return _usbserial;
}
   d4bd6:	4802      	ldr	r0, [pc, #8]	; (d4be0 <_Z16_fetch_usbserialv+0x40>)
   d4bd8:	b007      	add	sp, #28
   d4bda:	bd30      	pop	{r4, r5, pc}
   d4bdc:	2003e414 	.word	0x2003e414
   d4be0:	2003e418 	.word	0x2003e418
   d4be4:	2003e3ac 	.word	0x2003e3ac
   d4be8:	000d4ae1 	.word	0x000d4ae1

000d4bec <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d4bec:	4770      	bx	lr

000d4bee <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4bee:	7441      	strb	r1, [r0, #17]
   d4bf0:	4770      	bx	lr

000d4bf2 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d4bf2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d4bf4:	7c00      	ldrb	r0, [r0, #16]
   d4bf6:	f7ff fc3d 	bl	d4474 <HAL_USART_Available_Data_For_Write>
}
   d4bfa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4bfe:	bd08      	pop	{r3, pc}

000d4c00 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d4c00:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d4c02:	7c00      	ldrb	r0, [r0, #16]
   d4c04:	f7ff fc16 	bl	d4434 <HAL_USART_Available_Data>
}
   d4c08:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4c0c:	bd08      	pop	{r3, pc}

000d4c0e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d4c0e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d4c10:	7c00      	ldrb	r0, [r0, #16]
   d4c12:	f7ff fc1f 	bl	d4454 <HAL_USART_Peek_Data>
}
   d4c16:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4c1a:	bf28      	it	cs
   d4c1c:	f04f 30ff 	movcs.w	r0, #4294967295
   d4c20:	bd08      	pop	{r3, pc}

000d4c22 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d4c22:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d4c24:	7c00      	ldrb	r0, [r0, #16]
   d4c26:	f7ff fc0d 	bl	d4444 <HAL_USART_Read_Data>
}
   d4c2a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4c2e:	bf28      	it	cs
   d4c30:	f04f 30ff 	movcs.w	r0, #4294967295
   d4c34:	bd08      	pop	{r3, pc}

000d4c36 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d4c36:	7c00      	ldrb	r0, [r0, #16]
   d4c38:	f7ff bc14 	b.w	d4464 <HAL_USART_Flush_Data>

000d4c3c <_ZN11USARTSerialD0Ev>:
   d4c3c:	b510      	push	{r4, lr}
   d4c3e:	2114      	movs	r1, #20
   d4c40:	4604      	mov	r4, r0
   d4c42:	f000 faa7 	bl	d5194 <_ZdlPvj>
   d4c46:	4620      	mov	r0, r4
   d4c48:	bd10      	pop	{r4, pc}

000d4c4a <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d4c4a:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d4c4c:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d4c4e:	4604      	mov	r4, r0
   d4c50:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d4c52:	b925      	cbnz	r5, d4c5e <_ZN11USARTSerial5writeEh+0x14>
   d4c54:	7c00      	ldrb	r0, [r0, #16]
   d4c56:	f7ff fc0d 	bl	d4474 <HAL_USART_Available_Data_For_Write>
   d4c5a:	2800      	cmp	r0, #0
   d4c5c:	dd05      	ble.n	d4c6a <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d4c5e:	4631      	mov	r1, r6
   d4c60:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d4c62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d4c66:	f7ff bbdd 	b.w	d4424 <HAL_USART_Write_Data>
  }
  return 0;
}
   d4c6a:	4628      	mov	r0, r5
   d4c6c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4c70 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d4c70:	b510      	push	{r4, lr}
   d4c72:	4604      	mov	r4, r0
   d4c74:	4608      	mov	r0, r1
   d4c76:	4611      	mov	r1, r2
   d4c78:	2200      	movs	r2, #0
   d4c7a:	6062      	str	r2, [r4, #4]
   d4c7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d4c80:	60a2      	str	r2, [r4, #8]
   d4c82:	4a05      	ldr	r2, [pc, #20]	; (d4c98 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d4c84:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d4c86:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d4c88:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d4c8a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d4c8c:	461a      	mov	r2, r3
   d4c8e:	f7ff fbc1 	bl	d4414 <HAL_USART_Init>
}
   d4c92:	4620      	mov	r0, r4
   d4c94:	bd10      	pop	{r4, pc}
   d4c96:	bf00      	nop
   d4c98:	000d5778 	.word	0x000d5778

000d4c9c <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d4c9c:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d4c9e:	4d0c      	ldr	r5, [pc, #48]	; (d4cd0 <_Z22__fetch_global_Serial1v+0x34>)
   d4ca0:	6829      	ldr	r1, [r5, #0]
   d4ca2:	f011 0401 	ands.w	r4, r1, #1
   d4ca6:	d111      	bne.n	d4ccc <_Z22__fetch_global_Serial1v+0x30>
   d4ca8:	4628      	mov	r0, r5
   d4caa:	f7ff f9f8 	bl	d409e <__cxa_guard_acquire>
   d4cae:	b168      	cbz	r0, d4ccc <_Z22__fetch_global_Serial1v+0x30>
   d4cb0:	4a08      	ldr	r2, [pc, #32]	; (d4cd4 <_Z22__fetch_global_Serial1v+0x38>)
   d4cb2:	4b09      	ldr	r3, [pc, #36]	; (d4cd8 <_Z22__fetch_global_Serial1v+0x3c>)
   d4cb4:	4809      	ldr	r0, [pc, #36]	; (d4cdc <_Z22__fetch_global_Serial1v+0x40>)
   d4cb6:	4621      	mov	r1, r4
   d4cb8:	f7ff ffda 	bl	d4c70 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d4cbc:	4628      	mov	r0, r5
   d4cbe:	f7ff f9f3 	bl	d40a8 <__cxa_guard_release>
   d4cc2:	4a07      	ldr	r2, [pc, #28]	; (d4ce0 <_Z22__fetch_global_Serial1v+0x44>)
   d4cc4:	4907      	ldr	r1, [pc, #28]	; (d4ce4 <_Z22__fetch_global_Serial1v+0x48>)
   d4cc6:	4805      	ldr	r0, [pc, #20]	; (d4cdc <_Z22__fetch_global_Serial1v+0x40>)
   d4cc8:	f000 fa56 	bl	d5178 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d4ccc:	4803      	ldr	r0, [pc, #12]	; (d4cdc <_Z22__fetch_global_Serial1v+0x40>)
   d4cce:	bd38      	pop	{r3, r4, r5, pc}
   d4cd0:	2003e4c4 	.word	0x2003e4c4
   d4cd4:	2003e4c8 	.word	0x2003e4c8
   d4cd8:	2003e440 	.word	0x2003e440
   d4cdc:	2003e42c 	.word	0x2003e42c
   d4ce0:	2003e3ac 	.word	0x2003e3ac
   d4ce4:	000d4bed 	.word	0x000d4bed

000d4ce8 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d4ce8:	4770      	bx	lr

000d4cea <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d4cea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4cec:	4606      	mov	r6, r0
   d4cee:	4615      	mov	r5, r2
   d4cf0:	460c      	mov	r4, r1
   d4cf2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4cf4:	42bc      	cmp	r4, r7
   d4cf6:	d006      	beq.n	d4d06 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d4cf8:	6833      	ldr	r3, [r6, #0]
   d4cfa:	f814 1b01 	ldrb.w	r1, [r4], #1
   d4cfe:	689b      	ldr	r3, [r3, #8]
   d4d00:	4630      	mov	r0, r6
   d4d02:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4d04:	e7f6      	b.n	d4cf4 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d4d06:	4628      	mov	r0, r5
   d4d08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4d0a <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d4d0a:	2200      	movs	r2, #0
   d4d0c:	7c00      	ldrb	r0, [r0, #16]
   d4d0e:	f7ff bbc9 	b.w	d44a4 <HAL_I2C_Write_Data>

000d4d12 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d4d12:	2100      	movs	r1, #0
   d4d14:	7c00      	ldrb	r0, [r0, #16]
   d4d16:	f7ff bbcd 	b.w	d44b4 <HAL_I2C_Available_Data>

000d4d1a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d4d1a:	2100      	movs	r1, #0
   d4d1c:	7c00      	ldrb	r0, [r0, #16]
   d4d1e:	f7ff bbd1 	b.w	d44c4 <HAL_I2C_Read_Data>

000d4d22 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d4d22:	2100      	movs	r1, #0
   d4d24:	7c00      	ldrb	r0, [r0, #16]
   d4d26:	f7ff bbd5 	b.w	d44d4 <HAL_I2C_Peek_Data>

000d4d2a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d4d2a:	2100      	movs	r1, #0
   d4d2c:	7c00      	ldrb	r0, [r0, #16]
   d4d2e:	f7ff bbd9 	b.w	d44e4 <HAL_I2C_Flush_Data>

000d4d32 <_ZN7TwoWireD0Ev>:
   d4d32:	b510      	push	{r4, lr}
   d4d34:	2114      	movs	r1, #20
   d4d36:	4604      	mov	r4, r0
   d4d38:	f000 fa2c 	bl	d5194 <_ZdlPvj>
   d4d3c:	4620      	mov	r0, r4
   d4d3e:	bd10      	pop	{r4, pc}

000d4d40 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d4d40:	b510      	push	{r4, lr}
   d4d42:	4604      	mov	r4, r0
   d4d44:	2300      	movs	r3, #0
   d4d46:	6063      	str	r3, [r4, #4]
   d4d48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4d4c:	60a3      	str	r3, [r4, #8]
   d4d4e:	4b04      	ldr	r3, [pc, #16]	; (d4d60 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d4d50:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d4d52:	4608      	mov	r0, r1
   d4d54:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d4d56:	4611      	mov	r1, r2
   d4d58:	f7ff fbdc 	bl	d4514 <HAL_I2C_Init>
}
   d4d5c:	4620      	mov	r0, r4
   d4d5e:	bd10      	pop	{r4, pc}
   d4d60:	000d57a8 	.word	0x000d57a8

000d4d64 <_ZN7TwoWire5beginEh>:
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
}

void TwoWire::begin(uint8_t address)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_SLAVE, address, NULL);
   d4d64:	460a      	mov	r2, r1
   d4d66:	2300      	movs	r3, #0
   d4d68:	2101      	movs	r1, #1
   d4d6a:	7c00      	ldrb	r0, [r0, #16]
   d4d6c:	f7ff bb8a 	b.w	d4484 <HAL_I2C_Begin>

000d4d70 <_ZN7TwoWire5beginEi>:
}

void TwoWire::begin(int address)
{
  begin((uint8_t)address);
   d4d70:	b2c9      	uxtb	r1, r1
   d4d72:	f7ff bff7 	b.w	d4d64 <_ZN7TwoWire5beginEh>

000d4d76 <_ZN7TwoWire3endEv>:
}

void TwoWire::end()
{
	HAL_I2C_End(_i2c, NULL);
   d4d76:	2100      	movs	r1, #0
   d4d78:	7c00      	ldrb	r0, [r0, #16]
   d4d7a:	f7ff bb8b 	b.w	d4494 <HAL_I2C_End>

000d4d7e <_ZN7TwoWire9onReceiveEPFviE>:
}

// sets function called on slave write
void TwoWire::onReceive( void (*function)(int) )
{
  HAL_I2C_Set_Callback_On_Receive(_i2c, function, NULL);
   d4d7e:	2200      	movs	r2, #0
   d4d80:	7c00      	ldrb	r0, [r0, #16]
   d4d82:	f7ff bbb7 	b.w	d44f4 <HAL_I2C_Set_Callback_On_Receive>

000d4d86 <_ZN7TwoWire9onRequestEPFvvE>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
   d4d86:	2200      	movs	r2, #0
   d4d88:	7c00      	ldrb	r0, [r0, #16]
   d4d8a:	f7ff bbbb 	b.w	d4504 <HAL_I2C_Set_Callback_On_Request>

000d4d8e <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   d4d8e:	b510      	push	{r4, lr}
  if (0 == max) {
   d4d90:	4604      	mov	r4, r0
   d4d92:	b130      	cbz	r0, d4da2 <_Z6randomi+0x14>
    return 0;
  }
  return rand() % max;
   d4d94:	f000 fba4 	bl	d54e0 <rand>
   d4d98:	fb90 f3f4 	sdiv	r3, r0, r4
   d4d9c:	fb03 0014 	mls	r0, r3, r4, r0
   d4da0:	bd10      	pop	{r4, pc}
}
   d4da2:	bd10      	pop	{r4, pc}

000d4da4 <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
   d4da4:	4288      	cmp	r0, r1
  }
  return rand() % max;
}

int random(int min, int max)
{
   d4da6:	b510      	push	{r4, lr}
   d4da8:	4604      	mov	r4, r0
  if (min >= max) {
   d4daa:	da04      	bge.n	d4db6 <_Z6randomii+0x12>
    return min;
  }
  return random(max - min) + min;
   d4dac:	1a08      	subs	r0, r1, r0
   d4dae:	f7ff ffee 	bl	d4d8e <_Z6randomi>
   d4db2:	4420      	add	r0, r4
   d4db4:	bd10      	pop	{r4, pc}
}
   d4db6:	bd10      	pop	{r4, pc}

000d4db8 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4db8:	2200      	movs	r2, #0
   d4dba:	4611      	mov	r1, r2
   d4dbc:	6840      	ldr	r0, [r0, #4]
   d4dbe:	f7ff bc45 	b.w	d464c <network_listening>

000d4dc2 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4dc2:	2200      	movs	r2, #0
   d4dc4:	4611      	mov	r1, r2
   d4dc6:	6840      	ldr	r0, [r0, #4]
   d4dc8:	f7ff bc50 	b.w	d466c <network_get_listen_timeout>

000d4dcc <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4dcc:	2200      	movs	r2, #0
   d4dce:	6840      	ldr	r0, [r0, #4]
   d4dd0:	f7ff bc44 	b.w	d465c <network_set_listen_timeout>

000d4dd4 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4dd4:	2200      	movs	r2, #0
   d4dd6:	f081 0101 	eor.w	r1, r1, #1
   d4dda:	6840      	ldr	r0, [r0, #4]
   d4ddc:	f7ff bc2e 	b.w	d463c <network_listen>

000d4de0 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d4de0:	2300      	movs	r3, #0
   d4de2:	461a      	mov	r2, r3
   d4de4:	2101      	movs	r1, #1
   d4de6:	6840      	ldr	r0, [r0, #4]
   d4de8:	f7ff bc20 	b.w	d462c <network_off>

000d4dec <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4dec:	2300      	movs	r3, #0
   d4dee:	461a      	mov	r2, r3
   d4df0:	4619      	mov	r1, r3
   d4df2:	6840      	ldr	r0, [r0, #4]
   d4df4:	f7ff bc12 	b.w	d461c <network_on>

000d4df8 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4df8:	2200      	movs	r2, #0
   d4dfa:	4611      	mov	r1, r2
   d4dfc:	6840      	ldr	r0, [r0, #4]
   d4dfe:	f7ff bc05 	b.w	d460c <network_ready>

000d4e02 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4e02:	2200      	movs	r2, #0
   d4e04:	4611      	mov	r1, r2
   d4e06:	6840      	ldr	r0, [r0, #4]
   d4e08:	f7ff bbf0 	b.w	d45ec <network_connecting>

000d4e0c <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4e0c:	2200      	movs	r2, #0
   d4e0e:	2102      	movs	r1, #2
   d4e10:	6840      	ldr	r0, [r0, #4]
   d4e12:	f7ff bbf3 	b.w	d45fc <network_disconnect>

000d4e16 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4e16:	2300      	movs	r3, #0
   d4e18:	461a      	mov	r2, r3
   d4e1a:	6840      	ldr	r0, [r0, #4]
   d4e1c:	f7ff bbde 	b.w	d45dc <network_connect>

000d4e20 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d4e20:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4e22:	4605      	mov	r5, r0
   d4e24:	b188      	cbz	r0, d4e4a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4e26:	6804      	ldr	r4, [r0, #0]
   d4e28:	b14c      	cbz	r4, d4e3e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d4e2a:	68a3      	ldr	r3, [r4, #8]
   d4e2c:	b11b      	cbz	r3, d4e36 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4e2e:	2203      	movs	r2, #3
   d4e30:	4621      	mov	r1, r4
   d4e32:	4620      	mov	r0, r4
   d4e34:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4e36:	2110      	movs	r1, #16
   d4e38:	4620      	mov	r0, r4
   d4e3a:	f000 f9ab 	bl	d5194 <_ZdlPvj>
   d4e3e:	4628      	mov	r0, r5
   d4e40:	2114      	movs	r1, #20
      }
   d4e42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4e46:	f000 b9a5 	b.w	d5194 <_ZdlPvj>
   d4e4a:	bd38      	pop	{r3, r4, r5, pc}

000d4e4c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d4e4c:	b110      	cbz	r0, d4e54 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d4e4e:	6803      	ldr	r3, [r0, #0]
   d4e50:	685b      	ldr	r3, [r3, #4]
   d4e52:	4718      	bx	r3
   d4e54:	4770      	bx	lr

000d4e56 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d4e56:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d4e58:	6803      	ldr	r3, [r0, #0]
   d4e5a:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d4e5c:	b1bb      	cbz	r3, d4e8e <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d4e5e:	6858      	ldr	r0, [r3, #4]
   d4e60:	f7ff faa8 	bl	d43b4 <os_thread_is_current>
   d4e64:	b978      	cbnz	r0, d4e86 <_ZN6ThreadD1Ev+0x30>
   d4e66:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d4e68:	7c5a      	ldrb	r2, [r3, #17]
   d4e6a:	b912      	cbnz	r2, d4e72 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d4e6c:	6858      	ldr	r0, [r3, #4]
   d4e6e:	f7ff faa9 	bl	d43c4 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d4e72:	6823      	ldr	r3, [r4, #0]
   d4e74:	6858      	ldr	r0, [r3, #4]
   d4e76:	f7ff faad 	bl	d43d4 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4e7a:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d4e7c:	2300      	movs	r3, #0
   d4e7e:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d4e80:	b128      	cbz	r0, d4e8e <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d4e82:	f7ff ffcd 	bl	d4e20 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4e86:	6820      	ldr	r0, [r4, #0]
   d4e88:	b108      	cbz	r0, d4e8e <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d4e8a:	f7ff ffc9 	bl	d4e20 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d4e8e:	4620      	mov	r0, r4
   d4e90:	bd10      	pop	{r4, pc}

000d4e92 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d4e92:	b538      	push	{r3, r4, r5, lr}
   d4e94:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4e96:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d4e9a:	b108      	cbz	r0, d4ea0 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d4e9c:	f7ff f8fd 	bl	d409a <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4ea0:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d4ea4:	b108      	cbz	r0, d4eaa <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d4ea6:	f7ff faa5 	bl	d43f4 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4eaa:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d4eae:	b135      	cbz	r5, d4ebe <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4eb0:	4628      	mov	r0, r5
   d4eb2:	f7ff ffd0 	bl	d4e56 <_ZN6ThreadD1Ev>
   d4eb6:	2104      	movs	r1, #4
   d4eb8:	4628      	mov	r0, r5
   d4eba:	f000 f96b 	bl	d5194 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4ebe:	6820      	ldr	r0, [r4, #0]
   d4ec0:	b108      	cbz	r0, d4ec6 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d4ec2:	f7ff ffc3 	bl	d4e4c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d4ec6:	4620      	mov	r0, r4
   d4ec8:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4ecc <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d4ecc:	b510      	push	{r4, lr}
   d4ece:	4b04      	ldr	r3, [pc, #16]	; (d4ee0 <_ZN5spark9MeshClassD1Ev+0x14>)
   d4ed0:	4604      	mov	r4, r0
   d4ed2:	f840 3b08 	str.w	r3, [r0], #8
   d4ed6:	f7ff ffdc 	bl	d4e92 <_ZN5spark11MeshPublishD1Ev>
   d4eda:	4620      	mov	r0, r4
   d4edc:	bd10      	pop	{r4, pc}
   d4ede:	bf00      	nop
   d4ee0:	000d57d0 	.word	0x000d57d0

000d4ee4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d4ee4:	b538      	push	{r3, r4, r5, lr}
   d4ee6:	4c0e      	ldr	r4, [pc, #56]	; (d4f20 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d4ee8:	4b0e      	ldr	r3, [pc, #56]	; (d4f24 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d4eea:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d4eec:	2500      	movs	r5, #0
   d4eee:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d4ef0:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d4ef4:	6063      	str	r3, [r4, #4]
   d4ef6:	60a5      	str	r5, [r4, #8]
   d4ef8:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4efc:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d4f00:	f7ff fa70 	bl	d43e4 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d4f04:	4b08      	ldr	r3, [pc, #32]	; (d4f28 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d4f06:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4f0a:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d4f0e:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d4f10:	4620      	mov	r0, r4
   d4f12:	4a06      	ldr	r2, [pc, #24]	; (d4f2c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d4f14:	4906      	ldr	r1, [pc, #24]	; (d4f30 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d4f16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d4f1a:	f000 b92d 	b.w	d5178 <__aeabi_atexit>
   d4f1e:	bf00      	nop
   d4f20:	2003e54c 	.word	0x2003e54c
   d4f24:	000d5838 	.word	0x000d5838
   d4f28:	000d57d0 	.word	0x000d57d0
   d4f2c:	2003e3ac 	.word	0x2003e3ac
   d4f30:	000d4ecd 	.word	0x000d4ecd

000d4f34 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d4f34:	2200      	movs	r2, #0
   d4f36:	4611      	mov	r1, r2
   d4f38:	6840      	ldr	r0, [r0, #4]
   d4f3a:	f7ff bb67 	b.w	d460c <network_ready>

000d4f3e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4f3e:	2200      	movs	r2, #0
   d4f40:	4611      	mov	r1, r2
   d4f42:	6840      	ldr	r0, [r0, #4]
   d4f44:	f7ff bb82 	b.w	d464c <network_listening>

000d4f48 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4f48:	2200      	movs	r2, #0
   d4f4a:	4611      	mov	r1, r2
   d4f4c:	6840      	ldr	r0, [r0, #4]
   d4f4e:	f7ff bb8d 	b.w	d466c <network_get_listen_timeout>

000d4f52 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4f52:	2200      	movs	r2, #0
   d4f54:	6840      	ldr	r0, [r0, #4]
   d4f56:	f7ff bb81 	b.w	d465c <network_set_listen_timeout>

000d4f5a <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4f5a:	2200      	movs	r2, #0
   d4f5c:	f081 0101 	eor.w	r1, r1, #1
   d4f60:	6840      	ldr	r0, [r0, #4]
   d4f62:	f7ff bb6b 	b.w	d463c <network_listen>

000d4f66 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d4f66:	2300      	movs	r3, #0
   d4f68:	461a      	mov	r2, r3
   d4f6a:	4619      	mov	r1, r3
   d4f6c:	6840      	ldr	r0, [r0, #4]
   d4f6e:	f7ff bb5d 	b.w	d462c <network_off>

000d4f72 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d4f72:	2300      	movs	r3, #0
   d4f74:	461a      	mov	r2, r3
   d4f76:	4619      	mov	r1, r3
   d4f78:	6840      	ldr	r0, [r0, #4]
   d4f7a:	f7ff bb4f 	b.w	d461c <network_on>

000d4f7e <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4f7e:	2200      	movs	r2, #0
   d4f80:	4611      	mov	r1, r2
   d4f82:	6840      	ldr	r0, [r0, #4]
   d4f84:	f7ff bb32 	b.w	d45ec <network_connecting>

000d4f88 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4f88:	2200      	movs	r2, #0
   d4f8a:	2102      	movs	r1, #2
   d4f8c:	6840      	ldr	r0, [r0, #4]
   d4f8e:	f7ff bb35 	b.w	d45fc <network_disconnect>

000d4f92 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4f92:	2300      	movs	r3, #0
   d4f94:	461a      	mov	r2, r3
   d4f96:	6840      	ldr	r0, [r0, #4]
   d4f98:	f7ff bb20 	b.w	d45dc <network_connect>

000d4f9c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d4f9c:	4b02      	ldr	r3, [pc, #8]	; (d4fa8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d4f9e:	2204      	movs	r2, #4
   d4fa0:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d4fa2:	4a02      	ldr	r2, [pc, #8]	; (d4fac <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d4fa4:	601a      	str	r2, [r3, #0]
   d4fa6:	4770      	bx	lr
   d4fa8:	2003e720 	.word	0x2003e720
   d4fac:	000d5804 	.word	0x000d5804

000d4fb0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d4fb0:	2300      	movs	r3, #0
   d4fb2:	461a      	mov	r2, r3
   d4fb4:	6840      	ldr	r0, [r0, #4]
   d4fb6:	f7ff bb11 	b.w	d45dc <network_connect>

000d4fba <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d4fba:	2200      	movs	r2, #0
   d4fbc:	2102      	movs	r1, #2
   d4fbe:	6840      	ldr	r0, [r0, #4]
   d4fc0:	f7ff bb1c 	b.w	d45fc <network_disconnect>

000d4fc4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d4fc4:	2200      	movs	r2, #0
   d4fc6:	4611      	mov	r1, r2
   d4fc8:	6840      	ldr	r0, [r0, #4]
   d4fca:	f7ff bb0f 	b.w	d45ec <network_connecting>

000d4fce <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d4fce:	2200      	movs	r2, #0
   d4fd0:	4611      	mov	r1, r2
   d4fd2:	6840      	ldr	r0, [r0, #4]
   d4fd4:	f7ff bb1a 	b.w	d460c <network_ready>

000d4fd8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d4fd8:	2300      	movs	r3, #0
   d4fda:	461a      	mov	r2, r3
   d4fdc:	4619      	mov	r1, r3
   d4fde:	6840      	ldr	r0, [r0, #4]
   d4fe0:	f7ff bb1c 	b.w	d461c <network_on>

000d4fe4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d4fe4:	2300      	movs	r3, #0
   d4fe6:	461a      	mov	r2, r3
   d4fe8:	4619      	mov	r1, r3
   d4fea:	6840      	ldr	r0, [r0, #4]
   d4fec:	f7ff bb1e 	b.w	d462c <network_off>

000d4ff0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d4ff0:	2200      	movs	r2, #0
   d4ff2:	f081 0101 	eor.w	r1, r1, #1
   d4ff6:	6840      	ldr	r0, [r0, #4]
   d4ff8:	f7ff bb20 	b.w	d463c <network_listen>

000d4ffc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d4ffc:	2200      	movs	r2, #0
   d4ffe:	6840      	ldr	r0, [r0, #4]
   d5000:	f7ff bb2c 	b.w	d465c <network_set_listen_timeout>

000d5004 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5004:	2200      	movs	r2, #0
   d5006:	4611      	mov	r1, r2
   d5008:	6840      	ldr	r0, [r0, #4]
   d500a:	f7ff bb2f 	b.w	d466c <network_get_listen_timeout>

000d500e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d500e:	2200      	movs	r2, #0
   d5010:	4611      	mov	r1, r2
   d5012:	6840      	ldr	r0, [r0, #4]
   d5014:	f7ff bb1a 	b.w	d464c <network_listening>

000d5018 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5018:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d501c:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d501e:	b095      	sub	sp, #84	; 0x54
   d5020:	4616      	mov	r6, r2
   d5022:	460d      	mov	r5, r1
   d5024:	4607      	mov	r7, r0
    IPAddress addr;
   d5026:	f7ff fd21 	bl	d4a6c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d502a:	4621      	mov	r1, r4
   d502c:	2220      	movs	r2, #32
   d502e:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5030:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5032:	f000 fa24 	bl	d547e <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5036:	2340      	movs	r3, #64	; 0x40
   d5038:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d503a:	4621      	mov	r1, r4
   d503c:	466b      	mov	r3, sp
   d503e:	aa0c      	add	r2, sp, #48	; 0x30
   d5040:	4630      	mov	r0, r6
   d5042:	f7ff f997 	bl	d4374 <netdb_getaddrinfo>
    if (!r) {
   d5046:	4604      	mov	r4, r0
   d5048:	2800      	cmp	r0, #0
   d504a:	d144      	bne.n	d50d6 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d504c:	4602      	mov	r2, r0
   d504e:	2101      	movs	r1, #1
   d5050:	6868      	ldr	r0, [r5, #4]
   d5052:	f7ff fadb 	bl	d460c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5056:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5058:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d505a:	4622      	mov	r2, r4
   d505c:	6868      	ldr	r0, [r5, #4]
   d505e:	f7ff fad5 	bl	d460c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5062:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5064:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d5066:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5068:	2e00      	cmp	r6, #0
   d506a:	d034      	beq.n	d50d6 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d506c:	2900      	cmp	r1, #0
   d506e:	d132      	bne.n	d50d6 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5070:	6873      	ldr	r3, [r6, #4]
   d5072:	2b02      	cmp	r3, #2
   d5074:	d002      	beq.n	d507c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d5076:	2b0a      	cmp	r3, #10
   d5078:	d009      	beq.n	d508e <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d507a:	e02a      	b.n	d50d2 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d507c:	f1b8 0f00 	cmp.w	r8, #0
   d5080:	d027      	beq.n	d50d2 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5082:	6971      	ldr	r1, [r6, #20]
   d5084:	4638      	mov	r0, r7
   d5086:	3104      	adds	r1, #4
   d5088:	f7ff fd1d 	bl	d4ac6 <_ZN9IPAddressaSEPKh>
   d508c:	e020      	b.n	d50d0 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d508e:	f1b9 0f00 	cmp.w	r9, #0
   d5092:	d01e      	beq.n	d50d2 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5094:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5096:	2211      	movs	r2, #17
   d5098:	a801      	add	r0, sp, #4
   d509a:	f000 f9f0 	bl	d547e <memset>
                    a.v = 6;
   d509e:	2306      	movs	r3, #6
   d50a0:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d50a4:	ad01      	add	r5, sp, #4
   d50a6:	f104 0308 	add.w	r3, r4, #8
   d50aa:	3418      	adds	r4, #24
   d50ac:	6818      	ldr	r0, [r3, #0]
   d50ae:	6859      	ldr	r1, [r3, #4]
   d50b0:	462a      	mov	r2, r5
   d50b2:	c203      	stmia	r2!, {r0, r1}
   d50b4:	3308      	adds	r3, #8
   d50b6:	42a3      	cmp	r3, r4
   d50b8:	4615      	mov	r5, r2
   d50ba:	d1f7      	bne.n	d50ac <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d50bc:	a901      	add	r1, sp, #4
   d50be:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d50c0:	ad07      	add	r5, sp, #28
   d50c2:	f7ff fce1 	bl	d4a88 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d50c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d50c8:	1d3c      	adds	r4, r7, #4
   d50ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d50cc:	682b      	ldr	r3, [r5, #0]
   d50ce:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d50d0:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d50d2:	69f6      	ldr	r6, [r6, #28]
   d50d4:	e7c8      	b.n	d5068 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d50d6:	9800      	ldr	r0, [sp, #0]
   d50d8:	f7ff f944 	bl	d4364 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d50dc:	4638      	mov	r0, r7
   d50de:	b015      	add	sp, #84	; 0x54
   d50e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d50e4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d50e4:	4b02      	ldr	r3, [pc, #8]	; (d50f0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d50e6:	4a03      	ldr	r2, [pc, #12]	; (d50f4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d50e8:	601a      	str	r2, [r3, #0]
   d50ea:	2200      	movs	r2, #0
   d50ec:	605a      	str	r2, [r3, #4]
   d50ee:	4770      	bx	lr
   d50f0:	2003e728 	.word	0x2003e728
   d50f4:	000d5838 	.word	0x000d5838

000d50f8 <_Z17acquireWireBufferv>:
   d50f8:	b570      	push	{r4, r5, r6, lr}
   d50fa:	4604      	mov	r4, r0
   d50fc:	2514      	movs	r5, #20
   d50fe:	462a      	mov	r2, r5
   d5100:	4e09      	ldr	r6, [pc, #36]	; (d5128 <_Z17acquireWireBufferv+0x30>)
   d5102:	2100      	movs	r1, #0
   d5104:	f000 f9bb 	bl	d547e <memset>
   d5108:	8025      	strh	r5, [r4, #0]
   d510a:	2520      	movs	r5, #32
   d510c:	4631      	mov	r1, r6
   d510e:	60a5      	str	r5, [r4, #8]
   d5110:	6125      	str	r5, [r4, #16]
   d5112:	4628      	mov	r0, r5
   d5114:	f000 f840 	bl	d5198 <_ZnajRKSt9nothrow_t>
   d5118:	4631      	mov	r1, r6
   d511a:	6060      	str	r0, [r4, #4]
   d511c:	4628      	mov	r0, r5
   d511e:	f000 f83b 	bl	d5198 <_ZnajRKSt9nothrow_t>
   d5122:	60e0      	str	r0, [r4, #12]
   d5124:	4620      	mov	r0, r4
   d5126:	bd70      	pop	{r4, r5, r6, pc}
   d5128:	000d5864 	.word	0x000d5864

000d512c <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d512c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d512e:	4d0e      	ldr	r5, [pc, #56]	; (d5168 <_Z19__fetch_global_Wirev+0x3c>)
   d5130:	6829      	ldr	r1, [r5, #0]
   d5132:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d5136:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5138:	d113      	bne.n	d5162 <_Z19__fetch_global_Wirev+0x36>
   d513a:	4628      	mov	r0, r5
   d513c:	f7fe ffaf 	bl	d409e <__cxa_guard_acquire>
   d5140:	b178      	cbz	r0, d5162 <_Z19__fetch_global_Wirev+0x36>
   d5142:	a801      	add	r0, sp, #4
   d5144:	f7ff ffd8 	bl	d50f8 <_Z17acquireWireBufferv>
   d5148:	aa01      	add	r2, sp, #4
   d514a:	4621      	mov	r1, r4
   d514c:	4807      	ldr	r0, [pc, #28]	; (d516c <_Z19__fetch_global_Wirev+0x40>)
   d514e:	f7ff fdf7 	bl	d4d40 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d5152:	4628      	mov	r0, r5
   d5154:	f7fe ffa8 	bl	d40a8 <__cxa_guard_release>
   d5158:	4a05      	ldr	r2, [pc, #20]	; (d5170 <_Z19__fetch_global_Wirev+0x44>)
   d515a:	4906      	ldr	r1, [pc, #24]	; (d5174 <_Z19__fetch_global_Wirev+0x48>)
   d515c:	4803      	ldr	r0, [pc, #12]	; (d516c <_Z19__fetch_global_Wirev+0x40>)
   d515e:	f000 f80b 	bl	d5178 <__aeabi_atexit>
	return wire;
}
   d5162:	4802      	ldr	r0, [pc, #8]	; (d516c <_Z19__fetch_global_Wirev+0x40>)
   d5164:	b007      	add	sp, #28
   d5166:	bd30      	pop	{r4, r5, pc}
   d5168:	2003e734 	.word	0x2003e734
   d516c:	2003e738 	.word	0x2003e738
   d5170:	2003e3ac 	.word	0x2003e3ac
   d5174:	000d4ce9 	.word	0x000d4ce9

000d5178 <__aeabi_atexit>:
   d5178:	460b      	mov	r3, r1
   d517a:	4601      	mov	r1, r0
   d517c:	4618      	mov	r0, r3
   d517e:	f000 b965 	b.w	d544c <__cxa_atexit>
	...

000d5184 <_ZSt15get_new_handlerv>:
   d5184:	4b02      	ldr	r3, [pc, #8]	; (d5190 <_ZSt15get_new_handlerv+0xc>)
   d5186:	6818      	ldr	r0, [r3, #0]
   d5188:	f3bf 8f5f 	dmb	sy
   d518c:	4770      	bx	lr
   d518e:	bf00      	nop
   d5190:	2003e74c 	.word	0x2003e74c

000d5194 <_ZdlPvj>:
   d5194:	f7fe bf7f 	b.w	d4096 <_ZdlPv>

000d5198 <_ZnajRKSt9nothrow_t>:
   d5198:	f000 b800 	b.w	d519c <_ZnwjRKSt9nothrow_t>

000d519c <_ZnwjRKSt9nothrow_t>:
   d519c:	b510      	push	{r4, lr}
   d519e:	2800      	cmp	r0, #0
   d51a0:	bf14      	ite	ne
   d51a2:	4604      	movne	r4, r0
   d51a4:	2401      	moveq	r4, #1
   d51a6:	4620      	mov	r0, r4
   d51a8:	f7ff fa78 	bl	d469c <malloc>
   d51ac:	b920      	cbnz	r0, d51b8 <_ZnwjRKSt9nothrow_t+0x1c>
   d51ae:	f7ff ffe9 	bl	d5184 <_ZSt15get_new_handlerv>
   d51b2:	b108      	cbz	r0, d51b8 <_ZnwjRKSt9nothrow_t+0x1c>
   d51b4:	4780      	blx	r0
   d51b6:	e7f6      	b.n	d51a6 <_ZnwjRKSt9nothrow_t+0xa>
   d51b8:	bd10      	pop	{r4, pc}
	...

000d51bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d51bc:	4b18      	ldr	r3, [pc, #96]	; (d5220 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d51be:	681a      	ldr	r2, [r3, #0]
   d51c0:	07d1      	lsls	r1, r2, #31
   d51c2:	bf5c      	itt	pl
   d51c4:	2201      	movpl	r2, #1
   d51c6:	601a      	strpl	r2, [r3, #0]
   d51c8:	4b16      	ldr	r3, [pc, #88]	; (d5224 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d51ca:	681a      	ldr	r2, [r3, #0]
   d51cc:	07d2      	lsls	r2, r2, #31
   d51ce:	bf5c      	itt	pl
   d51d0:	2201      	movpl	r2, #1
   d51d2:	601a      	strpl	r2, [r3, #0]
   d51d4:	4b14      	ldr	r3, [pc, #80]	; (d5228 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d51d6:	681a      	ldr	r2, [r3, #0]
   d51d8:	07d0      	lsls	r0, r2, #31
   d51da:	bf5c      	itt	pl
   d51dc:	2201      	movpl	r2, #1
   d51de:	601a      	strpl	r2, [r3, #0]
   d51e0:	4b12      	ldr	r3, [pc, #72]	; (d522c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d51e2:	681a      	ldr	r2, [r3, #0]
   d51e4:	07d1      	lsls	r1, r2, #31
   d51e6:	bf5c      	itt	pl
   d51e8:	2201      	movpl	r2, #1
   d51ea:	601a      	strpl	r2, [r3, #0]
   d51ec:	4b10      	ldr	r3, [pc, #64]	; (d5230 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d51ee:	681a      	ldr	r2, [r3, #0]
   d51f0:	07d2      	lsls	r2, r2, #31
   d51f2:	bf5c      	itt	pl
   d51f4:	2201      	movpl	r2, #1
   d51f6:	601a      	strpl	r2, [r3, #0]
   d51f8:	4b0e      	ldr	r3, [pc, #56]	; (d5234 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d51fa:	681a      	ldr	r2, [r3, #0]
   d51fc:	07d0      	lsls	r0, r2, #31
   d51fe:	bf5c      	itt	pl
   d5200:	2201      	movpl	r2, #1
   d5202:	601a      	strpl	r2, [r3, #0]
   d5204:	4b0c      	ldr	r3, [pc, #48]	; (d5238 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5206:	681a      	ldr	r2, [r3, #0]
   d5208:	07d1      	lsls	r1, r2, #31
   d520a:	bf5c      	itt	pl
   d520c:	2201      	movpl	r2, #1
   d520e:	601a      	strpl	r2, [r3, #0]
   d5210:	4b0a      	ldr	r3, [pc, #40]	; (d523c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5212:	681a      	ldr	r2, [r3, #0]
   d5214:	07d2      	lsls	r2, r2, #31
   d5216:	bf5c      	itt	pl
   d5218:	2201      	movpl	r2, #1
   d521a:	601a      	strpl	r2, [r3, #0]
   d521c:	4770      	bx	lr
   d521e:	bf00      	nop
   d5220:	2003e76c 	.word	0x2003e76c
   d5224:	2003e768 	.word	0x2003e768
   d5228:	2003e764 	.word	0x2003e764
   d522c:	2003e760 	.word	0x2003e760
   d5230:	2003e75c 	.word	0x2003e75c
   d5234:	2003e758 	.word	0x2003e758
   d5238:	2003e754 	.word	0x2003e754
   d523c:	2003e750 	.word	0x2003e750

000d5240 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d5240:	4b24      	ldr	r3, [pc, #144]	; (d52d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d5242:	681a      	ldr	r2, [r3, #0]
   d5244:	07d0      	lsls	r0, r2, #31
   d5246:	bf5c      	itt	pl
   d5248:	2201      	movpl	r2, #1
   d524a:	601a      	strpl	r2, [r3, #0]
   d524c:	4b22      	ldr	r3, [pc, #136]	; (d52d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d524e:	681a      	ldr	r2, [r3, #0]
   d5250:	07d1      	lsls	r1, r2, #31
   d5252:	bf5c      	itt	pl
   d5254:	2201      	movpl	r2, #1
   d5256:	601a      	strpl	r2, [r3, #0]
   d5258:	4b20      	ldr	r3, [pc, #128]	; (d52dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d525a:	681a      	ldr	r2, [r3, #0]
   d525c:	07d2      	lsls	r2, r2, #31
   d525e:	bf5c      	itt	pl
   d5260:	2201      	movpl	r2, #1
   d5262:	601a      	strpl	r2, [r3, #0]
   d5264:	4b1e      	ldr	r3, [pc, #120]	; (d52e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d5266:	681a      	ldr	r2, [r3, #0]
   d5268:	07d0      	lsls	r0, r2, #31
   d526a:	bf5c      	itt	pl
   d526c:	2201      	movpl	r2, #1
   d526e:	601a      	strpl	r2, [r3, #0]
   d5270:	4b1c      	ldr	r3, [pc, #112]	; (d52e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d5272:	681a      	ldr	r2, [r3, #0]
   d5274:	07d1      	lsls	r1, r2, #31
   d5276:	bf5c      	itt	pl
   d5278:	2201      	movpl	r2, #1
   d527a:	601a      	strpl	r2, [r3, #0]
   d527c:	4b1a      	ldr	r3, [pc, #104]	; (d52e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d527e:	681a      	ldr	r2, [r3, #0]
   d5280:	07d2      	lsls	r2, r2, #31
   d5282:	bf5c      	itt	pl
   d5284:	2201      	movpl	r2, #1
   d5286:	601a      	strpl	r2, [r3, #0]
   d5288:	4b18      	ldr	r3, [pc, #96]	; (d52ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d528a:	681a      	ldr	r2, [r3, #0]
   d528c:	07d0      	lsls	r0, r2, #31
   d528e:	bf5c      	itt	pl
   d5290:	2201      	movpl	r2, #1
   d5292:	601a      	strpl	r2, [r3, #0]
   d5294:	4b16      	ldr	r3, [pc, #88]	; (d52f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d5296:	681a      	ldr	r2, [r3, #0]
   d5298:	07d1      	lsls	r1, r2, #31
   d529a:	bf5c      	itt	pl
   d529c:	2201      	movpl	r2, #1
   d529e:	601a      	strpl	r2, [r3, #0]
   d52a0:	4b14      	ldr	r3, [pc, #80]	; (d52f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d52a2:	681a      	ldr	r2, [r3, #0]
   d52a4:	07d2      	lsls	r2, r2, #31
   d52a6:	bf5c      	itt	pl
   d52a8:	2201      	movpl	r2, #1
   d52aa:	601a      	strpl	r2, [r3, #0]
   d52ac:	4b12      	ldr	r3, [pc, #72]	; (d52f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d52ae:	681a      	ldr	r2, [r3, #0]
   d52b0:	07d0      	lsls	r0, r2, #31
   d52b2:	bf5c      	itt	pl
   d52b4:	2201      	movpl	r2, #1
   d52b6:	601a      	strpl	r2, [r3, #0]
   d52b8:	4b10      	ldr	r3, [pc, #64]	; (d52fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d52ba:	681a      	ldr	r2, [r3, #0]
   d52bc:	07d1      	lsls	r1, r2, #31
   d52be:	bf5c      	itt	pl
   d52c0:	2201      	movpl	r2, #1
   d52c2:	601a      	strpl	r2, [r3, #0]
   d52c4:	4b0e      	ldr	r3, [pc, #56]	; (d5300 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d52c6:	681a      	ldr	r2, [r3, #0]
   d52c8:	07d2      	lsls	r2, r2, #31
   d52ca:	bf5c      	itt	pl
   d52cc:	2201      	movpl	r2, #1
   d52ce:	601a      	strpl	r2, [r3, #0]
   d52d0:	4770      	bx	lr
   d52d2:	bf00      	nop
   d52d4:	2003e79c 	.word	0x2003e79c
   d52d8:	2003e798 	.word	0x2003e798
   d52dc:	2003e794 	.word	0x2003e794
   d52e0:	2003e790 	.word	0x2003e790
   d52e4:	2003e78c 	.word	0x2003e78c
   d52e8:	2003e788 	.word	0x2003e788
   d52ec:	2003e784 	.word	0x2003e784
   d52f0:	2003e780 	.word	0x2003e780
   d52f4:	2003e77c 	.word	0x2003e77c
   d52f8:	2003e778 	.word	0x2003e778
   d52fc:	2003e774 	.word	0x2003e774
   d5300:	2003e770 	.word	0x2003e770

000d5304 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d5304:	4b24      	ldr	r3, [pc, #144]	; (d5398 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d5306:	681a      	ldr	r2, [r3, #0]
   d5308:	07d0      	lsls	r0, r2, #31
   d530a:	bf5c      	itt	pl
   d530c:	2201      	movpl	r2, #1
   d530e:	601a      	strpl	r2, [r3, #0]
   d5310:	4b22      	ldr	r3, [pc, #136]	; (d539c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d5312:	681a      	ldr	r2, [r3, #0]
   d5314:	07d1      	lsls	r1, r2, #31
   d5316:	bf5c      	itt	pl
   d5318:	2201      	movpl	r2, #1
   d531a:	601a      	strpl	r2, [r3, #0]
   d531c:	4b20      	ldr	r3, [pc, #128]	; (d53a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d531e:	681a      	ldr	r2, [r3, #0]
   d5320:	07d2      	lsls	r2, r2, #31
   d5322:	bf5c      	itt	pl
   d5324:	2201      	movpl	r2, #1
   d5326:	601a      	strpl	r2, [r3, #0]
   d5328:	4b1e      	ldr	r3, [pc, #120]	; (d53a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d532a:	681a      	ldr	r2, [r3, #0]
   d532c:	07d0      	lsls	r0, r2, #31
   d532e:	bf5c      	itt	pl
   d5330:	2201      	movpl	r2, #1
   d5332:	601a      	strpl	r2, [r3, #0]
   d5334:	4b1c      	ldr	r3, [pc, #112]	; (d53a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d5336:	681a      	ldr	r2, [r3, #0]
   d5338:	07d1      	lsls	r1, r2, #31
   d533a:	bf5c      	itt	pl
   d533c:	2201      	movpl	r2, #1
   d533e:	601a      	strpl	r2, [r3, #0]
   d5340:	4b1a      	ldr	r3, [pc, #104]	; (d53ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d5342:	681a      	ldr	r2, [r3, #0]
   d5344:	07d2      	lsls	r2, r2, #31
   d5346:	bf5c      	itt	pl
   d5348:	2201      	movpl	r2, #1
   d534a:	601a      	strpl	r2, [r3, #0]
   d534c:	4b18      	ldr	r3, [pc, #96]	; (d53b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d534e:	681a      	ldr	r2, [r3, #0]
   d5350:	07d0      	lsls	r0, r2, #31
   d5352:	bf5c      	itt	pl
   d5354:	2201      	movpl	r2, #1
   d5356:	601a      	strpl	r2, [r3, #0]
   d5358:	4b16      	ldr	r3, [pc, #88]	; (d53b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d535a:	681a      	ldr	r2, [r3, #0]
   d535c:	07d1      	lsls	r1, r2, #31
   d535e:	bf5c      	itt	pl
   d5360:	2201      	movpl	r2, #1
   d5362:	601a      	strpl	r2, [r3, #0]
   d5364:	4b14      	ldr	r3, [pc, #80]	; (d53b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d5366:	681a      	ldr	r2, [r3, #0]
   d5368:	07d2      	lsls	r2, r2, #31
   d536a:	bf5c      	itt	pl
   d536c:	2201      	movpl	r2, #1
   d536e:	601a      	strpl	r2, [r3, #0]
   d5370:	4b12      	ldr	r3, [pc, #72]	; (d53bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d5372:	681a      	ldr	r2, [r3, #0]
   d5374:	07d0      	lsls	r0, r2, #31
   d5376:	bf5c      	itt	pl
   d5378:	2201      	movpl	r2, #1
   d537a:	601a      	strpl	r2, [r3, #0]
   d537c:	4b10      	ldr	r3, [pc, #64]	; (d53c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d537e:	681a      	ldr	r2, [r3, #0]
   d5380:	07d1      	lsls	r1, r2, #31
   d5382:	bf5c      	itt	pl
   d5384:	2201      	movpl	r2, #1
   d5386:	601a      	strpl	r2, [r3, #0]
   d5388:	4b0e      	ldr	r3, [pc, #56]	; (d53c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d538a:	681a      	ldr	r2, [r3, #0]
   d538c:	07d2      	lsls	r2, r2, #31
   d538e:	bf5c      	itt	pl
   d5390:	2201      	movpl	r2, #1
   d5392:	601a      	strpl	r2, [r3, #0]
   d5394:	4770      	bx	lr
   d5396:	bf00      	nop
   d5398:	2003e7cc 	.word	0x2003e7cc
   d539c:	2003e7c8 	.word	0x2003e7c8
   d53a0:	2003e7c4 	.word	0x2003e7c4
   d53a4:	2003e7c0 	.word	0x2003e7c0
   d53a8:	2003e7bc 	.word	0x2003e7bc
   d53ac:	2003e7b8 	.word	0x2003e7b8
   d53b0:	2003e7b4 	.word	0x2003e7b4
   d53b4:	2003e7b0 	.word	0x2003e7b0
   d53b8:	2003e7ac 	.word	0x2003e7ac
   d53bc:	2003e7a8 	.word	0x2003e7a8
   d53c0:	2003e7a4 	.word	0x2003e7a4
   d53c4:	2003e7a0 	.word	0x2003e7a0

000d53c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d53c8:	4b18      	ldr	r3, [pc, #96]	; (d542c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d53ca:	681a      	ldr	r2, [r3, #0]
   d53cc:	07d1      	lsls	r1, r2, #31
   d53ce:	bf5c      	itt	pl
   d53d0:	2201      	movpl	r2, #1
   d53d2:	601a      	strpl	r2, [r3, #0]
   d53d4:	4b16      	ldr	r3, [pc, #88]	; (d5430 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d53d6:	681a      	ldr	r2, [r3, #0]
   d53d8:	07d2      	lsls	r2, r2, #31
   d53da:	bf5c      	itt	pl
   d53dc:	2201      	movpl	r2, #1
   d53de:	601a      	strpl	r2, [r3, #0]
   d53e0:	4b14      	ldr	r3, [pc, #80]	; (d5434 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d53e2:	681a      	ldr	r2, [r3, #0]
   d53e4:	07d0      	lsls	r0, r2, #31
   d53e6:	bf5c      	itt	pl
   d53e8:	2201      	movpl	r2, #1
   d53ea:	601a      	strpl	r2, [r3, #0]
   d53ec:	4b12      	ldr	r3, [pc, #72]	; (d5438 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d53ee:	681a      	ldr	r2, [r3, #0]
   d53f0:	07d1      	lsls	r1, r2, #31
   d53f2:	bf5c      	itt	pl
   d53f4:	2201      	movpl	r2, #1
   d53f6:	601a      	strpl	r2, [r3, #0]
   d53f8:	4b10      	ldr	r3, [pc, #64]	; (d543c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d53fa:	681a      	ldr	r2, [r3, #0]
   d53fc:	07d2      	lsls	r2, r2, #31
   d53fe:	bf5c      	itt	pl
   d5400:	2201      	movpl	r2, #1
   d5402:	601a      	strpl	r2, [r3, #0]
   d5404:	4b0e      	ldr	r3, [pc, #56]	; (d5440 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5406:	681a      	ldr	r2, [r3, #0]
   d5408:	07d0      	lsls	r0, r2, #31
   d540a:	bf5c      	itt	pl
   d540c:	2201      	movpl	r2, #1
   d540e:	601a      	strpl	r2, [r3, #0]
   d5410:	4b0c      	ldr	r3, [pc, #48]	; (d5444 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5412:	681a      	ldr	r2, [r3, #0]
   d5414:	07d1      	lsls	r1, r2, #31
   d5416:	bf5c      	itt	pl
   d5418:	2201      	movpl	r2, #1
   d541a:	601a      	strpl	r2, [r3, #0]
   d541c:	4b0a      	ldr	r3, [pc, #40]	; (d5448 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d541e:	681a      	ldr	r2, [r3, #0]
   d5420:	07d2      	lsls	r2, r2, #31
   d5422:	bf5c      	itt	pl
   d5424:	2201      	movpl	r2, #1
   d5426:	601a      	strpl	r2, [r3, #0]
   d5428:	4770      	bx	lr
   d542a:	bf00      	nop
   d542c:	2003e7ec 	.word	0x2003e7ec
   d5430:	2003e7e8 	.word	0x2003e7e8
   d5434:	2003e7e4 	.word	0x2003e7e4
   d5438:	2003e7e0 	.word	0x2003e7e0
   d543c:	2003e7dc 	.word	0x2003e7dc
   d5440:	2003e7d8 	.word	0x2003e7d8
   d5444:	2003e7d4 	.word	0x2003e7d4
   d5448:	2003e7d0 	.word	0x2003e7d0

000d544c <__cxa_atexit>:
   d544c:	b510      	push	{r4, lr}
   d544e:	4c05      	ldr	r4, [pc, #20]	; (d5464 <__cxa_atexit+0x18>)
   d5450:	4613      	mov	r3, r2
   d5452:	b12c      	cbz	r4, d5460 <__cxa_atexit+0x14>
   d5454:	460a      	mov	r2, r1
   d5456:	4601      	mov	r1, r0
   d5458:	2002      	movs	r0, #2
   d545a:	f3af 8000 	nop.w
   d545e:	bd10      	pop	{r4, pc}
   d5460:	4620      	mov	r0, r4
   d5462:	bd10      	pop	{r4, pc}
   d5464:	00000000 	.word	0x00000000

000d5468 <memcpy>:
   d5468:	b510      	push	{r4, lr}
   d546a:	1e43      	subs	r3, r0, #1
   d546c:	440a      	add	r2, r1
   d546e:	4291      	cmp	r1, r2
   d5470:	d004      	beq.n	d547c <memcpy+0x14>
   d5472:	f811 4b01 	ldrb.w	r4, [r1], #1
   d5476:	f803 4f01 	strb.w	r4, [r3, #1]!
   d547a:	e7f8      	b.n	d546e <memcpy+0x6>
   d547c:	bd10      	pop	{r4, pc}

000d547e <memset>:
   d547e:	4402      	add	r2, r0
   d5480:	4603      	mov	r3, r0
   d5482:	4293      	cmp	r3, r2
   d5484:	d002      	beq.n	d548c <memset+0xe>
   d5486:	f803 1b01 	strb.w	r1, [r3], #1
   d548a:	e7fa      	b.n	d5482 <memset+0x4>
   d548c:	4770      	bx	lr
	...

000d5490 <srand>:
   d5490:	b538      	push	{r3, r4, r5, lr}
   d5492:	4b12      	ldr	r3, [pc, #72]	; (d54dc <srand+0x4c>)
   d5494:	681c      	ldr	r4, [r3, #0]
   d5496:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d5498:	4605      	mov	r5, r0
   d549a:	b9d3      	cbnz	r3, d54d2 <srand+0x42>
   d549c:	2018      	movs	r0, #24
   d549e:	f7ff f8fd 	bl	d469c <malloc>
   d54a2:	f243 330e 	movw	r3, #13070	; 0x330e
   d54a6:	63a0      	str	r0, [r4, #56]	; 0x38
   d54a8:	8003      	strh	r3, [r0, #0]
   d54aa:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d54ae:	8043      	strh	r3, [r0, #2]
   d54b0:	f241 2334 	movw	r3, #4660	; 0x1234
   d54b4:	8083      	strh	r3, [r0, #4]
   d54b6:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d54ba:	80c3      	strh	r3, [r0, #6]
   d54bc:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d54c0:	8103      	strh	r3, [r0, #8]
   d54c2:	2305      	movs	r3, #5
   d54c4:	8143      	strh	r3, [r0, #10]
   d54c6:	230b      	movs	r3, #11
   d54c8:	8183      	strh	r3, [r0, #12]
   d54ca:	2201      	movs	r2, #1
   d54cc:	2300      	movs	r3, #0
   d54ce:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d54d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d54d4:	2200      	movs	r2, #0
   d54d6:	611d      	str	r5, [r3, #16]
   d54d8:	615a      	str	r2, [r3, #20]
   d54da:	bd38      	pop	{r3, r4, r5, pc}
   d54dc:	2003e3a8 	.word	0x2003e3a8

000d54e0 <rand>:
   d54e0:	4b19      	ldr	r3, [pc, #100]	; (d5548 <rand+0x68>)
   d54e2:	b510      	push	{r4, lr}
   d54e4:	681c      	ldr	r4, [r3, #0]
   d54e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d54e8:	b9d3      	cbnz	r3, d5520 <rand+0x40>
   d54ea:	2018      	movs	r0, #24
   d54ec:	f7ff f8d6 	bl	d469c <malloc>
   d54f0:	f243 330e 	movw	r3, #13070	; 0x330e
   d54f4:	63a0      	str	r0, [r4, #56]	; 0x38
   d54f6:	8003      	strh	r3, [r0, #0]
   d54f8:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d54fc:	8043      	strh	r3, [r0, #2]
   d54fe:	f241 2334 	movw	r3, #4660	; 0x1234
   d5502:	8083      	strh	r3, [r0, #4]
   d5504:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d5508:	80c3      	strh	r3, [r0, #6]
   d550a:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d550e:	8103      	strh	r3, [r0, #8]
   d5510:	2305      	movs	r3, #5
   d5512:	8143      	strh	r3, [r0, #10]
   d5514:	230b      	movs	r3, #11
   d5516:	8183      	strh	r3, [r0, #12]
   d5518:	2201      	movs	r2, #1
   d551a:	2300      	movs	r3, #0
   d551c:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d5520:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d5522:	4c0a      	ldr	r4, [pc, #40]	; (d554c <rand+0x6c>)
   d5524:	690b      	ldr	r3, [r1, #16]
   d5526:	6948      	ldr	r0, [r1, #20]
   d5528:	4a09      	ldr	r2, [pc, #36]	; (d5550 <rand+0x70>)
   d552a:	435c      	muls	r4, r3
   d552c:	fb02 4000 	mla	r0, r2, r0, r4
   d5530:	fba3 2302 	umull	r2, r3, r3, r2
   d5534:	3201      	adds	r2, #1
   d5536:	4403      	add	r3, r0
   d5538:	f143 0300 	adc.w	r3, r3, #0
   d553c:	e9c1 2304 	strd	r2, r3, [r1, #16]
   d5540:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   d5544:	bd10      	pop	{r4, pc}
   d5546:	bf00      	nop
   d5548:	2003e3a8 	.word	0x2003e3a8
   d554c:	5851f42d 	.word	0x5851f42d
   d5550:	4c957f2d 	.word	0x4c957f2d

000d5554 <strlen>:
   d5554:	4603      	mov	r3, r0
   d5556:	f813 2b01 	ldrb.w	r2, [r3], #1
   d555a:	2a00      	cmp	r2, #0
   d555c:	d1fb      	bne.n	d5556 <strlen+0x2>
   d555e:	1a18      	subs	r0, r3, r0
   d5560:	3801      	subs	r0, #1
   d5562:	4770      	bx	lr

000d5564 <dynalib_user>:
   d5564:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d5574:	0000 0000 6f63 6e75 3a74 0020 6164 6174     ....count: .data
   d5584:	7220 6365 6965 6576 3a64 0020 6f63 7272      received: .corr
   d5594:	6365 2074 6461 7264 7365 0073 6172 646e     ect address.rand
   d55a4:	6d6f 7a69 2065 6461 7264 7365 0073 6572     omize address.re
   d55b4:	7571 7365 2074 6572 6563 7669 6465 7200     quest received.r
   d55c4:	7165 6575 7473 6d20 646f 2065 0031 6572     equest mode 1.re
   d55d4:	7571 7365 2074 6f6d 6564 3220 7000 7361     quest mode 2.pas
   d55e4:	0073 6166 6c69 0000                         s.fail..

000d55ec <_ZTVN5spark13EthernetClassE>:
	...
   d55f4:	471b 000d 4711 000d 4707 000d 46fd 000d     .G...G...G...F..
   d5604:	46f1 000d 46e5 000d 46d9 000d 46d1 000d     .F...F...F...F..
   d5614:	46c7 000d 46bd 000d 5019 000d 6162 6475     .F...F...P..baud
   d5624:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   d5634:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   d5644:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   d5654:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   d5664:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   d5674:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   d5684:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   d5694:	7070 2500 3130 7530 0020 205d 2500 0064     pp.%010u .] .%d.
   d56a4:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
   d56b4:	203d 2500 0069 6564 6174 6c69 2073 203d     = .%i.details = 
   d56c4:	0d00 000a 0066 6e6c 6600 006e 6f63 6564     ....f.ln.fn.code
   d56d4:	6400 7465 6961 006c 6f6e 656e 7400 6172     .detail.none.tra
   d56e4:	6563 6900 666e 006f 6177 6e72 6500 7272     ce.info.warn.err
   d56f4:	726f 7000 6e61 6369 6100 6c6c 5a00 2500     or.panic.all.Z.%
   d5704:	302b 6433 253a 3230 0075 5925 252d 2d6d     +03d:%02u.%Y-%m-
   d5714:	6425 2554 3a48 4d25 253a 2553 007a 7361     %dT%H:%M:%S%z.as
   d5724:	7463 6d69 0065 0000                         ctime...

000d572c <_ZTV9IPAddress>:
	...
   d5734:	4a09 000d 49f9 000d 49fb 000d               .J...I...I..

000d5740 <_ZTV9USBSerial>:
	...
   d5748:	4ae1 000d 4b31 000d 4b3f 000d 47c9 000d     .J..1K..?K...G..
   d5758:	4b1d 000d 4ae3 000d 4af9 000d 4b2b 000d     .K...J...J..+K..
   d5768:	4b0f 000d 4add 000d                         .K...J..

000d5770 <_ZTV11USARTSerial>:
	...
   d5778:	4bed 000d 4c3d 000d 4c4b 000d 47c9 000d     .K..=L..KL...G..
   d5788:	4c01 000d 4c23 000d 4c0f 000d 4c37 000d     .L..#L...L..7L..
   d5798:	4bef 000d 4bf3 000d                         .K...K..

000d57a0 <_ZTV7TwoWire>:
	...
   d57a8:	4ce9 000d 4d33 000d 4d0b 000d 4ceb 000d     .L..3M...M...L..
   d57b8:	4d13 000d 4d1b 000d 4d23 000d 4d2b 000d     .M...M..#M..+M..

000d57c8 <_ZTVN5spark9MeshClassE>:
	...
   d57d0:	4e17 000d 4e0d 000d 4e03 000d 4df9 000d     .N...N...N...M..
   d57e0:	4ded 000d 4de1 000d 4dd5 000d 4dcd 000d     .M...M...M...M..
   d57f0:	4dc3 000d 4db9 000d 5019 000d               .M...M...P..

000d57fc <_ZTVN5spark9WiFiClassE>:
	...
   d5804:	4f93 000d 4f89 000d 4f7f 000d 4f35 000d     .O...O...O..5O..
   d5814:	4f73 000d 4f67 000d 4f5b 000d 4f53 000d     sO..gO..[O..SO..
   d5824:	4f49 000d 4f3f 000d 5019 000d               IO..?O...P..

000d5830 <_ZTVN5spark12NetworkClassE>:
	...
   d5838:	4fb1 000d 4fbb 000d 4fc5 000d 4fcf 000d     .O...O...O...O..
   d5848:	4fd9 000d 4fe5 000d 4ff1 000d 4ffd 000d     .O...O...O...O..
   d5858:	5005 000d 500f 000d 5019 000d               .P...P...P..

000d5864 <_ZSt7nothrow>:
   d5864:	0000 0000                                   ....

000d5868 <__sf_fake_stdin>:
	...

000d5888 <__sf_fake_stdout>:
	...

000d58a8 <__sf_fake_stderr>:
	...
   d58c8:	0043                                        C.

000d58ca <link_const_variable_data_end>:
	...

000d58cc <link_constructors_location>:
   d58cc:	000d4311 	.word	0x000d4311
   d58d0:	000d4725 	.word	0x000d4725
   d58d4:	000d4739 	.word	0x000d4739
   d58d8:	000d47a1 	.word	0x000d47a1
   d58dc:	000d4885 	.word	0x000d4885
   d58e0:	000d4895 	.word	0x000d4895
   d58e4:	000d48cd 	.word	0x000d48cd
   d58e8:	000d4ee5 	.word	0x000d4ee5
   d58ec:	000d4f9d 	.word	0x000d4f9d
   d58f0:	000d50e5 	.word	0x000d50e5
   d58f4:	000d51bd 	.word	0x000d51bd
   d58f8:	000d5241 	.word	0x000d5241
   d58fc:	000d5305 	.word	0x000d5305
   d5900:	000d53c9 	.word	0x000d53c9

000d5904 <link_constructors_end>:
	...
