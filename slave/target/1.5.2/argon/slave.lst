
c:/Users/Arjun/Documents/GitHub/loop_tracks/slave/target/1.5.2/argon/slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001aa4  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d5ac0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  2003e334  000d5ac4  0001e334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000454  2003e39c  2003e39c  0002e39c  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d5b2c  000d5b2c  00025b2c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d5b54  000d5b54  00025b54  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000c7145  00000000  00000000  00025b58  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000faf9  00000000  00000000  000ecc9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001c92f  00000000  00000000  000fc796  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002448  00000000  00000000  001190c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004438  00000000  00000000  0011b50d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00032faa  00000000  00000000  0011f945  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00024f3b  00000000  00000000  001528ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010059c  00000000  00000000  0017782a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000cb14  00000000  00000000  00277dc8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f001 faf3 	bl	d5618 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f001 faf8 	bl	d562e <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e334 	.word	0x2003e334
   d4048:	000d5ac4 	.word	0x000d5ac4
   d404c:	2003e39c 	.word	0x2003e39c
   d4050:	2003e39c 	.word	0x2003e39c
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f000 fd11 	bl	d4a80 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d5ab4 	.word	0x000d5ab4
   d4080:	000d5a7c 	.word	0x000d5a7c

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b92a 	b.w	d42dc <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f94f 	bl	d432c <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f000 bcb7 	b.w	d4a04 <_post_loop>

000d4096 <_ZdlPv>:
   d4096:	f000 bb6b 	b.w	d4770 <free>

000d409a <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409a:	f000 bb69 	b.w	d4770 <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr

000d40ae <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40ae:	b510      	push	{r4, lr}
   d40b0:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d40b2:	6800      	ldr	r0, [r0, #0]
   d40b4:	b108      	cbz	r0, d40ba <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d40b6:	f000 fb5b 	bl	d4770 <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40ba:	4620      	mov	r0, r4
   d40bc:	bd10      	pop	{r4, pc}
	...

000d40c0 <_Z12dataReceivedi>:
  delay(100);
}

char c;

void dataReceived(int count){
   d40c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d40c4:	af00      	add	r7, sp, #0
  char inputBuffer[Wire.available()];
   d40c6:	f001 f909 	bl	d52dc <_Z19__fetch_global_Wirev>
   d40ca:	6803      	ldr	r3, [r0, #0]
   d40cc:	691b      	ldr	r3, [r3, #16]
   d40ce:	4798      	blx	r3
   d40d0:	3007      	adds	r0, #7
   d40d2:	f020 0007 	bic.w	r0, r0, #7
   d40d6:	ebad 0d00 	sub.w	sp, sp, r0
  int counter = 0;

  Serial.println("count: ");
   d40da:	f000 fdd1 	bl	d4c80 <_Z16_fetch_usbserialv>
   d40de:	494c      	ldr	r1, [pc, #304]	; (d4210 <_Z12dataReceivedi+0x150>)
   d40e0:	f000 fc0b 	bl	d48fa <_ZN5Print7printlnEPKc>
  Serial.print(Wire.available());
   d40e4:	f000 fdcc 	bl	d4c80 <_Z16_fetch_usbserialv>
   d40e8:	4606      	mov	r6, r0
   d40ea:	f001 f8f7 	bl	d52dc <_Z19__fetch_global_Wirev>
   d40ee:	6803      	ldr	r3, [r0, #0]
   d40f0:	691b      	ldr	r3, [r3, #16]
   d40f2:	4798      	blx	r3
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d40f4:	1e04      	subs	r4, r0, #0
}

char c;

void dataReceived(int count){
  char inputBuffer[Wire.available()];
   d40f6:	466d      	mov	r5, sp
   d40f8:	da05      	bge.n	d4106 <_Z12dataReceivedi+0x46>
            t = print('-');
   d40fa:	212d      	movs	r1, #45	; 0x2d
   d40fc:	4630      	mov	r0, r6
   d40fe:	f000 fbed 	bl	d48dc <_ZN5Print5printEc>
            val = -n;
   d4102:	4261      	negs	r1, r4
   d4104:	e000      	b.n	d4108 <_Z12dataReceivedi+0x48>
        } else {
            val = n;
   d4106:	4621      	mov	r1, r4
        }
        return printNumber(val, base) + t;
   d4108:	220a      	movs	r2, #10
   d410a:	4630      	mov	r0, r6
   d410c:	f000 fc09 	bl	d4922 <_ZN5Print11printNumberEmh>
  int counter = 0;

  Serial.println("count: ");
  Serial.print(Wire.available());
  Serial.println();
   d4110:	f000 fdb6 	bl	d4c80 <_Z16_fetch_usbserialv>
   d4114:	f000 fbe5 	bl	d48e2 <_ZN5Print7printlnEv>

  while(Wire.available() > 0){
    c = Wire.read();
   d4118:	4c3e      	ldr	r4, [pc, #248]	; (d4214 <_Z12dataReceivedi+0x154>)
   d411a:	1e6e      	subs	r6, r5, #1

  Serial.println("count: ");
  Serial.print(Wire.available());
  Serial.println();

  while(Wire.available() > 0){
   d411c:	f001 f8de 	bl	d52dc <_Z19__fetch_global_Wirev>
   d4120:	6803      	ldr	r3, [r0, #0]
   d4122:	691b      	ldr	r3, [r3, #16]
   d4124:	4798      	blx	r3
   d4126:	2800      	cmp	r0, #0
   d4128:	dd0e      	ble.n	d4148 <_Z12dataReceivedi+0x88>
    c = Wire.read();
   d412a:	f001 f8d7 	bl	d52dc <_Z19__fetch_global_Wirev>
   d412e:	6803      	ldr	r3, [r0, #0]
   d4130:	695b      	ldr	r3, [r3, #20]
   d4132:	4798      	blx	r3
   d4134:	7020      	strb	r0, [r4, #0]
    Serial.println(c);
   d4136:	f000 fda3 	bl	d4c80 <_Z16_fetch_usbserialv>
   d413a:	7821      	ldrb	r1, [r4, #0]
   d413c:	f000 fbe7 	bl	d490e <_ZN5Print7printlnEc>
    inputBuffer[counter] = c;
   d4140:	7823      	ldrb	r3, [r4, #0]
   d4142:	f806 3f01 	strb.w	r3, [r6, #1]!

  Serial.println("count: ");
  Serial.print(Wire.available());
  Serial.println();

  while(Wire.available() > 0){
   d4146:	e7e9      	b.n	d411c <_Z12dataReceivedi+0x5c>
    c = Wire.read();
    Serial.println(c);
    inputBuffer[counter] = c;
    counter++;
  }
  Serial.println("data received: ");
   d4148:	f000 fd9a 	bl	d4c80 <_Z16_fetch_usbserialv>
   d414c:	4932      	ldr	r1, [pc, #200]	; (d4218 <_Z12dataReceivedi+0x158>)
   d414e:	f000 fbd4 	bl	d48fa <_ZN5Print7printlnEPKc>
  Serial.print(inputBuffer);
   d4152:	f000 fd95 	bl	d4c80 <_Z16_fetch_usbserialv>
   d4156:	4629      	mov	r1, r5
   d4158:	f000 fbbc 	bl	d48d4 <_ZN5Print5printEPKc>
  Serial.println();
   d415c:	f000 fd90 	bl	d4c80 <_Z16_fetch_usbserialv>
   d4160:	f000 fbbf 	bl	d48e2 <_ZN5Print7printlnEv>

  if(inputBuffer[0] == '1'){
   d4164:	782b      	ldrb	r3, [r5, #0]
   d4166:	2b31      	cmp	r3, #49	; 0x31
   d4168:	d101      	bne.n	d416e <_Z12dataReceivedi+0xae>
    requestMode = 1;
   d416a:	2201      	movs	r2, #1
   d416c:	e002      	b.n	d4174 <_Z12dataReceivedi+0xb4>
  }else if(inputBuffer[0] == '2'){
   d416e:	2b32      	cmp	r3, #50	; 0x32
   d4170:	d103      	bne.n	d417a <_Z12dataReceivedi+0xba>
    requestMode = 2;
   d4172:	2202      	movs	r2, #2
   d4174:	4b29      	ldr	r3, [pc, #164]	; (d421c <_Z12dataReceivedi+0x15c>)
   d4176:	601a      	str	r2, [r3, #0]
   d4178:	e047      	b.n	d420a <_Z12dataReceivedi+0x14a>
  }else if(inputBuffer[0] == '3'){
   d417a:	2b33      	cmp	r3, #51	; 0x33
   d417c:	d103      	bne.n	d4186 <_Z12dataReceivedi+0xc6>
    blink = true;
   d417e:	4b28      	ldr	r3, [pc, #160]	; (d4220 <_Z12dataReceivedi+0x160>)
   d4180:	2201      	movs	r2, #1
   d4182:	701a      	strb	r2, [r3, #0]
   d4184:	e041      	b.n	d420a <_Z12dataReceivedi+0x14a>
  }else if(inputBuffer[0] == '4'){
   d4186:	2b34      	cmp	r3, #52	; 0x34
   d4188:	f04f 0400 	mov.w	r4, #0
   d418c:	d102      	bne.n	d4194 <_Z12dataReceivedi+0xd4>
    blink = false;
   d418e:	4b24      	ldr	r3, [pc, #144]	; (d4220 <_Z12dataReceivedi+0x160>)
   d4190:	701c      	strb	r4, [r3, #0]
   d4192:	e03a      	b.n	d420a <_Z12dataReceivedi+0x14a>
   d4194:	4e23      	ldr	r6, [pc, #140]	; (d4224 <_Z12dataReceivedi+0x164>)
    for(int i = 0; i < 24; i++){
      if(deviceID.charAt(i) != inputBuffer[i]){
        verifyAddress = false;
        break;
      }
      verifyAddress = true;
   d4196:	f04f 0801 	mov.w	r8, #1
    blink = true;
  }else if(inputBuffer[0] == '4'){
    blink = false;
  }else{
    for(int i = 0; i < 24; i++){
      if(deviceID.charAt(i) != inputBuffer[i]){
   d419a:	4621      	mov	r1, r4
   d419c:	4822      	ldr	r0, [pc, #136]	; (d4228 <_Z12dataReceivedi+0x168>)
   d419e:	f000 fb65 	bl	d486c <_ZNK6String6charAtEj>
   d41a2:	5d2b      	ldrb	r3, [r5, r4]
   d41a4:	4283      	cmp	r3, r0
   d41a6:	4b1f      	ldr	r3, [pc, #124]	; (d4224 <_Z12dataReceivedi+0x164>)
   d41a8:	d002      	beq.n	d41b0 <_Z12dataReceivedi+0xf0>
        verifyAddress = false;
   d41aa:	2200      	movs	r2, #0
   d41ac:	701a      	strb	r2, [r3, #0]
        break;
   d41ae:	e004      	b.n	d41ba <_Z12dataReceivedi+0xfa>
  }else if(inputBuffer[0] == '3'){
    blink = true;
  }else if(inputBuffer[0] == '4'){
    blink = false;
  }else{
    for(int i = 0; i < 24; i++){
   d41b0:	3401      	adds	r4, #1
   d41b2:	2c18      	cmp	r4, #24
      if(deviceID.charAt(i) != inputBuffer[i]){
        verifyAddress = false;
        break;
      }
      verifyAddress = true;
   d41b4:	f886 8000 	strb.w	r8, [r6]
  }else if(inputBuffer[0] == '3'){
    blink = true;
  }else if(inputBuffer[0] == '4'){
    blink = false;
  }else{
    for(int i = 0; i < 24; i++){
   d41b8:	d1ef      	bne.n	d419a <_Z12dataReceivedi+0xda>
        verifyAddress = false;
        break;
      }
      verifyAddress = true;
    }
    if(verifyAddress){
   d41ba:	781c      	ldrb	r4, [r3, #0]
   d41bc:	b12c      	cbz	r4, d41ca <_Z12dataReceivedi+0x10a>
      Serial.println("correct address");
   d41be:	f000 fd5f 	bl	d4c80 <_Z16_fetch_usbserialv>
   d41c2:	491a      	ldr	r1, [pc, #104]	; (d422c <_Z12dataReceivedi+0x16c>)
   d41c4:	f000 fb99 	bl	d48fa <_ZN5Print7printlnEPKc>
   d41c8:	e01f      	b.n	d420a <_Z12dataReceivedi+0x14a>
    }else{
      Serial.println("randomize address");
   d41ca:	f000 fd59 	bl	d4c80 <_Z16_fetch_usbserialv>
   d41ce:	4918      	ldr	r1, [pc, #96]	; (d4230 <_Z12dataReceivedi+0x170>)
      address = random(64, 120);
   d41d0:	4d18      	ldr	r5, [pc, #96]	; (d4234 <_Z12dataReceivedi+0x174>)
      verifyAddress = true;
    }
    if(verifyAddress){
      Serial.println("correct address");
    }else{
      Serial.println("randomize address");
   d41d2:	f000 fb92 	bl	d48fa <_ZN5Print7printlnEPKc>
      address = random(64, 120);
   d41d6:	2178      	movs	r1, #120	; 0x78
   d41d8:	2040      	movs	r0, #64	; 0x40
   d41da:	f000 fe5b 	bl	d4e94 <_Z6randomii>
   d41de:	6028      	str	r0, [r5, #0]
      Wire.end();
   d41e0:	f001 f87c 	bl	d52dc <_Z19__fetch_global_Wirev>
   d41e4:	f000 fe3b 	bl	d4e5e <_ZN7TwoWire3endEv>
      Wire.begin(address);
   d41e8:	f001 f878 	bl	d52dc <_Z19__fetch_global_Wirev>
   d41ec:	6829      	ldr	r1, [r5, #0]
   d41ee:	f000 fe33 	bl	d4e58 <_ZN7TwoWire5beginEi>
      Wire.onReceive(dataReceived);
   d41f2:	f001 f873 	bl	d52dc <_Z19__fetch_global_Wirev>
   d41f6:	4910      	ldr	r1, [pc, #64]	; (d4238 <_Z12dataReceivedi+0x178>)
   d41f8:	f000 fe35 	bl	d4e66 <_ZN7TwoWire9onReceiveEPFviE>
      Wire.onRequest(dataRequest);
   d41fc:	f001 f86e 	bl	d52dc <_Z19__fetch_global_Wirev>
   d4200:	490e      	ldr	r1, [pc, #56]	; (d423c <_Z12dataReceivedi+0x17c>)
   d4202:	f000 fe34 	bl	d4e6e <_ZN7TwoWire9onRequestEPFvvE>
      requestMode = 0;
   d4206:	4b05      	ldr	r3, [pc, #20]	; (d421c <_Z12dataReceivedi+0x15c>)
   d4208:	601c      	str	r4, [r3, #0]
    }
  }
}
   d420a:	46bd      	mov	sp, r7
   d420c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4210:	000d5728 	.word	0x000d5728
   d4214:	2003e3c4 	.word	0x2003e3c4
   d4218:	000d5730 	.word	0x000d5730
   d421c:	2003e3cc 	.word	0x2003e3cc
   d4220:	2003e3a0 	.word	0x2003e3a0
   d4224:	2003e3b4 	.word	0x2003e3b4
   d4228:	2003e3a4 	.word	0x2003e3a4
   d422c:	000d5740 	.word	0x000d5740
   d4230:	000d5750 	.word	0x000d5750
   d4234:	2003e3c8 	.word	0x2003e3c8
   d4238:	000d40c1 	.word	0x000d40c1
   d423c:	000d4261 	.word	0x000d4261

000d4240 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4240:	b570      	push	{r4, r5, r6, lr}
   d4242:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d4244:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d4246:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d4248:	b149      	cbz	r1, d425e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d424a:	f001 fa5b 	bl	d5704 <strlen>
   d424e:	682b      	ldr	r3, [r5, #0]
   d4250:	4602      	mov	r2, r0
   d4252:	4621      	mov	r1, r4
   d4254:	4628      	mov	r0, r5
   d4256:	68db      	ldr	r3, [r3, #12]
    }
   d4258:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d425c:	4718      	bx	r3
    }
   d425e:	bd70      	pop	{r4, r5, r6, pc}

000d4260 <_Z11dataRequestv>:

void dataRequest(){
   d4260:	b510      	push	{r4, lr}
  Serial.println("request received");
   d4262:	f000 fd0d 	bl	d4c80 <_Z16_fetch_usbserialv>
   d4266:	4915      	ldr	r1, [pc, #84]	; (d42bc <_Z11dataRequestv+0x5c>)
   d4268:	f000 fb47 	bl	d48fa <_ZN5Print7printlnEPKc>
  switch(requestMode){
   d426c:	4b14      	ldr	r3, [pc, #80]	; (d42c0 <_Z11dataRequestv+0x60>)
   d426e:	681b      	ldr	r3, [r3, #0]
   d4270:	2b01      	cmp	r3, #1
   d4272:	d002      	beq.n	d427a <_Z11dataRequestv+0x1a>
   d4274:	2b02      	cmp	r3, #2
   d4276:	d00a      	beq.n	d428e <_Z11dataRequestv+0x2e>
   d4278:	bd10      	pop	{r4, pc}
    case 1:{
      Serial.println("request mode 1");
   d427a:	f000 fd01 	bl	d4c80 <_Z16_fetch_usbserialv>
   d427e:	4911      	ldr	r1, [pc, #68]	; (d42c4 <_Z11dataRequestv+0x64>)
   d4280:	f000 fb3b 	bl	d48fa <_ZN5Print7printlnEPKc>
      Wire.write(deviceID);
   d4284:	f001 f82a 	bl	d52dc <_Z19__fetch_global_Wirev>
   d4288:	4b0f      	ldr	r3, [pc, #60]	; (d42c8 <_Z11dataRequestv+0x68>)
   d428a:	6819      	ldr	r1, [r3, #0]
   d428c:	e012      	b.n	d42b4 <_Z11dataRequestv+0x54>
      break;
    }
    case 2:{
      Serial.println("request mode 2");
      if(verifyAddress){
   d428e:	4c0f      	ldr	r4, [pc, #60]	; (d42cc <_Z11dataRequestv+0x6c>)
      Serial.println("request mode 1");
      Wire.write(deviceID);
      break;
    }
    case 2:{
      Serial.println("request mode 2");
   d4290:	f000 fcf6 	bl	d4c80 <_Z16_fetch_usbserialv>
   d4294:	490e      	ldr	r1, [pc, #56]	; (d42d0 <_Z11dataRequestv+0x70>)
   d4296:	f000 fb30 	bl	d48fa <_ZN5Print7printlnEPKc>
      if(verifyAddress){
   d429a:	7823      	ldrb	r3, [r4, #0]
   d429c:	b13b      	cbz	r3, d42ae <_Z11dataRequestv+0x4e>
        Wire.write("pass");
   d429e:	f001 f81d 	bl	d52dc <_Z19__fetch_global_Wirev>
   d42a2:	490c      	ldr	r1, [pc, #48]	; (d42d4 <_Z11dataRequestv+0x74>)
   d42a4:	f7ff ffcc 	bl	d4240 <_ZN5Print5writeEPKc>
        verifyAddress = false;
   d42a8:	2300      	movs	r3, #0
   d42aa:	7023      	strb	r3, [r4, #0]
   d42ac:	bd10      	pop	{r4, pc}
      }else{
        Wire.write("fail");
   d42ae:	f001 f815 	bl	d52dc <_Z19__fetch_global_Wirev>
   d42b2:	4909      	ldr	r1, [pc, #36]	; (d42d8 <_Z11dataRequestv+0x78>)
   d42b4:	f7ff ffc4 	bl	d4240 <_ZN5Print5writeEPKc>
   d42b8:	bd10      	pop	{r4, pc}
   d42ba:	bf00      	nop
   d42bc:	000d5762 	.word	0x000d5762
   d42c0:	2003e3cc 	.word	0x2003e3cc
   d42c4:	000d5773 	.word	0x000d5773
   d42c8:	2003e3a4 	.word	0x2003e3a4
   d42cc:	2003e3b4 	.word	0x2003e3b4
   d42d0:	000d5782 	.word	0x000d5782
   d42d4:	000d5791 	.word	0x000d5791
   d42d8:	000d5796 	.word	0x000d5796

000d42dc <setup>:
int requestMode = 0;
bool verifyAddress = false;
String deviceID = System.deviceID();
bool blink = false;

void setup() {
   d42dc:	b508      	push	{r3, lr}
  Serial.begin(9600);
   d42de:	f000 fccf 	bl	d4c80 <_Z16_fetch_usbserialv>
   d42e2:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d42e6:	f000 fcbf 	bl	d4c68 <_ZN9USBSerial5beginEl>
  address = random(8, 64);
   d42ea:	2140      	movs	r1, #64	; 0x40
   d42ec:	2008      	movs	r0, #8
   d42ee:	f000 fdd1 	bl	d4e94 <_Z6randomii>
   d42f2:	4b0b      	ldr	r3, [pc, #44]	; (d4320 <setup+0x44>)
   d42f4:	6018      	str	r0, [r3, #0]
  Wire.begin(15);
   d42f6:	f000 fff1 	bl	d52dc <_Z19__fetch_global_Wirev>
   d42fa:	210f      	movs	r1, #15
   d42fc:	f000 fdac 	bl	d4e58 <_ZN7TwoWire5beginEi>
  Wire.onReceive(dataReceived);
   d4300:	f000 ffec 	bl	d52dc <_Z19__fetch_global_Wirev>
   d4304:	4907      	ldr	r1, [pc, #28]	; (d4324 <setup+0x48>)
   d4306:	f000 fdae 	bl	d4e66 <_ZN7TwoWire9onReceiveEPFviE>
  Wire.onRequest(dataRequest);
   d430a:	f000 ffe7 	bl	d52dc <_Z19__fetch_global_Wirev>
   d430e:	4906      	ldr	r1, [pc, #24]	; (d4328 <setup+0x4c>)
   d4310:	f000 fdad 	bl	d4e6e <_ZN7TwoWire9onRequestEPFvvE>

  pinMode(D7, OUTPUT);
   d4314:	2101      	movs	r1, #1
   d4316:	2007      	movs	r0, #7
}
   d4318:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  address = random(8, 64);
  Wire.begin(15);
  Wire.onReceive(dataReceived);
  Wire.onRequest(dataRequest);

  pinMode(D7, OUTPUT);
   d431c:	f000 bf9a 	b.w	d5254 <pinMode>
   d4320:	2003e3c8 	.word	0x2003e3c8
   d4324:	000d40c1 	.word	0x000d40c1
   d4328:	000d4261 	.word	0x000d4261

000d432c <loop>:
}

void loop() {
   d432c:	b508      	push	{r3, lr}
  if(blink){
   d432e:	4b0c      	ldr	r3, [pc, #48]	; (d4360 <loop+0x34>)
   d4330:	781b      	ldrb	r3, [r3, #0]
   d4332:	b17b      	cbz	r3, d4354 <loop+0x28>
    digitalWrite(D7, HIGH);
   d4334:	2101      	movs	r1, #1
   d4336:	2007      	movs	r0, #7
   d4338:	f000 ff9d 	bl	d5276 <digitalWrite>
    delay(500);
   d433c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4340:	f000 fb22 	bl	d4988 <delay>
    digitalWrite(D7, LOW);
   d4344:	2007      	movs	r0, #7
   d4346:	2100      	movs	r1, #0
   d4348:	f000 ff95 	bl	d5276 <digitalWrite>
    delay(500);
   d434c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d4350:	f000 fb1a 	bl	d4988 <delay>
  }
  delay(100);
   d4354:	2064      	movs	r0, #100	; 0x64
}
   d4356:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    digitalWrite(D7, HIGH);
    delay(500);
    digitalWrite(D7, LOW);
    delay(500);
  }
  delay(100);
   d435a:	f000 bb15 	b.w	d4988 <delay>
   d435e:	bf00      	nop
   d4360:	2003e3a0 	.word	0x2003e3a0

000d4364 <_GLOBAL__sub_I_SystemMode>:
        Wire.write("fail");
      }
      break;
    }
  }
   d4364:	b538      	push	{r3, r4, r5, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4366:	4c0f      	ldr	r4, [pc, #60]	; (d43a4 <_GLOBAL__sub_I_SystemMode+0x40>)
SYSTEM_MODE(MANUAL)
   d4368:	4d0f      	ldr	r5, [pc, #60]	; (d43a8 <_GLOBAL__sub_I_SystemMode+0x44>)

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d436a:	f000 f835 	bl	d43d8 <HAL_Pin_Map>
   d436e:	2300      	movs	r3, #0
   d4370:	6023      	str	r3, [r4, #0]
   d4372:	80a3      	strh	r3, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4374:	71a3      	strb	r3, [r4, #6]
   d4376:	8123      	strh	r3, [r4, #8]
   d4378:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d437c:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d437e:	2003      	movs	r0, #3
   d4380:	f000 f96a 	bl	d4658 <set_system_mode>
   d4384:	4620      	mov	r0, r4
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, long seconds = 0, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleepPinImpl(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, std::chrono::seconds s, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, s.count(), flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count()); }

    static String deviceID(void) { return spark_deviceID(); }
   d4386:	4c09      	ldr	r4, [pc, #36]	; (d43ac <_GLOBAL__sub_I_SystemMode+0x48>)
   d4388:	4909      	ldr	r1, [pc, #36]	; (d43b0 <_GLOBAL__sub_I_SystemMode+0x4c>)
   d438a:	462a      	mov	r2, r5
   d438c:	f000 ffcc 	bl	d5328 <__aeabi_atexit>
   d4390:	4620      	mov	r0, r4
   d4392:	f000 f9d5 	bl	d4740 <spark_deviceID>

int address;
int requestMode = 0;
bool verifyAddress = false;
String deviceID = System.deviceID();
   d4396:	462a      	mov	r2, r5
   d4398:	4620      	mov	r0, r4
   d439a:	4906      	ldr	r1, [pc, #24]	; (d43b4 <_GLOBAL__sub_I_SystemMode+0x50>)
        Wire.write("fail");
      }
      break;
    }
  }
   d439c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
SYSTEM_MODE(MANUAL)

int address;
int requestMode = 0;
bool verifyAddress = false;
String deviceID = System.deviceID();
   d43a0:	f000 bfc2 	b.w	d5328 <__aeabi_atexit>
   d43a4:	2003e3b8 	.word	0x2003e3b8
   d43a8:	2003e39c 	.word	0x2003e39c
   d43ac:	2003e3a4 	.word	0x2003e3a4
   d43b0:	000d40af 	.word	0x000d40af
   d43b4:	000d484d 	.word	0x000d484d

000d43b8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d43b8:	b508      	push	{r3, lr}
   d43ba:	4b02      	ldr	r3, [pc, #8]	; (d43c4 <netdb_freeaddrinfo+0xc>)
   d43bc:	681b      	ldr	r3, [r3, #0]
   d43be:	689b      	ldr	r3, [r3, #8]
   d43c0:	9301      	str	r3, [sp, #4]
   d43c2:	bd08      	pop	{r3, pc}
   d43c4:	00030268 	.word	0x00030268

000d43c8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d43c8:	b508      	push	{r3, lr}
   d43ca:	4b02      	ldr	r3, [pc, #8]	; (d43d4 <netdb_getaddrinfo+0xc>)
   d43cc:	681b      	ldr	r3, [r3, #0]
   d43ce:	68db      	ldr	r3, [r3, #12]
   d43d0:	9301      	str	r3, [sp, #4]
   d43d2:	bd08      	pop	{r3, pc}
   d43d4:	00030268 	.word	0x00030268

000d43d8 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d43d8:	b508      	push	{r3, lr}
   d43da:	4b02      	ldr	r3, [pc, #8]	; (d43e4 <HAL_Pin_Map+0xc>)
   d43dc:	681b      	ldr	r3, [r3, #0]
   d43de:	681b      	ldr	r3, [r3, #0]
   d43e0:	9301      	str	r3, [sp, #4]
   d43e2:	bd08      	pop	{r3, pc}
   d43e4:	0003022c 	.word	0x0003022c

000d43e8 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d43e8:	b508      	push	{r3, lr}
   d43ea:	4b02      	ldr	r3, [pc, #8]	; (d43f4 <HAL_Pin_Mode+0xc>)
   d43ec:	681b      	ldr	r3, [r3, #0]
   d43ee:	689b      	ldr	r3, [r3, #8]
   d43f0:	9301      	str	r3, [sp, #4]
   d43f2:	bd08      	pop	{r3, pc}
   d43f4:	0003022c 	.word	0x0003022c

000d43f8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d43f8:	b508      	push	{r3, lr}
   d43fa:	4b02      	ldr	r3, [pc, #8]	; (d4404 <HAL_Get_Pin_Mode+0xc>)
   d43fc:	681b      	ldr	r3, [r3, #0]
   d43fe:	68db      	ldr	r3, [r3, #12]
   d4400:	9301      	str	r3, [sp, #4]
   d4402:	bd08      	pop	{r3, pc}
   d4404:	0003022c 	.word	0x0003022c

000d4408 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4408:	b508      	push	{r3, lr}
   d440a:	4b02      	ldr	r3, [pc, #8]	; (d4414 <HAL_GPIO_Write+0xc>)
   d440c:	681b      	ldr	r3, [r3, #0]
   d440e:	691b      	ldr	r3, [r3, #16]
   d4410:	9301      	str	r3, [sp, #4]
   d4412:	bd08      	pop	{r3, pc}
   d4414:	0003022c 	.word	0x0003022c

000d4418 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4418:	b508      	push	{r3, lr}
   d441a:	4b02      	ldr	r3, [pc, #8]	; (d4424 <HAL_SPI_Init+0xc>)
   d441c:	681b      	ldr	r3, [r3, #0]
   d441e:	69db      	ldr	r3, [r3, #28]
   d4420:	9301      	str	r3, [sp, #4]
   d4422:	bd08      	pop	{r3, pc}
   d4424:	00030230 	.word	0x00030230

000d4428 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d4428:	b508      	push	{r3, lr}
   d442a:	4b02      	ldr	r3, [pc, #8]	; (d4434 <HAL_SPI_Is_Enabled+0xc>)
   d442c:	681b      	ldr	r3, [r3, #0]
   d442e:	6a1b      	ldr	r3, [r3, #32]
   d4430:	9301      	str	r3, [sp, #4]
   d4432:	bd08      	pop	{r3, pc}
   d4434:	00030230 	.word	0x00030230

000d4438 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4438:	b508      	push	{r3, lr}
   d443a:	4b02      	ldr	r3, [pc, #8]	; (d4444 <HAL_RNG_GetRandomNumber+0xc>)
   d443c:	681b      	ldr	r3, [r3, #0]
   d443e:	685b      	ldr	r3, [r3, #4]
   d4440:	9301      	str	r3, [sp, #4]
   d4442:	bd08      	pop	{r3, pc}
   d4444:	00030218 	.word	0x00030218

000d4448 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4448:	b508      	push	{r3, lr}
   d444a:	4b02      	ldr	r3, [pc, #8]	; (d4454 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d444c:	681b      	ldr	r3, [r3, #0]
   d444e:	695b      	ldr	r3, [r3, #20]
   d4450:	9301      	str	r3, [sp, #4]
   d4452:	bd08      	pop	{r3, pc}
   d4454:	00030218 	.word	0x00030218

000d4458 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4458:	b508      	push	{r3, lr}
   d445a:	4b02      	ldr	r3, [pc, #8]	; (d4464 <os_thread_is_current+0xc>)
   d445c:	681b      	ldr	r3, [r3, #0]
   d445e:	689b      	ldr	r3, [r3, #8]
   d4460:	9301      	str	r3, [sp, #4]
   d4462:	bd08      	pop	{r3, pc}
   d4464:	00030248 	.word	0x00030248

000d4468 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4468:	b508      	push	{r3, lr}
   d446a:	4b02      	ldr	r3, [pc, #8]	; (d4474 <os_thread_join+0xc>)
   d446c:	681b      	ldr	r3, [r3, #0]
   d446e:	691b      	ldr	r3, [r3, #16]
   d4470:	9301      	str	r3, [sp, #4]
   d4472:	bd08      	pop	{r3, pc}
   d4474:	00030248 	.word	0x00030248

000d4478 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4478:	b508      	push	{r3, lr}
   d447a:	4b02      	ldr	r3, [pc, #8]	; (d4484 <os_thread_cleanup+0xc>)
   d447c:	681b      	ldr	r3, [r3, #0]
   d447e:	695b      	ldr	r3, [r3, #20]
   d4480:	9301      	str	r3, [sp, #4]
   d4482:	bd08      	pop	{r3, pc}
   d4484:	00030248 	.word	0x00030248

000d4488 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4488:	b508      	push	{r3, lr}
   d448a:	4b02      	ldr	r3, [pc, #8]	; (d4494 <os_mutex_recursive_create+0xc>)
   d448c:	681b      	ldr	r3, [r3, #0]
   d448e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4490:	9301      	str	r3, [sp, #4]
   d4492:	bd08      	pop	{r3, pc}
   d4494:	00030248 	.word	0x00030248

000d4498 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4498:	b508      	push	{r3, lr}
   d449a:	4b02      	ldr	r3, [pc, #8]	; (d44a4 <os_mutex_recursive_destroy+0xc>)
   d449c:	681b      	ldr	r3, [r3, #0]
   d449e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d44a0:	9301      	str	r3, [sp, #4]
   d44a2:	bd08      	pop	{r3, pc}
   d44a4:	00030248 	.word	0x00030248

000d44a8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d44a8:	b508      	push	{r3, lr}
   d44aa:	4b02      	ldr	r3, [pc, #8]	; (d44b4 <inet_inet_ntop+0xc>)
   d44ac:	681b      	ldr	r3, [r3, #0]
   d44ae:	695b      	ldr	r3, [r3, #20]
   d44b0:	9301      	str	r3, [sp, #4]
   d44b2:	bd08      	pop	{r3, pc}
   d44b4:	00030264 	.word	0x00030264

000d44b8 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d44b8:	b508      	push	{r3, lr}
   d44ba:	4b02      	ldr	r3, [pc, #8]	; (d44c4 <HAL_USART_Init+0xc>)
   d44bc:	681b      	ldr	r3, [r3, #0]
   d44be:	681b      	ldr	r3, [r3, #0]
   d44c0:	9301      	str	r3, [sp, #4]
   d44c2:	bd08      	pop	{r3, pc}
   d44c4:	0003023c 	.word	0x0003023c

000d44c8 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d44c8:	b508      	push	{r3, lr}
   d44ca:	4b02      	ldr	r3, [pc, #8]	; (d44d4 <HAL_USART_Write_Data+0xc>)
   d44cc:	681b      	ldr	r3, [r3, #0]
   d44ce:	68db      	ldr	r3, [r3, #12]
   d44d0:	9301      	str	r3, [sp, #4]
   d44d2:	bd08      	pop	{r3, pc}
   d44d4:	0003023c 	.word	0x0003023c

000d44d8 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d44d8:	b508      	push	{r3, lr}
   d44da:	4b02      	ldr	r3, [pc, #8]	; (d44e4 <HAL_USART_Available_Data+0xc>)
   d44dc:	681b      	ldr	r3, [r3, #0]
   d44de:	691b      	ldr	r3, [r3, #16]
   d44e0:	9301      	str	r3, [sp, #4]
   d44e2:	bd08      	pop	{r3, pc}
   d44e4:	0003023c 	.word	0x0003023c

000d44e8 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d44e8:	b508      	push	{r3, lr}
   d44ea:	4b02      	ldr	r3, [pc, #8]	; (d44f4 <HAL_USART_Read_Data+0xc>)
   d44ec:	681b      	ldr	r3, [r3, #0]
   d44ee:	695b      	ldr	r3, [r3, #20]
   d44f0:	9301      	str	r3, [sp, #4]
   d44f2:	bd08      	pop	{r3, pc}
   d44f4:	0003023c 	.word	0x0003023c

000d44f8 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d44f8:	b508      	push	{r3, lr}
   d44fa:	4b02      	ldr	r3, [pc, #8]	; (d4504 <HAL_USART_Peek_Data+0xc>)
   d44fc:	681b      	ldr	r3, [r3, #0]
   d44fe:	699b      	ldr	r3, [r3, #24]
   d4500:	9301      	str	r3, [sp, #4]
   d4502:	bd08      	pop	{r3, pc}
   d4504:	0003023c 	.word	0x0003023c

000d4508 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4508:	b508      	push	{r3, lr}
   d450a:	4b02      	ldr	r3, [pc, #8]	; (d4514 <HAL_USART_Flush_Data+0xc>)
   d450c:	681b      	ldr	r3, [r3, #0]
   d450e:	69db      	ldr	r3, [r3, #28]
   d4510:	9301      	str	r3, [sp, #4]
   d4512:	bd08      	pop	{r3, pc}
   d4514:	0003023c 	.word	0x0003023c

000d4518 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d4518:	b508      	push	{r3, lr}
   d451a:	4b02      	ldr	r3, [pc, #8]	; (d4524 <HAL_USART_Is_Enabled+0xc>)
   d451c:	681b      	ldr	r3, [r3, #0]
   d451e:	6a1b      	ldr	r3, [r3, #32]
   d4520:	9301      	str	r3, [sp, #4]
   d4522:	bd08      	pop	{r3, pc}
   d4524:	0003023c 	.word	0x0003023c

000d4528 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4528:	b508      	push	{r3, lr}
   d452a:	4b02      	ldr	r3, [pc, #8]	; (d4534 <HAL_USART_Available_Data_For_Write+0xc>)
   d452c:	681b      	ldr	r3, [r3, #0]
   d452e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4530:	9301      	str	r3, [sp, #4]
   d4532:	bd08      	pop	{r3, pc}
   d4534:	0003023c 	.word	0x0003023c

000d4538 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d4538:	b508      	push	{r3, lr}
   d453a:	4b02      	ldr	r3, [pc, #8]	; (d4544 <HAL_I2C_Begin+0xc>)
   d453c:	681b      	ldr	r3, [r3, #0]
   d453e:	68db      	ldr	r3, [r3, #12]
   d4540:	9301      	str	r3, [sp, #4]
   d4542:	bd08      	pop	{r3, pc}
   d4544:	00030228 	.word	0x00030228

000d4548 <HAL_I2C_End>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
   d4548:	b508      	push	{r3, lr}
   d454a:	4b02      	ldr	r3, [pc, #8]	; (d4554 <HAL_I2C_End+0xc>)
   d454c:	681b      	ldr	r3, [r3, #0]
   d454e:	691b      	ldr	r3, [r3, #16]
   d4550:	9301      	str	r3, [sp, #4]
   d4552:	bd08      	pop	{r3, pc}
   d4554:	00030228 	.word	0x00030228

000d4558 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4558:	b508      	push	{r3, lr}
   d455a:	4b02      	ldr	r3, [pc, #8]	; (d4564 <HAL_I2C_Write_Data+0xc>)
   d455c:	681b      	ldr	r3, [r3, #0]
   d455e:	6a1b      	ldr	r3, [r3, #32]
   d4560:	9301      	str	r3, [sp, #4]
   d4562:	bd08      	pop	{r3, pc}
   d4564:	00030228 	.word	0x00030228

000d4568 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4568:	b508      	push	{r3, lr}
   d456a:	4b02      	ldr	r3, [pc, #8]	; (d4574 <HAL_I2C_Available_Data+0xc>)
   d456c:	681b      	ldr	r3, [r3, #0]
   d456e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4570:	9301      	str	r3, [sp, #4]
   d4572:	bd08      	pop	{r3, pc}
   d4574:	00030228 	.word	0x00030228

000d4578 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4578:	b508      	push	{r3, lr}
   d457a:	4b02      	ldr	r3, [pc, #8]	; (d4584 <HAL_I2C_Read_Data+0xc>)
   d457c:	681b      	ldr	r3, [r3, #0]
   d457e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4580:	9301      	str	r3, [sp, #4]
   d4582:	bd08      	pop	{r3, pc}
   d4584:	00030228 	.word	0x00030228

000d4588 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4588:	b508      	push	{r3, lr}
   d458a:	4b02      	ldr	r3, [pc, #8]	; (d4594 <HAL_I2C_Peek_Data+0xc>)
   d458c:	681b      	ldr	r3, [r3, #0]
   d458e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4590:	9301      	str	r3, [sp, #4]
   d4592:	bd08      	pop	{r3, pc}
   d4594:	00030228 	.word	0x00030228

000d4598 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4598:	b508      	push	{r3, lr}
   d459a:	4b02      	ldr	r3, [pc, #8]	; (d45a4 <HAL_I2C_Flush_Data+0xc>)
   d459c:	681b      	ldr	r3, [r3, #0]
   d459e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d45a0:	9301      	str	r3, [sp, #4]
   d45a2:	bd08      	pop	{r3, pc}
   d45a4:	00030228 	.word	0x00030228

000d45a8 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d45a8:	b508      	push	{r3, lr}
   d45aa:	4b02      	ldr	r3, [pc, #8]	; (d45b4 <HAL_I2C_Is_Enabled+0xc>)
   d45ac:	681b      	ldr	r3, [r3, #0]
   d45ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d45b0:	9301      	str	r3, [sp, #4]
   d45b2:	bd08      	pop	{r3, pc}
   d45b4:	00030228 	.word	0x00030228

000d45b8 <HAL_I2C_Set_Callback_On_Receive>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
   d45b8:	b508      	push	{r3, lr}
   d45ba:	4b02      	ldr	r3, [pc, #8]	; (d45c4 <HAL_I2C_Set_Callback_On_Receive+0xc>)
   d45bc:	681b      	ldr	r3, [r3, #0]
   d45be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d45c0:	9301      	str	r3, [sp, #4]
   d45c2:	bd08      	pop	{r3, pc}
   d45c4:	00030228 	.word	0x00030228

000d45c8 <HAL_I2C_Set_Callback_On_Request>:
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
   d45c8:	b508      	push	{r3, lr}
   d45ca:	4b02      	ldr	r3, [pc, #8]	; (d45d4 <HAL_I2C_Set_Callback_On_Request+0xc>)
   d45cc:	681b      	ldr	r3, [r3, #0]
   d45ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d45d0:	9301      	str	r3, [sp, #4]
   d45d2:	bd08      	pop	{r3, pc}
   d45d4:	00030228 	.word	0x00030228

000d45d8 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d45d8:	b508      	push	{r3, lr}
   d45da:	4b02      	ldr	r3, [pc, #8]	; (d45e4 <HAL_I2C_Init+0xc>)
   d45dc:	681b      	ldr	r3, [r3, #0]
   d45de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d45e0:	9301      	str	r3, [sp, #4]
   d45e2:	bd08      	pop	{r3, pc}
   d45e4:	00030228 	.word	0x00030228

000d45e8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d45e8:	b508      	push	{r3, lr}
   d45ea:	4b02      	ldr	r3, [pc, #8]	; (d45f4 <HAL_USB_USART_Init+0xc>)
   d45ec:	681b      	ldr	r3, [r3, #0]
   d45ee:	681b      	ldr	r3, [r3, #0]
   d45f0:	9301      	str	r3, [sp, #4]
   d45f2:	bd08      	pop	{r3, pc}
   d45f4:	0003024c 	.word	0x0003024c

000d45f8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d45f8:	b508      	push	{r3, lr}
   d45fa:	4b02      	ldr	r3, [pc, #8]	; (d4604 <HAL_USB_USART_Begin+0xc>)
   d45fc:	681b      	ldr	r3, [r3, #0]
   d45fe:	685b      	ldr	r3, [r3, #4]
   d4600:	9301      	str	r3, [sp, #4]
   d4602:	bd08      	pop	{r3, pc}
   d4604:	0003024c 	.word	0x0003024c

000d4608 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4608:	b508      	push	{r3, lr}
   d460a:	4b02      	ldr	r3, [pc, #8]	; (d4614 <HAL_USB_USART_Available_Data+0xc>)
   d460c:	681b      	ldr	r3, [r3, #0]
   d460e:	691b      	ldr	r3, [r3, #16]
   d4610:	9301      	str	r3, [sp, #4]
   d4612:	bd08      	pop	{r3, pc}
   d4614:	0003024c 	.word	0x0003024c

000d4618 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4618:	b508      	push	{r3, lr}
   d461a:	4b02      	ldr	r3, [pc, #8]	; (d4624 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d461c:	681b      	ldr	r3, [r3, #0]
   d461e:	695b      	ldr	r3, [r3, #20]
   d4620:	9301      	str	r3, [sp, #4]
   d4622:	bd08      	pop	{r3, pc}
   d4624:	0003024c 	.word	0x0003024c

000d4628 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4628:	b508      	push	{r3, lr}
   d462a:	4b02      	ldr	r3, [pc, #8]	; (d4634 <HAL_USB_USART_Receive_Data+0xc>)
   d462c:	681b      	ldr	r3, [r3, #0]
   d462e:	699b      	ldr	r3, [r3, #24]
   d4630:	9301      	str	r3, [sp, #4]
   d4632:	bd08      	pop	{r3, pc}
   d4634:	0003024c 	.word	0x0003024c

000d4638 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4638:	b508      	push	{r3, lr}
   d463a:	4b02      	ldr	r3, [pc, #8]	; (d4644 <HAL_USB_USART_Send_Data+0xc>)
   d463c:	681b      	ldr	r3, [r3, #0]
   d463e:	69db      	ldr	r3, [r3, #28]
   d4640:	9301      	str	r3, [sp, #4]
   d4642:	bd08      	pop	{r3, pc}
   d4644:	0003024c 	.word	0x0003024c

000d4648 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4648:	b508      	push	{r3, lr}
   d464a:	4b02      	ldr	r3, [pc, #8]	; (d4654 <HAL_USB_USART_Flush_Data+0xc>)
   d464c:	681b      	ldr	r3, [r3, #0]
   d464e:	6a1b      	ldr	r3, [r3, #32]
   d4650:	9301      	str	r3, [sp, #4]
   d4652:	bd08      	pop	{r3, pc}
   d4654:	0003024c 	.word	0x0003024c

000d4658 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4658:	b508      	push	{r3, lr}
   d465a:	4b02      	ldr	r3, [pc, #8]	; (d4664 <set_system_mode+0xc>)
   d465c:	681b      	ldr	r3, [r3, #0]
   d465e:	685b      	ldr	r3, [r3, #4]
   d4660:	9301      	str	r3, [sp, #4]
   d4662:	bd08      	pop	{r3, pc}
   d4664:	00030220 	.word	0x00030220

000d4668 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4668:	b508      	push	{r3, lr}
   d466a:	4b02      	ldr	r3, [pc, #8]	; (d4674 <system_delay_ms+0xc>)
   d466c:	681b      	ldr	r3, [r3, #0]
   d466e:	695b      	ldr	r3, [r3, #20]
   d4670:	9301      	str	r3, [sp, #4]
   d4672:	bd08      	pop	{r3, pc}
   d4674:	00030220 	.word	0x00030220

000d4678 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4678:	b508      	push	{r3, lr}
   d467a:	4b03      	ldr	r3, [pc, #12]	; (d4688 <system_ctrl_set_app_request_handler+0x10>)
   d467c:	681b      	ldr	r3, [r3, #0]
   d467e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4682:	9301      	str	r3, [sp, #4]
   d4684:	bd08      	pop	{r3, pc}
   d4686:	0000      	.short	0x0000
   d4688:	00030220 	.word	0x00030220

000d468c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d468c:	b508      	push	{r3, lr}
   d468e:	4b03      	ldr	r3, [pc, #12]	; (d469c <system_ctrl_set_result+0x10>)
   d4690:	681b      	ldr	r3, [r3, #0]
   d4692:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4696:	9301      	str	r3, [sp, #4]
   d4698:	bd08      	pop	{r3, pc}
   d469a:	0000      	.short	0x0000
   d469c:	00030220 	.word	0x00030220

000d46a0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d46a0:	b508      	push	{r3, lr}
   d46a2:	4b02      	ldr	r3, [pc, #8]	; (d46ac <network_connect+0xc>)
   d46a4:	681b      	ldr	r3, [r3, #0]
   d46a6:	685b      	ldr	r3, [r3, #4]
   d46a8:	9301      	str	r3, [sp, #4]
   d46aa:	bd08      	pop	{r3, pc}
   d46ac:	00030240 	.word	0x00030240

000d46b0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d46b0:	b508      	push	{r3, lr}
   d46b2:	4b02      	ldr	r3, [pc, #8]	; (d46bc <network_connecting+0xc>)
   d46b4:	681b      	ldr	r3, [r3, #0]
   d46b6:	689b      	ldr	r3, [r3, #8]
   d46b8:	9301      	str	r3, [sp, #4]
   d46ba:	bd08      	pop	{r3, pc}
   d46bc:	00030240 	.word	0x00030240

000d46c0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d46c0:	b508      	push	{r3, lr}
   d46c2:	4b02      	ldr	r3, [pc, #8]	; (d46cc <network_disconnect+0xc>)
   d46c4:	681b      	ldr	r3, [r3, #0]
   d46c6:	68db      	ldr	r3, [r3, #12]
   d46c8:	9301      	str	r3, [sp, #4]
   d46ca:	bd08      	pop	{r3, pc}
   d46cc:	00030240 	.word	0x00030240

000d46d0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d46d0:	b508      	push	{r3, lr}
   d46d2:	4b02      	ldr	r3, [pc, #8]	; (d46dc <network_ready+0xc>)
   d46d4:	681b      	ldr	r3, [r3, #0]
   d46d6:	691b      	ldr	r3, [r3, #16]
   d46d8:	9301      	str	r3, [sp, #4]
   d46da:	bd08      	pop	{r3, pc}
   d46dc:	00030240 	.word	0x00030240

000d46e0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d46e0:	b508      	push	{r3, lr}
   d46e2:	4b02      	ldr	r3, [pc, #8]	; (d46ec <network_on+0xc>)
   d46e4:	681b      	ldr	r3, [r3, #0]
   d46e6:	695b      	ldr	r3, [r3, #20]
   d46e8:	9301      	str	r3, [sp, #4]
   d46ea:	bd08      	pop	{r3, pc}
   d46ec:	00030240 	.word	0x00030240

000d46f0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d46f0:	b508      	push	{r3, lr}
   d46f2:	4b02      	ldr	r3, [pc, #8]	; (d46fc <network_off+0xc>)
   d46f4:	681b      	ldr	r3, [r3, #0]
   d46f6:	699b      	ldr	r3, [r3, #24]
   d46f8:	9301      	str	r3, [sp, #4]
   d46fa:	bd08      	pop	{r3, pc}
   d46fc:	00030240 	.word	0x00030240

000d4700 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4700:	b508      	push	{r3, lr}
   d4702:	4b02      	ldr	r3, [pc, #8]	; (d470c <network_listen+0xc>)
   d4704:	681b      	ldr	r3, [r3, #0]
   d4706:	69db      	ldr	r3, [r3, #28]
   d4708:	9301      	str	r3, [sp, #4]
   d470a:	bd08      	pop	{r3, pc}
   d470c:	00030240 	.word	0x00030240

000d4710 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4710:	b508      	push	{r3, lr}
   d4712:	4b02      	ldr	r3, [pc, #8]	; (d471c <network_listening+0xc>)
   d4714:	681b      	ldr	r3, [r3, #0]
   d4716:	6a1b      	ldr	r3, [r3, #32]
   d4718:	9301      	str	r3, [sp, #4]
   d471a:	bd08      	pop	{r3, pc}
   d471c:	00030240 	.word	0x00030240

000d4720 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4720:	b508      	push	{r3, lr}
   d4722:	4b02      	ldr	r3, [pc, #8]	; (d472c <network_set_listen_timeout+0xc>)
   d4724:	681b      	ldr	r3, [r3, #0]
   d4726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4728:	9301      	str	r3, [sp, #4]
   d472a:	bd08      	pop	{r3, pc}
   d472c:	00030240 	.word	0x00030240

000d4730 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4730:	b508      	push	{r3, lr}
   d4732:	4b02      	ldr	r3, [pc, #8]	; (d473c <network_get_listen_timeout+0xc>)
   d4734:	681b      	ldr	r3, [r3, #0]
   d4736:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4738:	9301      	str	r3, [sp, #4]
   d473a:	bd08      	pop	{r3, pc}
   d473c:	00030240 	.word	0x00030240

000d4740 <spark_deviceID>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d4740:	b508      	push	{r3, lr}
   d4742:	4b02      	ldr	r3, [pc, #8]	; (d474c <spark_deviceID+0xc>)
   d4744:	681b      	ldr	r3, [r3, #0]
   d4746:	69db      	ldr	r3, [r3, #28]
   d4748:	9301      	str	r3, [sp, #4]
   d474a:	bd08      	pop	{r3, pc}
   d474c:	00030244 	.word	0x00030244

000d4750 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4750:	b508      	push	{r3, lr}
   d4752:	4b02      	ldr	r3, [pc, #8]	; (d475c <spark_set_random_seed_from_cloud_handler+0xc>)
   d4754:	681b      	ldr	r3, [r3, #0]
   d4756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4758:	9301      	str	r3, [sp, #4]
   d475a:	bd08      	pop	{r3, pc}
   d475c:	00030244 	.word	0x00030244

000d4760 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4760:	b508      	push	{r3, lr}
   d4762:	4b02      	ldr	r3, [pc, #8]	; (d476c <malloc+0xc>)
   d4764:	681b      	ldr	r3, [r3, #0]
   d4766:	681b      	ldr	r3, [r3, #0]
   d4768:	9301      	str	r3, [sp, #4]
   d476a:	bd08      	pop	{r3, pc}
   d476c:	0003021c 	.word	0x0003021c

000d4770 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4770:	b508      	push	{r3, lr}
   d4772:	4b02      	ldr	r3, [pc, #8]	; (d477c <free+0xc>)
   d4774:	681b      	ldr	r3, [r3, #0]
   d4776:	685b      	ldr	r3, [r3, #4]
   d4778:	9301      	str	r3, [sp, #4]
   d477a:	bd08      	pop	{r3, pc}
   d477c:	0003021c 	.word	0x0003021c

000d4780 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4780:	2200      	movs	r2, #0
   d4782:	4611      	mov	r1, r2
   d4784:	6840      	ldr	r0, [r0, #4]
   d4786:	f7ff bfc3 	b.w	d4710 <network_listening>

000d478a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d478a:	2200      	movs	r2, #0
   d478c:	4611      	mov	r1, r2
   d478e:	6840      	ldr	r0, [r0, #4]
   d4790:	f7ff bfce 	b.w	d4730 <network_get_listen_timeout>

000d4794 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4794:	2200      	movs	r2, #0
   d4796:	6840      	ldr	r0, [r0, #4]
   d4798:	f7ff bfc2 	b.w	d4720 <network_set_listen_timeout>

000d479c <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d479c:	2200      	movs	r2, #0
   d479e:	f081 0101 	eor.w	r1, r1, #1
   d47a2:	6840      	ldr	r0, [r0, #4]
   d47a4:	f7ff bfac 	b.w	d4700 <network_listen>

000d47a8 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d47a8:	2300      	movs	r3, #0
   d47aa:	461a      	mov	r2, r3
   d47ac:	4619      	mov	r1, r3
   d47ae:	6840      	ldr	r0, [r0, #4]
   d47b0:	f7ff bf9e 	b.w	d46f0 <network_off>

000d47b4 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d47b4:	2300      	movs	r3, #0
   d47b6:	461a      	mov	r2, r3
   d47b8:	4619      	mov	r1, r3
   d47ba:	6840      	ldr	r0, [r0, #4]
   d47bc:	f7ff bf90 	b.w	d46e0 <network_on>

000d47c0 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d47c0:	2200      	movs	r2, #0
   d47c2:	4611      	mov	r1, r2
   d47c4:	6840      	ldr	r0, [r0, #4]
   d47c6:	f7ff bf83 	b.w	d46d0 <network_ready>

000d47ca <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d47ca:	2200      	movs	r2, #0
   d47cc:	4611      	mov	r1, r2
   d47ce:	6840      	ldr	r0, [r0, #4]
   d47d0:	f7ff bf6e 	b.w	d46b0 <network_connecting>

000d47d4 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d47d4:	2200      	movs	r2, #0
   d47d6:	2102      	movs	r1, #2
   d47d8:	6840      	ldr	r0, [r0, #4]
   d47da:	f7ff bf71 	b.w	d46c0 <network_disconnect>

000d47de <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d47de:	2300      	movs	r3, #0
   d47e0:	461a      	mov	r2, r3
   d47e2:	6840      	ldr	r0, [r0, #4]
   d47e4:	f7ff bf5c 	b.w	d46a0 <network_connect>

000d47e8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d47e8:	4b02      	ldr	r3, [pc, #8]	; (d47f4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d47ea:	2203      	movs	r2, #3
   d47ec:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d47ee:	4a02      	ldr	r2, [pc, #8]	; (d47f8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d47f0:	601a      	str	r2, [r3, #0]
   d47f2:	4770      	bx	lr
   d47f4:	2003e3d0 	.word	0x2003e3d0
   d47f8:	000d57a4 	.word	0x000d57a4

000d47fc <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d47fc:	b510      	push	{r4, lr}
   d47fe:	4604      	mov	r4, r0
{
    _spi = spi;
   d4800:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d4802:	4608      	mov	r0, r1
   d4804:	f7ff fe08 	bl	d4418 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d4808:	2300      	movs	r3, #0
   d480a:	6063      	str	r3, [r4, #4]
}
   d480c:	4620      	mov	r0, r4
   d480e:	bd10      	pop	{r4, pc}

000d4810 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d4810:	7800      	ldrb	r0, [r0, #0]
   d4812:	f7ff be09 	b.w	d4428 <HAL_SPI_Is_Enabled>
	...

000d4818 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4818:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d481a:	4c09      	ldr	r4, [pc, #36]	; (d4840 <_GLOBAL__sub_I_System+0x28>)
   d481c:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d481e:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4822:	6020      	str	r0, [r4, #0]
   d4824:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4826:	71a0      	strb	r0, [r4, #6]
   d4828:	8120      	strh	r0, [r4, #8]
   d482a:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d482c:	f7ff ff14 	bl	d4658 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d4830:	4620      	mov	r0, r4
   d4832:	4a04      	ldr	r2, [pc, #16]	; (d4844 <_GLOBAL__sub_I_System+0x2c>)
   d4834:	4904      	ldr	r1, [pc, #16]	; (d4848 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4836:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d483a:	f000 bd75 	b.w	d5328 <__aeabi_atexit>
   d483e:	bf00      	nop
   d4840:	2003e3d8 	.word	0x2003e3d8
   d4844:	2003e39c 	.word	0x2003e39c
   d4848:	000d40af 	.word	0x000d40af

000d484c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d484c:	b510      	push	{r4, lr}
   d484e:	4604      	mov	r4, r0
{
	free(buffer);
   d4850:	6800      	ldr	r0, [r0, #0]
   d4852:	f7ff ff8d 	bl	d4770 <free>
}
   d4856:	4620      	mov	r0, r4
   d4858:	bd10      	pop	{r4, pc}

000d485a <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
   d485a:	6883      	ldr	r3, [r0, #8]
   d485c:	428b      	cmp	r3, r1
   d485e:	d903      	bls.n	d4868 <_ZNK6StringixEj+0xe>
   d4860:	6800      	ldr	r0, [r0, #0]
   d4862:	b110      	cbz	r0, d486a <_ZNK6StringixEj+0x10>
	return buffer[index];
   d4864:	5c40      	ldrb	r0, [r0, r1]
   d4866:	4770      	bx	lr
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
   d4868:	2000      	movs	r0, #0
	return buffer[index];
}
   d486a:	4770      	bx	lr

000d486c <_ZNK6String6charAtEj>:
/*  Character Access                         */
/*********************************************/

char String::charAt(unsigned int loc) const
{
	return operator[](loc);
   d486c:	f7ff bff5 	b.w	d485a <_ZNK6StringixEj>

000d4870 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4870:	b510      	push	{r4, lr}
   d4872:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4874:	6800      	ldr	r0, [r0, #0]
   d4876:	b108      	cbz	r0, d487c <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4878:	f7ff fe0e 	bl	d4498 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d487c:	4620      	mov	r0, r4
   d487e:	bd10      	pop	{r4, pc}

000d4880 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4880:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4882:	4c06      	ldr	r4, [pc, #24]	; (d489c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d4884:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d4886:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4888:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d488a:	f7ff fdfd 	bl	d4488 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d488e:	4620      	mov	r0, r4
   d4890:	4a03      	ldr	r2, [pc, #12]	; (d48a0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d4892:	4904      	ldr	r1, [pc, #16]	; (d48a4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4894:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d4898:	f000 bd46 	b.w	d5328 <__aeabi_atexit>
   d489c:	2003e3e4 	.word	0x2003e3e4
   d48a0:	2003e39c 	.word	0x2003e39c
   d48a4:	000d4871 	.word	0x000d4871

000d48a8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d48a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d48aa:	4606      	mov	r6, r0
   d48ac:	460d      	mov	r5, r1
   d48ae:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d48b0:	2400      	movs	r4, #0
  while (size--) {
   d48b2:	42bd      	cmp	r5, r7
   d48b4:	d00c      	beq.n	d48d0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d48b6:	6833      	ldr	r3, [r6, #0]
   d48b8:	f815 1b01 	ldrb.w	r1, [r5], #1
   d48bc:	689b      	ldr	r3, [r3, #8]
   d48be:	4630      	mov	r0, r6
   d48c0:	4798      	blx	r3
     if (chunk>=0)
   d48c2:	2800      	cmp	r0, #0
   d48c4:	db01      	blt.n	d48ca <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d48c6:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d48c8:	e7f3      	b.n	d48b2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d48ca:	2c00      	cmp	r4, #0
   d48cc:	bf08      	it	eq
   d48ce:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d48d0:	4620      	mov	r0, r4
   d48d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d48d4 <_ZN5Print5printEPKc>:
   d48d4:	b508      	push	{r3, lr}
   d48d6:	f7ff fcb3 	bl	d4240 <_ZN5Print5writeEPKc>
   d48da:	bd08      	pop	{r3, pc}

000d48dc <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d48dc:	6803      	ldr	r3, [r0, #0]
   d48de:	689b      	ldr	r3, [r3, #8]
   d48e0:	4718      	bx	r3

000d48e2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d48e2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d48e4:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d48e6:	4605      	mov	r5, r0
  size_t n = print('\r');
   d48e8:	f7ff fff8 	bl	d48dc <_ZN5Print5printEc>
  n += print('\n');
   d48ec:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d48ee:	4604      	mov	r4, r0
  n += print('\n');
   d48f0:	4628      	mov	r0, r5
   d48f2:	f7ff fff3 	bl	d48dc <_ZN5Print5printEc>
  return n;
}
   d48f6:	4420      	add	r0, r4
   d48f8:	bd38      	pop	{r3, r4, r5, pc}

000d48fa <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d48fa:	b538      	push	{r3, r4, r5, lr}
   d48fc:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d48fe:	f7ff fc9f 	bl	d4240 <_ZN5Print5writeEPKc>
   d4902:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d4904:	4628      	mov	r0, r5
   d4906:	f7ff ffec 	bl	d48e2 <_ZN5Print7printlnEv>
  return n;
}
   d490a:	4420      	add	r0, r4
   d490c:	bd38      	pop	{r3, r4, r5, pc}

000d490e <_ZN5Print7printlnEc>:

size_t Print::println(char c)
{
   d490e:	b538      	push	{r3, r4, r5, lr}
   d4910:	4605      	mov	r5, r0
  size_t n = print(c);
   d4912:	f7ff ffe3 	bl	d48dc <_ZN5Print5printEc>
   d4916:	4604      	mov	r4, r0
  n += println();
   d4918:	4628      	mov	r0, r5
   d491a:	f7ff ffe2 	bl	d48e2 <_ZN5Print7printlnEv>
  return n;
}
   d491e:	4420      	add	r0, r4
   d4920:	bd38      	pop	{r3, r4, r5, pc}

000d4922 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4922:	b530      	push	{r4, r5, lr}
   d4924:	b08b      	sub	sp, #44	; 0x2c
   d4926:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4928:	2100      	movs	r1, #0
   d492a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d492e:	2a01      	cmp	r2, #1
   d4930:	bf98      	it	ls
   d4932:	220a      	movls	r2, #10
   d4934:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d4938:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d493c:	fb05 3312 	mls	r3, r5, r2, r3
   d4940:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4944:	2b09      	cmp	r3, #9
   d4946:	bf94      	ite	ls
   d4948:	3330      	addls	r3, #48	; 0x30
   d494a:	3337      	addhi	r3, #55	; 0x37
   d494c:	b2db      	uxtb	r3, r3
   d494e:	4621      	mov	r1, r4
   d4950:	f804 3901 	strb.w	r3, [r4], #-1
   d4954:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d4956:	2d00      	cmp	r5, #0
   d4958:	d1ee      	bne.n	d4938 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d495a:	f7ff fc71 	bl	d4240 <_ZN5Print5writeEPKc>
}
   d495e:	b00b      	add	sp, #44	; 0x2c
   d4960:	bd30      	pop	{r4, r5, pc}
	...

000d4964 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4964:	4b01      	ldr	r3, [pc, #4]	; (d496c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4966:	4a02      	ldr	r2, [pc, #8]	; (d4970 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4968:	601a      	str	r2, [r3, #0]
   d496a:	4770      	bx	lr
   d496c:	2003e3e8 	.word	0x2003e3e8
   d4970:	000d5843 	.word	0x000d5843

000d4974 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d4974:	4b02      	ldr	r3, [pc, #8]	; (d4980 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d4976:	681a      	ldr	r2, [r3, #0]
   d4978:	4b02      	ldr	r3, [pc, #8]	; (d4984 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d497a:	601a      	str	r2, [r3, #0]
   d497c:	4770      	bx	lr
   d497e:	bf00      	nop
   d4980:	2003e334 	.word	0x2003e334
   d4984:	2003e3ec 	.word	0x2003e3ec

000d4988 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4988:	2100      	movs	r1, #0
   d498a:	f7ff be6d 	b.w	d4668 <system_delay_ms>

000d498e <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d498e:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4990:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4992:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4994:	b113      	cbz	r3, d499c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4996:	2203      	movs	r2, #3
   d4998:	4601      	mov	r1, r0
   d499a:	4798      	blx	r3
    }
   d499c:	4620      	mov	r0, r4
   d499e:	bd10      	pop	{r4, pc}

000d49a0 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d49a0:	b510      	push	{r4, lr}
   d49a2:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d49a4:	f7ff fff3 	bl	d498e <_ZNSt14_Function_baseD1Ev>
   d49a8:	4620      	mov	r0, r4
   d49aa:	bd10      	pop	{r4, pc}

000d49ac <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d49ac:	4803      	ldr	r0, [pc, #12]	; (d49bc <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d49ae:	4a04      	ldr	r2, [pc, #16]	; (d49c0 <_GLOBAL__sub_I_RGB+0x14>)
   d49b0:	4904      	ldr	r1, [pc, #16]	; (d49c4 <_GLOBAL__sub_I_RGB+0x18>)
   d49b2:	2300      	movs	r3, #0
   d49b4:	6083      	str	r3, [r0, #8]
   d49b6:	f000 bcb7 	b.w	d5328 <__aeabi_atexit>
   d49ba:	bf00      	nop
   d49bc:	2003e3f0 	.word	0x2003e3f0
   d49c0:	2003e39c 	.word	0x2003e39c
   d49c4:	000d49a1 	.word	0x000d49a1

000d49c8 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d49c8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d49ca:	4b0c      	ldr	r3, [pc, #48]	; (d49fc <serialEventRun+0x34>)
   d49cc:	b133      	cbz	r3, d49dc <serialEventRun+0x14>
   d49ce:	f000 f957 	bl	d4c80 <_Z16_fetch_usbserialv>
   d49d2:	6803      	ldr	r3, [r0, #0]
   d49d4:	691b      	ldr	r3, [r3, #16]
   d49d6:	4798      	blx	r3
   d49d8:	2800      	cmp	r0, #0
   d49da:	dc09      	bgt.n	d49f0 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d49dc:	4b08      	ldr	r3, [pc, #32]	; (d4a00 <serialEventRun+0x38>)
   d49de:	b163      	cbz	r3, d49fa <serialEventRun+0x32>
   d49e0:	f000 f9d0 	bl	d4d84 <_Z22__fetch_global_Serial1v>
   d49e4:	6803      	ldr	r3, [r0, #0]
   d49e6:	691b      	ldr	r3, [r3, #16]
   d49e8:	4798      	blx	r3
   d49ea:	2800      	cmp	r0, #0
   d49ec:	dc03      	bgt.n	d49f6 <serialEventRun+0x2e>
   d49ee:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d49f0:	f3af 8000 	nop.w
   d49f4:	e7f2      	b.n	d49dc <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d49f6:	f3af 8000 	nop.w
   d49fa:	bd08      	pop	{r3, pc}
	...

000d4a04 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d4a04:	b508      	push	{r3, lr}
	serialEventRun();
   d4a06:	f7ff ffdf 	bl	d49c8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4a0a:	f7ff fd1d 	bl	d4448 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4a0e:	4b01      	ldr	r3, [pc, #4]	; (d4a14 <_post_loop+0x10>)
   d4a10:	6018      	str	r0, [r3, #0]
   d4a12:	bd08      	pop	{r3, pc}
   d4a14:	2003e730 	.word	0x2003e730

000d4a18 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d4a18:	4802      	ldr	r0, [pc, #8]	; (d4a24 <_Z33system_initialize_user_backup_ramv+0xc>)
   d4a1a:	4a03      	ldr	r2, [pc, #12]	; (d4a28 <_Z33system_initialize_user_backup_ramv+0x10>)
   d4a1c:	4903      	ldr	r1, [pc, #12]	; (d4a2c <_Z33system_initialize_user_backup_ramv+0x14>)
   d4a1e:	1a12      	subs	r2, r2, r0
   d4a20:	f000 bdfa 	b.w	d5618 <memcpy>
   d4a24:	2003f400 	.word	0x2003f400
   d4a28:	2003f404 	.word	0x2003f404
   d4a2c:	000d5ac0 	.word	0x000d5ac0

000d4a30 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d4a30:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4a32:	2300      	movs	r3, #0
   d4a34:	9300      	str	r3, [sp, #0]
   d4a36:	461a      	mov	r2, r3
   d4a38:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4a3c:	f7ff fe26 	bl	d468c <system_ctrl_set_result>
}
   d4a40:	b003      	add	sp, #12
   d4a42:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4a48 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d4a48:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d4a4a:	8843      	ldrh	r3, [r0, #2]
   d4a4c:	2b0a      	cmp	r3, #10
   d4a4e:	d008      	beq.n	d4a62 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d4a50:	2b50      	cmp	r3, #80	; 0x50
   d4a52:	d109      	bne.n	d4a68 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d4a54:	4b09      	ldr	r3, [pc, #36]	; (d4a7c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d4a56:	681b      	ldr	r3, [r3, #0]
   d4a58:	b13b      	cbz	r3, d4a6a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d4a5a:	b003      	add	sp, #12
   d4a5c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d4a60:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d4a62:	f7ff ffe5 	bl	d4a30 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d4a66:	e006      	b.n	d4a76 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4a68:	2300      	movs	r3, #0
   d4a6a:	9300      	str	r3, [sp, #0]
   d4a6c:	461a      	mov	r2, r3
   d4a6e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4a72:	f7ff fe0b 	bl	d468c <system_ctrl_set_result>
        break;
    }
}
   d4a76:	b003      	add	sp, #12
   d4a78:	f85d fb04 	ldr.w	pc, [sp], #4
   d4a7c:	2003e400 	.word	0x2003e400

000d4a80 <module_user_init_hook>:

void module_user_init_hook()
{
   d4a80:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d4a82:	4c10      	ldr	r4, [pc, #64]	; (d4ac4 <module_user_init_hook+0x44>)
   d4a84:	4d10      	ldr	r5, [pc, #64]	; (d4ac8 <module_user_init_hook+0x48>)
   d4a86:	6823      	ldr	r3, [r4, #0]
   d4a88:	42ab      	cmp	r3, r5
   d4a8a:	4b10      	ldr	r3, [pc, #64]	; (d4acc <module_user_init_hook+0x4c>)
   d4a8c:	bf0c      	ite	eq
   d4a8e:	2201      	moveq	r2, #1
   d4a90:	2200      	movne	r2, #0
   d4a92:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d4a94:	d002      	beq.n	d4a9c <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d4a96:	f7ff ffbf 	bl	d4a18 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d4a9a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d4a9c:	f7ff fccc 	bl	d4438 <HAL_RNG_GetRandomNumber>
   d4aa0:	4604      	mov	r4, r0
    srand(seed);
   d4aa2:	f000 fdcd 	bl	d5640 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d4aa6:	4b0a      	ldr	r3, [pc, #40]	; (d4ad0 <module_user_init_hook+0x50>)
   d4aa8:	b113      	cbz	r3, d4ab0 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d4aaa:	4620      	mov	r0, r4
   d4aac:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d4ab0:	2100      	movs	r1, #0
   d4ab2:	4807      	ldr	r0, [pc, #28]	; (d4ad0 <module_user_init_hook+0x50>)
   d4ab4:	f7ff fe4c 	bl	d4750 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4ab8:	2100      	movs	r1, #0
   d4aba:	4806      	ldr	r0, [pc, #24]	; (d4ad4 <module_user_init_hook+0x54>)
}
   d4abc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4ac0:	f7ff bdda 	b.w	d4678 <system_ctrl_set_app_request_handler>
   d4ac4:	2003f400 	.word	0x2003f400
   d4ac8:	9a271c1e 	.word	0x9a271c1e
   d4acc:	2003e404 	.word	0x2003e404
   d4ad0:	00000000 	.word	0x00000000
   d4ad4:	000d4a49 	.word	0x000d4a49

000d4ad8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4ad8:	4770      	bx	lr

000d4ada <_ZN9IPAddressD0Ev>:
   d4ada:	b510      	push	{r4, lr}
   d4adc:	2118      	movs	r1, #24
   d4ade:	4604      	mov	r4, r0
   d4ae0:	f000 fc30 	bl	d5344 <_ZdlPvj>
   d4ae4:	4620      	mov	r0, r4
   d4ae6:	bd10      	pop	{r4, pc}

000d4ae8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4aea:	7d03      	ldrb	r3, [r0, #20]
   d4aec:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4aee:	b08d      	sub	sp, #52	; 0x34
   d4af0:	460e      	mov	r6, r1
   d4af2:	f100 0704 	add.w	r7, r0, #4
   d4af6:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4afa:	d002      	beq.n	d4b02 <_ZNK9IPAddress7printToER5Print+0x1a>
   d4afc:	f100 0508 	add.w	r5, r0, #8
   d4b00:	e018      	b.n	d4b34 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4b02:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4b04:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4b06:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4b0a:	232f      	movs	r3, #47	; 0x2f
   d4b0c:	462a      	mov	r2, r5
   d4b0e:	200a      	movs	r0, #10
   d4b10:	f7ff fcca 	bl	d44a8 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4b14:	4628      	mov	r0, r5
   d4b16:	f000 fdf5 	bl	d5704 <strlen>
   d4b1a:	6833      	ldr	r3, [r6, #0]
   d4b1c:	4602      	mov	r2, r0
   d4b1e:	68db      	ldr	r3, [r3, #12]
   d4b20:	4629      	mov	r1, r5
   d4b22:	4630      	mov	r0, r6
   d4b24:	4798      	blx	r3
   d4b26:	e00f      	b.n	d4b48 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d4b28:	b124      	cbz	r4, d4b34 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d4b2a:	212e      	movs	r1, #46	; 0x2e
   d4b2c:	4630      	mov	r0, r6
   d4b2e:	f7ff fed5 	bl	d48dc <_ZN5Print5printEc>
   d4b32:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4b34:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4b38:	220a      	movs	r2, #10
   d4b3a:	4630      	mov	r0, r6
   d4b3c:	f7ff fef1 	bl	d4922 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4b40:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4b42:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4b44:	d1f0      	bne.n	d4b28 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4b46:	4620      	mov	r0, r4
    }
    return n;
}
   d4b48:	b00d      	add	sp, #52	; 0x34
   d4b4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4b4c <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d4b4c:	b510      	push	{r4, lr}
   d4b4e:	4b05      	ldr	r3, [pc, #20]	; (d4b64 <_ZN9IPAddressC1Ev+0x18>)
   d4b50:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d4b52:	2211      	movs	r2, #17
   d4b54:	f840 3b04 	str.w	r3, [r0], #4
   d4b58:	2100      	movs	r1, #0
   d4b5a:	f000 fd68 	bl	d562e <memset>
{
    clear();
}
   d4b5e:	4620      	mov	r0, r4
   d4b60:	bd10      	pop	{r4, pc}
   d4b62:	bf00      	nop
   d4b64:	000d58e4 	.word	0x000d58e4

000d4b68 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d4b68:	4603      	mov	r3, r0
   d4b6a:	4a07      	ldr	r2, [pc, #28]	; (d4b88 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d4b6c:	b510      	push	{r4, lr}
   d4b6e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d4b72:	f101 0210 	add.w	r2, r1, #16
   d4b76:	f851 4b04 	ldr.w	r4, [r1], #4
   d4b7a:	f843 4b04 	str.w	r4, [r3], #4
   d4b7e:	4291      	cmp	r1, r2
   d4b80:	d1f9      	bne.n	d4b76 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d4b82:	780a      	ldrb	r2, [r1, #0]
   d4b84:	701a      	strb	r2, [r3, #0]
}
   d4b86:	bd10      	pop	{r4, pc}
   d4b88:	000d58e4 	.word	0x000d58e4

000d4b8c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d4b8c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d4b8e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d4b92:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d4b96:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d4b9a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d4b9e:	2304      	movs	r3, #4
   d4ba0:	6041      	str	r1, [r0, #4]
   d4ba2:	7503      	strb	r3, [r0, #20]
   d4ba4:	bd10      	pop	{r4, pc}

000d4ba6 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d4ba6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d4ba8:	780d      	ldrb	r5, [r1, #0]
   d4baa:	788b      	ldrb	r3, [r1, #2]
   d4bac:	784a      	ldrb	r2, [r1, #1]
   d4bae:	78c9      	ldrb	r1, [r1, #3]
   d4bb0:	9100      	str	r1, [sp, #0]
   d4bb2:	4629      	mov	r1, r5
   d4bb4:	f7ff ffea 	bl	d4b8c <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d4bb8:	b003      	add	sp, #12
   d4bba:	bd30      	pop	{r4, r5, pc}

000d4bbc <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4bbc:	7441      	strb	r1, [r0, #17]
   d4bbe:	4770      	bx	lr

000d4bc0 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d4bc0:	4770      	bx	lr

000d4bc2 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d4bc2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d4bc4:	2100      	movs	r1, #0
   d4bc6:	7c00      	ldrb	r0, [r0, #16]
   d4bc8:	f7ff fd2e 	bl	d4628 <HAL_USB_USART_Receive_Data>
}
   d4bcc:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4bd0:	bf28      	it	cs
   d4bd2:	f04f 30ff 	movcs.w	r0, #4294967295
   d4bd6:	bd08      	pop	{r3, pc}

000d4bd8 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d4bd8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d4bda:	2101      	movs	r1, #1
   d4bdc:	7c00      	ldrb	r0, [r0, #16]
   d4bde:	f7ff fd23 	bl	d4628 <HAL_USB_USART_Receive_Data>
}
   d4be2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4be6:	bf28      	it	cs
   d4be8:	f04f 30ff 	movcs.w	r0, #4294967295
   d4bec:	bd08      	pop	{r3, pc}

000d4bee <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d4bee:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d4bf0:	7c00      	ldrb	r0, [r0, #16]
   d4bf2:	f7ff fd11 	bl	d4618 <HAL_USB_USART_Available_Data_For_Write>
}
   d4bf6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4bfa:	bd08      	pop	{r3, pc}

000d4bfc <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d4bfc:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d4bfe:	7c00      	ldrb	r0, [r0, #16]
   d4c00:	f7ff fd02 	bl	d4608 <HAL_USB_USART_Available_Data>
}
   d4c04:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4c08:	bd08      	pop	{r3, pc}

000d4c0a <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d4c0a:	7c00      	ldrb	r0, [r0, #16]
   d4c0c:	f7ff bd1c 	b.w	d4648 <HAL_USB_USART_Flush_Data>

000d4c10 <_ZN9USBSerialD0Ev>:
   d4c10:	b510      	push	{r4, lr}
   d4c12:	2114      	movs	r1, #20
   d4c14:	4604      	mov	r4, r0
   d4c16:	f000 fb95 	bl	d5344 <_ZdlPvj>
   d4c1a:	4620      	mov	r0, r4
   d4c1c:	bd10      	pop	{r4, pc}

000d4c1e <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d4c1e:	b538      	push	{r3, r4, r5, lr}
   d4c20:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4c22:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d4c24:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4c26:	f7ff fcf7 	bl	d4618 <HAL_USB_USART_Available_Data_For_Write>
   d4c2a:	2800      	cmp	r0, #0
   d4c2c:	dc01      	bgt.n	d4c32 <_ZN9USBSerial5writeEh+0x14>
   d4c2e:	7c60      	ldrb	r0, [r4, #17]
   d4c30:	b128      	cbz	r0, d4c3e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d4c32:	4629      	mov	r1, r5
   d4c34:	7c20      	ldrb	r0, [r4, #16]
   d4c36:	f7ff fcff 	bl	d4638 <HAL_USB_USART_Send_Data>
   d4c3a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d4c3e:	bd38      	pop	{r3, r4, r5, pc}

000d4c40 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4c40:	b510      	push	{r4, lr}
   d4c42:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4c44:	2300      	movs	r3, #0
   d4c46:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4c48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4c4c:	60a3      	str	r3, [r4, #8]
   d4c4e:	4b05      	ldr	r3, [pc, #20]	; (d4c64 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d4c50:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d4c52:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4c54:	4608      	mov	r0, r1
{
  _serial = serial;
   d4c56:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d4c58:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d4c5a:	4611      	mov	r1, r2
   d4c5c:	f7ff fcc4 	bl	d45e8 <HAL_USB_USART_Init>
}
   d4c60:	4620      	mov	r0, r4
   d4c62:	bd10      	pop	{r4, pc}
   d4c64:	000d58f8 	.word	0x000d58f8

000d4c68 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d4c68:	2200      	movs	r2, #0
   d4c6a:	7c00      	ldrb	r0, [r0, #16]
   d4c6c:	f7ff bcc4 	b.w	d45f8 <HAL_USB_USART_Begin>

000d4c70 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4c70:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d4c72:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4c74:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d4c76:	2100      	movs	r1, #0
   d4c78:	f000 fcd9 	bl	d562e <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d4c7c:	4620      	mov	r0, r4
   d4c7e:	bd10      	pop	{r4, pc}

000d4c80 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d4c80:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4c82:	4d0e      	ldr	r5, [pc, #56]	; (d4cbc <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d4c84:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d4c86:	a801      	add	r0, sp, #4
   d4c88:	f7ff fff2 	bl	d4c70 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4c8c:	6829      	ldr	r1, [r5, #0]
   d4c8e:	f011 0401 	ands.w	r4, r1, #1
   d4c92:	d110      	bne.n	d4cb6 <_Z16_fetch_usbserialv+0x36>
   d4c94:	4628      	mov	r0, r5
   d4c96:	f7ff fa02 	bl	d409e <__cxa_guard_acquire>
   d4c9a:	b160      	cbz	r0, d4cb6 <_Z16_fetch_usbserialv+0x36>
   d4c9c:	aa01      	add	r2, sp, #4
   d4c9e:	4621      	mov	r1, r4
   d4ca0:	4807      	ldr	r0, [pc, #28]	; (d4cc0 <_Z16_fetch_usbserialv+0x40>)
   d4ca2:	f7ff ffcd 	bl	d4c40 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d4ca6:	4628      	mov	r0, r5
   d4ca8:	f7ff f9fe 	bl	d40a8 <__cxa_guard_release>
   d4cac:	4a05      	ldr	r2, [pc, #20]	; (d4cc4 <_Z16_fetch_usbserialv+0x44>)
   d4cae:	4906      	ldr	r1, [pc, #24]	; (d4cc8 <_Z16_fetch_usbserialv+0x48>)
   d4cb0:	4803      	ldr	r0, [pc, #12]	; (d4cc0 <_Z16_fetch_usbserialv+0x40>)
   d4cb2:	f000 fb39 	bl	d5328 <__aeabi_atexit>
	return _usbserial;
}
   d4cb6:	4802      	ldr	r0, [pc, #8]	; (d4cc0 <_Z16_fetch_usbserialv+0x40>)
   d4cb8:	b007      	add	sp, #28
   d4cba:	bd30      	pop	{r4, r5, pc}
   d4cbc:	2003e408 	.word	0x2003e408
   d4cc0:	2003e40c 	.word	0x2003e40c
   d4cc4:	2003e39c 	.word	0x2003e39c
   d4cc8:	000d4bc1 	.word	0x000d4bc1

000d4ccc <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d4ccc:	4770      	bx	lr

000d4cce <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4cce:	7441      	strb	r1, [r0, #17]
   d4cd0:	4770      	bx	lr

000d4cd2 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d4cd2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d4cd4:	7c00      	ldrb	r0, [r0, #16]
   d4cd6:	f7ff fc27 	bl	d4528 <HAL_USART_Available_Data_For_Write>
}
   d4cda:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4cde:	bd08      	pop	{r3, pc}

000d4ce0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d4ce0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d4ce2:	7c00      	ldrb	r0, [r0, #16]
   d4ce4:	f7ff fbf8 	bl	d44d8 <HAL_USART_Available_Data>
}
   d4ce8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4cec:	bd08      	pop	{r3, pc}

000d4cee <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d4cee:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d4cf0:	7c00      	ldrb	r0, [r0, #16]
   d4cf2:	f7ff fc01 	bl	d44f8 <HAL_USART_Peek_Data>
}
   d4cf6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4cfa:	bf28      	it	cs
   d4cfc:	f04f 30ff 	movcs.w	r0, #4294967295
   d4d00:	bd08      	pop	{r3, pc}

000d4d02 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d4d02:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d4d04:	7c00      	ldrb	r0, [r0, #16]
   d4d06:	f7ff fbef 	bl	d44e8 <HAL_USART_Read_Data>
}
   d4d0a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4d0e:	bf28      	it	cs
   d4d10:	f04f 30ff 	movcs.w	r0, #4294967295
   d4d14:	bd08      	pop	{r3, pc}

000d4d16 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d4d16:	7c00      	ldrb	r0, [r0, #16]
   d4d18:	f7ff bbf6 	b.w	d4508 <HAL_USART_Flush_Data>

000d4d1c <_ZN11USARTSerialD0Ev>:
   d4d1c:	b510      	push	{r4, lr}
   d4d1e:	2114      	movs	r1, #20
   d4d20:	4604      	mov	r4, r0
   d4d22:	f000 fb0f 	bl	d5344 <_ZdlPvj>
   d4d26:	4620      	mov	r0, r4
   d4d28:	bd10      	pop	{r4, pc}

000d4d2a <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d4d2a:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d4d2c:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d4d2e:	4604      	mov	r4, r0
   d4d30:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d4d32:	b925      	cbnz	r5, d4d3e <_ZN11USARTSerial5writeEh+0x14>
   d4d34:	7c00      	ldrb	r0, [r0, #16]
   d4d36:	f7ff fbf7 	bl	d4528 <HAL_USART_Available_Data_For_Write>
   d4d3a:	2800      	cmp	r0, #0
   d4d3c:	dd05      	ble.n	d4d4a <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d4d3e:	4631      	mov	r1, r6
   d4d40:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d4d42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d4d46:	f7ff bbbf 	b.w	d44c8 <HAL_USART_Write_Data>
  }
  return 0;
}
   d4d4a:	4628      	mov	r0, r5
   d4d4c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4d50 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d4d50:	b510      	push	{r4, lr}
   d4d52:	4604      	mov	r4, r0
   d4d54:	4608      	mov	r0, r1
   d4d56:	4611      	mov	r1, r2
   d4d58:	2200      	movs	r2, #0
   d4d5a:	6062      	str	r2, [r4, #4]
   d4d5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d4d60:	60a2      	str	r2, [r4, #8]
   d4d62:	4a05      	ldr	r2, [pc, #20]	; (d4d78 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d4d64:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d4d66:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d4d68:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d4d6a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d4d6c:	461a      	mov	r2, r3
   d4d6e:	f7ff fba3 	bl	d44b8 <HAL_USART_Init>
}
   d4d72:	4620      	mov	r0, r4
   d4d74:	bd10      	pop	{r4, pc}
   d4d76:	bf00      	nop
   d4d78:	000d5928 	.word	0x000d5928

000d4d7c <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d4d7c:	7c00      	ldrb	r0, [r0, #16]
   d4d7e:	f7ff bbcb 	b.w	d4518 <HAL_USART_Is_Enabled>
	...

000d4d84 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d4d84:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d4d86:	4d0c      	ldr	r5, [pc, #48]	; (d4db8 <_Z22__fetch_global_Serial1v+0x34>)
   d4d88:	6829      	ldr	r1, [r5, #0]
   d4d8a:	f011 0401 	ands.w	r4, r1, #1
   d4d8e:	d111      	bne.n	d4db4 <_Z22__fetch_global_Serial1v+0x30>
   d4d90:	4628      	mov	r0, r5
   d4d92:	f7ff f984 	bl	d409e <__cxa_guard_acquire>
   d4d96:	b168      	cbz	r0, d4db4 <_Z22__fetch_global_Serial1v+0x30>
   d4d98:	4a08      	ldr	r2, [pc, #32]	; (d4dbc <_Z22__fetch_global_Serial1v+0x38>)
   d4d9a:	4b09      	ldr	r3, [pc, #36]	; (d4dc0 <_Z22__fetch_global_Serial1v+0x3c>)
   d4d9c:	4809      	ldr	r0, [pc, #36]	; (d4dc4 <_Z22__fetch_global_Serial1v+0x40>)
   d4d9e:	4621      	mov	r1, r4
   d4da0:	f7ff ffd6 	bl	d4d50 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d4da4:	4628      	mov	r0, r5
   d4da6:	f7ff f97f 	bl	d40a8 <__cxa_guard_release>
   d4daa:	4a07      	ldr	r2, [pc, #28]	; (d4dc8 <_Z22__fetch_global_Serial1v+0x44>)
   d4dac:	4907      	ldr	r1, [pc, #28]	; (d4dcc <_Z22__fetch_global_Serial1v+0x48>)
   d4dae:	4805      	ldr	r0, [pc, #20]	; (d4dc4 <_Z22__fetch_global_Serial1v+0x40>)
   d4db0:	f000 faba 	bl	d5328 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d4db4:	4803      	ldr	r0, [pc, #12]	; (d4dc4 <_Z22__fetch_global_Serial1v+0x40>)
   d4db6:	bd38      	pop	{r3, r4, r5, pc}
   d4db8:	2003e4b8 	.word	0x2003e4b8
   d4dbc:	2003e4bc 	.word	0x2003e4bc
   d4dc0:	2003e434 	.word	0x2003e434
   d4dc4:	2003e420 	.word	0x2003e420
   d4dc8:	2003e39c 	.word	0x2003e39c
   d4dcc:	000d4ccd 	.word	0x000d4ccd

000d4dd0 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d4dd0:	4770      	bx	lr

000d4dd2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d4dd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4dd4:	4606      	mov	r6, r0
   d4dd6:	4615      	mov	r5, r2
   d4dd8:	460c      	mov	r4, r1
   d4dda:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4ddc:	42bc      	cmp	r4, r7
   d4dde:	d006      	beq.n	d4dee <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d4de0:	6833      	ldr	r3, [r6, #0]
   d4de2:	f814 1b01 	ldrb.w	r1, [r4], #1
   d4de6:	689b      	ldr	r3, [r3, #8]
   d4de8:	4630      	mov	r0, r6
   d4dea:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4dec:	e7f6      	b.n	d4ddc <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d4dee:	4628      	mov	r0, r5
   d4df0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4df2 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d4df2:	2200      	movs	r2, #0
   d4df4:	7c00      	ldrb	r0, [r0, #16]
   d4df6:	f7ff bbaf 	b.w	d4558 <HAL_I2C_Write_Data>

000d4dfa <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d4dfa:	2100      	movs	r1, #0
   d4dfc:	7c00      	ldrb	r0, [r0, #16]
   d4dfe:	f7ff bbb3 	b.w	d4568 <HAL_I2C_Available_Data>

000d4e02 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d4e02:	2100      	movs	r1, #0
   d4e04:	7c00      	ldrb	r0, [r0, #16]
   d4e06:	f7ff bbb7 	b.w	d4578 <HAL_I2C_Read_Data>

000d4e0a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d4e0a:	2100      	movs	r1, #0
   d4e0c:	7c00      	ldrb	r0, [r0, #16]
   d4e0e:	f7ff bbbb 	b.w	d4588 <HAL_I2C_Peek_Data>

000d4e12 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d4e12:	2100      	movs	r1, #0
   d4e14:	7c00      	ldrb	r0, [r0, #16]
   d4e16:	f7ff bbbf 	b.w	d4598 <HAL_I2C_Flush_Data>

000d4e1a <_ZN7TwoWireD0Ev>:
   d4e1a:	b510      	push	{r4, lr}
   d4e1c:	2114      	movs	r1, #20
   d4e1e:	4604      	mov	r4, r0
   d4e20:	f000 fa90 	bl	d5344 <_ZdlPvj>
   d4e24:	4620      	mov	r0, r4
   d4e26:	bd10      	pop	{r4, pc}

000d4e28 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d4e28:	b510      	push	{r4, lr}
   d4e2a:	4604      	mov	r4, r0
   d4e2c:	2300      	movs	r3, #0
   d4e2e:	6063      	str	r3, [r4, #4]
   d4e30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4e34:	60a3      	str	r3, [r4, #8]
   d4e36:	4b04      	ldr	r3, [pc, #16]	; (d4e48 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d4e38:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d4e3a:	4608      	mov	r0, r1
   d4e3c:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d4e3e:	4611      	mov	r1, r2
   d4e40:	f7ff fbca 	bl	d45d8 <HAL_I2C_Init>
}
   d4e44:	4620      	mov	r0, r4
   d4e46:	bd10      	pop	{r4, pc}
   d4e48:	000d5958 	.word	0x000d5958

000d4e4c <_ZN7TwoWire5beginEh>:
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
}

void TwoWire::begin(uint8_t address)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_SLAVE, address, NULL);
   d4e4c:	460a      	mov	r2, r1
   d4e4e:	2300      	movs	r3, #0
   d4e50:	2101      	movs	r1, #1
   d4e52:	7c00      	ldrb	r0, [r0, #16]
   d4e54:	f7ff bb70 	b.w	d4538 <HAL_I2C_Begin>

000d4e58 <_ZN7TwoWire5beginEi>:
}

void TwoWire::begin(int address)
{
  begin((uint8_t)address);
   d4e58:	b2c9      	uxtb	r1, r1
   d4e5a:	f7ff bff7 	b.w	d4e4c <_ZN7TwoWire5beginEh>

000d4e5e <_ZN7TwoWire3endEv>:
}

void TwoWire::end()
{
	HAL_I2C_End(_i2c, NULL);
   d4e5e:	2100      	movs	r1, #0
   d4e60:	7c00      	ldrb	r0, [r0, #16]
   d4e62:	f7ff bb71 	b.w	d4548 <HAL_I2C_End>

000d4e66 <_ZN7TwoWire9onReceiveEPFviE>:
}

// sets function called on slave write
void TwoWire::onReceive( void (*function)(int) )
{
  HAL_I2C_Set_Callback_On_Receive(_i2c, function, NULL);
   d4e66:	2200      	movs	r2, #0
   d4e68:	7c00      	ldrb	r0, [r0, #16]
   d4e6a:	f7ff bba5 	b.w	d45b8 <HAL_I2C_Set_Callback_On_Receive>

000d4e6e <_ZN7TwoWire9onRequestEPFvvE>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
   d4e6e:	2200      	movs	r2, #0
   d4e70:	7c00      	ldrb	r0, [r0, #16]
   d4e72:	f7ff bba9 	b.w	d45c8 <HAL_I2C_Set_Callback_On_Request>

000d4e76 <_ZN7TwoWire9isEnabledEv>:
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d4e76:	2100      	movs	r1, #0
   d4e78:	7c00      	ldrb	r0, [r0, #16]
   d4e7a:	f7ff bb95 	b.w	d45a8 <HAL_I2C_Is_Enabled>

000d4e7e <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   d4e7e:	b510      	push	{r4, lr}
  if (0 == max) {
   d4e80:	4604      	mov	r4, r0
   d4e82:	b130      	cbz	r0, d4e92 <_Z6randomi+0x14>
    return 0;
  }
  return rand() % max;
   d4e84:	f000 fc04 	bl	d5690 <rand>
   d4e88:	fb90 f3f4 	sdiv	r3, r0, r4
   d4e8c:	fb03 0014 	mls	r0, r3, r4, r0
   d4e90:	bd10      	pop	{r4, pc}
}
   d4e92:	bd10      	pop	{r4, pc}

000d4e94 <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
   d4e94:	4288      	cmp	r0, r1
  }
  return rand() % max;
}

int random(int min, int max)
{
   d4e96:	b510      	push	{r4, lr}
   d4e98:	4604      	mov	r4, r0
  if (min >= max) {
   d4e9a:	da04      	bge.n	d4ea6 <_Z6randomii+0x12>
    return min;
  }
  return random(max - min) + min;
   d4e9c:	1a08      	subs	r0, r1, r0
   d4e9e:	f7ff ffee 	bl	d4e7e <_Z6randomi>
   d4ea2:	4420      	add	r0, r4
   d4ea4:	bd10      	pop	{r4, pc}
}
   d4ea6:	bd10      	pop	{r4, pc}

000d4ea8 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4ea8:	2200      	movs	r2, #0
   d4eaa:	4611      	mov	r1, r2
   d4eac:	6840      	ldr	r0, [r0, #4]
   d4eae:	f7ff bc2f 	b.w	d4710 <network_listening>

000d4eb2 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4eb2:	2200      	movs	r2, #0
   d4eb4:	4611      	mov	r1, r2
   d4eb6:	6840      	ldr	r0, [r0, #4]
   d4eb8:	f7ff bc3a 	b.w	d4730 <network_get_listen_timeout>

000d4ebc <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4ebc:	2200      	movs	r2, #0
   d4ebe:	6840      	ldr	r0, [r0, #4]
   d4ec0:	f7ff bc2e 	b.w	d4720 <network_set_listen_timeout>

000d4ec4 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4ec4:	2200      	movs	r2, #0
   d4ec6:	f081 0101 	eor.w	r1, r1, #1
   d4eca:	6840      	ldr	r0, [r0, #4]
   d4ecc:	f7ff bc18 	b.w	d4700 <network_listen>

000d4ed0 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d4ed0:	2300      	movs	r3, #0
   d4ed2:	461a      	mov	r2, r3
   d4ed4:	2101      	movs	r1, #1
   d4ed6:	6840      	ldr	r0, [r0, #4]
   d4ed8:	f7ff bc0a 	b.w	d46f0 <network_off>

000d4edc <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4edc:	2300      	movs	r3, #0
   d4ede:	461a      	mov	r2, r3
   d4ee0:	4619      	mov	r1, r3
   d4ee2:	6840      	ldr	r0, [r0, #4]
   d4ee4:	f7ff bbfc 	b.w	d46e0 <network_on>

000d4ee8 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4ee8:	2200      	movs	r2, #0
   d4eea:	4611      	mov	r1, r2
   d4eec:	6840      	ldr	r0, [r0, #4]
   d4eee:	f7ff bbef 	b.w	d46d0 <network_ready>

000d4ef2 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4ef2:	2200      	movs	r2, #0
   d4ef4:	4611      	mov	r1, r2
   d4ef6:	6840      	ldr	r0, [r0, #4]
   d4ef8:	f7ff bbda 	b.w	d46b0 <network_connecting>

000d4efc <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4efc:	2200      	movs	r2, #0
   d4efe:	2102      	movs	r1, #2
   d4f00:	6840      	ldr	r0, [r0, #4]
   d4f02:	f7ff bbdd 	b.w	d46c0 <network_disconnect>

000d4f06 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4f06:	2300      	movs	r3, #0
   d4f08:	461a      	mov	r2, r3
   d4f0a:	6840      	ldr	r0, [r0, #4]
   d4f0c:	f7ff bbc8 	b.w	d46a0 <network_connect>

000d4f10 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d4f10:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4f12:	4605      	mov	r5, r0
   d4f14:	b188      	cbz	r0, d4f3a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4f16:	6804      	ldr	r4, [r0, #0]
   d4f18:	b14c      	cbz	r4, d4f2e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d4f1a:	68a3      	ldr	r3, [r4, #8]
   d4f1c:	b11b      	cbz	r3, d4f26 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4f1e:	2203      	movs	r2, #3
   d4f20:	4621      	mov	r1, r4
   d4f22:	4620      	mov	r0, r4
   d4f24:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4f26:	2110      	movs	r1, #16
   d4f28:	4620      	mov	r0, r4
   d4f2a:	f000 fa0b 	bl	d5344 <_ZdlPvj>
   d4f2e:	4628      	mov	r0, r5
   d4f30:	2114      	movs	r1, #20
      }
   d4f32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4f36:	f000 ba05 	b.w	d5344 <_ZdlPvj>
   d4f3a:	bd38      	pop	{r3, r4, r5, pc}

000d4f3c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d4f3c:	b110      	cbz	r0, d4f44 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d4f3e:	6803      	ldr	r3, [r0, #0]
   d4f40:	685b      	ldr	r3, [r3, #4]
   d4f42:	4718      	bx	r3
   d4f44:	4770      	bx	lr

000d4f46 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d4f46:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d4f48:	6803      	ldr	r3, [r0, #0]
   d4f4a:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d4f4c:	b1bb      	cbz	r3, d4f7e <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d4f4e:	6858      	ldr	r0, [r3, #4]
   d4f50:	f7ff fa82 	bl	d4458 <os_thread_is_current>
   d4f54:	b978      	cbnz	r0, d4f76 <_ZN6ThreadD1Ev+0x30>
   d4f56:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d4f58:	7c5a      	ldrb	r2, [r3, #17]
   d4f5a:	b912      	cbnz	r2, d4f62 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d4f5c:	6858      	ldr	r0, [r3, #4]
   d4f5e:	f7ff fa83 	bl	d4468 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d4f62:	6823      	ldr	r3, [r4, #0]
   d4f64:	6858      	ldr	r0, [r3, #4]
   d4f66:	f7ff fa87 	bl	d4478 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4f6a:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d4f6c:	2300      	movs	r3, #0
   d4f6e:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d4f70:	b128      	cbz	r0, d4f7e <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d4f72:	f7ff ffcd 	bl	d4f10 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4f76:	6820      	ldr	r0, [r4, #0]
   d4f78:	b108      	cbz	r0, d4f7e <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d4f7a:	f7ff ffc9 	bl	d4f10 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d4f7e:	4620      	mov	r0, r4
   d4f80:	bd10      	pop	{r4, pc}

000d4f82 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d4f82:	b538      	push	{r3, r4, r5, lr}
   d4f84:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4f86:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d4f8a:	b108      	cbz	r0, d4f90 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d4f8c:	f7ff f885 	bl	d409a <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4f90:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d4f94:	b108      	cbz	r0, d4f9a <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d4f96:	f7ff fa7f 	bl	d4498 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4f9a:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d4f9e:	b135      	cbz	r5, d4fae <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4fa0:	4628      	mov	r0, r5
   d4fa2:	f7ff ffd0 	bl	d4f46 <_ZN6ThreadD1Ev>
   d4fa6:	2104      	movs	r1, #4
   d4fa8:	4628      	mov	r0, r5
   d4faa:	f000 f9cb 	bl	d5344 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4fae:	6820      	ldr	r0, [r4, #0]
   d4fb0:	b108      	cbz	r0, d4fb6 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d4fb2:	f7ff ffc3 	bl	d4f3c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d4fb6:	4620      	mov	r0, r4
   d4fb8:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4fbc <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d4fbc:	b510      	push	{r4, lr}
   d4fbe:	4b04      	ldr	r3, [pc, #16]	; (d4fd0 <_ZN5spark9MeshClassD1Ev+0x14>)
   d4fc0:	4604      	mov	r4, r0
   d4fc2:	f840 3b08 	str.w	r3, [r0], #8
   d4fc6:	f7ff ffdc 	bl	d4f82 <_ZN5spark11MeshPublishD1Ev>
   d4fca:	4620      	mov	r0, r4
   d4fcc:	bd10      	pop	{r4, pc}
   d4fce:	bf00      	nop
   d4fd0:	000d5980 	.word	0x000d5980

000d4fd4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d4fd4:	b538      	push	{r3, r4, r5, lr}
   d4fd6:	4c0e      	ldr	r4, [pc, #56]	; (d5010 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d4fd8:	4b0e      	ldr	r3, [pc, #56]	; (d5014 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d4fda:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d4fdc:	2500      	movs	r5, #0
   d4fde:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d4fe0:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d4fe4:	6063      	str	r3, [r4, #4]
   d4fe6:	60a5      	str	r5, [r4, #8]
   d4fe8:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4fec:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d4ff0:	f7ff fa4a 	bl	d4488 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d4ff4:	4b08      	ldr	r3, [pc, #32]	; (d5018 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d4ff6:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4ffa:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d4ffe:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5000:	4620      	mov	r0, r4
   d5002:	4a06      	ldr	r2, [pc, #24]	; (d501c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d5004:	4906      	ldr	r1, [pc, #24]	; (d5020 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d5006:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d500a:	f000 b98d 	b.w	d5328 <__aeabi_atexit>
   d500e:	bf00      	nop
   d5010:	2003e540 	.word	0x2003e540
   d5014:	000d59e8 	.word	0x000d59e8
   d5018:	000d5980 	.word	0x000d5980
   d501c:	2003e39c 	.word	0x2003e39c
   d5020:	000d4fbd 	.word	0x000d4fbd

000d5024 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d5024:	2200      	movs	r2, #0
   d5026:	4611      	mov	r1, r2
   d5028:	6840      	ldr	r0, [r0, #4]
   d502a:	f7ff bb51 	b.w	d46d0 <network_ready>

000d502e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d502e:	2200      	movs	r2, #0
   d5030:	4611      	mov	r1, r2
   d5032:	6840      	ldr	r0, [r0, #4]
   d5034:	f7ff bb6c 	b.w	d4710 <network_listening>

000d5038 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5038:	2200      	movs	r2, #0
   d503a:	4611      	mov	r1, r2
   d503c:	6840      	ldr	r0, [r0, #4]
   d503e:	f7ff bb77 	b.w	d4730 <network_get_listen_timeout>

000d5042 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5042:	2200      	movs	r2, #0
   d5044:	6840      	ldr	r0, [r0, #4]
   d5046:	f7ff bb6b 	b.w	d4720 <network_set_listen_timeout>

000d504a <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d504a:	2200      	movs	r2, #0
   d504c:	f081 0101 	eor.w	r1, r1, #1
   d5050:	6840      	ldr	r0, [r0, #4]
   d5052:	f7ff bb55 	b.w	d4700 <network_listen>

000d5056 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d5056:	2300      	movs	r3, #0
   d5058:	461a      	mov	r2, r3
   d505a:	4619      	mov	r1, r3
   d505c:	6840      	ldr	r0, [r0, #4]
   d505e:	f7ff bb47 	b.w	d46f0 <network_off>

000d5062 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d5062:	2300      	movs	r3, #0
   d5064:	461a      	mov	r2, r3
   d5066:	4619      	mov	r1, r3
   d5068:	6840      	ldr	r0, [r0, #4]
   d506a:	f7ff bb39 	b.w	d46e0 <network_on>

000d506e <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d506e:	2200      	movs	r2, #0
   d5070:	4611      	mov	r1, r2
   d5072:	6840      	ldr	r0, [r0, #4]
   d5074:	f7ff bb1c 	b.w	d46b0 <network_connecting>

000d5078 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5078:	2200      	movs	r2, #0
   d507a:	2102      	movs	r1, #2
   d507c:	6840      	ldr	r0, [r0, #4]
   d507e:	f7ff bb1f 	b.w	d46c0 <network_disconnect>

000d5082 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5082:	2300      	movs	r3, #0
   d5084:	461a      	mov	r2, r3
   d5086:	6840      	ldr	r0, [r0, #4]
   d5088:	f7ff bb0a 	b.w	d46a0 <network_connect>

000d508c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d508c:	4b02      	ldr	r3, [pc, #8]	; (d5098 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d508e:	2204      	movs	r2, #4
   d5090:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d5092:	4a02      	ldr	r2, [pc, #8]	; (d509c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d5094:	601a      	str	r2, [r3, #0]
   d5096:	4770      	bx	lr
   d5098:	2003e714 	.word	0x2003e714
   d509c:	000d59b4 	.word	0x000d59b4

000d50a0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d50a0:	2300      	movs	r3, #0
   d50a2:	461a      	mov	r2, r3
   d50a4:	6840      	ldr	r0, [r0, #4]
   d50a6:	f7ff bafb 	b.w	d46a0 <network_connect>

000d50aa <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d50aa:	2200      	movs	r2, #0
   d50ac:	2102      	movs	r1, #2
   d50ae:	6840      	ldr	r0, [r0, #4]
   d50b0:	f7ff bb06 	b.w	d46c0 <network_disconnect>

000d50b4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d50b4:	2200      	movs	r2, #0
   d50b6:	4611      	mov	r1, r2
   d50b8:	6840      	ldr	r0, [r0, #4]
   d50ba:	f7ff baf9 	b.w	d46b0 <network_connecting>

000d50be <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d50be:	2200      	movs	r2, #0
   d50c0:	4611      	mov	r1, r2
   d50c2:	6840      	ldr	r0, [r0, #4]
   d50c4:	f7ff bb04 	b.w	d46d0 <network_ready>

000d50c8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d50c8:	2300      	movs	r3, #0
   d50ca:	461a      	mov	r2, r3
   d50cc:	4619      	mov	r1, r3
   d50ce:	6840      	ldr	r0, [r0, #4]
   d50d0:	f7ff bb06 	b.w	d46e0 <network_on>

000d50d4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d50d4:	2300      	movs	r3, #0
   d50d6:	461a      	mov	r2, r3
   d50d8:	4619      	mov	r1, r3
   d50da:	6840      	ldr	r0, [r0, #4]
   d50dc:	f7ff bb08 	b.w	d46f0 <network_off>

000d50e0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d50e0:	2200      	movs	r2, #0
   d50e2:	f081 0101 	eor.w	r1, r1, #1
   d50e6:	6840      	ldr	r0, [r0, #4]
   d50e8:	f7ff bb0a 	b.w	d4700 <network_listen>

000d50ec <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d50ec:	2200      	movs	r2, #0
   d50ee:	6840      	ldr	r0, [r0, #4]
   d50f0:	f7ff bb16 	b.w	d4720 <network_set_listen_timeout>

000d50f4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d50f4:	2200      	movs	r2, #0
   d50f6:	4611      	mov	r1, r2
   d50f8:	6840      	ldr	r0, [r0, #4]
   d50fa:	f7ff bb19 	b.w	d4730 <network_get_listen_timeout>

000d50fe <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d50fe:	2200      	movs	r2, #0
   d5100:	4611      	mov	r1, r2
   d5102:	6840      	ldr	r0, [r0, #4]
   d5104:	f7ff bb04 	b.w	d4710 <network_listening>

000d5108 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5108:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d510c:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d510e:	b095      	sub	sp, #84	; 0x54
   d5110:	4616      	mov	r6, r2
   d5112:	460d      	mov	r5, r1
   d5114:	4607      	mov	r7, r0
    IPAddress addr;
   d5116:	f7ff fd19 	bl	d4b4c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d511a:	4621      	mov	r1, r4
   d511c:	2220      	movs	r2, #32
   d511e:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5120:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5122:	f000 fa84 	bl	d562e <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5126:	2340      	movs	r3, #64	; 0x40
   d5128:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d512a:	4621      	mov	r1, r4
   d512c:	466b      	mov	r3, sp
   d512e:	aa0c      	add	r2, sp, #48	; 0x30
   d5130:	4630      	mov	r0, r6
   d5132:	f7ff f949 	bl	d43c8 <netdb_getaddrinfo>
    if (!r) {
   d5136:	4604      	mov	r4, r0
   d5138:	2800      	cmp	r0, #0
   d513a:	d144      	bne.n	d51c6 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d513c:	4602      	mov	r2, r0
   d513e:	2101      	movs	r1, #1
   d5140:	6868      	ldr	r0, [r5, #4]
   d5142:	f7ff fac5 	bl	d46d0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5146:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5148:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d514a:	4622      	mov	r2, r4
   d514c:	6868      	ldr	r0, [r5, #4]
   d514e:	f7ff fabf 	bl	d46d0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5152:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5154:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d5156:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5158:	2e00      	cmp	r6, #0
   d515a:	d034      	beq.n	d51c6 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d515c:	2900      	cmp	r1, #0
   d515e:	d132      	bne.n	d51c6 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5160:	6873      	ldr	r3, [r6, #4]
   d5162:	2b02      	cmp	r3, #2
   d5164:	d002      	beq.n	d516c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d5166:	2b0a      	cmp	r3, #10
   d5168:	d009      	beq.n	d517e <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d516a:	e02a      	b.n	d51c2 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d516c:	f1b8 0f00 	cmp.w	r8, #0
   d5170:	d027      	beq.n	d51c2 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5172:	6971      	ldr	r1, [r6, #20]
   d5174:	4638      	mov	r0, r7
   d5176:	3104      	adds	r1, #4
   d5178:	f7ff fd15 	bl	d4ba6 <_ZN9IPAddressaSEPKh>
   d517c:	e020      	b.n	d51c0 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d517e:	f1b9 0f00 	cmp.w	r9, #0
   d5182:	d01e      	beq.n	d51c2 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5184:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5186:	2211      	movs	r2, #17
   d5188:	a801      	add	r0, sp, #4
   d518a:	f000 fa50 	bl	d562e <memset>
                    a.v = 6;
   d518e:	2306      	movs	r3, #6
   d5190:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5194:	ad01      	add	r5, sp, #4
   d5196:	f104 0308 	add.w	r3, r4, #8
   d519a:	3418      	adds	r4, #24
   d519c:	6818      	ldr	r0, [r3, #0]
   d519e:	6859      	ldr	r1, [r3, #4]
   d51a0:	462a      	mov	r2, r5
   d51a2:	c203      	stmia	r2!, {r0, r1}
   d51a4:	3308      	adds	r3, #8
   d51a6:	42a3      	cmp	r3, r4
   d51a8:	4615      	mov	r5, r2
   d51aa:	d1f7      	bne.n	d519c <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d51ac:	a901      	add	r1, sp, #4
   d51ae:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d51b0:	ad07      	add	r5, sp, #28
   d51b2:	f7ff fcd9 	bl	d4b68 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d51b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d51b8:	1d3c      	adds	r4, r7, #4
   d51ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d51bc:	682b      	ldr	r3, [r5, #0]
   d51be:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d51c0:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d51c2:	69f6      	ldr	r6, [r6, #28]
   d51c4:	e7c8      	b.n	d5158 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d51c6:	9800      	ldr	r0, [sp, #0]
   d51c8:	f7ff f8f6 	bl	d43b8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d51cc:	4638      	mov	r0, r7
   d51ce:	b015      	add	sp, #84	; 0x54
   d51d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d51d4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d51d4:	4b02      	ldr	r3, [pc, #8]	; (d51e0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d51d6:	4a03      	ldr	r2, [pc, #12]	; (d51e4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d51d8:	601a      	str	r2, [r3, #0]
   d51da:	2200      	movs	r2, #0
   d51dc:	605a      	str	r2, [r3, #4]
   d51de:	4770      	bx	lr
   d51e0:	2003e71c 	.word	0x2003e71c
   d51e4:	000d59e8 	.word	0x000d59e8

000d51e8 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d51e8:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d51ea:	4e18      	ldr	r6, [pc, #96]	; (d524c <pinAvailable+0x64>)
   d51ec:	6831      	ldr	r1, [r6, #0]
   d51ee:	f011 0501 	ands.w	r5, r1, #1
   d51f2:	4604      	mov	r4, r0
   d51f4:	d10a      	bne.n	d520c <pinAvailable+0x24>
   d51f6:	4630      	mov	r0, r6
   d51f8:	f7fe ff51 	bl	d409e <__cxa_guard_acquire>
   d51fc:	b130      	cbz	r0, d520c <pinAvailable+0x24>
   d51fe:	4629      	mov	r1, r5
   d5200:	4813      	ldr	r0, [pc, #76]	; (d5250 <pinAvailable+0x68>)
   d5202:	f7ff fafb 	bl	d47fc <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5206:	4630      	mov	r0, r6
   d5208:	f7fe ff4e 	bl	d40a8 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d520c:	4810      	ldr	r0, [pc, #64]	; (d5250 <pinAvailable+0x68>)
   d520e:	f7ff faff 	bl	d4810 <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d5212:	b128      	cbz	r0, d5220 <pinAvailable+0x38>
   d5214:	f1a4 030b 	sub.w	r3, r4, #11
   d5218:	2b02      	cmp	r3, #2
   d521a:	d801      	bhi.n	d5220 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d521c:	2000      	movs	r0, #0
   d521e:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d5220:	f000 f85c 	bl	d52dc <_Z19__fetch_global_Wirev>
   d5224:	f7ff fe27 	bl	d4e76 <_ZN7TwoWire9isEnabledEv>
   d5228:	b108      	cbz	r0, d522e <pinAvailable+0x46>
   d522a:	2c01      	cmp	r4, #1
   d522c:	d9f6      	bls.n	d521c <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d522e:	f7ff fda9 	bl	d4d84 <_Z22__fetch_global_Serial1v>
   d5232:	f7ff fda3 	bl	d4d7c <_ZN11USARTSerial9isEnabledEv>
   d5236:	b118      	cbz	r0, d5240 <pinAvailable+0x58>
   d5238:	f1a4 0309 	sub.w	r3, r4, #9
   d523c:	2b01      	cmp	r3, #1
   d523e:	d9ed      	bls.n	d521c <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d5240:	2c23      	cmp	r4, #35	; 0x23
   d5242:	bf8c      	ite	hi
   d5244:	2000      	movhi	r0, #0
   d5246:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d5248:	bd70      	pop	{r4, r5, r6, pc}
   d524a:	bf00      	nop
   d524c:	2003e724 	.word	0x2003e724
   d5250:	2003e728 	.word	0x2003e728

000d5254 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5254:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d5256:	b538      	push	{r3, r4, r5, lr}
   d5258:	4604      	mov	r4, r0
   d525a:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d525c:	d80a      	bhi.n	d5274 <pinMode+0x20>
   d525e:	29ff      	cmp	r1, #255	; 0xff
   d5260:	d008      	beq.n	d5274 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d5262:	f7ff ffc1 	bl	d51e8 <pinAvailable>
   d5266:	b128      	cbz	r0, d5274 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d5268:	4629      	mov	r1, r5
   d526a:	4620      	mov	r0, r4
}
   d526c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d5270:	f7ff b8ba 	b.w	d43e8 <HAL_Pin_Mode>
   d5274:	bd38      	pop	{r3, r4, r5, pc}

000d5276 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d5276:	b538      	push	{r3, r4, r5, lr}
   d5278:	4604      	mov	r4, r0
   d527a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d527c:	f7ff f8bc 	bl	d43f8 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d5280:	28ff      	cmp	r0, #255	; 0xff
   d5282:	d010      	beq.n	d52a6 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d5284:	2806      	cmp	r0, #6
   d5286:	d804      	bhi.n	d5292 <digitalWrite+0x1c>
   d5288:	234d      	movs	r3, #77	; 0x4d
   d528a:	fa23 f000 	lsr.w	r0, r3, r0
   d528e:	07c3      	lsls	r3, r0, #31
   d5290:	d409      	bmi.n	d52a6 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d5292:	4620      	mov	r0, r4
   d5294:	f7ff ffa8 	bl	d51e8 <pinAvailable>
   d5298:	b128      	cbz	r0, d52a6 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d529a:	4629      	mov	r1, r5
   d529c:	4620      	mov	r0, r4
}
   d529e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d52a2:	f7ff b8b1 	b.w	d4408 <HAL_GPIO_Write>
   d52a6:	bd38      	pop	{r3, r4, r5, pc}

000d52a8 <_Z17acquireWireBufferv>:
   d52a8:	b570      	push	{r4, r5, r6, lr}
   d52aa:	4604      	mov	r4, r0
   d52ac:	2514      	movs	r5, #20
   d52ae:	462a      	mov	r2, r5
   d52b0:	4e09      	ldr	r6, [pc, #36]	; (d52d8 <_Z17acquireWireBufferv+0x30>)
   d52b2:	2100      	movs	r1, #0
   d52b4:	f000 f9bb 	bl	d562e <memset>
   d52b8:	8025      	strh	r5, [r4, #0]
   d52ba:	2520      	movs	r5, #32
   d52bc:	4631      	mov	r1, r6
   d52be:	60a5      	str	r5, [r4, #8]
   d52c0:	6125      	str	r5, [r4, #16]
   d52c2:	4628      	mov	r0, r5
   d52c4:	f000 f840 	bl	d5348 <_ZnajRKSt9nothrow_t>
   d52c8:	4631      	mov	r1, r6
   d52ca:	6060      	str	r0, [r4, #4]
   d52cc:	4628      	mov	r0, r5
   d52ce:	f000 f83b 	bl	d5348 <_ZnajRKSt9nothrow_t>
   d52d2:	60e0      	str	r0, [r4, #12]
   d52d4:	4620      	mov	r0, r4
   d52d6:	bd70      	pop	{r4, r5, r6, pc}
   d52d8:	000d5a14 	.word	0x000d5a14

000d52dc <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d52dc:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d52de:	4d0e      	ldr	r5, [pc, #56]	; (d5318 <_Z19__fetch_global_Wirev+0x3c>)
   d52e0:	6829      	ldr	r1, [r5, #0]
   d52e2:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d52e6:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d52e8:	d113      	bne.n	d5312 <_Z19__fetch_global_Wirev+0x36>
   d52ea:	4628      	mov	r0, r5
   d52ec:	f7fe fed7 	bl	d409e <__cxa_guard_acquire>
   d52f0:	b178      	cbz	r0, d5312 <_Z19__fetch_global_Wirev+0x36>
   d52f2:	a801      	add	r0, sp, #4
   d52f4:	f7ff ffd8 	bl	d52a8 <_Z17acquireWireBufferv>
   d52f8:	aa01      	add	r2, sp, #4
   d52fa:	4621      	mov	r1, r4
   d52fc:	4807      	ldr	r0, [pc, #28]	; (d531c <_Z19__fetch_global_Wirev+0x40>)
   d52fe:	f7ff fd93 	bl	d4e28 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d5302:	4628      	mov	r0, r5
   d5304:	f7fe fed0 	bl	d40a8 <__cxa_guard_release>
   d5308:	4a05      	ldr	r2, [pc, #20]	; (d5320 <_Z19__fetch_global_Wirev+0x44>)
   d530a:	4906      	ldr	r1, [pc, #24]	; (d5324 <_Z19__fetch_global_Wirev+0x48>)
   d530c:	4803      	ldr	r0, [pc, #12]	; (d531c <_Z19__fetch_global_Wirev+0x40>)
   d530e:	f000 f80b 	bl	d5328 <__aeabi_atexit>
	return wire;
}
   d5312:	4802      	ldr	r0, [pc, #8]	; (d531c <_Z19__fetch_global_Wirev+0x40>)
   d5314:	b007      	add	sp, #28
   d5316:	bd30      	pop	{r4, r5, pc}
   d5318:	2003e734 	.word	0x2003e734
   d531c:	2003e738 	.word	0x2003e738
   d5320:	2003e39c 	.word	0x2003e39c
   d5324:	000d4dd1 	.word	0x000d4dd1

000d5328 <__aeabi_atexit>:
   d5328:	460b      	mov	r3, r1
   d532a:	4601      	mov	r1, r0
   d532c:	4618      	mov	r0, r3
   d532e:	f000 b965 	b.w	d55fc <__cxa_atexit>
	...

000d5334 <_ZSt15get_new_handlerv>:
   d5334:	4b02      	ldr	r3, [pc, #8]	; (d5340 <_ZSt15get_new_handlerv+0xc>)
   d5336:	6818      	ldr	r0, [r3, #0]
   d5338:	f3bf 8f5f 	dmb	sy
   d533c:	4770      	bx	lr
   d533e:	bf00      	nop
   d5340:	2003e74c 	.word	0x2003e74c

000d5344 <_ZdlPvj>:
   d5344:	f7fe bea7 	b.w	d4096 <_ZdlPv>

000d5348 <_ZnajRKSt9nothrow_t>:
   d5348:	f000 b800 	b.w	d534c <_ZnwjRKSt9nothrow_t>

000d534c <_ZnwjRKSt9nothrow_t>:
   d534c:	b510      	push	{r4, lr}
   d534e:	2800      	cmp	r0, #0
   d5350:	bf14      	ite	ne
   d5352:	4604      	movne	r4, r0
   d5354:	2401      	moveq	r4, #1
   d5356:	4620      	mov	r0, r4
   d5358:	f7ff fa02 	bl	d4760 <malloc>
   d535c:	b920      	cbnz	r0, d5368 <_ZnwjRKSt9nothrow_t+0x1c>
   d535e:	f7ff ffe9 	bl	d5334 <_ZSt15get_new_handlerv>
   d5362:	b108      	cbz	r0, d5368 <_ZnwjRKSt9nothrow_t+0x1c>
   d5364:	4780      	blx	r0
   d5366:	e7f6      	b.n	d5356 <_ZnwjRKSt9nothrow_t+0xa>
   d5368:	bd10      	pop	{r4, pc}
	...

000d536c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d536c:	4b18      	ldr	r3, [pc, #96]	; (d53d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d536e:	681a      	ldr	r2, [r3, #0]
   d5370:	07d1      	lsls	r1, r2, #31
   d5372:	bf5c      	itt	pl
   d5374:	2201      	movpl	r2, #1
   d5376:	601a      	strpl	r2, [r3, #0]
   d5378:	4b16      	ldr	r3, [pc, #88]	; (d53d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d537a:	681a      	ldr	r2, [r3, #0]
   d537c:	07d2      	lsls	r2, r2, #31
   d537e:	bf5c      	itt	pl
   d5380:	2201      	movpl	r2, #1
   d5382:	601a      	strpl	r2, [r3, #0]
   d5384:	4b14      	ldr	r3, [pc, #80]	; (d53d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5386:	681a      	ldr	r2, [r3, #0]
   d5388:	07d0      	lsls	r0, r2, #31
   d538a:	bf5c      	itt	pl
   d538c:	2201      	movpl	r2, #1
   d538e:	601a      	strpl	r2, [r3, #0]
   d5390:	4b12      	ldr	r3, [pc, #72]	; (d53dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5392:	681a      	ldr	r2, [r3, #0]
   d5394:	07d1      	lsls	r1, r2, #31
   d5396:	bf5c      	itt	pl
   d5398:	2201      	movpl	r2, #1
   d539a:	601a      	strpl	r2, [r3, #0]
   d539c:	4b10      	ldr	r3, [pc, #64]	; (d53e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d539e:	681a      	ldr	r2, [r3, #0]
   d53a0:	07d2      	lsls	r2, r2, #31
   d53a2:	bf5c      	itt	pl
   d53a4:	2201      	movpl	r2, #1
   d53a6:	601a      	strpl	r2, [r3, #0]
   d53a8:	4b0e      	ldr	r3, [pc, #56]	; (d53e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d53aa:	681a      	ldr	r2, [r3, #0]
   d53ac:	07d0      	lsls	r0, r2, #31
   d53ae:	bf5c      	itt	pl
   d53b0:	2201      	movpl	r2, #1
   d53b2:	601a      	strpl	r2, [r3, #0]
   d53b4:	4b0c      	ldr	r3, [pc, #48]	; (d53e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d53b6:	681a      	ldr	r2, [r3, #0]
   d53b8:	07d1      	lsls	r1, r2, #31
   d53ba:	bf5c      	itt	pl
   d53bc:	2201      	movpl	r2, #1
   d53be:	601a      	strpl	r2, [r3, #0]
   d53c0:	4b0a      	ldr	r3, [pc, #40]	; (d53ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d53c2:	681a      	ldr	r2, [r3, #0]
   d53c4:	07d2      	lsls	r2, r2, #31
   d53c6:	bf5c      	itt	pl
   d53c8:	2201      	movpl	r2, #1
   d53ca:	601a      	strpl	r2, [r3, #0]
   d53cc:	4770      	bx	lr
   d53ce:	bf00      	nop
   d53d0:	2003e76c 	.word	0x2003e76c
   d53d4:	2003e768 	.word	0x2003e768
   d53d8:	2003e764 	.word	0x2003e764
   d53dc:	2003e760 	.word	0x2003e760
   d53e0:	2003e75c 	.word	0x2003e75c
   d53e4:	2003e758 	.word	0x2003e758
   d53e8:	2003e754 	.word	0x2003e754
   d53ec:	2003e750 	.word	0x2003e750

000d53f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d53f0:	4b24      	ldr	r3, [pc, #144]	; (d5484 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d53f2:	681a      	ldr	r2, [r3, #0]
   d53f4:	07d0      	lsls	r0, r2, #31
   d53f6:	bf5c      	itt	pl
   d53f8:	2201      	movpl	r2, #1
   d53fa:	601a      	strpl	r2, [r3, #0]
   d53fc:	4b22      	ldr	r3, [pc, #136]	; (d5488 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d53fe:	681a      	ldr	r2, [r3, #0]
   d5400:	07d1      	lsls	r1, r2, #31
   d5402:	bf5c      	itt	pl
   d5404:	2201      	movpl	r2, #1
   d5406:	601a      	strpl	r2, [r3, #0]
   d5408:	4b20      	ldr	r3, [pc, #128]	; (d548c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d540a:	681a      	ldr	r2, [r3, #0]
   d540c:	07d2      	lsls	r2, r2, #31
   d540e:	bf5c      	itt	pl
   d5410:	2201      	movpl	r2, #1
   d5412:	601a      	strpl	r2, [r3, #0]
   d5414:	4b1e      	ldr	r3, [pc, #120]	; (d5490 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d5416:	681a      	ldr	r2, [r3, #0]
   d5418:	07d0      	lsls	r0, r2, #31
   d541a:	bf5c      	itt	pl
   d541c:	2201      	movpl	r2, #1
   d541e:	601a      	strpl	r2, [r3, #0]
   d5420:	4b1c      	ldr	r3, [pc, #112]	; (d5494 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d5422:	681a      	ldr	r2, [r3, #0]
   d5424:	07d1      	lsls	r1, r2, #31
   d5426:	bf5c      	itt	pl
   d5428:	2201      	movpl	r2, #1
   d542a:	601a      	strpl	r2, [r3, #0]
   d542c:	4b1a      	ldr	r3, [pc, #104]	; (d5498 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d542e:	681a      	ldr	r2, [r3, #0]
   d5430:	07d2      	lsls	r2, r2, #31
   d5432:	bf5c      	itt	pl
   d5434:	2201      	movpl	r2, #1
   d5436:	601a      	strpl	r2, [r3, #0]
   d5438:	4b18      	ldr	r3, [pc, #96]	; (d549c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d543a:	681a      	ldr	r2, [r3, #0]
   d543c:	07d0      	lsls	r0, r2, #31
   d543e:	bf5c      	itt	pl
   d5440:	2201      	movpl	r2, #1
   d5442:	601a      	strpl	r2, [r3, #0]
   d5444:	4b16      	ldr	r3, [pc, #88]	; (d54a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d5446:	681a      	ldr	r2, [r3, #0]
   d5448:	07d1      	lsls	r1, r2, #31
   d544a:	bf5c      	itt	pl
   d544c:	2201      	movpl	r2, #1
   d544e:	601a      	strpl	r2, [r3, #0]
   d5450:	4b14      	ldr	r3, [pc, #80]	; (d54a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d5452:	681a      	ldr	r2, [r3, #0]
   d5454:	07d2      	lsls	r2, r2, #31
   d5456:	bf5c      	itt	pl
   d5458:	2201      	movpl	r2, #1
   d545a:	601a      	strpl	r2, [r3, #0]
   d545c:	4b12      	ldr	r3, [pc, #72]	; (d54a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d545e:	681a      	ldr	r2, [r3, #0]
   d5460:	07d0      	lsls	r0, r2, #31
   d5462:	bf5c      	itt	pl
   d5464:	2201      	movpl	r2, #1
   d5466:	601a      	strpl	r2, [r3, #0]
   d5468:	4b10      	ldr	r3, [pc, #64]	; (d54ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d546a:	681a      	ldr	r2, [r3, #0]
   d546c:	07d1      	lsls	r1, r2, #31
   d546e:	bf5c      	itt	pl
   d5470:	2201      	movpl	r2, #1
   d5472:	601a      	strpl	r2, [r3, #0]
   d5474:	4b0e      	ldr	r3, [pc, #56]	; (d54b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d5476:	681a      	ldr	r2, [r3, #0]
   d5478:	07d2      	lsls	r2, r2, #31
   d547a:	bf5c      	itt	pl
   d547c:	2201      	movpl	r2, #1
   d547e:	601a      	strpl	r2, [r3, #0]
   d5480:	4770      	bx	lr
   d5482:	bf00      	nop
   d5484:	2003e79c 	.word	0x2003e79c
   d5488:	2003e798 	.word	0x2003e798
   d548c:	2003e794 	.word	0x2003e794
   d5490:	2003e790 	.word	0x2003e790
   d5494:	2003e78c 	.word	0x2003e78c
   d5498:	2003e788 	.word	0x2003e788
   d549c:	2003e784 	.word	0x2003e784
   d54a0:	2003e780 	.word	0x2003e780
   d54a4:	2003e77c 	.word	0x2003e77c
   d54a8:	2003e778 	.word	0x2003e778
   d54ac:	2003e774 	.word	0x2003e774
   d54b0:	2003e770 	.word	0x2003e770

000d54b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d54b4:	4b24      	ldr	r3, [pc, #144]	; (d5548 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d54b6:	681a      	ldr	r2, [r3, #0]
   d54b8:	07d0      	lsls	r0, r2, #31
   d54ba:	bf5c      	itt	pl
   d54bc:	2201      	movpl	r2, #1
   d54be:	601a      	strpl	r2, [r3, #0]
   d54c0:	4b22      	ldr	r3, [pc, #136]	; (d554c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d54c2:	681a      	ldr	r2, [r3, #0]
   d54c4:	07d1      	lsls	r1, r2, #31
   d54c6:	bf5c      	itt	pl
   d54c8:	2201      	movpl	r2, #1
   d54ca:	601a      	strpl	r2, [r3, #0]
   d54cc:	4b20      	ldr	r3, [pc, #128]	; (d5550 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d54ce:	681a      	ldr	r2, [r3, #0]
   d54d0:	07d2      	lsls	r2, r2, #31
   d54d2:	bf5c      	itt	pl
   d54d4:	2201      	movpl	r2, #1
   d54d6:	601a      	strpl	r2, [r3, #0]
   d54d8:	4b1e      	ldr	r3, [pc, #120]	; (d5554 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d54da:	681a      	ldr	r2, [r3, #0]
   d54dc:	07d0      	lsls	r0, r2, #31
   d54de:	bf5c      	itt	pl
   d54e0:	2201      	movpl	r2, #1
   d54e2:	601a      	strpl	r2, [r3, #0]
   d54e4:	4b1c      	ldr	r3, [pc, #112]	; (d5558 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d54e6:	681a      	ldr	r2, [r3, #0]
   d54e8:	07d1      	lsls	r1, r2, #31
   d54ea:	bf5c      	itt	pl
   d54ec:	2201      	movpl	r2, #1
   d54ee:	601a      	strpl	r2, [r3, #0]
   d54f0:	4b1a      	ldr	r3, [pc, #104]	; (d555c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d54f2:	681a      	ldr	r2, [r3, #0]
   d54f4:	07d2      	lsls	r2, r2, #31
   d54f6:	bf5c      	itt	pl
   d54f8:	2201      	movpl	r2, #1
   d54fa:	601a      	strpl	r2, [r3, #0]
   d54fc:	4b18      	ldr	r3, [pc, #96]	; (d5560 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d54fe:	681a      	ldr	r2, [r3, #0]
   d5500:	07d0      	lsls	r0, r2, #31
   d5502:	bf5c      	itt	pl
   d5504:	2201      	movpl	r2, #1
   d5506:	601a      	strpl	r2, [r3, #0]
   d5508:	4b16      	ldr	r3, [pc, #88]	; (d5564 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d550a:	681a      	ldr	r2, [r3, #0]
   d550c:	07d1      	lsls	r1, r2, #31
   d550e:	bf5c      	itt	pl
   d5510:	2201      	movpl	r2, #1
   d5512:	601a      	strpl	r2, [r3, #0]
   d5514:	4b14      	ldr	r3, [pc, #80]	; (d5568 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d5516:	681a      	ldr	r2, [r3, #0]
   d5518:	07d2      	lsls	r2, r2, #31
   d551a:	bf5c      	itt	pl
   d551c:	2201      	movpl	r2, #1
   d551e:	601a      	strpl	r2, [r3, #0]
   d5520:	4b12      	ldr	r3, [pc, #72]	; (d556c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d5522:	681a      	ldr	r2, [r3, #0]
   d5524:	07d0      	lsls	r0, r2, #31
   d5526:	bf5c      	itt	pl
   d5528:	2201      	movpl	r2, #1
   d552a:	601a      	strpl	r2, [r3, #0]
   d552c:	4b10      	ldr	r3, [pc, #64]	; (d5570 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d552e:	681a      	ldr	r2, [r3, #0]
   d5530:	07d1      	lsls	r1, r2, #31
   d5532:	bf5c      	itt	pl
   d5534:	2201      	movpl	r2, #1
   d5536:	601a      	strpl	r2, [r3, #0]
   d5538:	4b0e      	ldr	r3, [pc, #56]	; (d5574 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d553a:	681a      	ldr	r2, [r3, #0]
   d553c:	07d2      	lsls	r2, r2, #31
   d553e:	bf5c      	itt	pl
   d5540:	2201      	movpl	r2, #1
   d5542:	601a      	strpl	r2, [r3, #0]
   d5544:	4770      	bx	lr
   d5546:	bf00      	nop
   d5548:	2003e7cc 	.word	0x2003e7cc
   d554c:	2003e7c8 	.word	0x2003e7c8
   d5550:	2003e7c4 	.word	0x2003e7c4
   d5554:	2003e7c0 	.word	0x2003e7c0
   d5558:	2003e7bc 	.word	0x2003e7bc
   d555c:	2003e7b8 	.word	0x2003e7b8
   d5560:	2003e7b4 	.word	0x2003e7b4
   d5564:	2003e7b0 	.word	0x2003e7b0
   d5568:	2003e7ac 	.word	0x2003e7ac
   d556c:	2003e7a8 	.word	0x2003e7a8
   d5570:	2003e7a4 	.word	0x2003e7a4
   d5574:	2003e7a0 	.word	0x2003e7a0

000d5578 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5578:	4b18      	ldr	r3, [pc, #96]	; (d55dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d557a:	681a      	ldr	r2, [r3, #0]
   d557c:	07d1      	lsls	r1, r2, #31
   d557e:	bf5c      	itt	pl
   d5580:	2201      	movpl	r2, #1
   d5582:	601a      	strpl	r2, [r3, #0]
   d5584:	4b16      	ldr	r3, [pc, #88]	; (d55e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5586:	681a      	ldr	r2, [r3, #0]
   d5588:	07d2      	lsls	r2, r2, #31
   d558a:	bf5c      	itt	pl
   d558c:	2201      	movpl	r2, #1
   d558e:	601a      	strpl	r2, [r3, #0]
   d5590:	4b14      	ldr	r3, [pc, #80]	; (d55e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5592:	681a      	ldr	r2, [r3, #0]
   d5594:	07d0      	lsls	r0, r2, #31
   d5596:	bf5c      	itt	pl
   d5598:	2201      	movpl	r2, #1
   d559a:	601a      	strpl	r2, [r3, #0]
   d559c:	4b12      	ldr	r3, [pc, #72]	; (d55e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d559e:	681a      	ldr	r2, [r3, #0]
   d55a0:	07d1      	lsls	r1, r2, #31
   d55a2:	bf5c      	itt	pl
   d55a4:	2201      	movpl	r2, #1
   d55a6:	601a      	strpl	r2, [r3, #0]
   d55a8:	4b10      	ldr	r3, [pc, #64]	; (d55ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d55aa:	681a      	ldr	r2, [r3, #0]
   d55ac:	07d2      	lsls	r2, r2, #31
   d55ae:	bf5c      	itt	pl
   d55b0:	2201      	movpl	r2, #1
   d55b2:	601a      	strpl	r2, [r3, #0]
   d55b4:	4b0e      	ldr	r3, [pc, #56]	; (d55f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d55b6:	681a      	ldr	r2, [r3, #0]
   d55b8:	07d0      	lsls	r0, r2, #31
   d55ba:	bf5c      	itt	pl
   d55bc:	2201      	movpl	r2, #1
   d55be:	601a      	strpl	r2, [r3, #0]
   d55c0:	4b0c      	ldr	r3, [pc, #48]	; (d55f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d55c2:	681a      	ldr	r2, [r3, #0]
   d55c4:	07d1      	lsls	r1, r2, #31
   d55c6:	bf5c      	itt	pl
   d55c8:	2201      	movpl	r2, #1
   d55ca:	601a      	strpl	r2, [r3, #0]
   d55cc:	4b0a      	ldr	r3, [pc, #40]	; (d55f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d55ce:	681a      	ldr	r2, [r3, #0]
   d55d0:	07d2      	lsls	r2, r2, #31
   d55d2:	bf5c      	itt	pl
   d55d4:	2201      	movpl	r2, #1
   d55d6:	601a      	strpl	r2, [r3, #0]
   d55d8:	4770      	bx	lr
   d55da:	bf00      	nop
   d55dc:	2003e7ec 	.word	0x2003e7ec
   d55e0:	2003e7e8 	.word	0x2003e7e8
   d55e4:	2003e7e4 	.word	0x2003e7e4
   d55e8:	2003e7e0 	.word	0x2003e7e0
   d55ec:	2003e7dc 	.word	0x2003e7dc
   d55f0:	2003e7d8 	.word	0x2003e7d8
   d55f4:	2003e7d4 	.word	0x2003e7d4
   d55f8:	2003e7d0 	.word	0x2003e7d0

000d55fc <__cxa_atexit>:
   d55fc:	b510      	push	{r4, lr}
   d55fe:	4c05      	ldr	r4, [pc, #20]	; (d5614 <__cxa_atexit+0x18>)
   d5600:	4613      	mov	r3, r2
   d5602:	b12c      	cbz	r4, d5610 <__cxa_atexit+0x14>
   d5604:	460a      	mov	r2, r1
   d5606:	4601      	mov	r1, r0
   d5608:	2002      	movs	r0, #2
   d560a:	f3af 8000 	nop.w
   d560e:	bd10      	pop	{r4, pc}
   d5610:	4620      	mov	r0, r4
   d5612:	bd10      	pop	{r4, pc}
   d5614:	00000000 	.word	0x00000000

000d5618 <memcpy>:
   d5618:	b510      	push	{r4, lr}
   d561a:	1e43      	subs	r3, r0, #1
   d561c:	440a      	add	r2, r1
   d561e:	4291      	cmp	r1, r2
   d5620:	d004      	beq.n	d562c <memcpy+0x14>
   d5622:	f811 4b01 	ldrb.w	r4, [r1], #1
   d5626:	f803 4f01 	strb.w	r4, [r3, #1]!
   d562a:	e7f8      	b.n	d561e <memcpy+0x6>
   d562c:	bd10      	pop	{r4, pc}

000d562e <memset>:
   d562e:	4402      	add	r2, r0
   d5630:	4603      	mov	r3, r0
   d5632:	4293      	cmp	r3, r2
   d5634:	d002      	beq.n	d563c <memset+0xe>
   d5636:	f803 1b01 	strb.w	r1, [r3], #1
   d563a:	e7fa      	b.n	d5632 <memset+0x4>
   d563c:	4770      	bx	lr
	...

000d5640 <srand>:
   d5640:	b538      	push	{r3, r4, r5, lr}
   d5642:	4b12      	ldr	r3, [pc, #72]	; (d568c <srand+0x4c>)
   d5644:	681c      	ldr	r4, [r3, #0]
   d5646:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d5648:	4605      	mov	r5, r0
   d564a:	b9d3      	cbnz	r3, d5682 <srand+0x42>
   d564c:	2018      	movs	r0, #24
   d564e:	f7ff f887 	bl	d4760 <malloc>
   d5652:	f243 330e 	movw	r3, #13070	; 0x330e
   d5656:	63a0      	str	r0, [r4, #56]	; 0x38
   d5658:	8003      	strh	r3, [r0, #0]
   d565a:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d565e:	8043      	strh	r3, [r0, #2]
   d5660:	f241 2334 	movw	r3, #4660	; 0x1234
   d5664:	8083      	strh	r3, [r0, #4]
   d5666:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d566a:	80c3      	strh	r3, [r0, #6]
   d566c:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d5670:	8103      	strh	r3, [r0, #8]
   d5672:	2305      	movs	r3, #5
   d5674:	8143      	strh	r3, [r0, #10]
   d5676:	230b      	movs	r3, #11
   d5678:	8183      	strh	r3, [r0, #12]
   d567a:	2201      	movs	r2, #1
   d567c:	2300      	movs	r3, #0
   d567e:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d5682:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d5684:	2200      	movs	r2, #0
   d5686:	611d      	str	r5, [r3, #16]
   d5688:	615a      	str	r2, [r3, #20]
   d568a:	bd38      	pop	{r3, r4, r5, pc}
   d568c:	2003e398 	.word	0x2003e398

000d5690 <rand>:
   d5690:	4b19      	ldr	r3, [pc, #100]	; (d56f8 <rand+0x68>)
   d5692:	b510      	push	{r4, lr}
   d5694:	681c      	ldr	r4, [r3, #0]
   d5696:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d5698:	b9d3      	cbnz	r3, d56d0 <rand+0x40>
   d569a:	2018      	movs	r0, #24
   d569c:	f7ff f860 	bl	d4760 <malloc>
   d56a0:	f243 330e 	movw	r3, #13070	; 0x330e
   d56a4:	63a0      	str	r0, [r4, #56]	; 0x38
   d56a6:	8003      	strh	r3, [r0, #0]
   d56a8:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d56ac:	8043      	strh	r3, [r0, #2]
   d56ae:	f241 2334 	movw	r3, #4660	; 0x1234
   d56b2:	8083      	strh	r3, [r0, #4]
   d56b4:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d56b8:	80c3      	strh	r3, [r0, #6]
   d56ba:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d56be:	8103      	strh	r3, [r0, #8]
   d56c0:	2305      	movs	r3, #5
   d56c2:	8143      	strh	r3, [r0, #10]
   d56c4:	230b      	movs	r3, #11
   d56c6:	8183      	strh	r3, [r0, #12]
   d56c8:	2201      	movs	r2, #1
   d56ca:	2300      	movs	r3, #0
   d56cc:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d56d0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d56d2:	4c0a      	ldr	r4, [pc, #40]	; (d56fc <rand+0x6c>)
   d56d4:	690b      	ldr	r3, [r1, #16]
   d56d6:	6948      	ldr	r0, [r1, #20]
   d56d8:	4a09      	ldr	r2, [pc, #36]	; (d5700 <rand+0x70>)
   d56da:	435c      	muls	r4, r3
   d56dc:	fb02 4000 	mla	r0, r2, r0, r4
   d56e0:	fba3 2302 	umull	r2, r3, r3, r2
   d56e4:	3201      	adds	r2, #1
   d56e6:	4403      	add	r3, r0
   d56e8:	f143 0300 	adc.w	r3, r3, #0
   d56ec:	e9c1 2304 	strd	r2, r3, [r1, #16]
   d56f0:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   d56f4:	bd10      	pop	{r4, pc}
   d56f6:	bf00      	nop
   d56f8:	2003e398 	.word	0x2003e398
   d56fc:	5851f42d 	.word	0x5851f42d
   d5700:	4c957f2d 	.word	0x4c957f2d

000d5704 <strlen>:
   d5704:	4603      	mov	r3, r0
   d5706:	f813 2b01 	ldrb.w	r2, [r3], #1
   d570a:	2a00      	cmp	r2, #0
   d570c:	d1fb      	bne.n	d5706 <strlen+0x2>
   d570e:	1a18      	subs	r0, r3, r0
   d5710:	3801      	subs	r0, #1
   d5712:	4770      	bx	lr

000d5714 <dynalib_user>:
   d5714:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d5724:	0000 0000 6f63 6e75 3a74 0020 6164 6174     ....count: .data
   d5734:	7220 6365 6965 6576 3a64 0020 6f63 7272      received: .corr
   d5744:	6365 2074 6461 7264 7365 0073 6172 646e     ect address.rand
   d5754:	6d6f 7a69 2065 6461 7264 7365 0073 6572     omize address.re
   d5764:	7571 7365 2074 6572 6563 7669 6465 7200     quest received.r
   d5774:	7165 6575 7473 6d20 646f 2065 0031 6572     equest mode 1.re
   d5784:	7571 7365 2074 6f6d 6564 3220 7000 7361     quest mode 2.pas
   d5794:	0073 6166 6c69 0000                         s.fail..

000d579c <_ZTVN5spark13EthernetClassE>:
	...
   d57a4:	47df 000d 47d5 000d 47cb 000d 47c1 000d     .G...G...G...G..
   d57b4:	47b5 000d 47a9 000d 479d 000d 4795 000d     .G...G...G...G..
   d57c4:	478b 000d 4781 000d 5109 000d 6162 6475     .G...G...Q..baud
   d57d4:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   d57e4:	7974 6570 7000 7261 6d61 6300 646d 6900     type.param.cmd.i
   d57f4:	0064 6e68 0064 7473 6d72 6600 6c69 0074     d.hnd.strm.filt.
   d5804:	766c 006c 6461 4864 6e61 6c64 7265 7200     lvl.addHandler.r
   d5814:	6d65 766f 4865 6e61 6c64 7265 6500 756e     emoveHandler.enu
   d5824:	486d 6e61 6c64 7265 0073 534a 4e4f 7453     mHandlers.JSONSt
   d5834:	6572 6d61 6f4c 4867 6e61 6c64 7265 6100     reamLogHandler.a
   d5844:	7070 2500 3130 7530 0020 205d 2500 0064     pp.%010u .] .%d.
   d5854:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
   d5864:	203d 2500 0069 6564 6174 6c69 2073 203d     = .%i.details = 
   d5874:	0d00 000a 0066 6e6c 6600 006e 6f63 6564     ....f.ln.fn.code
   d5884:	6400 7465 6961 006c 6f6e 656e 7400 6172     .detail.none.tra
   d5894:	6563 6900 666e 006f 6177 6e72 6500 7272     ce.info.warn.err
   d58a4:	726f 7000 6e61 6369 6100 6c6c 5a00 2500     or.panic.all.Z.%
   d58b4:	302b 6433 253a 3230 0075 5925 252d 2d6d     +03d:%02u.%Y-%m-
   d58c4:	6425 2554 3a48 4d25 253a 2553 007a 7361     %dT%H:%M:%S%z.as
   d58d4:	7463 6d69 0065 0000                         ctime...

000d58dc <_ZTV9IPAddress>:
	...
   d58e4:	4ae9 000d 4ad9 000d 4adb 000d               .J...J...J..

000d58f0 <_ZTV9USBSerial>:
	...
   d58f8:	4bc1 000d 4c11 000d 4c1f 000d 48a9 000d     .K...L...L...H..
   d5908:	4bfd 000d 4bc3 000d 4bd9 000d 4c0b 000d     .K...K...K...L..
   d5918:	4bef 000d 4bbd 000d                         .K...K..

000d5920 <_ZTV11USARTSerial>:
	...
   d5928:	4ccd 000d 4d1d 000d 4d2b 000d 48a9 000d     .L...M..+M...H..
   d5938:	4ce1 000d 4d03 000d 4cef 000d 4d17 000d     .L...M...L...M..
   d5948:	4ccf 000d 4cd3 000d                         .L...L..

000d5950 <_ZTV7TwoWire>:
	...
   d5958:	4dd1 000d 4e1b 000d 4df3 000d 4dd3 000d     .M...N...M...M..
   d5968:	4dfb 000d 4e03 000d 4e0b 000d 4e13 000d     .M...N...N...N..

000d5978 <_ZTVN5spark9MeshClassE>:
	...
   d5980:	4f07 000d 4efd 000d 4ef3 000d 4ee9 000d     .O...N...N...N..
   d5990:	4edd 000d 4ed1 000d 4ec5 000d 4ebd 000d     .N...N...N...N..
   d59a0:	4eb3 000d 4ea9 000d 5109 000d               .N...N...Q..

000d59ac <_ZTVN5spark9WiFiClassE>:
	...
   d59b4:	5083 000d 5079 000d 506f 000d 5025 000d     .P..yP..oP..%P..
   d59c4:	5063 000d 5057 000d 504b 000d 5043 000d     cP..WP..KP..CP..
   d59d4:	5039 000d 502f 000d 5109 000d               9P../P...Q..

000d59e0 <_ZTVN5spark12NetworkClassE>:
	...
   d59e8:	50a1 000d 50ab 000d 50b5 000d 50bf 000d     .P...P...P...P..
   d59f8:	50c9 000d 50d5 000d 50e1 000d 50ed 000d     .P...P...P...P..
   d5a08:	50f5 000d 50ff 000d 5109 000d               .P...P...Q..

000d5a14 <_ZSt7nothrow>:
   d5a14:	0000 0000                                   ....

000d5a18 <__sf_fake_stdin>:
	...

000d5a38 <__sf_fake_stdout>:
	...

000d5a58 <__sf_fake_stderr>:
	...
   d5a78:	0043                                        C.

000d5a7a <link_const_variable_data_end>:
	...

000d5a7c <link_constructors_location>:
   d5a7c:	000d4365 	.word	0x000d4365
   d5a80:	000d47e9 	.word	0x000d47e9
   d5a84:	000d4819 	.word	0x000d4819
   d5a88:	000d4881 	.word	0x000d4881
   d5a8c:	000d4965 	.word	0x000d4965
   d5a90:	000d4975 	.word	0x000d4975
   d5a94:	000d49ad 	.word	0x000d49ad
   d5a98:	000d4fd5 	.word	0x000d4fd5
   d5a9c:	000d508d 	.word	0x000d508d
   d5aa0:	000d51d5 	.word	0x000d51d5
   d5aa4:	000d536d 	.word	0x000d536d
   d5aa8:	000d53f1 	.word	0x000d53f1
   d5aac:	000d54b5 	.word	0x000d54b5
   d5ab0:	000d5579 	.word	0x000d5579

000d5ab4 <link_constructors_end>:
	...
