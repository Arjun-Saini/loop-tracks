
/Users/sainihome/Documents/GitHub/loop-tracks/slave/target/3.3.0/argon/slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001bf4  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b5c10  000b5c10  00005c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b5c34  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  2003e600  000b5c38  0001e600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000017c  2003e674  2003e674  0002e674  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b5cac  000b5cac  00025cac  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b5cd4  000b5cd4  00025cd4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   000f8d6c  00000000  00000000  00025cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0001119f  00000000  00000000  0011ea44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00036461  00000000  00000000  0012fbe3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002998  00000000  00000000  00166044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00009b08  00000000  00000000  001689dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00035c32  00000000  00000000  001724e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000398af  00000000  00000000  001a8116  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0012c366  00000000  00000000  001e19c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  000073f0  00000000  00000000  0030dd2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f001 fb9d 	bl	b576c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f001 fba5 	bl	b5788 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e600 	.word	0x2003e600
   b4048:	000b5c38 	.word	0x000b5c38
   b404c:	2003e674 	.word	0x2003e674
   b4050:	2003e674 	.word	0x2003e674
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f001 fa7d 	bl	b555c <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b5bdc 	.word	0x000b5bdc
   b407c:	000b5c04 	.word	0x000b5c04

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b9d0 	b.w	b4424 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f997 	bl	b43b8 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f001 ba1d 	b.w	b54cc <_post_loop>

000b4092 <_Znaj>:
   b4092:	f000 be3b 	b.w	b4d0c <malloc>

000b4096 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4096:	f000 be41 	b.w	b4d1c <free>

000b409a <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b409a:	7800      	ldrb	r0, [r0, #0]
   b409c:	fab0 f080 	clz	r0, r0
   b40a0:	0940      	lsrs	r0, r0, #5
   b40a2:	4770      	bx	lr

000b40a4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40a4:	2301      	movs	r3, #1
   b40a6:	7003      	strb	r3, [r0, #0]
   b40a8:	4770      	bx	lr

000b40aa <_ZN5Print5writeEPKc.isra.0>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b40aa:	b513      	push	{r0, r1, r4, lr}
   b40ac:	4604      	mov	r4, r0
      if (str == NULL) return 0;
   b40ae:	b161      	cbz	r1, b40ca <_ZN5Print5writeEPKc.isra.0+0x20>
      return write((const uint8_t *)str, strlen(str));
   b40b0:	4608      	mov	r0, r1
   b40b2:	9101      	str	r1, [sp, #4]
   b40b4:	f001 fbdc 	bl	b5870 <strlen>
   b40b8:	6823      	ldr	r3, [r4, #0]
   b40ba:	9901      	ldr	r1, [sp, #4]
   b40bc:	68db      	ldr	r3, [r3, #12]
   b40be:	4602      	mov	r2, r0
   b40c0:	4620      	mov	r0, r4
    }
   b40c2:	b002      	add	sp, #8
   b40c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b40c8:	4718      	bx	r3
    }
   b40ca:	b002      	add	sp, #8
   b40cc:	bd10      	pop	{r4, pc}
	...

000b40d0 <_Z11dataRequestv>:
      }
    }
  }
}

void dataRequest(){
   b40d0:	b510      	push	{r4, lr}
  Serial.println("request received");
   b40d2:	f001 f975 	bl	b53c0 <_Z16_fetch_usbserialv>
   b40d6:	4915      	ldr	r1, [pc, #84]	; (b412c <_Z11dataRequestv+0x5c>)
   b40d8:	f001 f843 	bl	b5162 <_ZN5Print7printlnEPKc>
  switch(requestMode){
   b40dc:	4b14      	ldr	r3, [pc, #80]	; (b4130 <_Z11dataRequestv+0x60>)
   b40de:	681b      	ldr	r3, [r3, #0]
   b40e0:	2b01      	cmp	r3, #1
   b40e2:	d002      	beq.n	b40ea <_Z11dataRequestv+0x1a>
   b40e4:	2b02      	cmp	r3, #2
   b40e6:	d00d      	beq.n	b4104 <_Z11dataRequestv+0x34>
        Wire.write("fail");
      }
      break;
    }
  }
}
   b40e8:	bd10      	pop	{r4, pc}
      Serial.println("request mode 1");
   b40ea:	f001 f969 	bl	b53c0 <_Z16_fetch_usbserialv>
   b40ee:	4911      	ldr	r1, [pc, #68]	; (b4134 <_Z11dataRequestv+0x64>)
   b40f0:	f001 f837 	bl	b5162 <_ZN5Print7printlnEPKc>
      Wire.write(deviceID);
   b40f4:	f001 face 	bl	b5694 <_Z19__fetch_global_Wirev>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b40f8:	4b0f      	ldr	r3, [pc, #60]	; (b4138 <_Z11dataRequestv+0x68>)
   b40fa:	6819      	ldr	r1, [r3, #0]
}
   b40fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Wire.write("fail");
   b4100:	f7ff bfd3 	b.w	b40aa <_ZN5Print5writeEPKc.isra.0>
      if(verifyAddress){
   b4104:	4c0d      	ldr	r4, [pc, #52]	; (b413c <_Z11dataRequestv+0x6c>)
      Serial.println("request mode 2");
   b4106:	f001 f95b 	bl	b53c0 <_Z16_fetch_usbserialv>
   b410a:	490d      	ldr	r1, [pc, #52]	; (b4140 <_Z11dataRequestv+0x70>)
   b410c:	f001 f829 	bl	b5162 <_ZN5Print7printlnEPKc>
      if(verifyAddress){
   b4110:	7823      	ldrb	r3, [r4, #0]
   b4112:	b13b      	cbz	r3, b4124 <_Z11dataRequestv+0x54>
        Wire.write("pass");
   b4114:	f001 fabe 	bl	b5694 <_Z19__fetch_global_Wirev>
   b4118:	490a      	ldr	r1, [pc, #40]	; (b4144 <_Z11dataRequestv+0x74>)
   b411a:	f7ff ffc6 	bl	b40aa <_ZN5Print5writeEPKc.isra.0>
        verifyAddress = false;
   b411e:	2300      	movs	r3, #0
   b4120:	7023      	strb	r3, [r4, #0]
   b4122:	e7e1      	b.n	b40e8 <_Z11dataRequestv+0x18>
        Wire.write("fail");
   b4124:	f001 fab6 	bl	b5694 <_Z19__fetch_global_Wirev>
   b4128:	4907      	ldr	r1, [pc, #28]	; (b4148 <_Z11dataRequestv+0x78>)
   b412a:	e7e7      	b.n	b40fc <_Z11dataRequestv+0x2c>
   b412c:	000b5960 	.word	0x000b5960
   b4130:	2003e698 	.word	0x2003e698
   b4134:	000b5971 	.word	0x000b5971
   b4138:	2003e688 	.word	0x2003e688
   b413c:	2003e6b0 	.word	0x2003e6b0
   b4140:	000b5980 	.word	0x000b5980
   b4144:	000b598f 	.word	0x000b598f
   b4148:	000b5994 	.word	0x000b5994

000b414c <_Z12dataReceivedi>:
void dataReceived(int count){
   b414c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4150:	af00      	add	r7, sp, #0
  int size = Wire.available();
   b4152:	f001 fa9f 	bl	b5694 <_Z19__fetch_global_Wirev>
   b4156:	6803      	ldr	r3, [r0, #0]
   b4158:	691b      	ldr	r3, [r3, #16]
   b415a:	4798      	blx	r3
  char inputBuffer[size];
   b415c:	1dc3      	adds	r3, r0, #7
   b415e:	f023 0307 	bic.w	r3, r3, #7
   b4162:	ebad 0d03 	sub.w	sp, sp, r3
  int size = Wire.available();
   b4166:	4604      	mov	r4, r0
  Serial.print("count: ");
   b4168:	f001 f92a 	bl	b53c0 <_Z16_fetch_usbserialv>
   b416c:	4982      	ldr	r1, [pc, #520]	; (b4378 <_Z12dataReceivedi+0x22c>)
   b416e:	f000 ffe5 	bl	b513c <_ZN5Print5printEPKc>
  Serial.println(Wire.available());
   b4172:	f001 f925 	bl	b53c0 <_Z16_fetch_usbserialv>
   b4176:	4680      	mov	r8, r0
   b4178:	f001 fa8c 	bl	b5694 <_Z19__fetch_global_Wirev>
   b417c:	6803      	ldr	r3, [r0, #0]
   b417e:	691b      	ldr	r3, [r3, #16]
   b4180:	4798      	blx	r3
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   b4182:	1e05      	subs	r5, r0, #0
  char inputBuffer[size];
   b4184:	466e      	mov	r6, sp
   b4186:	da28      	bge.n	b41da <_Z12dataReceivedi+0x8e>
            t = print('-');
   b4188:	212d      	movs	r1, #45	; 0x2d
   b418a:	4640      	mov	r0, r8
   b418c:	f000 ffda 	bl	b5144 <_ZN5Print5printEc>
            val = -n;
   b4190:	4269      	negs	r1, r5
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4192:	220a      	movs	r2, #10
   b4194:	4640      	mov	r0, r8
   b4196:	f000 fff8 	bl	b518a <_ZN5Print11printNumberEmh>
        n += println();
   b419a:	4640      	mov	r0, r8
   b419c:	f000 ffd5 	bl	b514a <_ZN5Print7printlnEv>
  Serial.println();
   b41a0:	f001 f90e 	bl	b53c0 <_Z16_fetch_usbserialv>
   b41a4:	f000 ffd1 	bl	b514a <_ZN5Print7printlnEv>
    c = Wire.read();
   b41a8:	4d74      	ldr	r5, [pc, #464]	; (b437c <_Z12dataReceivedi+0x230>)
   b41aa:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
  while(Wire.available() > 0){
   b41ae:	f001 fa71 	bl	b5694 <_Z19__fetch_global_Wirev>
   b41b2:	6803      	ldr	r3, [r0, #0]
   b41b4:	691b      	ldr	r3, [r3, #16]
   b41b6:	4798      	blx	r3
   b41b8:	2800      	cmp	r0, #0
   b41ba:	dd10      	ble.n	b41de <_Z12dataReceivedi+0x92>
    c = Wire.read();
   b41bc:	f001 fa6a 	bl	b5694 <_Z19__fetch_global_Wirev>
   b41c0:	6803      	ldr	r3, [r0, #0]
   b41c2:	695b      	ldr	r3, [r3, #20]
   b41c4:	4798      	blx	r3
   b41c6:	7028      	strb	r0, [r5, #0]
    Serial.println(c);
   b41c8:	f001 f8fa 	bl	b53c0 <_Z16_fetch_usbserialv>
   b41cc:	7829      	ldrb	r1, [r5, #0]
   b41ce:	f000 ffd2 	bl	b5176 <_ZN5Print7printlnEc>
    inputBuffer[counter] = c;
   b41d2:	782b      	ldrb	r3, [r5, #0]
   b41d4:	f808 3f01 	strb.w	r3, [r8, #1]!
  while(Wire.available() > 0){
   b41d8:	e7e9      	b.n	b41ae <_Z12dataReceivedi+0x62>
            val = n;
   b41da:	4629      	mov	r1, r5
   b41dc:	e7d9      	b.n	b4192 <_Z12dataReceivedi+0x46>
  Serial.println("data received: ");
   b41de:	f001 f8ef 	bl	b53c0 <_Z16_fetch_usbserialv>
   b41e2:	4967      	ldr	r1, [pc, #412]	; (b4380 <_Z12dataReceivedi+0x234>)
   b41e4:	f000 ffbd 	bl	b5162 <_ZN5Print7printlnEPKc>
  Serial.print(inputBuffer);
   b41e8:	f001 f8ea 	bl	b53c0 <_Z16_fetch_usbserialv>
   b41ec:	4631      	mov	r1, r6
   b41ee:	f000 ffa5 	bl	b513c <_ZN5Print5printEPKc>
  Serial.println();
   b41f2:	f001 f8e5 	bl	b53c0 <_Z16_fetch_usbserialv>
   b41f6:	f000 ffa8 	bl	b514a <_ZN5Print7printlnEv>
  if(size == 1 && inputBuffer[0] == '1'){
   b41fa:	2c01      	cmp	r4, #1
   b41fc:	d118      	bne.n	b4230 <_Z12dataReceivedi+0xe4>
   b41fe:	7833      	ldrb	r3, [r6, #0]
   b4200:	2b31      	cmp	r3, #49	; 0x31
   b4202:	d102      	bne.n	b420a <_Z12dataReceivedi+0xbe>
      requestMode = 0;
   b4204:	4b5f      	ldr	r3, [pc, #380]	; (b4384 <_Z12dataReceivedi+0x238>)
   b4206:	601c      	str	r4, [r3, #0]
   b4208:	e004      	b.n	b4214 <_Z12dataReceivedi+0xc8>
  }else if(size == 1 && inputBuffer[0] == '2'){
   b420a:	2b32      	cmp	r3, #50	; 0x32
   b420c:	d105      	bne.n	b421a <_Z12dataReceivedi+0xce>
    requestMode = 2;
   b420e:	4b5d      	ldr	r3, [pc, #372]	; (b4384 <_Z12dataReceivedi+0x238>)
   b4210:	2202      	movs	r2, #2
   b4212:	601a      	str	r2, [r3, #0]
}
   b4214:	46bd      	mov	sp, r7
   b4216:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  }else if(size == 1 && inputBuffer[0] == '3'){
   b421a:	2b33      	cmp	r3, #51	; 0x33
   b421c:	d102      	bne.n	b4224 <_Z12dataReceivedi+0xd8>
    blink = true;
   b421e:	4b5a      	ldr	r3, [pc, #360]	; (b4388 <_Z12dataReceivedi+0x23c>)
   b4220:	701c      	strb	r4, [r3, #0]
   b4222:	e7f7      	b.n	b4214 <_Z12dataReceivedi+0xc8>
  }else if(size == 1 && inputBuffer[0] == '4'){
   b4224:	2b34      	cmp	r3, #52	; 0x34
   b4226:	d13e      	bne.n	b42a6 <_Z12dataReceivedi+0x15a>
    blink = false;
   b4228:	4b57      	ldr	r3, [pc, #348]	; (b4388 <_Z12dataReceivedi+0x23c>)
   b422a:	2200      	movs	r2, #0
   b422c:	701a      	strb	r2, [r3, #0]
   b422e:	e7f1      	b.n	b4214 <_Z12dataReceivedi+0xc8>
  }else if(size == 24){
   b4230:	2c18      	cmp	r4, #24
   b4232:	d138      	bne.n	b42a6 <_Z12dataReceivedi+0x15a>
      if(deviceID.charAt(i) != inputBuffer[i]){
   b4234:	f8df 9170 	ldr.w	r9, [pc, #368]	; b43a8 <_Z12dataReceivedi+0x25c>
   b4238:	4d54      	ldr	r5, [pc, #336]	; (b438c <_Z12dataReceivedi+0x240>)
    for(int i = 0; i < 24; i++){
   b423a:	2400      	movs	r4, #0
      verifyAddress = true;
   b423c:	f04f 0801 	mov.w	r8, #1
      if(deviceID.charAt(i) != inputBuffer[i]){
   b4240:	4621      	mov	r1, r4
   b4242:	4648      	mov	r0, r9
   b4244:	f000 ffed 	bl	b5222 <_ZNK6String6charAtEj>
   b4248:	5d33      	ldrb	r3, [r6, r4]
   b424a:	4283      	cmp	r3, r0
   b424c:	d020      	beq.n	b4290 <_Z12dataReceivedi+0x144>
        verifyAddress = false;
   b424e:	2400      	movs	r4, #0
   b4250:	702c      	strb	r4, [r5, #0]
      Serial.println("randomize address");
   b4252:	f001 f8b5 	bl	b53c0 <_Z16_fetch_usbserialv>
   b4256:	494e      	ldr	r1, [pc, #312]	; (b4390 <_Z12dataReceivedi+0x244>)
      address = random(64, 120);
   b4258:	4d4e      	ldr	r5, [pc, #312]	; (b4394 <_Z12dataReceivedi+0x248>)
      Serial.println("randomize address");
   b425a:	f000 ff82 	bl	b5162 <_ZN5Print7printlnEPKc>
      address = random(64, 120);
   b425e:	2178      	movs	r1, #120	; 0x78
   b4260:	2040      	movs	r0, #64	; 0x40
   b4262:	f000 ffbb 	bl	b51dc <_Z6randomii>
   b4266:	6028      	str	r0, [r5, #0]
      Wire.end();
   b4268:	f001 fa14 	bl	b5694 <_Z19__fetch_global_Wirev>
   b426c:	f000 fdff 	bl	b4e6e <_ZN7TwoWire3endEv>
      Wire.begin(address);
   b4270:	f001 fa10 	bl	b5694 <_Z19__fetch_global_Wirev>
   b4274:	6829      	ldr	r1, [r5, #0]
   b4276:	f000 fdf7 	bl	b4e68 <_ZN7TwoWire5beginEi>
      Wire.onReceive(dataReceived);
   b427a:	f001 fa0b 	bl	b5694 <_Z19__fetch_global_Wirev>
   b427e:	4946      	ldr	r1, [pc, #280]	; (b4398 <_Z12dataReceivedi+0x24c>)
   b4280:	f000 fdf9 	bl	b4e76 <_ZN7TwoWire9onReceiveEPFviE>
      Wire.onRequest(dataRequest);
   b4284:	f001 fa06 	bl	b5694 <_Z19__fetch_global_Wirev>
   b4288:	4944      	ldr	r1, [pc, #272]	; (b439c <_Z12dataReceivedi+0x250>)
   b428a:	f000 fdf8 	bl	b4e7e <_ZN7TwoWire9onRequestEPFvvE>
   b428e:	e7b9      	b.n	b4204 <_Z12dataReceivedi+0xb8>
    for(int i = 0; i < 24; i++){
   b4290:	3401      	adds	r4, #1
   b4292:	2c18      	cmp	r4, #24
      verifyAddress = true;
   b4294:	f885 8000 	strb.w	r8, [r5]
    for(int i = 0; i < 24; i++){
   b4298:	d1d2      	bne.n	b4240 <_Z12dataReceivedi+0xf4>
      Serial.println("correct address");
   b429a:	f001 f891 	bl	b53c0 <_Z16_fetch_usbserialv>
   b429e:	4940      	ldr	r1, [pc, #256]	; (b43a0 <_Z12dataReceivedi+0x254>)
   b42a0:	f000 ff5f 	bl	b5162 <_ZN5Print7printlnEPKc>
   b42a4:	e7b6      	b.n	b4214 <_Z12dataReceivedi+0xc8>
    Serial.println("----------------");
   b42a6:	f001 f88b 	bl	b53c0 <_Z16_fetch_usbserialv>
   b42aa:	493e      	ldr	r1, [pc, #248]	; (b43a4 <_Z12dataReceivedi+0x258>)
   b42ac:	f000 ff59 	bl	b5162 <_ZN5Print7printlnEPKc>
    Serial.println(Wire.available());
   b42b0:	f001 f886 	bl	b53c0 <_Z16_fetch_usbserialv>
   b42b4:	4680      	mov	r8, r0
   b42b6:	f001 f9ed 	bl	b5694 <_Z19__fetch_global_Wirev>
   b42ba:	6803      	ldr	r3, [r0, #0]
   b42bc:	691b      	ldr	r3, [r3, #16]
   b42be:	4798      	blx	r3
        if (n < 0 && base == 10) {
   b42c0:	1e05      	subs	r5, r0, #0
   b42c2:	da1a      	bge.n	b42fa <_Z12dataReceivedi+0x1ae>
            t = print('-');
   b42c4:	212d      	movs	r1, #45	; 0x2d
   b42c6:	4640      	mov	r0, r8
   b42c8:	f000 ff3c 	bl	b5144 <_ZN5Print5printEc>
            val = -n;
   b42cc:	4269      	negs	r1, r5
        return printNumber(val, base) + t;
   b42ce:	220a      	movs	r2, #10
   b42d0:	4640      	mov	r0, r8
   b42d2:	f000 ff5a 	bl	b518a <_ZN5Print11printNumberEmh>
        n += println();
   b42d6:	4640      	mov	r0, r8
   b42d8:	f000 ff37 	bl	b514a <_ZN5Print7printlnEv>
        strip.setPixelColor(i, 0);
   b42dc:	f8df 80cc 	ldr.w	r8, [pc, #204]	; b43ac <_Z12dataReceivedi+0x260>
    for(int i = 0; i < size; i++){
   b42e0:	2500      	movs	r5, #0
   b42e2:	42a5      	cmp	r5, r4
   b42e4:	da0b      	bge.n	b42fe <_Z12dataReceivedi+0x1b2>
      if(inputBuffer[i] == '0'){
   b42e6:	5d73      	ldrb	r3, [r6, r5]
   b42e8:	2b30      	cmp	r3, #48	; 0x30
   b42ea:	d104      	bne.n	b42f6 <_Z12dataReceivedi+0x1aa>
        strip.setPixelColor(i, 0);
   b42ec:	2200      	movs	r2, #0
   b42ee:	b2a9      	uxth	r1, r5
   b42f0:	4640      	mov	r0, r8
   b42f2:	f000 faeb 	bl	b48cc <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
    for(int i = 0; i < size; i++){
   b42f6:	3501      	adds	r5, #1
   b42f8:	e7f3      	b.n	b42e2 <_Z12dataReceivedi+0x196>
            val = n;
   b42fa:	4629      	mov	r1, r5
   b42fc:	e7e7      	b.n	b42ce <_Z12dataReceivedi+0x182>
        strip.setPixelColor(i - 1, brightRed);
   b42fe:	f8df b0b0 	ldr.w	fp, [pc, #176]	; b43b0 <_Z12dataReceivedi+0x264>
   b4302:	f8df 80a8 	ldr.w	r8, [pc, #168]	; b43ac <_Z12dataReceivedi+0x260>
        strip.setPixelColor(i, red);
   b4306:	f8df a0ac 	ldr.w	sl, [pc, #172]	; b43b4 <_Z12dataReceivedi+0x268>
    for(int i = 0; i < size; i++){
   b430a:	2500      	movs	r5, #0
   b430c:	42a5      	cmp	r5, r4
   b430e:	da81      	bge.n	b4214 <_Z12dataReceivedi+0xc8>
      if(inputBuffer[i] == '1'){
   b4310:	5d73      	ldrb	r3, [r6, r5]
   b4312:	2b31      	cmp	r3, #49	; 0x31
   b4314:	d119      	bne.n	b434a <_Z12dataReceivedi+0x1fe>
        strip.setPixelColor(i - 1, red);
   b4316:	fa1f f985 	uxth.w	r9, r5
   b431a:	f109 31ff 	add.w	r1, r9, #4294967295	; 0xffffffff
   b431e:	f8da 2000 	ldr.w	r2, [sl]
   b4322:	b289      	uxth	r1, r1
   b4324:	4640      	mov	r0, r8
   b4326:	f000 fad1 	bl	b48cc <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
        strip.setPixelColor(i, red);
   b432a:	f8da 2000 	ldr.w	r2, [sl]
   b432e:	4649      	mov	r1, r9
   b4330:	4640      	mov	r0, r8
   b4332:	f000 facb 	bl	b48cc <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
        strip.setPixelColor(i + 1, brightRed);
   b4336:	f8db 2000 	ldr.w	r2, [fp]
   b433a:	f109 0101 	add.w	r1, r9, #1
        strip.setPixelColor(i + 1, red);
   b433e:	b289      	uxth	r1, r1
   b4340:	4640      	mov	r0, r8
   b4342:	f000 fac3 	bl	b48cc <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
    for(int i = 0; i < size; i++){
   b4346:	3501      	adds	r5, #1
   b4348:	e7e0      	b.n	b430c <_Z12dataReceivedi+0x1c0>
      }else if(inputBuffer[i] == '5'){
   b434a:	2b35      	cmp	r3, #53	; 0x35
   b434c:	d1fb      	bne.n	b4346 <_Z12dataReceivedi+0x1fa>
        strip.setPixelColor(i - 1, brightRed);
   b434e:	fa1f f985 	uxth.w	r9, r5
   b4352:	f109 31ff 	add.w	r1, r9, #4294967295	; 0xffffffff
   b4356:	f8db 2000 	ldr.w	r2, [fp]
   b435a:	b289      	uxth	r1, r1
   b435c:	4640      	mov	r0, r8
   b435e:	f000 fab5 	bl	b48cc <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
        strip.setPixelColor(i, red);
   b4362:	f8da 2000 	ldr.w	r2, [sl]
   b4366:	4649      	mov	r1, r9
   b4368:	4640      	mov	r0, r8
   b436a:	f000 faaf 	bl	b48cc <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
        strip.setPixelColor(i + 1, red);
   b436e:	f8da 2000 	ldr.w	r2, [sl]
   b4372:	f109 0101 	add.w	r1, r9, #1
   b4376:	e7e2      	b.n	b433e <_Z12dataReceivedi+0x1f2>
   b4378:	000b5999 	.word	0x000b5999
   b437c:	2003e685 	.word	0x2003e685
   b4380:	000b59a1 	.word	0x000b59a1
   b4384:	2003e698 	.word	0x2003e698
   b4388:	2003e684 	.word	0x2003e684
   b438c:	2003e6b0 	.word	0x2003e6b0
   b4390:	000b59b1 	.word	0x000b59b1
   b4394:	2003e680 	.word	0x2003e680
   b4398:	000b414d 	.word	0x000b414d
   b439c:	000b40d1 	.word	0x000b40d1
   b43a0:	000b59d4 	.word	0x000b59d4
   b43a4:	000b59c3 	.word	0x000b59c3
   b43a8:	2003e688 	.word	0x2003e688
   b43ac:	2003e69c 	.word	0x2003e69c
   b43b0:	2003e600 	.word	0x2003e600
   b43b4:	2003e604 	.word	0x2003e604

000b43b8 <loop>:
void loop() {
   b43b8:	b508      	push	{r3, lr}
  if(blink){
   b43ba:	4b0d      	ldr	r3, [pc, #52]	; (b43f0 <loop+0x38>)
   b43bc:	781b      	ldrb	r3, [r3, #0]
   b43be:	b17b      	cbz	r3, b43e0 <loop+0x28>
    digitalWrite(D7, HIGH);
   b43c0:	2101      	movs	r1, #1
   b43c2:	2007      	movs	r0, #7
   b43c4:	f001 f94b 	bl	b565e <digitalWrite>
    delay(500);
   b43c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b43cc:	f000 fcbe 	bl	b4d4c <delay>
    digitalWrite(D7, LOW);
   b43d0:	2007      	movs	r0, #7
   b43d2:	2100      	movs	r1, #0
   b43d4:	f001 f943 	bl	b565e <digitalWrite>
    delay(500);
   b43d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b43dc:	f000 fcb6 	bl	b4d4c <delay>
  strip.show();
   b43e0:	4804      	ldr	r0, [pc, #16]	; (b43f4 <loop+0x3c>)
   b43e2:	f000 f8c7 	bl	b4574 <_ZN17Adafruit_NeoPixel4showEv>
}
   b43e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  delay(100);
   b43ea:	2064      	movs	r0, #100	; 0x64
   b43ec:	f000 bcae 	b.w	b4d4c <delay>
   b43f0:	2003e684 	.word	0x2003e684
   b43f4:	2003e69c 	.word	0x2003e69c

000b43f8 <_Z17acquireWireBufferv>:

hal_i2c_config_t acquireWireBuffer() {
   b43f8:	b538      	push	{r3, r4, r5, lr}
    hal_i2c_config_t config = {
   b43fa:	f44f 7500 	mov.w	r5, #512	; 0x200
   b43fe:	2314      	movs	r3, #20
hal_i2c_config_t acquireWireBuffer() {
   b4400:	4604      	mov	r4, r0
    hal_i2c_config_t config = {
   b4402:	6003      	str	r3, [r0, #0]
   b4404:	6085      	str	r5, [r0, #8]
   b4406:	6105      	str	r5, [r0, #16]
        .size = sizeof(hal_i2c_config_t),
        .version = HAL_I2C_CONFIG_VERSION_1,
        .rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_SIZE],
   b4408:	4905      	ldr	r1, [pc, #20]	; (b4420 <_Z17acquireWireBufferv+0x28>)
   b440a:	4628      	mov	r0, r5
   b440c:	f001 f9a6 	bl	b575c <_ZnajRKSt9nothrow_t>
        .rx_buffer_size = I2C_BUFFER_SIZE,
        .tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_SIZE],
   b4410:	4903      	ldr	r1, [pc, #12]	; (b4420 <_Z17acquireWireBufferv+0x28>)
        .tx_buffer_size = I2C_BUFFER_SIZE
    };
   b4412:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_SIZE],
   b4414:	4628      	mov	r0, r5
   b4416:	f001 f9a1 	bl	b575c <_ZnajRKSt9nothrow_t>
    };
   b441a:	60e0      	str	r0, [r4, #12]
    return config;
   b441c:	4620      	mov	r0, r4
   b441e:	bd38      	pop	{r3, r4, r5, pc}
   b4420:	000b5b68 	.word	0x000b5b68

000b4424 <setup>:
void setup() {
   b4424:	b510      	push	{r4, lr}
   b4426:	b086      	sub	sp, #24
  Serial.begin(9600);
   b4428:	f000 ffca 	bl	b53c0 <_Z16_fetch_usbserialv>
   b442c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4430:	f000 ffba 	bl	b53a8 <_ZN9USBSerial5beginEl>
  address = random(8, 64);
   b4434:	2140      	movs	r1, #64	; 0x40
   b4436:	2008      	movs	r0, #8
   b4438:	f000 fed0 	bl	b51dc <_Z6randomii>
   b443c:	4c10      	ldr	r4, [pc, #64]	; (b4480 <setup+0x5c>)
   b443e:	6020      	str	r0, [r4, #0]
  acquireWireBuffer();
   b4440:	a801      	add	r0, sp, #4
   b4442:	f7ff ffd9 	bl	b43f8 <_Z17acquireWireBufferv>
  Wire.begin(address);
   b4446:	f001 f925 	bl	b5694 <_Z19__fetch_global_Wirev>
   b444a:	6821      	ldr	r1, [r4, #0]
   b444c:	f000 fd0c 	bl	b4e68 <_ZN7TwoWire5beginEi>
  Wire.onReceive(dataReceived);
   b4450:	f001 f920 	bl	b5694 <_Z19__fetch_global_Wirev>
   b4454:	490b      	ldr	r1, [pc, #44]	; (b4484 <setup+0x60>)
   b4456:	f000 fd0e 	bl	b4e76 <_ZN7TwoWire9onReceiveEPFviE>
  Wire.onRequest(dataRequest);
   b445a:	f001 f91b 	bl	b5694 <_Z19__fetch_global_Wirev>
   b445e:	490a      	ldr	r1, [pc, #40]	; (b4488 <setup+0x64>)
   b4460:	f000 fd0d 	bl	b4e7e <_ZN7TwoWire9onRequestEPFvvE>
  pinMode(D7, OUTPUT);
   b4464:	2101      	movs	r1, #1
   b4466:	2007      	movs	r0, #7
   b4468:	f001 f8e8 	bl	b563c <pinMode>
  strip.begin();
   b446c:	4807      	ldr	r0, [pc, #28]	; (b448c <setup+0x68>)
   b446e:	f000 f848 	bl	b4502 <_ZN17Adafruit_NeoPixel5beginEv>
  strip.show();
   b4472:	4806      	ldr	r0, [pc, #24]	; (b448c <setup+0x68>)
}
   b4474:	b006      	add	sp, #24
   b4476:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  strip.show();
   b447a:	f000 b87b 	b.w	b4574 <_ZN17Adafruit_NeoPixel4showEv>
   b447e:	bf00      	nop
   b4480:	2003e680 	.word	0x2003e680
   b4484:	000b414d 	.word	0x000b414d
   b4488:	000b40d1 	.word	0x000b40d1
   b448c:	2003e69c 	.word	0x2003e69c

000b4490 <_GLOBAL__sub_I_SystemMode>:

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4490:	4b0a      	ldr	r3, [pc, #40]	; (b44bc <_GLOBAL__sub_I_SystemMode+0x2c>)
   b4492:	b510      	push	{r4, lr}
   b4494:	2200      	movs	r2, #0
   b4496:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
   b449a:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b449e:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b44a0:	2003      	movs	r0, #3
   b44a2:	f000 fb9f 	bl	b4be4 <set_system_mode>
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count());
    }

    static String deviceID(void) {
        return spark_deviceID();
   b44a6:	4806      	ldr	r0, [pc, #24]	; (b44c0 <_GLOBAL__sub_I_SystemMode+0x30>)
   b44a8:	f000 fbc0 	bl	b4c2c <spark_deviceID>
Adafruit_NeoPixel strip(40, D2, 0x02);
   b44ac:	2302      	movs	r3, #2
   b44ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
Adafruit_NeoPixel strip(40, D2, 0x02);
   b44b2:	4804      	ldr	r0, [pc, #16]	; (b44c4 <_GLOBAL__sub_I_SystemMode+0x34>)
   b44b4:	461a      	mov	r2, r3
   b44b6:	2128      	movs	r1, #40	; 0x28
   b44b8:	f000 b84a 	b.w	b4550 <_ZN17Adafruit_NeoPixelC1Ethh>
   b44bc:	2003e674 	.word	0x2003e674
   b44c0:	2003e688 	.word	0x2003e688
   b44c4:	2003e69c 	.word	0x2003e69c

000b44c8 <_ZN17Adafruit_NeoPixel12updateLengthEt>:
Adafruit_NeoPixel::~Adafruit_NeoPixel() {
  if (pixels) free(pixels);
  if (begun) pinMode(pin, INPUT);
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
   b44c8:	b538      	push	{r3, r4, r5, lr}
   b44ca:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
   b44cc:	68c0      	ldr	r0, [r0, #12]
void Adafruit_NeoPixel::updateLength(uint16_t n) {
   b44ce:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
   b44d0:	b108      	cbz	r0, b44d6 <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
   b44d2:	f000 fc23 	bl	b4d1c <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
   b44d6:	79a3      	ldrb	r3, [r4, #6]
   b44d8:	2b06      	cmp	r3, #6
   b44da:	bf0c      	ite	eq
   b44dc:	2004      	moveq	r0, #4
   b44de:	2003      	movne	r0, #3
   b44e0:	fb10 f005 	smulbb	r0, r0, r5
   b44e4:	b280      	uxth	r0, r0
   b44e6:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
   b44e8:	f000 fc10 	bl	b4d0c <malloc>
   b44ec:	60e0      	str	r0, [r4, #12]
   b44ee:	b128      	cbz	r0, b44fc <_ZN17Adafruit_NeoPixel12updateLengthEt+0x34>
    memset(pixels, 0, numBytes);
   b44f0:	88a2      	ldrh	r2, [r4, #4]
   b44f2:	2100      	movs	r1, #0
   b44f4:	f001 f948 	bl	b5788 <memset>
    numLEDs = n;
   b44f8:	8065      	strh	r5, [r4, #2]
  } else {
    numLEDs = numBytes = 0;
  }
}
   b44fa:	bd38      	pop	{r3, r4, r5, pc}
    numLEDs = numBytes = 0;
   b44fc:	80a0      	strh	r0, [r4, #4]
   b44fe:	8060      	strh	r0, [r4, #2]
}
   b4500:	e7fb      	b.n	b44fa <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>

000b4502 <_ZN17Adafruit_NeoPixel5beginEv>:

void Adafruit_NeoPixel::begin(void) {
   b4502:	b510      	push	{r4, lr}
   b4504:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
   b4506:	2101      	movs	r1, #1
   b4508:	79c0      	ldrb	r0, [r0, #7]
   b450a:	f001 f897 	bl	b563c <pinMode>
  digitalWrite(pin, LOW);
   b450e:	79e0      	ldrb	r0, [r4, #7]
   b4510:	2100      	movs	r1, #0
   b4512:	f001 f8a4 	bl	b565e <digitalWrite>
  begun = true;
   b4516:	2301      	movs	r3, #1
   b4518:	7023      	strb	r3, [r4, #0]
}
   b451a:	bd10      	pop	{r4, pc}

000b451c <_ZN17Adafruit_NeoPixel6setPinEh>:

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
   b451c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (begun) {
   b451e:	7803      	ldrb	r3, [r0, #0]
void Adafruit_NeoPixel::setPin(uint8_t p) {
   b4520:	4605      	mov	r5, r0
   b4522:	460c      	mov	r4, r1
    if (begun) {
   b4524:	b11b      	cbz	r3, b452e <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
   b4526:	79c0      	ldrb	r0, [r0, #7]
   b4528:	2100      	movs	r1, #0
   b452a:	f001 f887 	bl	b563c <pinMode>
    }
    pin = p;
    if (begun) {
   b452e:	782b      	ldrb	r3, [r5, #0]
    pin = p;
   b4530:	71ec      	strb	r4, [r5, #7]
    if (begun) {
   b4532:	b15b      	cbz	r3, b454c <_ZN17Adafruit_NeoPixel6setPinEh+0x30>
        pinMode(p, OUTPUT);
   b4534:	b2a0      	uxth	r0, r4
   b4536:	2101      	movs	r1, #1
   b4538:	9001      	str	r0, [sp, #4]
   b453a:	f001 f87f 	bl	b563c <pinMode>
        digitalWrite(p, LOW);
   b453e:	9801      	ldr	r0, [sp, #4]
   b4540:	2100      	movs	r1, #0
    }
}
   b4542:	b003      	add	sp, #12
   b4544:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        digitalWrite(p, LOW);
   b4548:	f001 b889 	b.w	b565e <digitalWrite>
}
   b454c:	b003      	add	sp, #12
   b454e:	bd30      	pop	{r4, r5, pc}

000b4550 <_ZN17Adafruit_NeoPixelC1Ethh>:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   b4550:	b570      	push	{r4, r5, r6, lr}
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   b4552:	2500      	movs	r5, #0
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   b4554:	4604      	mov	r4, r0
   b4556:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   b4558:	7183      	strb	r3, [r0, #6]
   b455a:	e9c0 5503 	strd	r5, r5, [r0, #12]
   b455e:	7005      	strb	r5, [r0, #0]
   b4560:	7205      	strb	r5, [r0, #8]
  updateLength(n);
   b4562:	f7ff ffb1 	bl	b44c8 <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
   b4566:	4620      	mov	r0, r4
   b4568:	4631      	mov	r1, r6
   b456a:	f7ff ffd7 	bl	b451c <_ZN17Adafruit_NeoPixel6setPinEh>
}
   b456e:	4620      	mov	r0, r4
   b4570:	bd70      	pop	{r4, r5, r6, pc}
	...

000b4574 <_ZN17Adafruit_NeoPixel4showEv>:

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
   b4574:	68c3      	ldr	r3, [r0, #12]
   b4576:	2b00      	cmp	r3, #0
   b4578:	f000 81a4 	beq.w	b48c4 <_ZN17Adafruit_NeoPixel4showEv+0x350>
void Adafruit_NeoPixel::show(void) {
   b457c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4580:	7983      	ldrb	r3, [r0, #6]
   b4582:	3b02      	subs	r3, #2
   b4584:	b2db      	uxtb	r3, r3
   b4586:	2b04      	cmp	r3, #4
   b4588:	bf9c      	itt	ls
   b458a:	4abf      	ldrls	r2, [pc, #764]	; (b4888 <_ZN17Adafruit_NeoPixel4showEv+0x314>)
   b458c:	f852 4023 	ldrls.w	r4, [r2, r3, lsl #2]
   b4590:	b085      	sub	sp, #20
   b4592:	4605      	mov	r5, r0
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
   b4594:	bf88      	it	hi
   b4596:	2432      	movhi	r4, #50	; 0x32
#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b4598:	f000 f9fc 	bl	b4994 <HAL_Timer_Get_Micro_Seconds>
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
   b459c:	692b      	ldr	r3, [r5, #16]
   b459e:	1ac0      	subs	r0, r0, r3
   b45a0:	42a0      	cmp	r0, r4
   b45a2:	d3f9      	bcc.n	b4598 <_ZN17Adafruit_NeoPixel4showEv+0x24>

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   b45a4:	4cb9      	ldr	r4, [pc, #740]	; (b488c <_ZN17Adafruit_NeoPixel4showEv+0x318>)
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b45a6:	88ae      	ldrh	r6, [r5, #4]
    if( (PWM[device]->ENABLE == 0)                            &&
   b45a8:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b45ac:	b91b      	cbnz	r3, b45b6 <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b45ae:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b45b2:	2b00      	cmp	r3, #0
   b45b4:	db7e      	blt.n	b46b4 <_ZN17Adafruit_NeoPixel4showEv+0x140>
   b45b6:	4cb6      	ldr	r4, [pc, #728]	; (b4890 <_ZN17Adafruit_NeoPixel4showEv+0x31c>)
   b45b8:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b45bc:	b923      	cbnz	r3, b45c8 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b45be:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b45c2:	2b00      	cmp	r3, #0
   b45c4:	f2c0 816e 	blt.w	b48a4 <_ZN17Adafruit_NeoPixel4showEv+0x330>
   b45c8:	4cb2      	ldr	r4, [pc, #712]	; (b4894 <_ZN17Adafruit_NeoPixel4showEv+0x320>)
   b45ca:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b45ce:	2b00      	cmp	r3, #0
   b45d0:	f000 8144 	beq.w	b485c <_ZN17Adafruit_NeoPixel4showEv+0x2e8>
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b45d4:	79eb      	ldrb	r3, [r5, #7]
   b45d6:	4ab0      	ldr	r2, [pc, #704]	; (b4898 <_ZN17Adafruit_NeoPixel4showEv+0x324>)
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b45d8:	4cb0      	ldr	r4, [pc, #704]	; (b489c <_ZN17Adafruit_NeoPixel4showEv+0x328>)
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b45da:	6812      	ldr	r2, [r2, #0]
   b45dc:	0119      	lsls	r1, r3, #4
   b45de:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   b45e2:	5c57      	ldrb	r7, [r2, r1]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   b45e4:	49ae      	ldr	r1, [pc, #696]	; (b48a0 <_ZN17Adafruit_NeoPixel4showEv+0x32c>)
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b45e6:	785b      	ldrb	r3, [r3, #1]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   b45e8:	f8d1 20fc 	ldr.w	r2, [r1, #252]	; 0xfc
   b45ec:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
   b45f0:	f8c1 20fc 	str.w	r2, [r1, #252]	; 0xfc
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b45f4:	6822      	ldr	r2, [r4, #0]
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b45f6:	f003 031f 	and.w	r3, r3, #31
   b45fa:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
   b45fe:	2701      	movs	r7, #1
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b4600:	433a      	orrs	r2, r7
   b4602:	6022      	str	r2, [r4, #0]
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   b4604:	88a9      	ldrh	r1, [r5, #4]
      uint8_t *p = pixels;
   b4606:	f8d5 800c 	ldr.w	r8, [r5, #12]
      uint32_t cycStart = DWT->CYCCNT;
   b460a:	f8d4 9004 	ldr.w	r9, [r4, #4]
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b460e:	409f      	lsls	r7, r3
      for(uint16_t n=0; n<numBytes; n++) {
   b4610:	2900      	cmp	r1, #0
   b4612:	d044      	beq.n	b469e <_ZN17Adafruit_NeoPixel4showEv+0x12a>
   b4614:	f04f 0e00 	mov.w	lr, #0
      uint32_t cyc = 0;
   b4618:	4672      	mov	r2, lr

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
          cyc  = DWT->CYCCNT;

          NRF_GPIO->OUTSET |= pinMask;
   b461a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
        uint8_t pix = *p++;
   b461e:	f818 cb01 	ldrb.w	ip, [r8], #1
   b4622:	2008      	movs	r0, #8
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b4624:	2680      	movs	r6, #128	; 0x80
          while(DWT->CYCCNT - cyc < CYCLES_X00);
   b4626:	6863      	ldr	r3, [r4, #4]
   b4628:	1a9b      	subs	r3, r3, r2
   b462a:	2b46      	cmp	r3, #70	; 0x46
   b462c:	d9fb      	bls.n	b4626 <_ZN17Adafruit_NeoPixel4showEv+0xb2>
          cyc  = DWT->CYCCNT;
   b462e:	6862      	ldr	r2, [r4, #4]
          NRF_GPIO->OUTSET |= pinMask;
   b4630:	f8d1 3508 	ldr.w	r3, [r1, #1288]	; 0x508

          if(pix & mask) {
   b4634:	ea1c 0f06 	tst.w	ip, r6
          NRF_GPIO->OUTSET |= pinMask;
   b4638:	ea43 0307 	orr.w	r3, r3, r7
   b463c:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508
          if(pix & mask) {
   b4640:	d02f      	beq.n	b46a2 <_ZN17Adafruit_NeoPixel4showEv+0x12e>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
   b4642:	6863      	ldr	r3, [r4, #4]
   b4644:	1a9b      	subs	r3, r3, r2
   b4646:	2b28      	cmp	r3, #40	; 0x28
   b4648:	d9fb      	bls.n	b4642 <_ZN17Adafruit_NeoPixel4showEv+0xce>
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   b464a:	f8d1 350c 	ldr.w	r3, [r1, #1292]	; 0x50c
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b464e:	3801      	subs	r0, #1
          NRF_GPIO->OUTCLR |= pinMask;
   b4650:	ea43 0307 	orr.w	r3, r3, r7
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b4654:	ea4f 0656 	mov.w	r6, r6, lsr #1
          NRF_GPIO->OUTCLR |= pinMask;
   b4658:	f8c1 350c 	str.w	r3, [r1, #1292]	; 0x50c
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b465c:	d1e3      	bne.n	b4626 <_ZN17Adafruit_NeoPixel4showEv+0xb2>
      for(uint16_t n=0; n<numBytes; n++) {
   b465e:	88ab      	ldrh	r3, [r5, #4]
   b4660:	f10e 0e01 	add.w	lr, lr, #1
   b4664:	fa1f fe8e 	uxth.w	lr, lr
   b4668:	4573      	cmp	r3, lr
   b466a:	d8d8      	bhi.n	b461e <_ZN17Adafruit_NeoPixel4showEv+0xaa>
      while(DWT->CYCCNT - cyc < CYCLES_X00);


      // If total time longer than 25%, resend the whole data.
      // Since we are likely to be interrupted by SoftDevice
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   b466c:	f44f 7130 	mov.w	r1, #704	; 0x2c0
   b4670:	fb03 f101 	mul.w	r1, r3, r1
      while(DWT->CYCCNT - cyc < CYCLES_X00);
   b4674:	6863      	ldr	r3, [r4, #4]
   b4676:	1a9b      	subs	r3, r3, r2
   b4678:	2b46      	cmp	r3, #70	; 0x46
   b467a:	d9fb      	bls.n	b4674 <_ZN17Adafruit_NeoPixel4showEv+0x100>
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   b467c:	6863      	ldr	r3, [r4, #4]
   b467e:	eba3 0909 	sub.w	r9, r3, r9
   b4682:	4589      	cmp	r9, r1
   b4684:	f0c0 80e4 	bcc.w	b4850 <_ZN17Adafruit_NeoPixel4showEv+0x2dc>
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b4688:	f44f 7096 	mov.w	r0, #300	; 0x12c
   b468c:	f000 f97a 	bl	b4984 <HAL_Delay_Microseconds>
      for(uint16_t n=0; n<numBytes; n++) {
   b4690:	88a9      	ldrh	r1, [r5, #4]
      uint8_t *p = pixels;
   b4692:	f8d5 800c 	ldr.w	r8, [r5, #12]
      uint32_t cycStart = DWT->CYCCNT;
   b4696:	f8d4 9004 	ldr.w	r9, [r4, #4]
      for(uint16_t n=0; n<numBytes; n++) {
   b469a:	2900      	cmp	r1, #0
   b469c:	d1ba      	bne.n	b4614 <_ZN17Adafruit_NeoPixel4showEv+0xa0>
      uint32_t cyc = 0;
   b469e:	460a      	mov	r2, r1
   b46a0:	e7e8      	b.n	b4674 <_ZN17Adafruit_NeoPixel4showEv+0x100>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
   b46a2:	6863      	ldr	r3, [r4, #4]
   b46a4:	1a9b      	subs	r3, r3, r2
   b46a6:	2b11      	cmp	r3, #17
   b46a8:	d8cf      	bhi.n	b464a <_ZN17Adafruit_NeoPixel4showEv+0xd6>
   b46aa:	6863      	ldr	r3, [r4, #4]
   b46ac:	1a9b      	subs	r3, r3, r2
   b46ae:	2b11      	cmp	r3, #17
   b46b0:	d9f7      	bls.n	b46a2 <_ZN17Adafruit_NeoPixel4showEv+0x12e>
   b46b2:	e7ca      	b.n	b464a <_ZN17Adafruit_NeoPixel4showEv+0xd6>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b46b4:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b46b8:	2b00      	cmp	r3, #0
   b46ba:	f6bf af7c 	bge.w	b45b6 <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b46be:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b46c2:	2b00      	cmp	r3, #0
   b46c4:	f6bf af77 	bge.w	b45b6 <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b46c8:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b46cc:	2b00      	cmp	r3, #0
   b46ce:	f6bf af72 	bge.w	b45b6 <_ZN17Adafruit_NeoPixel4showEv+0x42>
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b46d2:	0136      	lsls	r6, r6, #4
   b46d4:	1d33      	adds	r3, r6, #4
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   b46d6:	4618      	mov	r0, r3
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b46d8:	9300      	str	r3, [sp, #0]
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   b46da:	f000 fb17 	bl	b4d0c <malloc>
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
   b46de:	2800      	cmp	r0, #0
   b46e0:	f43f af78 	beq.w	b45d4 <_ZN17Adafruit_NeoPixel4showEv+0x60>
    for(uint16_t n=0; n<numBytes; n++) {
   b46e4:	88ab      	ldrh	r3, [r5, #4]
   b46e6:	2b00      	cmp	r3, #0
   b46e8:	f000 80ed 	beq.w	b48c6 <_ZN17Adafruit_NeoPixel4showEv+0x352>
      uint8_t pix = pixels[n];
   b46ec:	68ea      	ldr	r2, [r5, #12]
   b46ee:	3b01      	subs	r3, #1
   b46f0:	fa12 f783 	uxtah	r7, r2, r3
   b46f4:	f102 3eff 	add.w	lr, r2, #4294967295	; 0xffffffff
    uint16_t pos = 0; // bit position
   b46f8:	2300      	movs	r3, #0
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b46fa:	f248 0206 	movw	r2, #32774	; 0x8006
   b46fe:	f248 010d 	movw	r1, #32781	; 0x800d
      uint8_t pix = pixels[n];
   b4702:	f81e cf01 	ldrb.w	ip, [lr, #1]!
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4706:	f01c 0f80 	tst.w	ip, #128	; 0x80
   b470a:	bf0c      	ite	eq
   b470c:	4693      	moveq	fp, r2
   b470e:	468b      	movne	fp, r1
   b4710:	f01c 0f40 	tst.w	ip, #64	; 0x40
   b4714:	bf0c      	ite	eq
   b4716:	4616      	moveq	r6, r2
   b4718:	460e      	movne	r6, r1
   b471a:	f01c 0f20 	tst.w	ip, #32
   b471e:	bf0c      	ite	eq
   b4720:	4690      	moveq	r8, r2
   b4722:	4688      	movne	r8, r1
        pos++;
   b4724:	f103 0901 	add.w	r9, r3, #1
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4728:	f8cd 8008 	str.w	r8, [sp, #8]
   b472c:	9601      	str	r6, [sp, #4]
        pos++;
   b472e:	f103 0802 	add.w	r8, r3, #2
   b4732:	fa1f f989 	uxth.w	r9, r9
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4736:	9e01      	ldr	r6, [sp, #4]
   b4738:	f820 b013 	strh.w	fp, [r0, r3, lsl #1]
        pos++;
   b473c:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4740:	f820 6019 	strh.w	r6, [r0, r9, lsl #1]
   b4744:	9e02      	ldr	r6, [sp, #8]
   b4746:	f820 6018 	strh.w	r6, [r0, r8, lsl #1]
        pos++;
   b474a:	f103 0803 	add.w	r8, r3, #3
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b474e:	f01c 0f10 	tst.w	ip, #16
        pos++;
   b4752:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4756:	bf0c      	ite	eq
   b4758:	4693      	moveq	fp, r2
   b475a:	468b      	movne	fp, r1
   b475c:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b4760:	f103 0804 	add.w	r8, r3, #4
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4764:	f01c 0f08 	tst.w	ip, #8
        pos++;
   b4768:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b476c:	bf0c      	ite	eq
   b476e:	4693      	moveq	fp, r2
   b4770:	468b      	movne	fp, r1
   b4772:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b4776:	f103 0805 	add.w	r8, r3, #5
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b477a:	f01c 0f04 	tst.w	ip, #4
        pos++;
   b477e:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4782:	bf0c      	ite	eq
   b4784:	4693      	moveq	fp, r2
   b4786:	468b      	movne	fp, r1
   b4788:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b478c:	f103 0a08 	add.w	sl, r3, #8
   b4790:	f103 0806 	add.w	r8, r3, #6
   b4794:	3307      	adds	r3, #7
   b4796:	b29b      	uxth	r3, r3
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4798:	f01c 0f02 	tst.w	ip, #2
        pos++;
   b479c:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b47a0:	bf0c      	ite	eq
   b47a2:	4693      	moveq	fp, r2
   b47a4:	468b      	movne	fp, r1
        pos++;
   b47a6:	f8cd a00c 	str.w	sl, [sp, #12]
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b47aa:	f01c 0f01 	tst.w	ip, #1
   b47ae:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
   b47b2:	bf15      	itete	ne
   b47b4:	f820 1013 	strhne.w	r1, [r0, r3, lsl #1]
   b47b8:	f820 2013 	strheq.w	r2, [r0, r3, lsl #1]
        pos++;
   b47bc:	fa1f f38a 	uxthne.w	r3, sl
   b47c0:	f8bd 300c 	ldrheq.w	r3, [sp, #12]
    for(uint16_t n=0; n<numBytes; n++) {
   b47c4:	4577      	cmp	r7, lr
   b47c6:	d19c      	bne.n	b4702 <_ZN17Adafruit_NeoPixel4showEv+0x18e>
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b47c8:	1c59      	adds	r1, r3, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b47ca:	3302      	adds	r3, #2
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b47cc:	b289      	uxth	r1, r1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b47ce:	b29b      	uxth	r3, r3
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b47d0:	0049      	lsls	r1, r1, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b47d2:	005b      	lsls	r3, r3, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b47d4:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   b47d8:	5247      	strh	r7, [r0, r1]
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b47da:	9a00      	ldr	r2, [sp, #0]
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b47dc:	52c7      	strh	r7, [r0, r3]
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b47de:	4b2e      	ldr	r3, [pc, #184]	; (b4898 <_ZN17Adafruit_NeoPixel4showEv+0x324>)
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b47e0:	0856      	lsrs	r6, r2, #1
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b47e2:	681f      	ldr	r7, [r3, #0]
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   b47e4:	2200      	movs	r2, #0
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   b47e6:	2314      	movs	r3, #20
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   b47e8:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
    pwm->PRESCALER = (PWM_PRESCALER_PRESCALER_DIV_1 << PWM_PRESCALER_PRESCALER_Pos);
   b47ec:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   b47f0:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    pwm->LOOP = (PWM_LOOP_CNT_Disabled << PWM_LOOP_CNT_Pos);
   b47f4:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    pwm->DECODER = (PWM_DECODER_LOAD_Common << PWM_DECODER_LOAD_Pos) |
   b47f8:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;
   b47fc:	f8c4 0520 	str.w	r0, [r4, #1312]	; 0x520
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b4800:	f8c4 6524 	str.w	r6, [r4, #1316]	; 0x524
    pwm->SEQ[0].REFRESH  = 0;
   b4804:	f8c4 2528 	str.w	r2, [r4, #1320]	; 0x528
    pwm->SEQ[0].ENDDELAY = 0;
   b4808:	f8c4 252c 	str.w	r2, [r4, #1324]	; 0x52c
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b480c:	79eb      	ldrb	r3, [r5, #7]
   b480e:	eb07 1c03 	add.w	ip, r7, r3, lsl #4
   b4812:	011b      	lsls	r3, r3, #4
    pwm->ENABLE = 1;
   b4814:	2101      	movs	r1, #1
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4816:	5cfe      	ldrb	r6, [r7, r3]
   b4818:	f89c 3001 	ldrb.w	r3, [ip, #1]
   b481c:	f003 031f 	and.w	r3, r3, #31
   b4820:	ea43 1346 	orr.w	r3, r3, r6, lsl #5
   b4824:	f8c4 3560 	str.w	r3, [r4, #1376]	; 0x560
    pwm->ENABLE = 1;
   b4828:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
    pwm->EVENTS_SEQEND[0]  = 0;
   b482c:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
    pwm->TASKS_SEQSTART[0] = 1;
   b4830:	60a1      	str	r1, [r4, #8]
    while(!pwm->EVENTS_SEQEND[0])
   b4832:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   b4836:	2b00      	cmp	r3, #0
   b4838:	d0fb      	beq.n	b4832 <_ZN17Adafruit_NeoPixel4showEv+0x2be>
    pwm->EVENTS_SEQEND[0] = 0;
   b483a:	2300      	movs	r3, #0
    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   b483c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    pwm->EVENTS_SEQEND[0] = 0;
   b4840:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    pwm->ENABLE = 0;
   b4844:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   b4848:	f8c4 2560 	str.w	r2, [r4, #1376]	; 0x560
      free(pixels_pattern);
   b484c:	f000 fa66 	bl	b4d1c <free>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b4850:	f000 f8a0 	bl	b4994 <HAL_Timer_Get_Micro_Seconds>
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
   b4854:	6128      	str	r0, [r5, #16]
}
   b4856:	b005      	add	sp, #20
   b4858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b485c:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b4860:	2b00      	cmp	r3, #0
   b4862:	f6bf aeb7 	bge.w	b45d4 <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4866:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b486a:	2b00      	cmp	r3, #0
   b486c:	f6bf aeb2 	bge.w	b45d4 <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4870:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4874:	2b00      	cmp	r3, #0
   b4876:	f6bf aead 	bge.w	b45d4 <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b487a:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b487e:	2b00      	cmp	r3, #0
   b4880:	f6bf aea8 	bge.w	b45d4 <_ZN17Adafruit_NeoPixel4showEv+0x60>
   b4884:	e725      	b.n	b46d2 <_ZN17Adafruit_NeoPixel4showEv+0x15e>
   b4886:	bf00      	nop
   b4888:	000b59e4 	.word	0x000b59e4
   b488c:	4001c000 	.word	0x4001c000
   b4890:	40021000 	.word	0x40021000
   b4894:	40022000 	.word	0x40022000
   b4898:	2003e6b4 	.word	0x2003e6b4
   b489c:	e0001000 	.word	0xe0001000
   b48a0:	e000ed00 	.word	0xe000ed00
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b48a4:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b48a8:	2b00      	cmp	r3, #0
   b48aa:	f6bf ae8d 	bge.w	b45c8 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b48ae:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b48b2:	2b00      	cmp	r3, #0
   b48b4:	f6bf ae88 	bge.w	b45c8 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b48b8:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b48bc:	2b00      	cmp	r3, #0
   b48be:	f6bf ae83 	bge.w	b45c8 <_ZN17Adafruit_NeoPixel4showEv+0x54>
   b48c2:	e706      	b.n	b46d2 <_ZN17Adafruit_NeoPixel4showEv+0x15e>
   b48c4:	4770      	bx	lr
    for(uint16_t n=0; n<numBytes; n++) {
   b48c6:	2304      	movs	r3, #4
   b48c8:	2102      	movs	r1, #2
   b48ca:	e783      	b.n	b47d4 <_ZN17Adafruit_NeoPixel4showEv+0x260>

000b48cc <_ZN17Adafruit_NeoPixel13setPixelColorEtm>:
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
   b48cc:	8843      	ldrh	r3, [r0, #2]
   b48ce:	428b      	cmp	r3, r1
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
   b48d0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
   b48d2:	d92d      	bls.n	b4930 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
   b48d4:	7a06      	ldrb	r6, [r0, #8]
   b48d6:	f3c2 4307 	ubfx	r3, r2, #16, #8
   b48da:	f3c2 2407 	ubfx	r4, r2, #8, #8
   b48de:	b2d5      	uxtb	r5, r2
   b48e0:	b13e      	cbz	r6, b48f2 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x26>
      r = (r * brightness) >> 8;
   b48e2:	4373      	muls	r3, r6
      g = (g * brightness) >> 8;
   b48e4:	4374      	muls	r4, r6
      b = (b * brightness) >> 8;
   b48e6:	4375      	muls	r5, r6
      r = (r * brightness) >> 8;
   b48e8:	f3c3 2307 	ubfx	r3, r3, #8, #8
      g = (g * brightness) >> 8;
   b48ec:	f3c4 2407 	ubfx	r4, r4, #8, #8
      b = (b * brightness) >> 8;
   b48f0:	0a2d      	lsrs	r5, r5, #8
    }
    uint8_t *p = &pixels[n * (type==SK6812RGBW?4:3)];
   b48f2:	f890 c006 	ldrb.w	ip, [r0, #6]
   b48f6:	68c7      	ldr	r7, [r0, #12]
   b48f8:	f1bc 0f06 	cmp.w	ip, #6
   b48fc:	bf0c      	ite	eq
   b48fe:	2604      	moveq	r6, #4
   b4900:	2603      	movne	r6, #3
   b4902:	434e      	muls	r6, r1
   b4904:	f1ac 0c02 	sub.w	ip, ip, #2
   b4908:	19b9      	adds	r1, r7, r6
    switch(type) {
   b490a:	f1bc 0f06 	cmp.w	ip, #6
   b490e:	d81d      	bhi.n	b494c <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x80>
   b4910:	e8df f00c 	tbb	[pc, ip]
   b4914:	04081c04 	.word	0x04081c04
   b4918:	040f      	.short	0x040f
   b491a:	04          	.byte	0x04
   b491b:	00          	.byte	0x00
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
   b491c:	55bc      	strb	r4, [r7, r6]
          *p++ = r;
   b491e:	704b      	strb	r3, [r1, #1]
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
          *p++ = g;
          *p = b;
   b4920:	708d      	strb	r5, [r1, #2]
        } break;
    }
  }
}
   b4922:	e005      	b.n	b4930 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
          *p++ = r;
   b4924:	2bfe      	cmp	r3, #254	; 0xfe
   b4926:	bf28      	it	cs
   b4928:	23fe      	movcs	r3, #254	; 0xfe
   b492a:	55bb      	strb	r3, [r7, r6]
          *p++ = b;
   b492c:	704d      	strb	r5, [r1, #1]
          *p = g;
   b492e:	708c      	strb	r4, [r1, #2]
}
   b4930:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p++ = r;
   b4932:	55bb      	strb	r3, [r7, r6]
          *p++ = g;
   b4934:	704c      	strb	r4, [r1, #1]
          *p++ = b;
   b4936:	708d      	strb	r5, [r1, #2]
          *p = brightness ? ((w * brightness) >> 8) : w;
   b4938:	7a03      	ldrb	r3, [r0, #8]
          uint8_t w = (uint8_t)(c >> 24);
   b493a:	0e12      	lsrs	r2, r2, #24
          *p = brightness ? ((w * brightness) >> 8) : w;
   b493c:	b913      	cbnz	r3, b4944 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x78>
          uint8_t w = (uint8_t)(c >> 24);
   b493e:	b2d2      	uxtb	r2, r2
          *p = brightness ? ((w * brightness) >> 8) : w;
   b4940:	70ca      	strb	r2, [r1, #3]
        } break;
   b4942:	e7f5      	b.n	b4930 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
          *p = brightness ? ((w * brightness) >> 8) : w;
   b4944:	435a      	muls	r2, r3
   b4946:	f3c2 2207 	ubfx	r2, r2, #8, #8
   b494a:	e7f9      	b.n	b4940 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x74>
          *p++ = r;
   b494c:	55bb      	strb	r3, [r7, r6]
          *p++ = g;
   b494e:	704c      	strb	r4, [r1, #1]
   b4950:	e7e6      	b.n	b4920 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x54>
	...

000b4954 <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
   b4954:	b508      	push	{r3, lr}
  NRF5x_Pin_Info* PIN_MAP2 = HAL_Pin_Map();
   b4956:	f000 f82d 	bl	b49b4 <HAL_Pin_Map>
   b495a:	4b01      	ldr	r3, [pc, #4]	; (b4960 <_GLOBAL__sub_I_PIN_MAP2+0xc>)
   b495c:	6018      	str	r0, [r3, #0]
}
   b495e:	bd08      	pop	{r3, pc}
   b4960:	2003e6b4 	.word	0x2003e6b4

000b4964 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4964:	b508      	push	{r3, lr}
   b4966:	4b02      	ldr	r3, [pc, #8]	; (b4970 <os_mutex_recursive_create+0xc>)
   b4968:	681b      	ldr	r3, [r3, #0]
   b496a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b496c:	9301      	str	r3, [sp, #4]
   b496e:	bd08      	pop	{r3, pc}
   b4970:	00030248 	.word	0x00030248

000b4974 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4974:	b508      	push	{r3, lr}
   b4976:	4b02      	ldr	r3, [pc, #8]	; (b4980 <HAL_RNG_GetRandomNumber+0xc>)
   b4978:	681b      	ldr	r3, [r3, #0]
   b497a:	685b      	ldr	r3, [r3, #4]
   b497c:	9301      	str	r3, [sp, #4]
   b497e:	bd08      	pop	{r3, pc}
   b4980:	00030218 	.word	0x00030218

000b4984 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b4984:	b508      	push	{r3, lr}
   b4986:	4b02      	ldr	r3, [pc, #8]	; (b4990 <HAL_Delay_Microseconds+0xc>)
   b4988:	681b      	ldr	r3, [r3, #0]
   b498a:	68db      	ldr	r3, [r3, #12]
   b498c:	9301      	str	r3, [sp, #4]
   b498e:	bd08      	pop	{r3, pc}
   b4990:	00030218 	.word	0x00030218

000b4994 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   b4994:	b508      	push	{r3, lr}
   b4996:	4b02      	ldr	r3, [pc, #8]	; (b49a0 <HAL_Timer_Get_Micro_Seconds+0xc>)
   b4998:	681b      	ldr	r3, [r3, #0]
   b499a:	691b      	ldr	r3, [r3, #16]
   b499c:	9301      	str	r3, [sp, #4]
   b499e:	bd08      	pop	{r3, pc}
   b49a0:	00030218 	.word	0x00030218

000b49a4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b49a4:	b508      	push	{r3, lr}
   b49a6:	4b02      	ldr	r3, [pc, #8]	; (b49b0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b49a8:	681b      	ldr	r3, [r3, #0]
   b49aa:	695b      	ldr	r3, [r3, #20]
   b49ac:	9301      	str	r3, [sp, #4]
   b49ae:	bd08      	pop	{r3, pc}
   b49b0:	00030218 	.word	0x00030218

000b49b4 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   b49b4:	b508      	push	{r3, lr}
   b49b6:	4b02      	ldr	r3, [pc, #8]	; (b49c0 <HAL_Pin_Map+0xc>)
   b49b8:	681b      	ldr	r3, [r3, #0]
   b49ba:	681b      	ldr	r3, [r3, #0]
   b49bc:	9301      	str	r3, [sp, #4]
   b49be:	bd08      	pop	{r3, pc}
   b49c0:	0003022c 	.word	0x0003022c

000b49c4 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b49c4:	b508      	push	{r3, lr}
   b49c6:	4b02      	ldr	r3, [pc, #8]	; (b49d0 <HAL_Pin_Mode+0xc>)
   b49c8:	681b      	ldr	r3, [r3, #0]
   b49ca:	689b      	ldr	r3, [r3, #8]
   b49cc:	9301      	str	r3, [sp, #4]
   b49ce:	bd08      	pop	{r3, pc}
   b49d0:	0003022c 	.word	0x0003022c

000b49d4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b49d4:	b508      	push	{r3, lr}
   b49d6:	4b02      	ldr	r3, [pc, #8]	; (b49e0 <HAL_Get_Pin_Mode+0xc>)
   b49d8:	681b      	ldr	r3, [r3, #0]
   b49da:	68db      	ldr	r3, [r3, #12]
   b49dc:	9301      	str	r3, [sp, #4]
   b49de:	bd08      	pop	{r3, pc}
   b49e0:	0003022c 	.word	0x0003022c

000b49e4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b49e4:	b508      	push	{r3, lr}
   b49e6:	4b02      	ldr	r3, [pc, #8]	; (b49f0 <HAL_GPIO_Write+0xc>)
   b49e8:	681b      	ldr	r3, [r3, #0]
   b49ea:	691b      	ldr	r3, [r3, #16]
   b49ec:	9301      	str	r3, [sp, #4]
   b49ee:	bd08      	pop	{r3, pc}
   b49f0:	0003022c 	.word	0x0003022c

000b49f4 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b49f4:	b508      	push	{r3, lr}
   b49f6:	4b02      	ldr	r3, [pc, #8]	; (b4a00 <hal_i2c_begin+0xc>)
   b49f8:	681b      	ldr	r3, [r3, #0]
   b49fa:	68db      	ldr	r3, [r3, #12]
   b49fc:	9301      	str	r3, [sp, #4]
   b49fe:	bd08      	pop	{r3, pc}
   b4a00:	00030228 	.word	0x00030228

000b4a04 <hal_i2c_end>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
   b4a04:	b508      	push	{r3, lr}
   b4a06:	4b02      	ldr	r3, [pc, #8]	; (b4a10 <hal_i2c_end+0xc>)
   b4a08:	681b      	ldr	r3, [r3, #0]
   b4a0a:	691b      	ldr	r3, [r3, #16]
   b4a0c:	9301      	str	r3, [sp, #4]
   b4a0e:	bd08      	pop	{r3, pc}
   b4a10:	00030228 	.word	0x00030228

000b4a14 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b4a14:	b508      	push	{r3, lr}
   b4a16:	4b02      	ldr	r3, [pc, #8]	; (b4a20 <hal_i2c_write+0xc>)
   b4a18:	681b      	ldr	r3, [r3, #0]
   b4a1a:	6a1b      	ldr	r3, [r3, #32]
   b4a1c:	9301      	str	r3, [sp, #4]
   b4a1e:	bd08      	pop	{r3, pc}
   b4a20:	00030228 	.word	0x00030228

000b4a24 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b4a24:	b508      	push	{r3, lr}
   b4a26:	4b02      	ldr	r3, [pc, #8]	; (b4a30 <hal_i2c_available+0xc>)
   b4a28:	681b      	ldr	r3, [r3, #0]
   b4a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4a2c:	9301      	str	r3, [sp, #4]
   b4a2e:	bd08      	pop	{r3, pc}
   b4a30:	00030228 	.word	0x00030228

000b4a34 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4a34:	b508      	push	{r3, lr}
   b4a36:	4b02      	ldr	r3, [pc, #8]	; (b4a40 <hal_i2c_read+0xc>)
   b4a38:	681b      	ldr	r3, [r3, #0]
   b4a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4a3c:	9301      	str	r3, [sp, #4]
   b4a3e:	bd08      	pop	{r3, pc}
   b4a40:	00030228 	.word	0x00030228

000b4a44 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4a44:	b508      	push	{r3, lr}
   b4a46:	4b02      	ldr	r3, [pc, #8]	; (b4a50 <hal_i2c_peek+0xc>)
   b4a48:	681b      	ldr	r3, [r3, #0]
   b4a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4a4c:	9301      	str	r3, [sp, #4]
   b4a4e:	bd08      	pop	{r3, pc}
   b4a50:	00030228 	.word	0x00030228

000b4a54 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4a54:	b508      	push	{r3, lr}
   b4a56:	4b02      	ldr	r3, [pc, #8]	; (b4a60 <hal_i2c_flush+0xc>)
   b4a58:	681b      	ldr	r3, [r3, #0]
   b4a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4a5c:	9301      	str	r3, [sp, #4]
   b4a5e:	bd08      	pop	{r3, pc}
   b4a60:	00030228 	.word	0x00030228

000b4a64 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b4a64:	b508      	push	{r3, lr}
   b4a66:	4b02      	ldr	r3, [pc, #8]	; (b4a70 <hal_i2c_is_enabled+0xc>)
   b4a68:	681b      	ldr	r3, [r3, #0]
   b4a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4a6c:	9301      	str	r3, [sp, #4]
   b4a6e:	bd08      	pop	{r3, pc}
   b4a70:	00030228 	.word	0x00030228

000b4a74 <hal_i2c_set_callback_on_received>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
   b4a74:	b508      	push	{r3, lr}
   b4a76:	4b02      	ldr	r3, [pc, #8]	; (b4a80 <hal_i2c_set_callback_on_received+0xc>)
   b4a78:	681b      	ldr	r3, [r3, #0]
   b4a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b4a7c:	9301      	str	r3, [sp, #4]
   b4a7e:	bd08      	pop	{r3, pc}
   b4a80:	00030228 	.word	0x00030228

000b4a84 <hal_i2c_set_callback_on_requested>:
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
   b4a84:	b508      	push	{r3, lr}
   b4a86:	4b02      	ldr	r3, [pc, #8]	; (b4a90 <hal_i2c_set_callback_on_requested+0xc>)
   b4a88:	681b      	ldr	r3, [r3, #0]
   b4a8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4a8c:	9301      	str	r3, [sp, #4]
   b4a8e:	bd08      	pop	{r3, pc}
   b4a90:	00030228 	.word	0x00030228

000b4a94 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4a94:	b508      	push	{r3, lr}
   b4a96:	4b02      	ldr	r3, [pc, #8]	; (b4aa0 <hal_i2c_init+0xc>)
   b4a98:	681b      	ldr	r3, [r3, #0]
   b4a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4a9c:	9301      	str	r3, [sp, #4]
   b4a9e:	bd08      	pop	{r3, pc}
   b4aa0:	00030228 	.word	0x00030228

000b4aa4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4aa4:	b508      	push	{r3, lr}
   b4aa6:	4b02      	ldr	r3, [pc, #8]	; (b4ab0 <inet_inet_ntop+0xc>)
   b4aa8:	681b      	ldr	r3, [r3, #0]
   b4aaa:	695b      	ldr	r3, [r3, #20]
   b4aac:	9301      	str	r3, [sp, #4]
   b4aae:	bd08      	pop	{r3, pc}
   b4ab0:	00030264 	.word	0x00030264

000b4ab4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4ab4:	b508      	push	{r3, lr}
   b4ab6:	4b02      	ldr	r3, [pc, #8]	; (b4ac0 <netdb_freeaddrinfo+0xc>)
   b4ab8:	681b      	ldr	r3, [r3, #0]
   b4aba:	689b      	ldr	r3, [r3, #8]
   b4abc:	9301      	str	r3, [sp, #4]
   b4abe:	bd08      	pop	{r3, pc}
   b4ac0:	00030268 	.word	0x00030268

000b4ac4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4ac4:	b508      	push	{r3, lr}
   b4ac6:	4b02      	ldr	r3, [pc, #8]	; (b4ad0 <netdb_getaddrinfo+0xc>)
   b4ac8:	681b      	ldr	r3, [r3, #0]
   b4aca:	68db      	ldr	r3, [r3, #12]
   b4acc:	9301      	str	r3, [sp, #4]
   b4ace:	bd08      	pop	{r3, pc}
   b4ad0:	00030268 	.word	0x00030268

000b4ad4 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b4ad4:	b508      	push	{r3, lr}
   b4ad6:	4b02      	ldr	r3, [pc, #8]	; (b4ae0 <hal_spi_init+0xc>)
   b4ad8:	681b      	ldr	r3, [r3, #0]
   b4ada:	69db      	ldr	r3, [r3, #28]
   b4adc:	9301      	str	r3, [sp, #4]
   b4ade:	bd08      	pop	{r3, pc}
   b4ae0:	00030230 	.word	0x00030230

000b4ae4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b4ae4:	b508      	push	{r3, lr}
   b4ae6:	4b02      	ldr	r3, [pc, #8]	; (b4af0 <hal_spi_is_enabled+0xc>)
   b4ae8:	681b      	ldr	r3, [r3, #0]
   b4aea:	6a1b      	ldr	r3, [r3, #32]
   b4aec:	9301      	str	r3, [sp, #4]
   b4aee:	bd08      	pop	{r3, pc}
   b4af0:	00030230 	.word	0x00030230

000b4af4 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4af4:	b508      	push	{r3, lr}
   b4af6:	4b02      	ldr	r3, [pc, #8]	; (b4b00 <hal_usart_write+0xc>)
   b4af8:	681b      	ldr	r3, [r3, #0]
   b4afa:	68db      	ldr	r3, [r3, #12]
   b4afc:	9301      	str	r3, [sp, #4]
   b4afe:	bd08      	pop	{r3, pc}
   b4b00:	0003023c 	.word	0x0003023c

000b4b04 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4b04:	b508      	push	{r3, lr}
   b4b06:	4b02      	ldr	r3, [pc, #8]	; (b4b10 <hal_usart_available+0xc>)
   b4b08:	681b      	ldr	r3, [r3, #0]
   b4b0a:	691b      	ldr	r3, [r3, #16]
   b4b0c:	9301      	str	r3, [sp, #4]
   b4b0e:	bd08      	pop	{r3, pc}
   b4b10:	0003023c 	.word	0x0003023c

000b4b14 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4b14:	b508      	push	{r3, lr}
   b4b16:	4b02      	ldr	r3, [pc, #8]	; (b4b20 <hal_usart_read+0xc>)
   b4b18:	681b      	ldr	r3, [r3, #0]
   b4b1a:	695b      	ldr	r3, [r3, #20]
   b4b1c:	9301      	str	r3, [sp, #4]
   b4b1e:	bd08      	pop	{r3, pc}
   b4b20:	0003023c 	.word	0x0003023c

000b4b24 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4b24:	b508      	push	{r3, lr}
   b4b26:	4b02      	ldr	r3, [pc, #8]	; (b4b30 <hal_usart_peek+0xc>)
   b4b28:	681b      	ldr	r3, [r3, #0]
   b4b2a:	699b      	ldr	r3, [r3, #24]
   b4b2c:	9301      	str	r3, [sp, #4]
   b4b2e:	bd08      	pop	{r3, pc}
   b4b30:	0003023c 	.word	0x0003023c

000b4b34 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4b34:	b508      	push	{r3, lr}
   b4b36:	4b02      	ldr	r3, [pc, #8]	; (b4b40 <hal_usart_flush+0xc>)
   b4b38:	681b      	ldr	r3, [r3, #0]
   b4b3a:	69db      	ldr	r3, [r3, #28]
   b4b3c:	9301      	str	r3, [sp, #4]
   b4b3e:	bd08      	pop	{r3, pc}
   b4b40:	0003023c 	.word	0x0003023c

000b4b44 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b4b44:	b508      	push	{r3, lr}
   b4b46:	4b02      	ldr	r3, [pc, #8]	; (b4b50 <hal_usart_is_enabled+0xc>)
   b4b48:	681b      	ldr	r3, [r3, #0]
   b4b4a:	6a1b      	ldr	r3, [r3, #32]
   b4b4c:	9301      	str	r3, [sp, #4]
   b4b4e:	bd08      	pop	{r3, pc}
   b4b50:	0003023c 	.word	0x0003023c

000b4b54 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4b54:	b508      	push	{r3, lr}
   b4b56:	4b02      	ldr	r3, [pc, #8]	; (b4b60 <hal_usart_available_data_for_write+0xc>)
   b4b58:	681b      	ldr	r3, [r3, #0]
   b4b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4b5c:	9301      	str	r3, [sp, #4]
   b4b5e:	bd08      	pop	{r3, pc}
   b4b60:	0003023c 	.word	0x0003023c

000b4b64 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4b64:	b508      	push	{r3, lr}
   b4b66:	4b02      	ldr	r3, [pc, #8]	; (b4b70 <hal_usart_init_ex+0xc>)
   b4b68:	681b      	ldr	r3, [r3, #0]
   b4b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4b6c:	9301      	str	r3, [sp, #4]
   b4b6e:	bd08      	pop	{r3, pc}
   b4b70:	0003023c 	.word	0x0003023c

000b4b74 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4b74:	b508      	push	{r3, lr}
   b4b76:	4b02      	ldr	r3, [pc, #8]	; (b4b80 <HAL_USB_USART_Init+0xc>)
   b4b78:	681b      	ldr	r3, [r3, #0]
   b4b7a:	681b      	ldr	r3, [r3, #0]
   b4b7c:	9301      	str	r3, [sp, #4]
   b4b7e:	bd08      	pop	{r3, pc}
   b4b80:	0003024c 	.word	0x0003024c

000b4b84 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b4b84:	b508      	push	{r3, lr}
   b4b86:	4b02      	ldr	r3, [pc, #8]	; (b4b90 <HAL_USB_USART_Begin+0xc>)
   b4b88:	681b      	ldr	r3, [r3, #0]
   b4b8a:	685b      	ldr	r3, [r3, #4]
   b4b8c:	9301      	str	r3, [sp, #4]
   b4b8e:	bd08      	pop	{r3, pc}
   b4b90:	0003024c 	.word	0x0003024c

000b4b94 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4b94:	b508      	push	{r3, lr}
   b4b96:	4b02      	ldr	r3, [pc, #8]	; (b4ba0 <HAL_USB_USART_Available_Data+0xc>)
   b4b98:	681b      	ldr	r3, [r3, #0]
   b4b9a:	691b      	ldr	r3, [r3, #16]
   b4b9c:	9301      	str	r3, [sp, #4]
   b4b9e:	bd08      	pop	{r3, pc}
   b4ba0:	0003024c 	.word	0x0003024c

000b4ba4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4ba4:	b508      	push	{r3, lr}
   b4ba6:	4b02      	ldr	r3, [pc, #8]	; (b4bb0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4ba8:	681b      	ldr	r3, [r3, #0]
   b4baa:	695b      	ldr	r3, [r3, #20]
   b4bac:	9301      	str	r3, [sp, #4]
   b4bae:	bd08      	pop	{r3, pc}
   b4bb0:	0003024c 	.word	0x0003024c

000b4bb4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4bb4:	b508      	push	{r3, lr}
   b4bb6:	4b02      	ldr	r3, [pc, #8]	; (b4bc0 <HAL_USB_USART_Receive_Data+0xc>)
   b4bb8:	681b      	ldr	r3, [r3, #0]
   b4bba:	699b      	ldr	r3, [r3, #24]
   b4bbc:	9301      	str	r3, [sp, #4]
   b4bbe:	bd08      	pop	{r3, pc}
   b4bc0:	0003024c 	.word	0x0003024c

000b4bc4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4bc4:	b508      	push	{r3, lr}
   b4bc6:	4b02      	ldr	r3, [pc, #8]	; (b4bd0 <HAL_USB_USART_Send_Data+0xc>)
   b4bc8:	681b      	ldr	r3, [r3, #0]
   b4bca:	69db      	ldr	r3, [r3, #28]
   b4bcc:	9301      	str	r3, [sp, #4]
   b4bce:	bd08      	pop	{r3, pc}
   b4bd0:	0003024c 	.word	0x0003024c

000b4bd4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4bd4:	b508      	push	{r3, lr}
   b4bd6:	4b02      	ldr	r3, [pc, #8]	; (b4be0 <HAL_USB_USART_Flush_Data+0xc>)
   b4bd8:	681b      	ldr	r3, [r3, #0]
   b4bda:	6a1b      	ldr	r3, [r3, #32]
   b4bdc:	9301      	str	r3, [sp, #4]
   b4bde:	bd08      	pop	{r3, pc}
   b4be0:	0003024c 	.word	0x0003024c

000b4be4 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4be4:	b508      	push	{r3, lr}
   b4be6:	4b02      	ldr	r3, [pc, #8]	; (b4bf0 <set_system_mode+0xc>)
   b4be8:	681b      	ldr	r3, [r3, #0]
   b4bea:	685b      	ldr	r3, [r3, #4]
   b4bec:	9301      	str	r3, [sp, #4]
   b4bee:	bd08      	pop	{r3, pc}
   b4bf0:	00030220 	.word	0x00030220

000b4bf4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b4bf4:	b508      	push	{r3, lr}
   b4bf6:	4b02      	ldr	r3, [pc, #8]	; (b4c00 <system_delay_ms+0xc>)
   b4bf8:	681b      	ldr	r3, [r3, #0]
   b4bfa:	695b      	ldr	r3, [r3, #20]
   b4bfc:	9301      	str	r3, [sp, #4]
   b4bfe:	bd08      	pop	{r3, pc}
   b4c00:	00030220 	.word	0x00030220

000b4c04 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4c04:	b508      	push	{r3, lr}
   b4c06:	4b03      	ldr	r3, [pc, #12]	; (b4c14 <system_ctrl_set_app_request_handler+0x10>)
   b4c08:	681b      	ldr	r3, [r3, #0]
   b4c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b4c0e:	9301      	str	r3, [sp, #4]
   b4c10:	bd08      	pop	{r3, pc}
   b4c12:	0000      	.short	0x0000
   b4c14:	00030220 	.word	0x00030220

000b4c18 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b4c18:	b508      	push	{r3, lr}
   b4c1a:	4b03      	ldr	r3, [pc, #12]	; (b4c28 <system_ctrl_set_result+0x10>)
   b4c1c:	681b      	ldr	r3, [r3, #0]
   b4c1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b4c22:	9301      	str	r3, [sp, #4]
   b4c24:	bd08      	pop	{r3, pc}
   b4c26:	0000      	.short	0x0000
   b4c28:	00030220 	.word	0x00030220

000b4c2c <spark_deviceID>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   b4c2c:	b508      	push	{r3, lr}
   b4c2e:	4b02      	ldr	r3, [pc, #8]	; (b4c38 <spark_deviceID+0xc>)
   b4c30:	681b      	ldr	r3, [r3, #0]
   b4c32:	69db      	ldr	r3, [r3, #28]
   b4c34:	9301      	str	r3, [sp, #4]
   b4c36:	bd08      	pop	{r3, pc}
   b4c38:	00030244 	.word	0x00030244

000b4c3c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b4c3c:	b508      	push	{r3, lr}
   b4c3e:	4b02      	ldr	r3, [pc, #8]	; (b4c48 <spark_set_random_seed_from_cloud_handler+0xc>)
   b4c40:	681b      	ldr	r3, [r3, #0]
   b4c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4c44:	9301      	str	r3, [sp, #4]
   b4c46:	bd08      	pop	{r3, pc}
   b4c48:	00030244 	.word	0x00030244

000b4c4c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4c4c:	b508      	push	{r3, lr}
   b4c4e:	4b02      	ldr	r3, [pc, #8]	; (b4c58 <network_connect+0xc>)
   b4c50:	681b      	ldr	r3, [r3, #0]
   b4c52:	685b      	ldr	r3, [r3, #4]
   b4c54:	9301      	str	r3, [sp, #4]
   b4c56:	bd08      	pop	{r3, pc}
   b4c58:	00030240 	.word	0x00030240

000b4c5c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4c5c:	b508      	push	{r3, lr}
   b4c5e:	4b02      	ldr	r3, [pc, #8]	; (b4c68 <network_connecting+0xc>)
   b4c60:	681b      	ldr	r3, [r3, #0]
   b4c62:	689b      	ldr	r3, [r3, #8]
   b4c64:	9301      	str	r3, [sp, #4]
   b4c66:	bd08      	pop	{r3, pc}
   b4c68:	00030240 	.word	0x00030240

000b4c6c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4c6c:	b508      	push	{r3, lr}
   b4c6e:	4b02      	ldr	r3, [pc, #8]	; (b4c78 <network_disconnect+0xc>)
   b4c70:	681b      	ldr	r3, [r3, #0]
   b4c72:	68db      	ldr	r3, [r3, #12]
   b4c74:	9301      	str	r3, [sp, #4]
   b4c76:	bd08      	pop	{r3, pc}
   b4c78:	00030240 	.word	0x00030240

000b4c7c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4c7c:	b508      	push	{r3, lr}
   b4c7e:	4b02      	ldr	r3, [pc, #8]	; (b4c88 <network_ready+0xc>)
   b4c80:	681b      	ldr	r3, [r3, #0]
   b4c82:	691b      	ldr	r3, [r3, #16]
   b4c84:	9301      	str	r3, [sp, #4]
   b4c86:	bd08      	pop	{r3, pc}
   b4c88:	00030240 	.word	0x00030240

000b4c8c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4c8c:	b508      	push	{r3, lr}
   b4c8e:	4b02      	ldr	r3, [pc, #8]	; (b4c98 <network_on+0xc>)
   b4c90:	681b      	ldr	r3, [r3, #0]
   b4c92:	695b      	ldr	r3, [r3, #20]
   b4c94:	9301      	str	r3, [sp, #4]
   b4c96:	bd08      	pop	{r3, pc}
   b4c98:	00030240 	.word	0x00030240

000b4c9c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4c9c:	b508      	push	{r3, lr}
   b4c9e:	4b02      	ldr	r3, [pc, #8]	; (b4ca8 <network_off+0xc>)
   b4ca0:	681b      	ldr	r3, [r3, #0]
   b4ca2:	699b      	ldr	r3, [r3, #24]
   b4ca4:	9301      	str	r3, [sp, #4]
   b4ca6:	bd08      	pop	{r3, pc}
   b4ca8:	00030240 	.word	0x00030240

000b4cac <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4cac:	b508      	push	{r3, lr}
   b4cae:	4b02      	ldr	r3, [pc, #8]	; (b4cb8 <network_listen+0xc>)
   b4cb0:	681b      	ldr	r3, [r3, #0]
   b4cb2:	69db      	ldr	r3, [r3, #28]
   b4cb4:	9301      	str	r3, [sp, #4]
   b4cb6:	bd08      	pop	{r3, pc}
   b4cb8:	00030240 	.word	0x00030240

000b4cbc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b4cbc:	b508      	push	{r3, lr}
   b4cbe:	4b02      	ldr	r3, [pc, #8]	; (b4cc8 <network_listening+0xc>)
   b4cc0:	681b      	ldr	r3, [r3, #0]
   b4cc2:	6a1b      	ldr	r3, [r3, #32]
   b4cc4:	9301      	str	r3, [sp, #4]
   b4cc6:	bd08      	pop	{r3, pc}
   b4cc8:	00030240 	.word	0x00030240

000b4ccc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4ccc:	b508      	push	{r3, lr}
   b4cce:	4b02      	ldr	r3, [pc, #8]	; (b4cd8 <network_set_listen_timeout+0xc>)
   b4cd0:	681b      	ldr	r3, [r3, #0]
   b4cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4cd4:	9301      	str	r3, [sp, #4]
   b4cd6:	bd08      	pop	{r3, pc}
   b4cd8:	00030240 	.word	0x00030240

000b4cdc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b4cdc:	b508      	push	{r3, lr}
   b4cde:	4b02      	ldr	r3, [pc, #8]	; (b4ce8 <network_get_listen_timeout+0xc>)
   b4ce0:	681b      	ldr	r3, [r3, #0]
   b4ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4ce4:	9301      	str	r3, [sp, #4]
   b4ce6:	bd08      	pop	{r3, pc}
   b4ce8:	00030240 	.word	0x00030240

000b4cec <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b4cec:	b508      	push	{r3, lr}
   b4cee:	4b02      	ldr	r3, [pc, #8]	; (b4cf8 <network_is_on+0xc>)
   b4cf0:	681b      	ldr	r3, [r3, #0]
   b4cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4cf4:	9301      	str	r3, [sp, #4]
   b4cf6:	bd08      	pop	{r3, pc}
   b4cf8:	00030240 	.word	0x00030240

000b4cfc <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b4cfc:	b508      	push	{r3, lr}
   b4cfe:	4b02      	ldr	r3, [pc, #8]	; (b4d08 <network_is_off+0xc>)
   b4d00:	681b      	ldr	r3, [r3, #0]
   b4d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4d04:	9301      	str	r3, [sp, #4]
   b4d06:	bd08      	pop	{r3, pc}
   b4d08:	00030240 	.word	0x00030240

000b4d0c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b4d0c:	b508      	push	{r3, lr}
   b4d0e:	4b02      	ldr	r3, [pc, #8]	; (b4d18 <malloc+0xc>)
   b4d10:	681b      	ldr	r3, [r3, #0]
   b4d12:	681b      	ldr	r3, [r3, #0]
   b4d14:	9301      	str	r3, [sp, #4]
   b4d16:	bd08      	pop	{r3, pc}
   b4d18:	0003021c 	.word	0x0003021c

000b4d1c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b4d1c:	b508      	push	{r3, lr}
   b4d1e:	4b02      	ldr	r3, [pc, #8]	; (b4d28 <free+0xc>)
   b4d20:	681b      	ldr	r3, [r3, #0]
   b4d22:	685b      	ldr	r3, [r3, #4]
   b4d24:	9301      	str	r3, [sp, #4]
   b4d26:	bd08      	pop	{r3, pc}
   b4d28:	0003021c 	.word	0x0003021c

000b4d2c <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b4d2c:	b508      	push	{r3, lr}
   b4d2e:	4b02      	ldr	r3, [pc, #8]	; (b4d38 <__assert_func+0xc>)
   b4d30:	681b      	ldr	r3, [r3, #0]
   b4d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4d34:	9301      	str	r3, [sp, #4]
   b4d36:	bd08      	pop	{r3, pc}
   b4d38:	0003021c 	.word	0x0003021c

000b4d3c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b4d3c:	b508      	push	{r3, lr}
   b4d3e:	4b02      	ldr	r3, [pc, #8]	; (b4d48 <newlib_impure_ptr_callback+0xc>)
   b4d40:	681b      	ldr	r3, [r3, #0]
   b4d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4d44:	9301      	str	r3, [sp, #4]
   b4d46:	bd08      	pop	{r3, pc}
   b4d48:	0003021c 	.word	0x0003021c

000b4d4c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b4d4c:	2100      	movs	r1, #0
   b4d4e:	f7ff bf51 	b.w	b4bf4 <system_delay_ms>
	...

000b4d54 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b4d54:	4802      	ldr	r0, [pc, #8]	; (b4d60 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b4d56:	2300      	movs	r3, #0
   b4d58:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b4d5a:	f7ff be03 	b.w	b4964 <os_mutex_recursive_create>
   b4d5e:	bf00      	nop
   b4d60:	2003e6b8 	.word	0x2003e6b8

000b4d64 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4d64:	2200      	movs	r2, #0
   b4d66:	6840      	ldr	r0, [r0, #4]
   b4d68:	4611      	mov	r1, r2
   b4d6a:	f7ff bfa7 	b.w	b4cbc <network_listening>

000b4d6e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4d6e:	2200      	movs	r2, #0
   b4d70:	6840      	ldr	r0, [r0, #4]
   b4d72:	4611      	mov	r1, r2
   b4d74:	f7ff bfb2 	b.w	b4cdc <network_get_listen_timeout>

000b4d78 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4d78:	6840      	ldr	r0, [r0, #4]
   b4d7a:	2200      	movs	r2, #0
   b4d7c:	f7ff bfa6 	b.w	b4ccc <network_set_listen_timeout>

000b4d80 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4d80:	6840      	ldr	r0, [r0, #4]
   b4d82:	2200      	movs	r2, #0
   b4d84:	f081 0101 	eor.w	r1, r1, #1
   b4d88:	f7ff bf90 	b.w	b4cac <network_listen>

000b4d8c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4d8c:	2300      	movs	r3, #0
   b4d8e:	6840      	ldr	r0, [r0, #4]
   b4d90:	461a      	mov	r2, r3
   b4d92:	4619      	mov	r1, r3
   b4d94:	f7ff bf82 	b.w	b4c9c <network_off>

000b4d98 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4d98:	2300      	movs	r3, #0
   b4d9a:	6840      	ldr	r0, [r0, #4]
   b4d9c:	461a      	mov	r2, r3
   b4d9e:	4619      	mov	r1, r3
   b4da0:	f7ff bf74 	b.w	b4c8c <network_on>

000b4da4 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b4da4:	2200      	movs	r2, #0
   b4da6:	6840      	ldr	r0, [r0, #4]
   b4da8:	4611      	mov	r1, r2
   b4daa:	f7ff bf67 	b.w	b4c7c <network_ready>

000b4dae <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4dae:	2200      	movs	r2, #0
   b4db0:	6840      	ldr	r0, [r0, #4]
   b4db2:	4611      	mov	r1, r2
   b4db4:	f7ff bf52 	b.w	b4c5c <network_connecting>

000b4db8 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4db8:	6840      	ldr	r0, [r0, #4]
   b4dba:	2200      	movs	r2, #0
   b4dbc:	2102      	movs	r1, #2
   b4dbe:	f7ff bf55 	b.w	b4c6c <network_disconnect>

000b4dc2 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b4dc2:	2300      	movs	r3, #0
   b4dc4:	6840      	ldr	r0, [r0, #4]
   b4dc6:	461a      	mov	r2, r3
   b4dc8:	f7ff bf40 	b.w	b4c4c <network_connect>

000b4dcc <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b4dcc:	4b02      	ldr	r3, [pc, #8]	; (b4dd8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b4dce:	2203      	movs	r2, #3
   b4dd0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b4dd2:	4a02      	ldr	r2, [pc, #8]	; (b4ddc <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b4dd4:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b4dd6:	4770      	bx	lr
   b4dd8:	2003e6bc 	.word	0x2003e6bc
   b4ddc:	000b5a00 	.word	0x000b5a00

000b4de0 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b4de0:	4770      	bx	lr

000b4de2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b4de2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4de4:	4606      	mov	r6, r0
   b4de6:	4615      	mov	r5, r2
   b4de8:	460c      	mov	r4, r1
   b4dea:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b4dec:	42bc      	cmp	r4, r7
   b4dee:	d006      	beq.n	b4dfe <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b4df0:	6833      	ldr	r3, [r6, #0]
   b4df2:	f814 1b01 	ldrb.w	r1, [r4], #1
   b4df6:	689b      	ldr	r3, [r3, #8]
   b4df8:	4630      	mov	r0, r6
   b4dfa:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b4dfc:	e7f6      	b.n	b4dec <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b4dfe:	4628      	mov	r0, r5
   b4e00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4e02 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b4e02:	7c00      	ldrb	r0, [r0, #16]
   b4e04:	2200      	movs	r2, #0
   b4e06:	f7ff be05 	b.w	b4a14 <hal_i2c_write>

000b4e0a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b4e0a:	7c00      	ldrb	r0, [r0, #16]
   b4e0c:	2100      	movs	r1, #0
   b4e0e:	f7ff be09 	b.w	b4a24 <hal_i2c_available>

000b4e12 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b4e12:	7c00      	ldrb	r0, [r0, #16]
   b4e14:	2100      	movs	r1, #0
   b4e16:	f7ff be0d 	b.w	b4a34 <hal_i2c_read>

000b4e1a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b4e1a:	7c00      	ldrb	r0, [r0, #16]
   b4e1c:	2100      	movs	r1, #0
   b4e1e:	f7ff be11 	b.w	b4a44 <hal_i2c_peek>

000b4e22 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b4e22:	7c00      	ldrb	r0, [r0, #16]
   b4e24:	2100      	movs	r1, #0
   b4e26:	f7ff be15 	b.w	b4a54 <hal_i2c_flush>

000b4e2a <_ZN7TwoWireD0Ev>:
   b4e2a:	b510      	push	{r4, lr}
   b4e2c:	2114      	movs	r1, #20
   b4e2e:	4604      	mov	r4, r0
   b4e30:	f7ff f931 	bl	b4096 <_ZdlPvj>
   b4e34:	4620      	mov	r0, r4
   b4e36:	bd10      	pop	{r4, pc}

000b4e38 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b4e38:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b4e3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4e3e:	4604      	mov	r4, r0
   b4e40:	4608      	mov	r0, r1
   b4e42:	2100      	movs	r1, #0
   b4e44:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b4e48:	4b03      	ldr	r3, [pc, #12]	; (b4e58 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b4e4a:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b4e4c:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b4e4e:	4611      	mov	r1, r2
   b4e50:	f7ff fe20 	bl	b4a94 <hal_i2c_init>
}
   b4e54:	4620      	mov	r0, r4
   b4e56:	bd10      	pop	{r4, pc}
   b4e58:	000b5a3c 	.word	0x000b5a3c

000b4e5c <_ZN7TwoWire5beginEh>:
{
   b4e5c:	460a      	mov	r2, r1
	hal_i2c_begin(_i2c, I2C_MODE_SLAVE, address, NULL);
   b4e5e:	7c00      	ldrb	r0, [r0, #16]
   b4e60:	2300      	movs	r3, #0
   b4e62:	2101      	movs	r1, #1
   b4e64:	f7ff bdc6 	b.w	b49f4 <hal_i2c_begin>

000b4e68 <_ZN7TwoWire5beginEi>:
  begin((uint8_t)address);
   b4e68:	b2c9      	uxtb	r1, r1
   b4e6a:	f7ff bff7 	b.w	b4e5c <_ZN7TwoWire5beginEh>

000b4e6e <_ZN7TwoWire3endEv>:
	hal_i2c_end(_i2c, NULL);
   b4e6e:	7c00      	ldrb	r0, [r0, #16]
   b4e70:	2100      	movs	r1, #0
   b4e72:	f7ff bdc7 	b.w	b4a04 <hal_i2c_end>

000b4e76 <_ZN7TwoWire9onReceiveEPFviE>:
}

// sets function called on slave write
void TwoWire::onReceive( void (*function)(int) )
{
  hal_i2c_set_callback_on_received(_i2c, function, NULL);
   b4e76:	7c00      	ldrb	r0, [r0, #16]
   b4e78:	2200      	movs	r2, #0
   b4e7a:	f7ff bdfb 	b.w	b4a74 <hal_i2c_set_callback_on_received>

000b4e7e <_ZN7TwoWire9onRequestEPFvvE>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  hal_i2c_set_callback_on_requested(_i2c, function, NULL);
   b4e7e:	7c00      	ldrb	r0, [r0, #16]
   b4e80:	2200      	movs	r2, #0
   b4e82:	f7ff bdff 	b.w	b4a84 <hal_i2c_set_callback_on_requested>

000b4e86 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b4e86:	4770      	bx	lr

000b4e88 <_ZN9IPAddressD0Ev>:
   b4e88:	b510      	push	{r4, lr}
   b4e8a:	2118      	movs	r1, #24
   b4e8c:	4604      	mov	r4, r0
   b4e8e:	f7ff f902 	bl	b4096 <_ZdlPvj>
   b4e92:	4620      	mov	r0, r4
   b4e94:	bd10      	pop	{r4, pc}

000b4e96 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b4e96:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b4e98:	7d03      	ldrb	r3, [r0, #20]
   b4e9a:	2b06      	cmp	r3, #6
{
   b4e9c:	b08d      	sub	sp, #52	; 0x34
   b4e9e:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4ea0:	f100 0704 	add.w	r7, r0, #4
   b4ea4:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b4ea8:	d012      	beq.n	b4ed0 <_ZNK9IPAddress7printToER5Print+0x3a>
   b4eaa:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4eae:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b4eb2:	220a      	movs	r2, #10
   b4eb4:	4630      	mov	r0, r6
   b4eb6:	f000 f968 	bl	b518a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b4eba:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b4ebc:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b4ebe:	d019      	beq.n	b4ef4 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b4ec0:	2c00      	cmp	r4, #0
   b4ec2:	d0f4      	beq.n	b4eae <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b4ec4:	212e      	movs	r1, #46	; 0x2e
   b4ec6:	4630      	mov	r0, r6
   b4ec8:	f000 f93c 	bl	b5144 <_ZN5Print5printEc>
   b4ecc:	4404      	add	r4, r0
   b4ece:	e7ee      	b.n	b4eae <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4ed0:	232f      	movs	r3, #47	; 0x2f
   b4ed2:	466a      	mov	r2, sp
   b4ed4:	4639      	mov	r1, r7
   b4ed6:	200a      	movs	r0, #10
		buf[0] = 0;
   b4ed8:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4edc:	f7ff fde2 	bl	b4aa4 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b4ee0:	4668      	mov	r0, sp
   b4ee2:	f000 fcc5 	bl	b5870 <strlen>
   b4ee6:	6833      	ldr	r3, [r6, #0]
   b4ee8:	4602      	mov	r2, r0
   b4eea:	68db      	ldr	r3, [r3, #12]
   b4eec:	4669      	mov	r1, sp
   b4eee:	4630      	mov	r0, r6
   b4ef0:	4798      	blx	r3
   b4ef2:	4604      	mov	r4, r0
    }
    return n;
}
   b4ef4:	4620      	mov	r0, r4
   b4ef6:	b00d      	add	sp, #52	; 0x34
   b4ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000b4efc <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b4efc:	b510      	push	{r4, lr}
   b4efe:	4b05      	ldr	r3, [pc, #20]	; (b4f14 <_ZN9IPAddressC1Ev+0x18>)
   b4f00:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b4f02:	2211      	movs	r2, #17
   b4f04:	f840 3b04 	str.w	r3, [r0], #4
   b4f08:	2100      	movs	r1, #0
   b4f0a:	f000 fc3d 	bl	b5788 <memset>
}
   b4f0e:	4620      	mov	r0, r4
   b4f10:	bd10      	pop	{r4, pc}
   b4f12:	bf00      	nop
   b4f14:	000b5a64 	.word	0x000b5a64

000b4f18 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b4f18:	4603      	mov	r3, r0
   b4f1a:	4a07      	ldr	r2, [pc, #28]	; (b4f38 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b4f1c:	b510      	push	{r4, lr}
   b4f1e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b4f22:	f101 0210 	add.w	r2, r1, #16
   b4f26:	f851 4b04 	ldr.w	r4, [r1], #4
   b4f2a:	f843 4b04 	str.w	r4, [r3], #4
   b4f2e:	4291      	cmp	r1, r2
   b4f30:	d1f9      	bne.n	b4f26 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b4f32:	780a      	ldrb	r2, [r1, #0]
   b4f34:	701a      	strb	r2, [r3, #0]
}
   b4f36:	bd10      	pop	{r4, pc}
   b4f38:	000b5a64 	.word	0x000b5a64

000b4f3c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b4f3c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b4f3e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b4f42:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b4f46:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b4f4a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b4f4e:	2304      	movs	r3, #4
   b4f50:	6041      	str	r1, [r0, #4]
   b4f52:	7503      	strb	r3, [r0, #20]
}
   b4f54:	bd10      	pop	{r4, pc}
	...

000b4f58 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b4f58:	b507      	push	{r0, r1, r2, lr}
   b4f5a:	4b06      	ldr	r3, [pc, #24]	; (b4f74 <_ZN9IPAddressC1EPKh+0x1c>)
   b4f5c:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b4f5e:	78cb      	ldrb	r3, [r1, #3]
   b4f60:	9300      	str	r3, [sp, #0]
   b4f62:	788b      	ldrb	r3, [r1, #2]
   b4f64:	784a      	ldrb	r2, [r1, #1]
   b4f66:	7809      	ldrb	r1, [r1, #0]
   b4f68:	f7ff ffe8 	bl	b4f3c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b4f6c:	b003      	add	sp, #12
   b4f6e:	f85d fb04 	ldr.w	pc, [sp], #4
   b4f72:	bf00      	nop
   b4f74:	000b5a64 	.word	0x000b5a64

000b4f78 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b4f78:	4b01      	ldr	r3, [pc, #4]	; (b4f80 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b4f7a:	4a02      	ldr	r2, [pc, #8]	; (b4f84 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b4f7c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b4f7e:	4770      	bx	lr
   b4f80:	2003e6c4 	.word	0x2003e6c4
   b4f84:	000b5a70 	.word	0x000b5a70

000b4f88 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b4f88:	2300      	movs	r3, #0
   b4f8a:	6840      	ldr	r0, [r0, #4]
   b4f8c:	461a      	mov	r2, r3
   b4f8e:	f7ff be5d 	b.w	b4c4c <network_connect>

000b4f92 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b4f92:	6840      	ldr	r0, [r0, #4]
   b4f94:	2200      	movs	r2, #0
   b4f96:	2102      	movs	r1, #2
   b4f98:	f7ff be68 	b.w	b4c6c <network_disconnect>

000b4f9c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b4f9c:	2200      	movs	r2, #0
   b4f9e:	6840      	ldr	r0, [r0, #4]
   b4fa0:	4611      	mov	r1, r2
   b4fa2:	f7ff be5b 	b.w	b4c5c <network_connecting>

000b4fa6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b4fa6:	2200      	movs	r2, #0
   b4fa8:	6840      	ldr	r0, [r0, #4]
   b4faa:	4611      	mov	r1, r2
   b4fac:	f7ff be66 	b.w	b4c7c <network_ready>

000b4fb0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b4fb0:	2300      	movs	r3, #0
   b4fb2:	6840      	ldr	r0, [r0, #4]
   b4fb4:	461a      	mov	r2, r3
   b4fb6:	4619      	mov	r1, r3
   b4fb8:	f7ff be68 	b.w	b4c8c <network_on>

000b4fbc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b4fbc:	2300      	movs	r3, #0
   b4fbe:	6840      	ldr	r0, [r0, #4]
   b4fc0:	461a      	mov	r2, r3
   b4fc2:	4619      	mov	r1, r3
   b4fc4:	f7ff be6a 	b.w	b4c9c <network_off>

000b4fc8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b4fc8:	6840      	ldr	r0, [r0, #4]
   b4fca:	2100      	movs	r1, #0
   b4fcc:	f7ff be8e 	b.w	b4cec <network_is_on>

000b4fd0 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b4fd0:	6840      	ldr	r0, [r0, #4]
   b4fd2:	2100      	movs	r1, #0
   b4fd4:	f7ff be92 	b.w	b4cfc <network_is_off>

000b4fd8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b4fd8:	6840      	ldr	r0, [r0, #4]
   b4fda:	2200      	movs	r2, #0
   b4fdc:	f081 0101 	eor.w	r1, r1, #1
   b4fe0:	f7ff be64 	b.w	b4cac <network_listen>

000b4fe4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b4fe4:	6840      	ldr	r0, [r0, #4]
   b4fe6:	2200      	movs	r2, #0
   b4fe8:	f7ff be70 	b.w	b4ccc <network_set_listen_timeout>

000b4fec <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b4fec:	2200      	movs	r2, #0
   b4fee:	6840      	ldr	r0, [r0, #4]
   b4ff0:	4611      	mov	r1, r2
   b4ff2:	f7ff be73 	b.w	b4cdc <network_get_listen_timeout>

000b4ff6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b4ff6:	2200      	movs	r2, #0
   b4ff8:	6840      	ldr	r0, [r0, #4]
   b4ffa:	4611      	mov	r1, r2
   b4ffc:	f7ff be5e 	b.w	b4cbc <network_listening>

000b5000 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b5000:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5004:	b095      	sub	sp, #84	; 0x54
   b5006:	4614      	mov	r4, r2
   b5008:	460d      	mov	r5, r1
   b500a:	4607      	mov	r7, r0
    IPAddress addr;
   b500c:	f7ff ff76 	bl	b4efc <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b5010:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b5012:	221c      	movs	r2, #28
   b5014:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b5016:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b5018:	f000 fbb6 	bl	b5788 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b501c:	2340      	movs	r3, #64	; 0x40
   b501e:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b5020:	4620      	mov	r0, r4
   b5022:	466b      	mov	r3, sp
   b5024:	aa0c      	add	r2, sp, #48	; 0x30
   b5026:	2100      	movs	r1, #0
   b5028:	f7ff fd4c 	bl	b4ac4 <netdb_getaddrinfo>
    if (!r) {
   b502c:	4604      	mov	r4, r0
   b502e:	2800      	cmp	r0, #0
   b5030:	d14b      	bne.n	b50ca <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5032:	4602      	mov	r2, r0
   b5034:	2101      	movs	r1, #1
   b5036:	6868      	ldr	r0, [r5, #4]
   b5038:	f7ff fe20 	bl	b4c7c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b503c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b503e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5040:	4622      	mov	r2, r4
   b5042:	6868      	ldr	r0, [r5, #4]
   b5044:	f7ff fe1a 	bl	b4c7c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5048:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b504a:	4681      	mov	r9, r0
        bool ok = false;
   b504c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b504e:	2e00      	cmp	r6, #0
   b5050:	d03b      	beq.n	b50ca <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b5052:	2900      	cmp	r1, #0
   b5054:	d139      	bne.n	b50ca <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b5056:	6873      	ldr	r3, [r6, #4]
   b5058:	2b02      	cmp	r3, #2
   b505a:	d003      	beq.n	b5064 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b505c:	2b0a      	cmp	r3, #10
   b505e:	d011      	beq.n	b5084 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5060:	69f6      	ldr	r6, [r6, #28]
   b5062:	e7f4      	b.n	b504e <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b5064:	f1b8 0f00 	cmp.w	r8, #0
   b5068:	d0fa      	beq.n	b5060 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b506a:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b506c:	a806      	add	r0, sp, #24
   b506e:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b5070:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b5072:	f7ff ff71 	bl	b4f58 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b5076:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5078:	1d3c      	adds	r4, r7, #4
   b507a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b507c:	682b      	ldr	r3, [r5, #0]
   b507e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5080:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b5082:	e7ed      	b.n	b5060 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b5084:	f1b9 0f00 	cmp.w	r9, #0
   b5088:	d0ea      	beq.n	b5060 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b508a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b508c:	2210      	movs	r2, #16
   b508e:	a801      	add	r0, sp, #4
   b5090:	f000 fb7a 	bl	b5788 <memset>
                    a.v = 6;
   b5094:	2306      	movs	r3, #6
   b5096:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b509a:	ad01      	add	r5, sp, #4
   b509c:	f104 0308 	add.w	r3, r4, #8
   b50a0:	3418      	adds	r4, #24
   b50a2:	6818      	ldr	r0, [r3, #0]
   b50a4:	6859      	ldr	r1, [r3, #4]
   b50a6:	462a      	mov	r2, r5
   b50a8:	c203      	stmia	r2!, {r0, r1}
   b50aa:	3308      	adds	r3, #8
   b50ac:	42a3      	cmp	r3, r4
   b50ae:	4615      	mov	r5, r2
   b50b0:	d1f7      	bne.n	b50a2 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b50b2:	a901      	add	r1, sp, #4
   b50b4:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b50b6:	ad07      	add	r5, sp, #28
   b50b8:	f7ff ff2e 	bl	b4f18 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b50bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b50be:	1d3c      	adds	r4, r7, #4
   b50c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b50c2:	682b      	ldr	r3, [r5, #0]
   b50c4:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b50c6:	4649      	mov	r1, r9
   b50c8:	e7ca      	b.n	b5060 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b50ca:	9800      	ldr	r0, [sp, #0]
   b50cc:	f7ff fcf2 	bl	b4ab4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b50d0:	4638      	mov	r0, r7
   b50d2:	b015      	add	sp, #84	; 0x54
   b50d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b50d8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b50d8:	4b02      	ldr	r3, [pc, #8]	; (b50e4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b50da:	4a03      	ldr	r2, [pc, #12]	; (b50e8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b50dc:	601a      	str	r2, [r3, #0]
   b50de:	2200      	movs	r2, #0
   b50e0:	605a      	str	r2, [r3, #4]

} // spark
   b50e2:	4770      	bx	lr
   b50e4:	2003e6c8 	.word	0x2003e6c8
   b50e8:	000b5a7c 	.word	0x000b5a7c

000b50ec <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b50ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b50ee:	4606      	mov	r6, r0
   b50f0:	460d      	mov	r5, r1
  size_t n = 0;
   b50f2:	188f      	adds	r7, r1, r2
   b50f4:	2400      	movs	r4, #0
  while (size--) {
   b50f6:	42bd      	cmp	r5, r7
   b50f8:	d00c      	beq.n	b5114 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b50fa:	6833      	ldr	r3, [r6, #0]
   b50fc:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5100:	689b      	ldr	r3, [r3, #8]
   b5102:	4630      	mov	r0, r6
   b5104:	4798      	blx	r3
     if (chunk>=0)
   b5106:	1e03      	subs	r3, r0, #0
   b5108:	db01      	blt.n	b510e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b510a:	441c      	add	r4, r3
  while (size--) {
   b510c:	e7f3      	b.n	b50f6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b510e:	2c00      	cmp	r4, #0
   b5110:	bf08      	it	eq
   b5112:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b5114:	4620      	mov	r0, r4
   b5116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5118 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b5118:	b513      	push	{r0, r1, r4, lr}
   b511a:	4604      	mov	r4, r0
    }
   b511c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b511e:	b159      	cbz	r1, b5138 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b5120:	9101      	str	r1, [sp, #4]
   b5122:	f000 fba5 	bl	b5870 <strlen>
   b5126:	6823      	ldr	r3, [r4, #0]
   b5128:	9901      	ldr	r1, [sp, #4]
   b512a:	68db      	ldr	r3, [r3, #12]
   b512c:	4602      	mov	r2, r0
   b512e:	4620      	mov	r0, r4
    }
   b5130:	b002      	add	sp, #8
   b5132:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b5136:	4718      	bx	r3
    }
   b5138:	b002      	add	sp, #8
   b513a:	bd10      	pop	{r4, pc}

000b513c <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b513c:	b508      	push	{r3, lr}
  return write(str);
   b513e:	f7ff ffeb 	bl	b5118 <_ZN5Print5writeEPKc>
}
   b5142:	bd08      	pop	{r3, pc}

000b5144 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b5144:	6803      	ldr	r3, [r0, #0]
   b5146:	689b      	ldr	r3, [r3, #8]
   b5148:	4718      	bx	r3

000b514a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b514a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b514c:	210d      	movs	r1, #13
{
   b514e:	4605      	mov	r5, r0
  size_t n = print('\r');
   b5150:	f7ff fff8 	bl	b5144 <_ZN5Print5printEc>
  n += print('\n');
   b5154:	210a      	movs	r1, #10
  size_t n = print('\r');
   b5156:	4604      	mov	r4, r0
  n += print('\n');
   b5158:	4628      	mov	r0, r5
   b515a:	f7ff fff3 	bl	b5144 <_ZN5Print5printEc>
  return n;
}
   b515e:	4420      	add	r0, r4
   b5160:	bd38      	pop	{r3, r4, r5, pc}

000b5162 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b5162:	b538      	push	{r3, r4, r5, lr}
   b5164:	4605      	mov	r5, r0
  return write(str);
   b5166:	f7ff ffd7 	bl	b5118 <_ZN5Print5writeEPKc>
   b516a:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b516c:	4628      	mov	r0, r5
   b516e:	f7ff ffec 	bl	b514a <_ZN5Print7printlnEv>
  return n;
}
   b5172:	4420      	add	r0, r4
   b5174:	bd38      	pop	{r3, r4, r5, pc}

000b5176 <_ZN5Print7printlnEc>:

size_t Print::println(char c)
{
   b5176:	b538      	push	{r3, r4, r5, lr}
   b5178:	4605      	mov	r5, r0
  size_t n = print(c);
   b517a:	f7ff ffe3 	bl	b5144 <_ZN5Print5printEc>
   b517e:	4604      	mov	r4, r0
  n += println();
   b5180:	4628      	mov	r0, r5
   b5182:	f7ff ffe2 	bl	b514a <_ZN5Print7printlnEv>
  return n;
}
   b5186:	4420      	add	r0, r4
   b5188:	bd38      	pop	{r3, r4, r5, pc}

000b518a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b518a:	b530      	push	{r4, r5, lr}
   b518c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b518e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b5190:	2a01      	cmp	r2, #1
  *str = '\0';
   b5192:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b5196:	bf98      	it	ls
   b5198:	220a      	movls	r2, #10
   b519a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b519c:	460d      	mov	r5, r1
   b519e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b51a2:	fb01 5312 	mls	r3, r1, r2, r5
   b51a6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b51aa:	2b09      	cmp	r3, #9
   b51ac:	bf94      	ite	ls
   b51ae:	3330      	addls	r3, #48	; 0x30
   b51b0:	3337      	addhi	r3, #55	; 0x37
   b51b2:	b2db      	uxtb	r3, r3
  } while(n);
   b51b4:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b51b6:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b51ba:	d9ef      	bls.n	b519c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b51bc:	4621      	mov	r1, r4
   b51be:	f7ff ffab 	bl	b5118 <_ZN5Print5writeEPKc>
}
   b51c2:	b00b      	add	sp, #44	; 0x2c
   b51c4:	bd30      	pop	{r4, r5, pc}

000b51c6 <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   b51c6:	b510      	push	{r4, lr}
  if (0 == max) {
   b51c8:	4604      	mov	r4, r0
   b51ca:	b128      	cbz	r0, b51d8 <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
   b51cc:	f000 fb12 	bl	b57f4 <rand>
   b51d0:	fb90 f3f4 	sdiv	r3, r0, r4
   b51d4:	fb03 0414 	mls	r4, r3, r4, r0
}
   b51d8:	4620      	mov	r0, r4
   b51da:	bd10      	pop	{r4, pc}

000b51dc <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
   b51dc:	4288      	cmp	r0, r1
{
   b51de:	b510      	push	{r4, lr}
   b51e0:	4604      	mov	r4, r0
  if (min >= max) {
   b51e2:	da03      	bge.n	b51ec <_Z6randomii+0x10>
    return min;
  }
  return random(max - min) + min;
   b51e4:	1a08      	subs	r0, r1, r0
   b51e6:	f7ff ffee 	bl	b51c6 <_Z6randomi>
   b51ea:	4404      	add	r4, r0
}
   b51ec:	4620      	mov	r0, r4
   b51ee:	bd10      	pop	{r4, pc}

000b51f0 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b51f0:	4b01      	ldr	r3, [pc, #4]	; (b51f8 <_GLOBAL__sub_I_RGB+0x8>)
   b51f2:	2200      	movs	r2, #0
   b51f4:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b51f6:	4770      	bx	lr
   b51f8:	2003e6d0 	.word	0x2003e6d0

000b51fc <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b51fc:	b510      	push	{r4, lr}
   b51fe:	4604      	mov	r4, r0
   b5200:	4608      	mov	r0, r1
{
    _spi = spi;
   b5202:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b5204:	f7ff fc66 	bl	b4ad4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b5208:	2300      	movs	r3, #0
   b520a:	6063      	str	r3, [r4, #4]
}
   b520c:	4620      	mov	r0, r4
   b520e:	bd10      	pop	{r4, pc}

000b5210 <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
   b5210:	6883      	ldr	r3, [r0, #8]
   b5212:	428b      	cmp	r3, r1
   b5214:	d903      	bls.n	b521e <_ZNK6StringixEj+0xe>
   b5216:	6800      	ldr	r0, [r0, #0]
   b5218:	b110      	cbz	r0, b5220 <_ZNK6StringixEj+0x10>
	return buffer[index];
   b521a:	5c40      	ldrb	r0, [r0, r1]
   b521c:	4770      	bx	lr
	if (index >= len || !buffer) return 0;
   b521e:	2000      	movs	r0, #0
}
   b5220:	4770      	bx	lr

000b5222 <_ZNK6String6charAtEj>:
	return operator[](loc);
   b5222:	f7ff bff5 	b.w	b5210 <_ZNK6StringixEj>
	...

000b5228 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b5228:	4b05      	ldr	r3, [pc, #20]	; (b5240 <_GLOBAL__sub_I_System+0x18>)
   b522a:	2202      	movs	r2, #2
   b522c:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b522e:	4b05      	ldr	r3, [pc, #20]	; (b5244 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b5230:	4a05      	ldr	r2, [pc, #20]	; (b5248 <_GLOBAL__sub_I_System+0x20>)
   b5232:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b5234:	2000      	movs	r0, #0
   b5236:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b523a:	f7ff bcd3 	b.w	b4be4 <set_system_mode>
   b523e:	bf00      	nop
   b5240:	2003e6ec 	.word	0x2003e6ec
   b5244:	2003e6e0 	.word	0x2003e6e0
   b5248:	ffff0000 	.word	0xffff0000

000b524c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b524c:	4b02      	ldr	r3, [pc, #8]	; (b5258 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b524e:	681a      	ldr	r2, [r3, #0]
   b5250:	4b02      	ldr	r3, [pc, #8]	; (b525c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b5252:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b5254:	4770      	bx	lr
   b5256:	bf00      	nop
   b5258:	2003e608 	.word	0x2003e608
   b525c:	2003e6f0 	.word	0x2003e6f0

000b5260 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b5260:	4770      	bx	lr

000b5262 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5262:	7441      	strb	r1, [r0, #17]
}
   b5264:	4770      	bx	lr

000b5266 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b5266:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b5268:	7c00      	ldrb	r0, [r0, #16]
   b526a:	f7ff fc73 	bl	b4b54 <hal_usart_available_data_for_write>
}
   b526e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5272:	bd08      	pop	{r3, pc}

000b5274 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b5274:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b5276:	7c00      	ldrb	r0, [r0, #16]
   b5278:	f7ff fc44 	bl	b4b04 <hal_usart_available>
}
   b527c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5280:	bd08      	pop	{r3, pc}

000b5282 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b5282:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b5284:	7c00      	ldrb	r0, [r0, #16]
   b5286:	f7ff fc4d 	bl	b4b24 <hal_usart_peek>
}
   b528a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b528e:	bd08      	pop	{r3, pc}

000b5290 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b5290:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b5292:	7c00      	ldrb	r0, [r0, #16]
   b5294:	f7ff fc3e 	bl	b4b14 <hal_usart_read>
}
   b5298:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b529c:	bd08      	pop	{r3, pc}

000b529e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b529e:	7c00      	ldrb	r0, [r0, #16]
   b52a0:	f7ff bc48 	b.w	b4b34 <hal_usart_flush>

000b52a4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b52a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b52a6:	7c45      	ldrb	r5, [r0, #17]
{
   b52a8:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b52aa:	b12d      	cbz	r5, b52b8 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b52ac:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b52ae:	b003      	add	sp, #12
   b52b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b52b4:	f7ff bc1e 	b.w	b4af4 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b52b8:	7c00      	ldrb	r0, [r0, #16]
   b52ba:	9101      	str	r1, [sp, #4]
   b52bc:	f7ff fc4a 	bl	b4b54 <hal_usart_available_data_for_write>
   b52c0:	2800      	cmp	r0, #0
   b52c2:	9901      	ldr	r1, [sp, #4]
   b52c4:	dcf2      	bgt.n	b52ac <_ZN11USARTSerial5writeEh+0x8>
}
   b52c6:	4628      	mov	r0, r5
   b52c8:	b003      	add	sp, #12
   b52ca:	bd30      	pop	{r4, r5, pc}

000b52cc <_ZN11USARTSerialD0Ev>:
   b52cc:	b510      	push	{r4, lr}
   b52ce:	2114      	movs	r1, #20
   b52d0:	4604      	mov	r4, r0
   b52d2:	f7fe fee0 	bl	b4096 <_ZdlPvj>
   b52d6:	4620      	mov	r0, r4
   b52d8:	bd10      	pop	{r4, pc}
	...

000b52dc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b52dc:	b510      	push	{r4, lr}
   b52de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b52e2:	4604      	mov	r4, r0
   b52e4:	4608      	mov	r0, r1
   b52e6:	4611      	mov	r1, r2
   b52e8:	2200      	movs	r2, #0
   b52ea:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b52ee:	4b04      	ldr	r3, [pc, #16]	; (b5300 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b52f0:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b52f2:	2301      	movs	r3, #1
  _serial = serial;
   b52f4:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b52f6:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b52f8:	f7ff fc34 	bl	b4b64 <hal_usart_init_ex>
}
   b52fc:	4620      	mov	r0, r4
   b52fe:	bd10      	pop	{r4, pc}
   b5300:	000b5ad4 	.word	0x000b5ad4

000b5304 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5304:	7441      	strb	r1, [r0, #17]
}
   b5306:	4770      	bx	lr

000b5308 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5308:	4770      	bx	lr

000b530a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b530a:	4770      	bx	lr

000b530c <_ZN9USBSerial4readEv>:
{
   b530c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b530e:	2100      	movs	r1, #0
   b5310:	7c00      	ldrb	r0, [r0, #16]
   b5312:	f7ff fc4f 	bl	b4bb4 <HAL_USB_USART_Receive_Data>
}
   b5316:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b531a:	bd08      	pop	{r3, pc}

000b531c <_ZN9USBSerial4peekEv>:
{
   b531c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b531e:	2101      	movs	r1, #1
   b5320:	7c00      	ldrb	r0, [r0, #16]
   b5322:	f7ff fc47 	bl	b4bb4 <HAL_USB_USART_Receive_Data>
}
   b5326:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b532a:	bd08      	pop	{r3, pc}

000b532c <_ZN9USBSerial17availableForWriteEv>:
{
   b532c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b532e:	7c00      	ldrb	r0, [r0, #16]
   b5330:	f7ff fc38 	bl	b4ba4 <HAL_USB_USART_Available_Data_For_Write>
}
   b5334:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5338:	bd08      	pop	{r3, pc}

000b533a <_ZN9USBSerial9availableEv>:
{
   b533a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b533c:	7c00      	ldrb	r0, [r0, #16]
   b533e:	f7ff fc29 	bl	b4b94 <HAL_USB_USART_Available_Data>
}
   b5342:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5346:	bd08      	pop	{r3, pc}

000b5348 <_ZN9USBSerial5writeEh>:
{
   b5348:	b513      	push	{r0, r1, r4, lr}
   b534a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b534c:	7c00      	ldrb	r0, [r0, #16]
{
   b534e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5350:	f7ff fc28 	bl	b4ba4 <HAL_USB_USART_Available_Data_For_Write>
   b5354:	2800      	cmp	r0, #0
   b5356:	9901      	ldr	r1, [sp, #4]
   b5358:	dc01      	bgt.n	b535e <_ZN9USBSerial5writeEh+0x16>
   b535a:	7c60      	ldrb	r0, [r4, #17]
   b535c:	b120      	cbz	r0, b5368 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b535e:	7c20      	ldrb	r0, [r4, #16]
   b5360:	f7ff fc30 	bl	b4bc4 <HAL_USB_USART_Send_Data>
   b5364:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b5368:	b002      	add	sp, #8
   b536a:	bd10      	pop	{r4, pc}

000b536c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b536c:	7c00      	ldrb	r0, [r0, #16]
   b536e:	f7ff bc31 	b.w	b4bd4 <HAL_USB_USART_Flush_Data>

000b5372 <_ZN9USBSerialD0Ev>:
   b5372:	b510      	push	{r4, lr}
   b5374:	2114      	movs	r1, #20
   b5376:	4604      	mov	r4, r0
   b5378:	f7fe fe8d 	bl	b4096 <_ZdlPvj>
   b537c:	4620      	mov	r0, r4
   b537e:	bd10      	pop	{r4, pc}

000b5380 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b5380:	b510      	push	{r4, lr}
   b5382:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5386:	4604      	mov	r4, r0
   b5388:	4608      	mov	r0, r1
   b538a:	2100      	movs	r1, #0
   b538c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b5390:	4b04      	ldr	r3, [pc, #16]	; (b53a4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b5392:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5394:	2301      	movs	r3, #1
  _serial = serial;
   b5396:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5398:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b539a:	4611      	mov	r1, r2
   b539c:	f7ff fbea 	bl	b4b74 <HAL_USB_USART_Init>
}
   b53a0:	4620      	mov	r0, r4
   b53a2:	bd10      	pop	{r4, pc}
   b53a4:	000b5b04 	.word	0x000b5b04

000b53a8 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b53a8:	7c00      	ldrb	r0, [r0, #16]
   b53aa:	2200      	movs	r2, #0
   b53ac:	f7ff bbea 	b.w	b4b84 <HAL_USB_USART_Begin>

000b53b0 <_Z19acquireSerialBufferv>:
{
   b53b0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b53b2:	2214      	movs	r2, #20
{
   b53b4:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b53b6:	2100      	movs	r1, #0
   b53b8:	f000 f9e6 	bl	b5788 <memset>
}
   b53bc:	4620      	mov	r0, r4
   b53be:	bd10      	pop	{r4, pc}

000b53c0 <_Z16_fetch_usbserialv>:
{
   b53c0:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b53c2:	4c0f      	ldr	r4, [pc, #60]	; (b5400 <_Z16_fetch_usbserialv+0x40>)
{
   b53c4:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b53c6:	a803      	add	r0, sp, #12
   b53c8:	f7ff fff2 	bl	b53b0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b53cc:	7821      	ldrb	r1, [r4, #0]
   b53ce:	f3bf 8f5b 	dmb	ish
   b53d2:	f011 0101 	ands.w	r1, r1, #1
   b53d6:	d10f      	bne.n	b53f8 <_Z16_fetch_usbserialv+0x38>
   b53d8:	4620      	mov	r0, r4
   b53da:	9101      	str	r1, [sp, #4]
   b53dc:	f7fe fe5d 	bl	b409a <__cxa_guard_acquire>
   b53e0:	9901      	ldr	r1, [sp, #4]
   b53e2:	b148      	cbz	r0, b53f8 <_Z16_fetch_usbserialv+0x38>
   b53e4:	aa03      	add	r2, sp, #12
   b53e6:	4807      	ldr	r0, [pc, #28]	; (b5404 <_Z16_fetch_usbserialv+0x44>)
   b53e8:	f7ff ffca 	bl	b5380 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b53ec:	4620      	mov	r0, r4
   b53ee:	f7fe fe59 	bl	b40a4 <__cxa_guard_release>
   b53f2:	4805      	ldr	r0, [pc, #20]	; (b5408 <_Z16_fetch_usbserialv+0x48>)
   b53f4:	f000 f9b4 	bl	b5760 <atexit>
	return _usbserial;
}
   b53f8:	4802      	ldr	r0, [pc, #8]	; (b5404 <_Z16_fetch_usbserialv+0x44>)
   b53fa:	b008      	add	sp, #32
   b53fc:	bd10      	pop	{r4, pc}
   b53fe:	bf00      	nop
   b5400:	2003e6f4 	.word	0x2003e6f4
   b5404:	2003e6f8 	.word	0x2003e6f8
   b5408:	000b5309 	.word	0x000b5309

000b540c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b540c:	2200      	movs	r2, #0
   b540e:	6840      	ldr	r0, [r0, #4]
   b5410:	4611      	mov	r1, r2
   b5412:	f7ff bc33 	b.w	b4c7c <network_ready>

000b5416 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5416:	2200      	movs	r2, #0
   b5418:	6840      	ldr	r0, [r0, #4]
   b541a:	4611      	mov	r1, r2
   b541c:	f7ff bc4e 	b.w	b4cbc <network_listening>

000b5420 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5420:	2200      	movs	r2, #0
   b5422:	6840      	ldr	r0, [r0, #4]
   b5424:	4611      	mov	r1, r2
   b5426:	f7ff bc59 	b.w	b4cdc <network_get_listen_timeout>

000b542a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b542a:	6840      	ldr	r0, [r0, #4]
   b542c:	2200      	movs	r2, #0
   b542e:	f7ff bc4d 	b.w	b4ccc <network_set_listen_timeout>

000b5432 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5432:	6840      	ldr	r0, [r0, #4]
   b5434:	2200      	movs	r2, #0
   b5436:	f081 0101 	eor.w	r1, r1, #1
   b543a:	f7ff bc37 	b.w	b4cac <network_listen>

000b543e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b543e:	2300      	movs	r3, #0
   b5440:	6840      	ldr	r0, [r0, #4]
   b5442:	461a      	mov	r2, r3
   b5444:	4619      	mov	r1, r3
   b5446:	f7ff bc29 	b.w	b4c9c <network_off>

000b544a <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b544a:	2300      	movs	r3, #0
   b544c:	6840      	ldr	r0, [r0, #4]
   b544e:	461a      	mov	r2, r3
   b5450:	4619      	mov	r1, r3
   b5452:	f7ff bc1b 	b.w	b4c8c <network_on>

000b5456 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5456:	2200      	movs	r2, #0
   b5458:	6840      	ldr	r0, [r0, #4]
   b545a:	4611      	mov	r1, r2
   b545c:	f7ff bbfe 	b.w	b4c5c <network_connecting>

000b5460 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5460:	6840      	ldr	r0, [r0, #4]
   b5462:	2200      	movs	r2, #0
   b5464:	2102      	movs	r1, #2
   b5466:	f7ff bc01 	b.w	b4c6c <network_disconnect>

000b546a <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b546a:	2300      	movs	r3, #0
   b546c:	6840      	ldr	r0, [r0, #4]
   b546e:	461a      	mov	r2, r3
   b5470:	f7ff bbec 	b.w	b4c4c <network_connect>

000b5474 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b5474:	4b02      	ldr	r3, [pc, #8]	; (b5480 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b5476:	2204      	movs	r2, #4
   b5478:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b547a:	4a02      	ldr	r2, [pc, #8]	; (b5484 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b547c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b547e:	4770      	bx	lr
   b5480:	2003e70c 	.word	0x2003e70c
   b5484:	000b5b34 	.word	0x000b5b34

000b5488 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b5488:	4b01      	ldr	r3, [pc, #4]	; (b5490 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b548a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b548c:	4770      	bx	lr
   b548e:	bf00      	nop
   b5490:	2003e60c 	.word	0x2003e60c

000b5494 <serialEventRun>:
{
   b5494:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b5496:	4b0b      	ldr	r3, [pc, #44]	; (b54c4 <serialEventRun+0x30>)
   b5498:	b143      	cbz	r3, b54ac <serialEventRun+0x18>
   b549a:	f7ff ff91 	bl	b53c0 <_Z16_fetch_usbserialv>
   b549e:	6803      	ldr	r3, [r0, #0]
   b54a0:	691b      	ldr	r3, [r3, #16]
   b54a2:	4798      	blx	r3
   b54a4:	2800      	cmp	r0, #0
   b54a6:	dd01      	ble.n	b54ac <serialEventRun+0x18>
        serialEvent();
   b54a8:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b54ac:	4b06      	ldr	r3, [pc, #24]	; (b54c8 <serialEventRun+0x34>)
   b54ae:	b143      	cbz	r3, b54c2 <serialEventRun+0x2e>
   b54b0:	f000 f930 	bl	b5714 <_Z22__fetch_global_Serial1v>
   b54b4:	6803      	ldr	r3, [r0, #0]
   b54b6:	691b      	ldr	r3, [r3, #16]
   b54b8:	4798      	blx	r3
   b54ba:	2800      	cmp	r0, #0
   b54bc:	dd01      	ble.n	b54c2 <serialEventRun+0x2e>
        serialEvent1();
   b54be:	f3af 8000 	nop.w
}
   b54c2:	bd08      	pop	{r3, pc}
	...

000b54cc <_post_loop>:
{
   b54cc:	b508      	push	{r3, lr}
	serialEventRun();
   b54ce:	f7ff ffe1 	bl	b5494 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b54d2:	f7ff fa67 	bl	b49a4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b54d6:	4b01      	ldr	r3, [pc, #4]	; (b54dc <_post_loop+0x10>)
   b54d8:	6018      	str	r0, [r3, #0]
}
   b54da:	bd08      	pop	{r3, pc}
   b54dc:	2003e728 	.word	0x2003e728

000b54e0 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b54e0:	4805      	ldr	r0, [pc, #20]	; (b54f8 <_Z33system_initialize_user_backup_ramv+0x18>)
   b54e2:	4a06      	ldr	r2, [pc, #24]	; (b54fc <_Z33system_initialize_user_backup_ramv+0x1c>)
   b54e4:	4906      	ldr	r1, [pc, #24]	; (b5500 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b54e6:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b54e8:	1a12      	subs	r2, r2, r0
   b54ea:	f000 f93f 	bl	b576c <memcpy>
    __backup_sram_signature = signature;
   b54ee:	4b05      	ldr	r3, [pc, #20]	; (b5504 <_Z33system_initialize_user_backup_ramv+0x24>)
   b54f0:	4a05      	ldr	r2, [pc, #20]	; (b5508 <_Z33system_initialize_user_backup_ramv+0x28>)
   b54f2:	601a      	str	r2, [r3, #0]
}
   b54f4:	bd08      	pop	{r3, pc}
   b54f6:	bf00      	nop
   b54f8:	2003f400 	.word	0x2003f400
   b54fc:	2003f404 	.word	0x2003f404
   b5500:	000b5c34 	.word	0x000b5c34
   b5504:	2003f400 	.word	0x2003f400
   b5508:	9a271c1e 	.word	0x9a271c1e

000b550c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b550c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b550e:	2300      	movs	r3, #0
   b5510:	9300      	str	r3, [sp, #0]
   b5512:	461a      	mov	r2, r3
   b5514:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5518:	f7ff fb7e 	bl	b4c18 <system_ctrl_set_result>
}
   b551c:	b003      	add	sp, #12
   b551e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b5524 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b5524:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b5526:	8843      	ldrh	r3, [r0, #2]
   b5528:	2b0a      	cmp	r3, #10
   b552a:	d008      	beq.n	b553e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b552c:	2b50      	cmp	r3, #80	; 0x50
   b552e:	d10b      	bne.n	b5548 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b5530:	4b09      	ldr	r3, [pc, #36]	; (b5558 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b5532:	681b      	ldr	r3, [r3, #0]
   b5534:	b14b      	cbz	r3, b554a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b5536:	b003      	add	sp, #12
   b5538:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b553c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b553e:	f7ff ffe5 	bl	b550c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b5542:	b003      	add	sp, #12
   b5544:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5548:	2300      	movs	r3, #0
   b554a:	9300      	str	r3, [sp, #0]
   b554c:	461a      	mov	r2, r3
   b554e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5552:	f7ff fb61 	bl	b4c18 <system_ctrl_set_result>
}
   b5556:	e7f4      	b.n	b5542 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b5558:	2003e718 	.word	0x2003e718

000b555c <module_user_init_hook>:
{
   b555c:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b555e:	4812      	ldr	r0, [pc, #72]	; (b55a8 <module_user_init_hook+0x4c>)
   b5560:	2100      	movs	r1, #0
   b5562:	f7ff fbeb 	bl	b4d3c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b5566:	4b11      	ldr	r3, [pc, #68]	; (b55ac <module_user_init_hook+0x50>)
   b5568:	681a      	ldr	r2, [r3, #0]
   b556a:	4b11      	ldr	r3, [pc, #68]	; (b55b0 <module_user_init_hook+0x54>)
   b556c:	429a      	cmp	r2, r3
   b556e:	4b11      	ldr	r3, [pc, #68]	; (b55b4 <module_user_init_hook+0x58>)
   b5570:	bf0c      	ite	eq
   b5572:	2201      	moveq	r2, #1
   b5574:	2200      	movne	r2, #0
   b5576:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b5578:	d001      	beq.n	b557e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b557a:	f7ff ffb1 	bl	b54e0 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b557e:	f7ff f9f9 	bl	b4974 <HAL_RNG_GetRandomNumber>
   b5582:	4604      	mov	r4, r0
    srand(seed);
   b5584:	f000 f908 	bl	b5798 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b5588:	4b0b      	ldr	r3, [pc, #44]	; (b55b8 <module_user_init_hook+0x5c>)
   b558a:	b113      	cbz	r3, b5592 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b558c:	4620      	mov	r0, r4
   b558e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b5592:	2100      	movs	r1, #0
   b5594:	4808      	ldr	r0, [pc, #32]	; (b55b8 <module_user_init_hook+0x5c>)
   b5596:	f7ff fb51 	bl	b4c3c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b559a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b559e:	4807      	ldr	r0, [pc, #28]	; (b55bc <module_user_init_hook+0x60>)
   b55a0:	2100      	movs	r1, #0
   b55a2:	f7ff bb2f 	b.w	b4c04 <system_ctrl_set_app_request_handler>
   b55a6:	bf00      	nop
   b55a8:	000b5489 	.word	0x000b5489
   b55ac:	2003f400 	.word	0x2003f400
   b55b0:	9a271c1e 	.word	0x9a271c1e
   b55b4:	2003e714 	.word	0x2003e714
   b55b8:	00000000 	.word	0x00000000
   b55bc:	000b5525 	.word	0x000b5525

000b55c0 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b55c0:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b55c2:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b55c4:	d902      	bls.n	b55cc <pinAvailable+0xc>
    return false;
   b55c6:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b55c8:	b002      	add	sp, #8
   b55ca:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b55cc:	f1a0 030b 	sub.w	r3, r0, #11
   b55d0:	2b02      	cmp	r3, #2
   b55d2:	d81a      	bhi.n	b560a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b55d4:	4c17      	ldr	r4, [pc, #92]	; (b5634 <pinAvailable+0x74>)
   b55d6:	7821      	ldrb	r1, [r4, #0]
   b55d8:	f3bf 8f5b 	dmb	ish
   b55dc:	f011 0101 	ands.w	r1, r1, #1
   b55e0:	d10b      	bne.n	b55fa <pinAvailable+0x3a>
   b55e2:	4620      	mov	r0, r4
   b55e4:	9101      	str	r1, [sp, #4]
   b55e6:	f7fe fd58 	bl	b409a <__cxa_guard_acquire>
   b55ea:	9901      	ldr	r1, [sp, #4]
   b55ec:	b128      	cbz	r0, b55fa <pinAvailable+0x3a>
   b55ee:	4812      	ldr	r0, [pc, #72]	; (b5638 <pinAvailable+0x78>)
   b55f0:	f7ff fe04 	bl	b51fc <_ZN8SPIClassC1E19hal_spi_interface_t>
   b55f4:	4620      	mov	r0, r4
   b55f6:	f7fe fd55 	bl	b40a4 <__cxa_guard_release>
   b55fa:	4b0f      	ldr	r3, [pc, #60]	; (b5638 <pinAvailable+0x78>)
   b55fc:	7818      	ldrb	r0, [r3, #0]
   b55fe:	f7ff fa71 	bl	b4ae4 <hal_spi_is_enabled>
   b5602:	2800      	cmp	r0, #0
   b5604:	d1df      	bne.n	b55c6 <pinAvailable+0x6>
  return true; // 'pin' is available
   b5606:	2001      	movs	r0, #1
   b5608:	e7de      	b.n	b55c8 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b560a:	2801      	cmp	r0, #1
   b560c:	d809      	bhi.n	b5622 <pinAvailable+0x62>
   b560e:	f000 f841 	bl	b5694 <_Z19__fetch_global_Wirev>
   b5612:	2100      	movs	r1, #0
   b5614:	7c00      	ldrb	r0, [r0, #16]
   b5616:	f7ff fa25 	bl	b4a64 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b561a:	f080 0001 	eor.w	r0, r0, #1
   b561e:	b2c0      	uxtb	r0, r0
   b5620:	e7d2      	b.n	b55c8 <pinAvailable+0x8>
   b5622:	3809      	subs	r0, #9
   b5624:	2801      	cmp	r0, #1
   b5626:	d8ee      	bhi.n	b5606 <pinAvailable+0x46>
   b5628:	f000 f874 	bl	b5714 <_Z22__fetch_global_Serial1v>
   b562c:	7c00      	ldrb	r0, [r0, #16]
   b562e:	f7ff fa89 	bl	b4b44 <hal_usart_is_enabled>
   b5632:	e7f2      	b.n	b561a <pinAvailable+0x5a>
   b5634:	2003e71c 	.word	0x2003e71c
   b5638:	2003e720 	.word	0x2003e720

000b563c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b563c:	2823      	cmp	r0, #35	; 0x23
{
   b563e:	b538      	push	{r3, r4, r5, lr}
   b5640:	4604      	mov	r4, r0
   b5642:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5644:	d80a      	bhi.n	b565c <pinMode+0x20>
   b5646:	29ff      	cmp	r1, #255	; 0xff
   b5648:	d008      	beq.n	b565c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b564a:	f7ff ffb9 	bl	b55c0 <pinAvailable>
   b564e:	b128      	cbz	r0, b565c <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b5650:	4629      	mov	r1, r5
   b5652:	4620      	mov	r0, r4
}
   b5654:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b5658:	f7ff b9b4 	b.w	b49c4 <HAL_Pin_Mode>
}
   b565c:	bd38      	pop	{r3, r4, r5, pc}

000b565e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b565e:	b538      	push	{r3, r4, r5, lr}
   b5660:	4604      	mov	r4, r0
   b5662:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b5664:	f7ff f9b6 	bl	b49d4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b5668:	28ff      	cmp	r0, #255	; 0xff
   b566a:	d010      	beq.n	b568e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b566c:	2806      	cmp	r0, #6
   b566e:	d804      	bhi.n	b567a <digitalWrite+0x1c>
   b5670:	234d      	movs	r3, #77	; 0x4d
   b5672:	fa23 f000 	lsr.w	r0, r3, r0
   b5676:	07c3      	lsls	r3, r0, #31
   b5678:	d409      	bmi.n	b568e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b567a:	4620      	mov	r0, r4
   b567c:	f7ff ffa0 	bl	b55c0 <pinAvailable>
   b5680:	b128      	cbz	r0, b568e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b5682:	4629      	mov	r1, r5
   b5684:	4620      	mov	r0, r4
}
   b5686:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b568a:	f7ff b9ab 	b.w	b49e4 <HAL_GPIO_Write>
}
   b568e:	bd38      	pop	{r3, r4, r5, pc}

000b5690 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5690:	4770      	bx	lr
	...

000b5694 <_Z19__fetch_global_Wirev>:
{
   b5694:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5696:	4d0e      	ldr	r5, [pc, #56]	; (b56d0 <_Z19__fetch_global_Wirev+0x3c>)
   b5698:	7829      	ldrb	r1, [r5, #0]
   b569a:	f3bf 8f5b 	dmb	ish
   b569e:	f011 0401 	ands.w	r4, r1, #1
{
   b56a2:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b56a4:	d111      	bne.n	b56ca <_Z19__fetch_global_Wirev+0x36>
   b56a6:	4628      	mov	r0, r5
   b56a8:	f7fe fcf7 	bl	b409a <__cxa_guard_acquire>
   b56ac:	b168      	cbz	r0, b56ca <_Z19__fetch_global_Wirev+0x36>
   b56ae:	a801      	add	r0, sp, #4
   b56b0:	f7fe fea2 	bl	b43f8 <_Z17acquireWireBufferv>
   b56b4:	aa01      	add	r2, sp, #4
   b56b6:	4621      	mov	r1, r4
   b56b8:	4806      	ldr	r0, [pc, #24]	; (b56d4 <_Z19__fetch_global_Wirev+0x40>)
   b56ba:	f7ff fbbd 	bl	b4e38 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b56be:	4628      	mov	r0, r5
   b56c0:	f7fe fcf0 	bl	b40a4 <__cxa_guard_release>
   b56c4:	4804      	ldr	r0, [pc, #16]	; (b56d8 <_Z19__fetch_global_Wirev+0x44>)
   b56c6:	f000 f84b 	bl	b5760 <atexit>
	return wire;
}
   b56ca:	4802      	ldr	r0, [pc, #8]	; (b56d4 <_Z19__fetch_global_Wirev+0x40>)
   b56cc:	b007      	add	sp, #28
   b56ce:	bd30      	pop	{r4, r5, pc}
   b56d0:	2003e72c 	.word	0x2003e72c
   b56d4:	2003e730 	.word	0x2003e730
   b56d8:	000b5691 	.word	0x000b5691

000b56dc <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b56dc:	4770      	bx	lr
	...

000b56e0 <_Z20acquireSerial1Bufferv>:
{
   b56e0:	b538      	push	{r3, r4, r5, lr}
   b56e2:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b56e4:	2514      	movs	r5, #20
   b56e6:	462a      	mov	r2, r5
   b56e8:	2100      	movs	r1, #0
   b56ea:	f000 f84d 	bl	b5788 <memset>
   b56ee:	8025      	strh	r5, [r4, #0]
   b56f0:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b56f2:	4907      	ldr	r1, [pc, #28]	; (b5710 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b56f4:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b56f6:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b56f8:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b56fa:	f000 f82f 	bl	b575c <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b56fe:	4904      	ldr	r1, [pc, #16]	; (b5710 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b5700:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5702:	4628      	mov	r0, r5
   b5704:	f000 f82a 	bl	b575c <_ZnajRKSt9nothrow_t>
    };
   b5708:	60e0      	str	r0, [r4, #12]
}
   b570a:	4620      	mov	r0, r4
   b570c:	bd38      	pop	{r3, r4, r5, pc}
   b570e:	bf00      	nop
   b5710:	000b5b68 	.word	0x000b5b68

000b5714 <_Z22__fetch_global_Serial1v>:
{
   b5714:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5716:	4d0e      	ldr	r5, [pc, #56]	; (b5750 <_Z22__fetch_global_Serial1v+0x3c>)
   b5718:	7829      	ldrb	r1, [r5, #0]
   b571a:	f3bf 8f5b 	dmb	ish
   b571e:	f011 0401 	ands.w	r4, r1, #1
{
   b5722:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5724:	d111      	bne.n	b574a <_Z22__fetch_global_Serial1v+0x36>
   b5726:	4628      	mov	r0, r5
   b5728:	f7fe fcb7 	bl	b409a <__cxa_guard_acquire>
   b572c:	b168      	cbz	r0, b574a <_Z22__fetch_global_Serial1v+0x36>
   b572e:	a801      	add	r0, sp, #4
   b5730:	f7ff ffd6 	bl	b56e0 <_Z20acquireSerial1Bufferv>
   b5734:	aa01      	add	r2, sp, #4
   b5736:	4621      	mov	r1, r4
   b5738:	4806      	ldr	r0, [pc, #24]	; (b5754 <_Z22__fetch_global_Serial1v+0x40>)
   b573a:	f7ff fdcf 	bl	b52dc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b573e:	4628      	mov	r0, r5
   b5740:	f7fe fcb0 	bl	b40a4 <__cxa_guard_release>
   b5744:	4804      	ldr	r0, [pc, #16]	; (b5758 <_Z22__fetch_global_Serial1v+0x44>)
   b5746:	f000 f80b 	bl	b5760 <atexit>
    return serial1;
}
   b574a:	4802      	ldr	r0, [pc, #8]	; (b5754 <_Z22__fetch_global_Serial1v+0x40>)
   b574c:	b007      	add	sp, #28
   b574e:	bd30      	pop	{r4, r5, pc}
   b5750:	2003e744 	.word	0x2003e744
   b5754:	2003e748 	.word	0x2003e748
   b5758:	000b56dd 	.word	0x000b56dd

000b575c <_ZnajRKSt9nothrow_t>:
   b575c:	f7fe bc99 	b.w	b4092 <_Znaj>

000b5760 <atexit>:
   b5760:	2300      	movs	r3, #0
   b5762:	4601      	mov	r1, r0
   b5764:	461a      	mov	r2, r3
   b5766:	4618      	mov	r0, r3
   b5768:	f000 b88a 	b.w	b5880 <__register_exitproc>

000b576c <memcpy>:
   b576c:	440a      	add	r2, r1
   b576e:	4291      	cmp	r1, r2
   b5770:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b5774:	d100      	bne.n	b5778 <memcpy+0xc>
   b5776:	4770      	bx	lr
   b5778:	b510      	push	{r4, lr}
   b577a:	f811 4b01 	ldrb.w	r4, [r1], #1
   b577e:	f803 4f01 	strb.w	r4, [r3, #1]!
   b5782:	4291      	cmp	r1, r2
   b5784:	d1f9      	bne.n	b577a <memcpy+0xe>
   b5786:	bd10      	pop	{r4, pc}

000b5788 <memset>:
   b5788:	4402      	add	r2, r0
   b578a:	4603      	mov	r3, r0
   b578c:	4293      	cmp	r3, r2
   b578e:	d100      	bne.n	b5792 <memset+0xa>
   b5790:	4770      	bx	lr
   b5792:	f803 1b01 	strb.w	r1, [r3], #1
   b5796:	e7f9      	b.n	b578c <memset+0x4>

000b5798 <srand>:
   b5798:	b538      	push	{r3, r4, r5, lr}
   b579a:	4b10      	ldr	r3, [pc, #64]	; (b57dc <srand+0x44>)
   b579c:	681d      	ldr	r5, [r3, #0]
   b579e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b57a0:	4604      	mov	r4, r0
   b57a2:	b9b3      	cbnz	r3, b57d2 <srand+0x3a>
   b57a4:	2018      	movs	r0, #24
   b57a6:	f7ff fab1 	bl	b4d0c <malloc>
   b57aa:	4602      	mov	r2, r0
   b57ac:	63a8      	str	r0, [r5, #56]	; 0x38
   b57ae:	b920      	cbnz	r0, b57ba <srand+0x22>
   b57b0:	4b0b      	ldr	r3, [pc, #44]	; (b57e0 <srand+0x48>)
   b57b2:	480c      	ldr	r0, [pc, #48]	; (b57e4 <srand+0x4c>)
   b57b4:	2142      	movs	r1, #66	; 0x42
   b57b6:	f7ff fab9 	bl	b4d2c <__assert_func>
   b57ba:	490b      	ldr	r1, [pc, #44]	; (b57e8 <srand+0x50>)
   b57bc:	4b0b      	ldr	r3, [pc, #44]	; (b57ec <srand+0x54>)
   b57be:	e9c0 1300 	strd	r1, r3, [r0]
   b57c2:	4b0b      	ldr	r3, [pc, #44]	; (b57f0 <srand+0x58>)
   b57c4:	6083      	str	r3, [r0, #8]
   b57c6:	230b      	movs	r3, #11
   b57c8:	8183      	strh	r3, [r0, #12]
   b57ca:	2100      	movs	r1, #0
   b57cc:	2001      	movs	r0, #1
   b57ce:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b57d2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b57d4:	2200      	movs	r2, #0
   b57d6:	611c      	str	r4, [r3, #16]
   b57d8:	615a      	str	r2, [r3, #20]
   b57da:	bd38      	pop	{r3, r4, r5, pc}
   b57dc:	2003e60c 	.word	0x2003e60c
   b57e0:	000b5b69 	.word	0x000b5b69
   b57e4:	000b5b80 	.word	0x000b5b80
   b57e8:	abcd330e 	.word	0xabcd330e
   b57ec:	e66d1234 	.word	0xe66d1234
   b57f0:	0005deec 	.word	0x0005deec

000b57f4 <rand>:
   b57f4:	4b16      	ldr	r3, [pc, #88]	; (b5850 <rand+0x5c>)
   b57f6:	b510      	push	{r4, lr}
   b57f8:	681c      	ldr	r4, [r3, #0]
   b57fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   b57fc:	b9b3      	cbnz	r3, b582c <rand+0x38>
   b57fe:	2018      	movs	r0, #24
   b5800:	f7ff fa84 	bl	b4d0c <malloc>
   b5804:	63a0      	str	r0, [r4, #56]	; 0x38
   b5806:	b928      	cbnz	r0, b5814 <rand+0x20>
   b5808:	4602      	mov	r2, r0
   b580a:	4b12      	ldr	r3, [pc, #72]	; (b5854 <rand+0x60>)
   b580c:	4812      	ldr	r0, [pc, #72]	; (b5858 <rand+0x64>)
   b580e:	214e      	movs	r1, #78	; 0x4e
   b5810:	f7ff fa8c 	bl	b4d2c <__assert_func>
   b5814:	4a11      	ldr	r2, [pc, #68]	; (b585c <rand+0x68>)
   b5816:	4b12      	ldr	r3, [pc, #72]	; (b5860 <rand+0x6c>)
   b5818:	e9c0 2300 	strd	r2, r3, [r0]
   b581c:	4b11      	ldr	r3, [pc, #68]	; (b5864 <rand+0x70>)
   b581e:	6083      	str	r3, [r0, #8]
   b5820:	230b      	movs	r3, #11
   b5822:	8183      	strh	r3, [r0, #12]
   b5824:	2201      	movs	r2, #1
   b5826:	2300      	movs	r3, #0
   b5828:	e9c0 2304 	strd	r2, r3, [r0, #16]
   b582c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   b582e:	4a0e      	ldr	r2, [pc, #56]	; (b5868 <rand+0x74>)
   b5830:	6920      	ldr	r0, [r4, #16]
   b5832:	6963      	ldr	r3, [r4, #20]
   b5834:	490d      	ldr	r1, [pc, #52]	; (b586c <rand+0x78>)
   b5836:	4342      	muls	r2, r0
   b5838:	fb01 2203 	mla	r2, r1, r3, r2
   b583c:	fba0 0101 	umull	r0, r1, r0, r1
   b5840:	1c43      	adds	r3, r0, #1
   b5842:	eb42 0001 	adc.w	r0, r2, r1
   b5846:	e9c4 3004 	strd	r3, r0, [r4, #16]
   b584a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   b584e:	bd10      	pop	{r4, pc}
   b5850:	2003e60c 	.word	0x2003e60c
   b5854:	000b5b69 	.word	0x000b5b69
   b5858:	000b5b80 	.word	0x000b5b80
   b585c:	abcd330e 	.word	0xabcd330e
   b5860:	e66d1234 	.word	0xe66d1234
   b5864:	0005deec 	.word	0x0005deec
   b5868:	5851f42d 	.word	0x5851f42d
   b586c:	4c957f2d 	.word	0x4c957f2d

000b5870 <strlen>:
   b5870:	4603      	mov	r3, r0
   b5872:	f813 2b01 	ldrb.w	r2, [r3], #1
   b5876:	2a00      	cmp	r2, #0
   b5878:	d1fb      	bne.n	b5872 <strlen+0x2>
   b587a:	1a18      	subs	r0, r3, r0
   b587c:	3801      	subs	r0, #1
   b587e:	4770      	bx	lr

000b5880 <__register_exitproc>:
   b5880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5884:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b5940 <__register_exitproc+0xc0>
   b5888:	4606      	mov	r6, r0
   b588a:	f8d8 0000 	ldr.w	r0, [r8]
   b588e:	461f      	mov	r7, r3
   b5890:	460d      	mov	r5, r1
   b5892:	4691      	mov	r9, r2
   b5894:	f000 f856 	bl	b5944 <__retarget_lock_acquire_recursive>
   b5898:	4b25      	ldr	r3, [pc, #148]	; (b5930 <__register_exitproc+0xb0>)
   b589a:	681c      	ldr	r4, [r3, #0]
   b589c:	b934      	cbnz	r4, b58ac <__register_exitproc+0x2c>
   b589e:	4c25      	ldr	r4, [pc, #148]	; (b5934 <__register_exitproc+0xb4>)
   b58a0:	601c      	str	r4, [r3, #0]
   b58a2:	4b25      	ldr	r3, [pc, #148]	; (b5938 <__register_exitproc+0xb8>)
   b58a4:	b113      	cbz	r3, b58ac <__register_exitproc+0x2c>
   b58a6:	681b      	ldr	r3, [r3, #0]
   b58a8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b58ac:	6863      	ldr	r3, [r4, #4]
   b58ae:	2b1f      	cmp	r3, #31
   b58b0:	dd07      	ble.n	b58c2 <__register_exitproc+0x42>
   b58b2:	f8d8 0000 	ldr.w	r0, [r8]
   b58b6:	f000 f847 	bl	b5948 <__retarget_lock_release_recursive>
   b58ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b58be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b58c2:	b34e      	cbz	r6, b5918 <__register_exitproc+0x98>
   b58c4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b58c8:	b988      	cbnz	r0, b58ee <__register_exitproc+0x6e>
   b58ca:	4b1c      	ldr	r3, [pc, #112]	; (b593c <__register_exitproc+0xbc>)
   b58cc:	b923      	cbnz	r3, b58d8 <__register_exitproc+0x58>
   b58ce:	f8d8 0000 	ldr.w	r0, [r8]
   b58d2:	f000 f838 	bl	b5946 <__retarget_lock_release>
   b58d6:	e7f0      	b.n	b58ba <__register_exitproc+0x3a>
   b58d8:	f44f 7084 	mov.w	r0, #264	; 0x108
   b58dc:	f7ff fa16 	bl	b4d0c <malloc>
   b58e0:	2800      	cmp	r0, #0
   b58e2:	d0f4      	beq.n	b58ce <__register_exitproc+0x4e>
   b58e4:	2300      	movs	r3, #0
   b58e6:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b58ea:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b58ee:	6863      	ldr	r3, [r4, #4]
   b58f0:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b58f4:	2201      	movs	r2, #1
   b58f6:	409a      	lsls	r2, r3
   b58f8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b58fc:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b5900:	4313      	orrs	r3, r2
   b5902:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b5906:	2e02      	cmp	r6, #2
   b5908:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b590c:	bf02      	ittt	eq
   b590e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b5912:	4313      	orreq	r3, r2
   b5914:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b5918:	6863      	ldr	r3, [r4, #4]
   b591a:	f8d8 0000 	ldr.w	r0, [r8]
   b591e:	1c5a      	adds	r2, r3, #1
   b5920:	3302      	adds	r3, #2
   b5922:	6062      	str	r2, [r4, #4]
   b5924:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b5928:	f000 f80e 	bl	b5948 <__retarget_lock_release_recursive>
   b592c:	2000      	movs	r0, #0
   b592e:	e7c6      	b.n	b58be <__register_exitproc+0x3e>
   b5930:	2003e7e8 	.word	0x2003e7e8
   b5934:	2003e75c 	.word	0x2003e75c
   b5938:	00000000 	.word	0x00000000
   b593c:	000b4d0d 	.word	0x000b4d0d
   b5940:	2003e670 	.word	0x2003e670

000b5944 <__retarget_lock_acquire_recursive>:
   b5944:	4770      	bx	lr

000b5946 <__retarget_lock_release>:
   b5946:	4770      	bx	lr

000b5948 <__retarget_lock_release_recursive>:
   b5948:	4770      	bx	lr

000b594a <link_code_end>:
	...

000b594c <dynalib_user>:
   b594c:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b595c:	0000 0000 6572 7571 7365 2074 6572 6563     ....request rece
   b596c:	7669 6465 7200 7165 6575 7473 6d20 646f     ived.request mod
   b597c:	2065 0031 6572 7571 7365 2074 6f6d 6564     e 1.request mode
   b598c:	3220 7000 7361 0073 6166 6c69 6300 756f      2.pass.fail.cou
   b599c:	746e 203a 6400 7461 2061 6572 6563 7669     nt: .data receiv
   b59ac:	6465 203a 7200 6e61 6f64 696d 657a 6120     ed: .randomize a
   b59bc:	6464 6572 7373 2d00 2d2d 2d2d 2d2d 2d2d     ddress.---------
   b59cc:	2d2d 2d2d 2d2d 002d 6f63 7272 6365 2074     -------.correct 
   b59dc:	6461 7264 7365 0073                         address.

000b59e4 <CSWTCH.86>:
   b59e4:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
   b59f4:	0050 0000                                   P...

000b59f8 <_ZTVN5spark13EthernetClassE>:
	...
   b5a00:	4dc3 000b 4db9 000b 4daf 000b 4da5 000b     .M...M...M...M..
   b5a10:	4d99 000b 4d8d 000b 4fc9 000b 4fd1 000b     .M...M...O...O..
   b5a20:	4d81 000b 4d79 000b 4d6f 000b 4d65 000b     .M..yM..oM..eM..
   b5a30:	5001 000b                                   .P..

000b5a34 <_ZTV7TwoWire>:
	...
   b5a3c:	4de1 000b 4e2b 000b 4e03 000b 4de3 000b     .M..+N...N...M..
   b5a4c:	4e0b 000b 4e13 000b 4e1b 000b 4e23 000b     .N...N...N..#N..

000b5a5c <_ZTV9IPAddress>:
	...
   b5a64:	4e97 000b 4e87 000b 4e89 000b 7061 0070     .N...N...N..app.

000b5a74 <_ZTVN5spark12NetworkClassE>:
	...
   b5a7c:	4f89 000b 4f93 000b 4f9d 000b 4fa7 000b     .O...O...O...O..
   b5a8c:	4fb1 000b 4fbd 000b 4fc9 000b 4fd1 000b     .O...O...O...O..
   b5a9c:	4fd9 000b 4fe5 000b 4fed 000b 4ff7 000b     .O...O...O...O..
   b5aac:	5001 000b 5925 252d 2d6d 6425 2554 3a48     .P..%Y-%m-%dT%H:
   b5abc:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000b5acc <_ZTV11USARTSerial>:
	...
   b5ad4:	5261 000b 52cd 000b 52a5 000b 50ed 000b     aR...R...R...P..
   b5ae4:	5275 000b 5291 000b 5283 000b 529f 000b     uR...R...R...R..
   b5af4:	5263 000b 5267 000b                         cR..gR..

000b5afc <_ZTV9USBSerial>:
	...
   b5b04:	530b 000b 5373 000b 5349 000b 50ed 000b     .S..sS..IS...P..
   b5b14:	533b 000b 530d 000b 531d 000b 536d 000b     ;S...S...S..mS..
   b5b24:	532d 000b 5305 000b                         -S...S..

000b5b2c <_ZTVN5spark9WiFiClassE>:
	...
   b5b34:	546b 000b 5461 000b 5457 000b 540d 000b     kT..aT..WT...T..
   b5b44:	544b 000b 543f 000b 4fc9 000b 4fd1 000b     KT..?T...O...O..
   b5b54:	5433 000b 542b 000b 5421 000b 5417 000b     3T..+T..!T...T..
   b5b64:	5001 000b                                   .P..

000b5b68 <_ZSt7nothrow>:
   b5b68:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b5b78:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
   b5b88:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b5b98:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b5ba8:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
   b5bb8:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b5bc8:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b5bd9 <link_const_variable_data_end>:
   b5bd9:	00          	.byte	0x00
	...

000b5bdc <link_constructors_location>:
   b5bdc:	000b4491 	.word	0x000b4491
   b5be0:	000b4955 	.word	0x000b4955
   b5be4:	000b4d55 	.word	0x000b4d55
   b5be8:	000b4dcd 	.word	0x000b4dcd
   b5bec:	000b4f79 	.word	0x000b4f79
   b5bf0:	000b50d9 	.word	0x000b50d9
   b5bf4:	000b51f1 	.word	0x000b51f1
   b5bf8:	000b5229 	.word	0x000b5229
   b5bfc:	000b524d 	.word	0x000b524d
   b5c00:	000b5475 	.word	0x000b5475

000b5c04 <link_constructors_end>:
	...
