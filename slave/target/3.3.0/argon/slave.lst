
/Users/sainihome/Documents/GitHub/loop-tracks/slave/target/3.3.0/argon/slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000023d4  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b63f0  000b63f0  000063f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b6414  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  2003e600  000b6418  0001e600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000180  2003e670  2003e670  0002e670  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b6488  000b6488  00026488  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b64b0  000b64b0  000264b0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   000fef1a  00000000  00000000  000264b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000114e7  00000000  00000000  001253ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    000371bd  00000000  00000000  001368b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000029c8  00000000  00000000  0016da72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00009c98  00000000  00000000  0017043a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00035c3a  00000000  00000000  0017a0d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00039e31  00000000  00000000  001afd0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001326e1  00000000  00000000  001e9b3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00008868  00000000  00000000  0031c220  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f001 fe67 	bl	b5d00 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f001 fe6f 	bl	b5d1c <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e600 	.word	0x2003e600
   b4048:	000b6418 	.word	0x000b6418
   b404c:	2003e670 	.word	0x2003e670
   b4050:	2003e670 	.word	0x2003e670
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f001 fc9d 	bl	b599c <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b63c4 	.word	0x000b63c4
   b407c:	000b63ec 	.word	0x000b63ec

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b896 	b.w	b41b0 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f945 	bl	b4314 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f001 bc3d 	b.w	b590c <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f001 b80b 	b.w	b50ac <malloc>

000b4096 <_Znaj>:
   b4096:	f001 b809 	b.w	b50ac <malloc>

000b409a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   b409a:	f001 b80f 	b.w	b50bc <free>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f001 b80d 	b.w	b50bc <free>

000b40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40a2:	7800      	ldrb	r0, [r0, #0]
   b40a4:	fab0 f080 	clz	r0, r0
   b40a8:	0940      	lsrs	r0, r0, #5
   b40aa:	4770      	bx	lr

000b40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40ac:	2301      	movs	r3, #1
   b40ae:	7003      	strb	r3, [r0, #0]
   b40b0:	4770      	bx	lr

000b40b2 <_ZN5Print5writeEPKc.isra.0>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b40b2:	b513      	push	{r0, r1, r4, lr}
   b40b4:	4604      	mov	r4, r0
      if (str == NULL) return 0;
   b40b6:	b161      	cbz	r1, b40d2 <_ZN5Print5writeEPKc.isra.0+0x20>
      return write((const uint8_t *)str, strlen(str));
   b40b8:	4608      	mov	r0, r1
   b40ba:	9101      	str	r1, [sp, #4]
   b40bc:	f001 fea2 	bl	b5e04 <strlen>
   b40c0:	6823      	ldr	r3, [r4, #0]
   b40c2:	9901      	ldr	r1, [sp, #4]
   b40c4:	68db      	ldr	r3, [r3, #12]
   b40c6:	4602      	mov	r2, r0
   b40c8:	4620      	mov	r0, r4
    }
   b40ca:	b002      	add	sp, #8
   b40cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b40d0:	4718      	bx	r3
    }
   b40d2:	b002      	add	sp, #8
   b40d4:	bd10      	pop	{r4, pc}
	...

000b40d8 <_Z11dataRequestv>:
      }
    }
  }
}

void dataRequest(){
   b40d8:	b508      	push	{r3, lr}
  Serial.println("request received");
   b40da:	f001 fb91 	bl	b5800 <_Z16_fetch_usbserialv>
   b40de:	4913      	ldr	r1, [pc, #76]	; (b412c <_Z11dataRequestv+0x54>)
   b40e0:	f001 fa2b 	bl	b553a <_ZN5Print7printlnEPKc>
  switch(requestMode){
   b40e4:	4b12      	ldr	r3, [pc, #72]	; (b4130 <_Z11dataRequestv+0x58>)
   b40e6:	681b      	ldr	r3, [r3, #0]
   b40e8:	2b01      	cmp	r3, #1
   b40ea:	d002      	beq.n	b40f2 <_Z11dataRequestv+0x1a>
   b40ec:	2b02      	cmp	r3, #2
   b40ee:	d00d      	beq.n	b410c <_Z11dataRequestv+0x34>
        Wire.write("fail");
      }
      break;
    }
  }
}
   b40f0:	bd08      	pop	{r3, pc}
      Serial.println("request mode 1");
   b40f2:	f001 fb85 	bl	b5800 <_Z16_fetch_usbserialv>
   b40f6:	490f      	ldr	r1, [pc, #60]	; (b4134 <_Z11dataRequestv+0x5c>)
   b40f8:	f001 fa1f 	bl	b553a <_ZN5Print7printlnEPKc>
      Wire.write(deviceID);
   b40fc:	f001 fcea 	bl	b5ad4 <_Z19__fetch_global_Wirev>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b4100:	4b0d      	ldr	r3, [pc, #52]	; (b4138 <_Z11dataRequestv+0x60>)
   b4102:	6819      	ldr	r1, [r3, #0]
}
   b4104:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        Wire.write("fail");
   b4108:	f7ff bfd3 	b.w	b40b2 <_ZN5Print5writeEPKc.isra.0>
      Serial.println("request mode 2");
   b410c:	f001 fb78 	bl	b5800 <_Z16_fetch_usbserialv>
   b4110:	490a      	ldr	r1, [pc, #40]	; (b413c <_Z11dataRequestv+0x64>)
   b4112:	f001 fa12 	bl	b553a <_ZN5Print7printlnEPKc>
      if(verifyAddress){
   b4116:	4b0a      	ldr	r3, [pc, #40]	; (b4140 <_Z11dataRequestv+0x68>)
   b4118:	781b      	ldrb	r3, [r3, #0]
   b411a:	b11b      	cbz	r3, b4124 <_Z11dataRequestv+0x4c>
        Wire.write("pass");
   b411c:	f001 fcda 	bl	b5ad4 <_Z19__fetch_global_Wirev>
   b4120:	4908      	ldr	r1, [pc, #32]	; (b4144 <_Z11dataRequestv+0x6c>)
   b4122:	e7ef      	b.n	b4104 <_Z11dataRequestv+0x2c>
        Wire.write("fail");
   b4124:	f001 fcd6 	bl	b5ad4 <_Z19__fetch_global_Wirev>
   b4128:	4907      	ldr	r1, [pc, #28]	; (b4148 <_Z11dataRequestv+0x70>)
   b412a:	e7eb      	b.n	b4104 <_Z11dataRequestv+0x2c>
   b412c:	000b5fec 	.word	0x000b5fec
   b4130:	2003e698 	.word	0x2003e698
   b4134:	000b5ffd 	.word	0x000b5ffd
   b4138:	2003e684 	.word	0x2003e684
   b413c:	000b600c 	.word	0x000b600c
   b4140:	2003e600 	.word	0x2003e600
   b4144:	000b601b 	.word	0x000b601b
   b4148:	000b6020 	.word	0x000b6020

000b414c <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b414c:	b40e      	push	{r1, r2, r3}
   b414e:	b503      	push	{r0, r1, lr}
   b4150:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b4152:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4154:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4158:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b415a:	f001 fa20 	bl	b559e <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b415e:	b002      	add	sp, #8
   b4160:	f85d eb04 	ldr.w	lr, [sp], #4
   b4164:	b003      	add	sp, #12
   b4166:	4770      	bx	lr

000b4168 <_ZN5Print8printlnfEPKcz>:

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4168:	b40e      	push	{r1, r2, r3}
   b416a:	b503      	push	{r0, r1, lr}
   b416c:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   b416e:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4170:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4174:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b4176:	f001 fa12 	bl	b559e <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b417a:	b002      	add	sp, #8
   b417c:	f85d eb04 	ldr.w	lr, [sp], #4
   b4180:	b003      	add	sp, #12
   b4182:	4770      	bx	lr

000b4184 <_Z17acquireWireBufferv>:

hal_i2c_config_t acquireWireBuffer() {
   b4184:	b538      	push	{r3, r4, r5, lr}
    hal_i2c_config_t config = {
   b4186:	f44f 7500 	mov.w	r5, #512	; 0x200
   b418a:	2314      	movs	r3, #20
hal_i2c_config_t acquireWireBuffer() {
   b418c:	4604      	mov	r4, r0
    hal_i2c_config_t config = {
   b418e:	6003      	str	r3, [r0, #0]
   b4190:	6085      	str	r5, [r0, #8]
   b4192:	6105      	str	r5, [r0, #16]
        .size = sizeof(hal_i2c_config_t),
        .version = HAL_I2C_CONFIG_VERSION_1,
        .rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_SIZE],
   b4194:	4905      	ldr	r1, [pc, #20]	; (b41ac <_Z17acquireWireBufferv+0x28>)
   b4196:	4628      	mov	r0, r5
   b4198:	f001 fd00 	bl	b5b9c <_ZnajRKSt9nothrow_t>
        .rx_buffer_size = I2C_BUFFER_SIZE,
        .tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_SIZE],
   b419c:	4903      	ldr	r1, [pc, #12]	; (b41ac <_Z17acquireWireBufferv+0x28>)
        .tx_buffer_size = I2C_BUFFER_SIZE
    };
   b419e:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_SIZE],
   b41a0:	4628      	mov	r0, r5
   b41a2:	f001 fcfb 	bl	b5b9c <_ZnajRKSt9nothrow_t>
    };
   b41a6:	60e0      	str	r0, [r4, #12]
    return config;
}
   b41a8:	4620      	mov	r0, r4
   b41aa:	bd38      	pop	{r3, r4, r5, pc}
   b41ac:	000b6238 	.word	0x000b6238

000b41b0 <setup>:
void setup() {
   b41b0:	b510      	push	{r4, lr}
   b41b2:	b086      	sub	sp, #24

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b41b4:	f000 fdbe 	bl	b4d34 <HAL_Timer_Get_Milli_Seconds>
  randomSeed(millis());
   b41b8:	f001 fa37 	bl	b562a <_Z10randomSeedj>
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   b41bc:	4820      	ldr	r0, [pc, #128]	; (b4240 <setup+0x90>)
  address = random(8, 64);
   b41be:	4c21      	ldr	r4, [pc, #132]	; (b4244 <setup+0x94>)
   b41c0:	6840      	ldr	r0, [r0, #4]
   b41c2:	2300      	movs	r3, #0
   b41c4:	4619      	mov	r1, r3
   b41c6:	461a      	mov	r2, r3
   b41c8:	f000 ff38 	bl	b503c <network_off>
  Serial.begin(9600);
   b41cc:	f001 fb18 	bl	b5800 <_Z16_fetch_usbserialv>
   b41d0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b41d4:	f001 fb08 	bl	b57e8 <_ZN9USBSerial5beginEl>
  address = random(8, 64);
   b41d8:	2140      	movs	r1, #64	; 0x40
   b41da:	2008      	movs	r0, #8
   b41dc:	f001 fa1b 	bl	b5616 <_Z6randomii>
   b41e0:	6020      	str	r0, [r4, #0]
  while(address == 41){
   b41e2:	6823      	ldr	r3, [r4, #0]
   b41e4:	2b29      	cmp	r3, #41	; 0x29
   b41e6:	d104      	bne.n	b41f2 <setup+0x42>
    address = random(8, 64);
   b41e8:	2140      	movs	r1, #64	; 0x40
   b41ea:	2008      	movs	r0, #8
   b41ec:	f001 fa13 	bl	b5616 <_Z6randomii>
   b41f0:	e7f6      	b.n	b41e0 <setup+0x30>
  acquireWireBuffer();
   b41f2:	a801      	add	r0, sp, #4
   b41f4:	f7ff ffc6 	bl	b4184 <_Z17acquireWireBufferv>
  Wire.setClock(400000);
   b41f8:	f001 fc6c 	bl	b5ad4 <_Z19__fetch_global_Wirev>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   b41fc:	4912      	ldr	r1, [pc, #72]	; (b4248 <setup+0x98>)
   b41fe:	f001 f815 	bl	b522c <_ZN7TwoWire8setSpeedEm>
  Wire.begin(address);
   b4202:	f001 fc67 	bl	b5ad4 <_Z19__fetch_global_Wirev>
   b4206:	6821      	ldr	r1, [r4, #0]
   b4208:	f001 f81a 	bl	b5240 <_ZN7TwoWire5beginEi>
  Wire.onReceive(dataReceived);
   b420c:	f001 fc62 	bl	b5ad4 <_Z19__fetch_global_Wirev>
   b4210:	490e      	ldr	r1, [pc, #56]	; (b424c <setup+0x9c>)
   b4212:	f001 f81c 	bl	b524e <_ZN7TwoWire9onReceiveEPFviE>
  Wire.onRequest(dataRequest);
   b4216:	f001 fc5d 	bl	b5ad4 <_Z19__fetch_global_Wirev>
   b421a:	490d      	ldr	r1, [pc, #52]	; (b4250 <setup+0xa0>)
   b421c:	f001 f81b 	bl	b5256 <_ZN7TwoWire9onRequestEPFvvE>
  pinMode(D7, OUTPUT);
   b4220:	2101      	movs	r1, #1
   b4222:	2007      	movs	r0, #7
   b4224:	f001 fc2a 	bl	b5a7c <pinMode>
  strip.begin();
   b4228:	480a      	ldr	r0, [pc, #40]	; (b4254 <setup+0xa4>)
   b422a:	f000 fada 	bl	b47e2 <_ZN17Adafruit_NeoPixel5beginEv>
  strip.clear();
   b422e:	4809      	ldr	r0, [pc, #36]	; (b4254 <setup+0xa4>)
   b4230:	f000 fd53 	bl	b4cda <_ZN17Adafruit_NeoPixel5clearEv>
  strip.show();
   b4234:	4807      	ldr	r0, [pc, #28]	; (b4254 <setup+0xa4>)
}
   b4236:	b006      	add	sp, #24
   b4238:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  strip.show();
   b423c:	f000 bb0a 	b.w	b4854 <_ZN17Adafruit_NeoPixel4showEv>
   b4240:	2003e70c 	.word	0x2003e70c
   b4244:	2003e67c 	.word	0x2003e67c
   b4248:	00061a80 	.word	0x00061a80
   b424c:	000b44a1 	.word	0x000b44a1
   b4250:	000b40d9 	.word	0x000b40d9
   b4254:	2003e69c 	.word	0x2003e69c

000b4258 <_Z5Wheelh>:
}

// Input a value 0 to 255 to get a color value.
// The colours are a transition r - g - b - back to r.
uint32_t Wheel(byte WheelPos) {
  if(WheelPos < 85) {
   b4258:	2854      	cmp	r0, #84	; 0x54
   b425a:	d809      	bhi.n	b4270 <_Z5Wheelh+0x18>
   return strip.Color(WheelPos * 3, 255 - WheelPos * 3, 0);
   b425c:	eba0 0180 	sub.w	r1, r0, r0, lsl #2
   b4260:	3901      	subs	r1, #1
   b4262:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   b4266:	2200      	movs	r2, #0
   b4268:	b2c9      	uxtb	r1, r1
  } else if(WheelPos < 170) {
   WheelPos -= 85;
   return strip.Color(255 - WheelPos * 3, 0, WheelPos * 3);
   b426a:	b2c0      	uxtb	r0, r0
  } else {
   WheelPos -= 170;
   return strip.Color(0, WheelPos * 3, 255 - WheelPos * 3);
   b426c:	f000 bce1 	b.w	b4c32 <_ZN17Adafruit_NeoPixel5ColorEhhh>
  } else if(WheelPos < 170) {
   b4270:	28a9      	cmp	r0, #169	; 0xa9
   b4272:	d809      	bhi.n	b4288 <_Z5Wheelh+0x30>
   WheelPos -= 85;
   b4274:	3855      	subs	r0, #85	; 0x55
   b4276:	b2c0      	uxtb	r0, r0
   return strip.Color(255 - WheelPos * 3, 0, WheelPos * 3);
   b4278:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   b427c:	eba0 0080 	sub.w	r0, r0, r0, lsl #2
   b4280:	3801      	subs	r0, #1
   b4282:	b2d2      	uxtb	r2, r2
   b4284:	2100      	movs	r1, #0
   b4286:	e7f0      	b.n	b426a <_Z5Wheelh+0x12>
   WheelPos -= 170;
   b4288:	3056      	adds	r0, #86	; 0x56
   b428a:	b2c1      	uxtb	r1, r0
   return strip.Color(0, WheelPos * 3, 255 - WheelPos * 3);
   b428c:	eba1 0281 	sub.w	r2, r1, r1, lsl #2
   b4290:	3a01      	subs	r2, #1
   b4292:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   b4296:	b2d2      	uxtb	r2, r2
   b4298:	b2c9      	uxtb	r1, r1
   b429a:	2000      	movs	r0, #0
   b429c:	e7e6      	b.n	b426c <_Z5Wheelh+0x14>
	...

000b42a0 <_Z7rainbowh>:
void rainbow(uint8_t wait) {
   b42a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(blink){
   b42a4:	4b19      	ldr	r3, [pc, #100]	; (b430c <_Z7rainbowh+0x6c>)
   b42a6:	781c      	ldrb	r4, [r3, #0]
void rainbow(uint8_t wait) {
   b42a8:	4606      	mov	r6, r0
  if(blink){
   b42aa:	b30c      	cbz	r4, b42f0 <_Z7rainbowh+0x50>
      for(i=0; i<strip.numPixels(); i++) {
   b42ac:	4f18      	ldr	r7, [pc, #96]	; (b4310 <_Z7rainbowh+0x70>)
    for(j=0; j<256; j++) {
   b42ae:	2400      	movs	r4, #0
   b42b0:	2500      	movs	r5, #0
      for(i=0; i<strip.numPixels(); i++) {
   b42b2:	4638      	mov	r0, r7
   b42b4:	f000 fd0f 	bl	b4cd6 <_ZNK17Adafruit_NeoPixel9numPixelsEv>
   b42b8:	fa1f f885 	uxth.w	r8, r5
   b42bc:	4580      	cmp	r8, r0
   b42be:	d20a      	bcs.n	b42d6 <_Z7rainbowh+0x36>
        strip.setPixelColor(i, Wheel((i+j) & 255));
   b42c0:	1960      	adds	r0, r4, r5
   b42c2:	b2c0      	uxtb	r0, r0
   b42c4:	f7ff ffc8 	bl	b4258 <_Z5Wheelh>
   b42c8:	4641      	mov	r1, r8
   b42ca:	4602      	mov	r2, r0
   b42cc:	4638      	mov	r0, r7
   b42ce:	f000 fc6d 	bl	b4bac <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
      for(i=0; i<strip.numPixels(); i++) {
   b42d2:	3501      	adds	r5, #1
   b42d4:	e7ed      	b.n	b42b2 <_Z7rainbowh+0x12>
      strip.show();
   b42d6:	4638      	mov	r0, r7
    for(j=0; j<256; j++) {
   b42d8:	3401      	adds	r4, #1
      strip.show();
   b42da:	f000 fabb 	bl	b4854 <_ZN17Adafruit_NeoPixel4showEv>
    for(j=0; j<256; j++) {
   b42de:	b2a4      	uxth	r4, r4
      delay(wait);
   b42e0:	4630      	mov	r0, r6
   b42e2:	f000 ff1b 	bl	b511c <delay>
    for(j=0; j<256; j++) {
   b42e6:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   b42ea:	d1e1      	bne.n	b42b0 <_Z7rainbowh+0x10>
}
   b42ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      strip.setPixelColor(i, 0);
   b42f0:	4d07      	ldr	r5, [pc, #28]	; (b4310 <_Z7rainbowh+0x70>)
   b42f2:	b2a1      	uxth	r1, r4
   b42f4:	2200      	movs	r2, #0
   b42f6:	4628      	mov	r0, r5
    for(int i = 0; i < MAX_PIXELS; i++){
   b42f8:	3401      	adds	r4, #1
      strip.setPixelColor(i, 0);
   b42fa:	f000 fc57 	bl	b4bac <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
    for(int i = 0; i < MAX_PIXELS; i++){
   b42fe:	2c64      	cmp	r4, #100	; 0x64
   b4300:	d1f7      	bne.n	b42f2 <_Z7rainbowh+0x52>
}
   b4302:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    strip.show();
   b4306:	4802      	ldr	r0, [pc, #8]	; (b4310 <_Z7rainbowh+0x70>)
   b4308:	f000 baa4 	b.w	b4854 <_ZN17Adafruit_NeoPixel4showEv>
   b430c:	2003e680 	.word	0x2003e680
   b4310:	2003e69c 	.word	0x2003e69c

000b4314 <loop>:
void loop() {
   b4314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(blink){
   b4316:	4c2b      	ldr	r4, [pc, #172]	; (b43c4 <loop+0xb0>)
   b4318:	7823      	ldrb	r3, [r4, #0]
   b431a:	b16b      	cbz	r3, b4338 <loop+0x24>
    rainbow(5);
   b431c:	2005      	movs	r0, #5
   b431e:	f7ff ffbf 	bl	b42a0 <_Z7rainbowh>
    if(!blink){
   b4322:	7824      	ldrb	r4, [r4, #0]
   b4324:	b944      	cbnz	r4, b4338 <loop+0x24>
        strip.setPixelColor(i, 0);
   b4326:	4d28      	ldr	r5, [pc, #160]	; (b43c8 <loop+0xb4>)
   b4328:	b2a1      	uxth	r1, r4
   b432a:	2200      	movs	r2, #0
   b432c:	4628      	mov	r0, r5
      for(int i = 0; i < MAX_PIXELS; i++){
   b432e:	3401      	adds	r4, #1
        strip.setPixelColor(i, 0);
   b4330:	f000 fc3c 	bl	b4bac <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
      for(int i = 0; i < MAX_PIXELS; i++){
   b4334:	2c64      	cmp	r4, #100	; 0x64
   b4336:	d1f7      	bne.n	b4328 <loop+0x14>
  if(!verifyAddress){
   b4338:	4f24      	ldr	r7, [pc, #144]	; (b43cc <loop+0xb8>)
   b433a:	783b      	ldrb	r3, [r7, #0]
   b433c:	2b00      	cmp	r3, #0
   b433e:	d139      	bne.n	b43b4 <loop+0xa0>
    Serial.printf("randomize address %d, ", address);
   b4340:	4d23      	ldr	r5, [pc, #140]	; (b43d0 <loop+0xbc>)
   b4342:	f001 fa5d 	bl	b5800 <_Z16_fetch_usbserialv>
   b4346:	682a      	ldr	r2, [r5, #0]
   b4348:	4922      	ldr	r1, [pc, #136]	; (b43d4 <loop+0xc0>)
   b434a:	f7ff feff 	bl	b414c <_ZN5Print6printfEPKcz>
    address = random(64, 120);
   b434e:	2178      	movs	r1, #120	; 0x78
   b4350:	2040      	movs	r0, #64	; 0x40
   b4352:	f001 f960 	bl	b5616 <_Z6randomii>
   b4356:	6028      	str	r0, [r5, #0]
    Serial.println(address);
   b4358:	f001 fa52 	bl	b5800 <_Z16_fetch_usbserialv>
   b435c:	682c      	ldr	r4, [r5, #0]
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   b435e:	2c00      	cmp	r4, #0
   b4360:	4606      	mov	r6, r0
   b4362:	da2c      	bge.n	b43be <loop+0xaa>
            t = print('-');
   b4364:	212d      	movs	r1, #45	; 0x2d
   b4366:	f001 f8d9 	bl	b551c <_ZN5Print5printEc>
            val = -n;
   b436a:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b436c:	220a      	movs	r2, #10
   b436e:	4630      	mov	r0, r6
   b4370:	f001 f8f7 	bl	b5562 <_ZN5Print11printNumberEmh>
        n += println();
   b4374:	4630      	mov	r0, r6
   b4376:	f001 f8d4 	bl	b5522 <_ZN5Print7printlnEv>
    Wire.end();
   b437a:	f001 fbab 	bl	b5ad4 <_Z19__fetch_global_Wirev>
   b437e:	f000 ff62 	bl	b5246 <_ZN7TwoWire3endEv>
    Wire.setClock(400000);
   b4382:	f001 fba7 	bl	b5ad4 <_Z19__fetch_global_Wirev>
   b4386:	4914      	ldr	r1, [pc, #80]	; (b43d8 <loop+0xc4>)
   b4388:	f000 ff50 	bl	b522c <_ZN7TwoWire8setSpeedEm>
    Wire.begin(address);
   b438c:	f001 fba2 	bl	b5ad4 <_Z19__fetch_global_Wirev>
   b4390:	6829      	ldr	r1, [r5, #0]
   b4392:	f000 ff55 	bl	b5240 <_ZN7TwoWire5beginEi>
    Wire.onReceive(dataReceived);
   b4396:	f001 fb9d 	bl	b5ad4 <_Z19__fetch_global_Wirev>
   b439a:	4910      	ldr	r1, [pc, #64]	; (b43dc <loop+0xc8>)
   b439c:	f000 ff57 	bl	b524e <_ZN7TwoWire9onReceiveEPFviE>
    Wire.onRequest(dataRequest);
   b43a0:	f001 fb98 	bl	b5ad4 <_Z19__fetch_global_Wirev>
   b43a4:	490e      	ldr	r1, [pc, #56]	; (b43e0 <loop+0xcc>)
   b43a6:	f000 ff56 	bl	b5256 <_ZN7TwoWire9onRequestEPFvvE>
    requestMode = 0;
   b43aa:	4b0e      	ldr	r3, [pc, #56]	; (b43e4 <loop+0xd0>)
   b43ac:	2200      	movs	r2, #0
   b43ae:	601a      	str	r2, [r3, #0]
    verifyAddress = true;
   b43b0:	2301      	movs	r3, #1
   b43b2:	703b      	strb	r3, [r7, #0]
}
   b43b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  strip.show();
   b43b8:	4803      	ldr	r0, [pc, #12]	; (b43c8 <loop+0xb4>)
   b43ba:	f000 ba4b 	b.w	b4854 <_ZN17Adafruit_NeoPixel4showEv>
            val = n;
   b43be:	4621      	mov	r1, r4
   b43c0:	e7d4      	b.n	b436c <loop+0x58>
   b43c2:	bf00      	nop
   b43c4:	2003e680 	.word	0x2003e680
   b43c8:	2003e69c 	.word	0x2003e69c
   b43cc:	2003e600 	.word	0x2003e600
   b43d0:	2003e67c 	.word	0x2003e67c
   b43d4:	000b6025 	.word	0x000b6025
   b43d8:	00061a80 	.word	0x00061a80
   b43dc:	000b44a1 	.word	0x000b44a1
   b43e0:	000b40d9 	.word	0x000b40d9
   b43e4:	2003e698 	.word	0x2003e698

000b43e8 <_ZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>:

  // Helper for all the sto* functions.
  template<typename _TRet, typename _Ret = _TRet, typename _CharT,
	   typename... _Base>
    _Ret
    __stoa(_TRet (*__convf) (const _CharT*, _CharT**, _Base...),
   b43e8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b43ec:	4614      	mov	r4, r2
   b43ee:	4607      	mov	r7, r0
   b43f0:	460e      	mov	r6, r1
   b43f2:	461d      	mov	r5, r3
      _Ret __ret;

      _CharT* __endptr;

      struct _Save_errno {
	_Save_errno() : _M_errno(errno) { errno = 0; }
   b43f4:	f000 fe7a 	bl	b50ec <__errno>
   b43f8:	f8d0 8000 	ldr.w	r8, [r0]
   b43fc:	f000 fe76 	bl	b50ec <__errno>
   b4400:	2300      	movs	r3, #0
   b4402:	6003      	str	r3, [r0, #0]
	    return __val < _TRet(__numeric_traits<int>::__min)
	      || __val > _TRet(__numeric_traits<int>::__max);
	  }
      };

      const _TRet __tmp = __convf(__str, &__endptr, __base...);
   b4404:	9a08      	ldr	r2, [sp, #32]
   b4406:	a901      	add	r1, sp, #4
   b4408:	4620      	mov	r0, r4
   b440a:	47b8      	blx	r7

      if (__endptr == __str)
   b440c:	9b01      	ldr	r3, [sp, #4]
   b440e:	42a3      	cmp	r3, r4
      const _TRet __tmp = __convf(__str, &__endptr, __base...);
   b4410:	4607      	mov	r7, r0
      if (__endptr == __str)
   b4412:	d102      	bne.n	b441a <_ZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x32>
	std::__throw_invalid_argument(__name);
   b4414:	4630      	mov	r0, r6
   b4416:	f001 fbc9 	bl	b5bac <_ZSt24__throw_invalid_argumentPKc>
      else if (errno == ERANGE
   b441a:	f000 fe67 	bl	b50ec <__errno>
	  || _Range_chk::_S_chk(__tmp, std::is_same<_Ret, int>{}))
   b441e:	6803      	ldr	r3, [r0, #0]
   b4420:	2b22      	cmp	r3, #34	; 0x22
   b4422:	d00c      	beq.n	b443e <_ZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x56>
	std::__throw_out_of_range(__name);
      else
	__ret = __tmp;

      if (__idx)
   b4424:	b975      	cbnz	r5, b4444 <_ZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x5c>
	~_Save_errno() { if (errno == 0) errno = _M_errno; }
   b4426:	f000 fe61 	bl	b50ec <__errno>
   b442a:	6803      	ldr	r3, [r0, #0]
   b442c:	b91b      	cbnz	r3, b4436 <_ZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x4e>
   b442e:	f000 fe5d 	bl	b50ec <__errno>
   b4432:	f8c0 8000 	str.w	r8, [r0]
	*__idx = __endptr - __str;

      return __ret;
    }
   b4436:	4638      	mov	r0, r7
   b4438:	b002      	add	sp, #8
   b443a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	std::__throw_out_of_range(__name);
   b443e:	4630      	mov	r0, r6
   b4440:	f001 fbba 	bl	b5bb8 <_ZSt20__throw_out_of_rangePKc>
	*__idx = __endptr - __str;
   b4444:	9a01      	ldr	r2, [sp, #4]
   b4446:	1b12      	subs	r2, r2, r4
   b4448:	602a      	str	r2, [r5, #0]
   b444a:	e7ec      	b.n	b4426 <_ZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_+0x3e>

000b444c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>:

      pointer
      _M_local_data()
      {
#if __cplusplus >= 201103L
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   b444c:	f100 0308 	add.w	r3, r0, #8
#if __cpp_deduction_guides && ! defined _GLIBCXX_DEFINING_STRING_INSTANTIATIONS
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3076. basic_string CTAD ambiguity
      template<typename = _RequireAllocator<_Alloc>>
#endif
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
   b4450:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4452:	4604      	mov	r4, r0
	: allocator_type(__a), _M_p(__dat) { }
   b4454:	6003      	str	r3, [r0, #0]
      : _M_dataplus(_M_local_data(), __a)
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
   b4456:	460d      	mov	r5, r1
   b4458:	b1e1      	cbz	r1, b4494 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x48>
      {
#if __cplusplus >= 201703L
	if (__constant_string_p(__s))
	  return __gnu_cxx::char_traits<char_type>::length(__s);
#endif
	return __builtin_strlen(__s);
   b445a:	4608      	mov	r0, r1
   b445c:	f001 fcd2 	bl	b5e04 <strlen>
	  std::__throw_logic_error(__N("basic_string::"
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));

	if (__dnew > size_type(_S_local_capacity))
   b4460:	280f      	cmp	r0, #15
   b4462:	eb05 0600 	add.w	r6, r5, r0
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
   b4466:	9001      	str	r0, [sp, #4]
	if (__dnew > size_type(_S_local_capacity))
   b4468:	d907      	bls.n	b447a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x2e>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
   b446a:	2200      	movs	r2, #0
   b446c:	a901      	add	r1, sp, #4
   b446e:	4620      	mov	r0, r4
   b4470:	f001 fbaa 	bl	b5bc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
      { _M_allocated_capacity = __capacity; }
   b4474:	9b01      	ldr	r3, [sp, #4]
      { _M_dataplus._M_p = __p; }
   b4476:	6020      	str	r0, [r4, #0]
      { _M_allocated_capacity = __capacity; }
   b4478:	60a3      	str	r3, [r4, #8]
	    _M_capacity(__dnew);
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
   b447a:	6820      	ldr	r0, [r4, #0]
   b447c:	4632      	mov	r2, r6
   b447e:	4629      	mov	r1, r5
   b4480:	f001 fbd8 	bl	b5c34 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
   b4484:	9b01      	ldr	r3, [sp, #4]
      { __c1 = __c2; }
   b4486:	6822      	ldr	r2, [r4, #0]
      { _M_string_length = __length; }
   b4488:	6063      	str	r3, [r4, #4]
   b448a:	2100      	movs	r1, #0
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
   b448c:	4620      	mov	r0, r4
   b448e:	54d1      	strb	r1, [r2, r3]
   b4490:	b002      	add	sp, #8
   b4492:	bd70      	pop	{r4, r5, r6, pc}
	  std::__throw_logic_error(__N("basic_string::"
   b4494:	4801      	ldr	r0, [pc, #4]	; (b449c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x50>)
   b4496:	f001 fb86 	bl	b5ba6 <_ZSt19__throw_logic_errorPKc>
   b449a:	bf00      	nop
   b449c:	000b603c 	.word	0x000b603c

000b44a0 <_Z12dataReceivedi>:
void dataReceived(int count){
   b44a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b44a4:	b093      	sub	sp, #76	; 0x4c
   b44a6:	af02      	add	r7, sp, #8
  int size = Wire.available();
   b44a8:	f001 fb14 	bl	b5ad4 <_Z19__fetch_global_Wirev>
   b44ac:	6803      	ldr	r3, [r0, #0]
   b44ae:	691b      	ldr	r3, [r3, #16]
   b44b0:	4798      	blx	r3
  char inputBuffer[size];
   b44b2:	1dc3      	adds	r3, r0, #7
   b44b4:	f023 0307 	bic.w	r3, r3, #7
   b44b8:	ebad 0d03 	sub.w	sp, sp, r3
  int size = Wire.available();
   b44bc:	4604      	mov	r4, r0
  Serial.print("count: ");
   b44be:	f001 f99f 	bl	b5800 <_Z16_fetch_usbserialv>
   b44c2:	499c      	ldr	r1, [pc, #624]	; (b4734 <_Z12dataReceivedi+0x294>)
   b44c4:	f001 f826 	bl	b5514 <_ZN5Print5printEPKc>
  Serial.println(Wire.available());
   b44c8:	f001 f99a 	bl	b5800 <_Z16_fetch_usbserialv>
   b44cc:	4680      	mov	r8, r0
   b44ce:	f001 fb01 	bl	b5ad4 <_Z19__fetch_global_Wirev>
   b44d2:	6803      	ldr	r3, [r0, #0]
   b44d4:	691b      	ldr	r3, [r3, #16]
   b44d6:	4798      	blx	r3
        if (n < 0 && base == 10) {
   b44d8:	1e06      	subs	r6, r0, #0
  char inputBuffer[size];
   b44da:	ad02      	add	r5, sp, #8
   b44dc:	da2c      	bge.n	b4538 <_Z12dataReceivedi+0x98>
            t = print('-');
   b44de:	212d      	movs	r1, #45	; 0x2d
   b44e0:	4640      	mov	r0, r8
   b44e2:	f001 f81b 	bl	b551c <_ZN5Print5printEc>
            val = -n;
   b44e6:	4271      	negs	r1, r6
        return printNumber(val, base) + t;
   b44e8:	220a      	movs	r2, #10
   b44ea:	4640      	mov	r0, r8
   b44ec:	f001 f839 	bl	b5562 <_ZN5Print11printNumberEmh>
        n += println();
   b44f0:	4640      	mov	r0, r8
   b44f2:	f001 f816 	bl	b5522 <_ZN5Print7printlnEv>
  Serial.println();
   b44f6:	f001 f983 	bl	b5800 <_Z16_fetch_usbserialv>
   b44fa:	f001 f812 	bl	b5522 <_ZN5Print7printlnEv>
   b44fe:	1e6e      	subs	r6, r5, #1
    c = Wire.read();
   b4500:	f8df 8260 	ldr.w	r8, [pc, #608]	; b4764 <_Z12dataReceivedi+0x2c4>
  Serial.println();
   b4504:	46b1      	mov	r9, r6
  while(Wire.available() > 0){
   b4506:	f001 fae5 	bl	b5ad4 <_Z19__fetch_global_Wirev>
   b450a:	6803      	ldr	r3, [r0, #0]
   b450c:	691b      	ldr	r3, [r3, #16]
   b450e:	4798      	blx	r3
   b4510:	2800      	cmp	r0, #0
   b4512:	dd13      	ble.n	b453c <_Z12dataReceivedi+0x9c>
    c = Wire.read();
   b4514:	f001 fade 	bl	b5ad4 <_Z19__fetch_global_Wirev>
   b4518:	6803      	ldr	r3, [r0, #0]
   b451a:	695b      	ldr	r3, [r3, #20]
   b451c:	4798      	blx	r3
   b451e:	f888 0000 	strb.w	r0, [r8]
    Serial.println(c);
   b4522:	f001 f96d 	bl	b5800 <_Z16_fetch_usbserialv>
   b4526:	f898 1000 	ldrb.w	r1, [r8]
   b452a:	f001 f810 	bl	b554e <_ZN5Print7printlnEc>
    inputBuffer[counter] = c;
   b452e:	f898 3000 	ldrb.w	r3, [r8]
   b4532:	f809 3f01 	strb.w	r3, [r9, #1]!
  while(Wire.available() > 0){
   b4536:	e7e6      	b.n	b4506 <_Z12dataReceivedi+0x66>
            val = n;
   b4538:	4631      	mov	r1, r6
   b453a:	e7d5      	b.n	b44e8 <_Z12dataReceivedi+0x48>
  Serial.println("data received: ");
   b453c:	f001 f960 	bl	b5800 <_Z16_fetch_usbserialv>
   b4540:	497d      	ldr	r1, [pc, #500]	; (b4738 <_Z12dataReceivedi+0x298>)
   b4542:	f000 fffa 	bl	b553a <_ZN5Print7printlnEPKc>
  Serial.print(inputBuffer);
   b4546:	f001 f95b 	bl	b5800 <_Z16_fetch_usbserialv>
   b454a:	4629      	mov	r1, r5
   b454c:	f000 ffe2 	bl	b5514 <_ZN5Print5printEPKc>
  Serial.println();
   b4550:	f001 f956 	bl	b5800 <_Z16_fetch_usbserialv>
   b4554:	f000 ffe5 	bl	b5522 <_ZN5Print7printlnEv>
  if(size == 1){
   b4558:	2c01      	cmp	r4, #1
   b455a:	d122      	bne.n	b45a2 <_Z12dataReceivedi+0x102>
    if(inputBuffer[0] == '1'){
   b455c:	782b      	ldrb	r3, [r5, #0]
   b455e:	2b31      	cmp	r3, #49	; 0x31
   b4560:	d105      	bne.n	b456e <_Z12dataReceivedi+0xce>
      requestMode = 1;
   b4562:	4b76      	ldr	r3, [pc, #472]	; (b473c <_Z12dataReceivedi+0x29c>)
   b4564:	601c      	str	r4, [r3, #0]
}
   b4566:	3744      	adds	r7, #68	; 0x44
   b4568:	46bd      	mov	sp, r7
   b456a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    }else if(inputBuffer[0] == '2'){
   b456e:	2b32      	cmp	r3, #50	; 0x32
   b4570:	d103      	bne.n	b457a <_Z12dataReceivedi+0xda>
      requestMode = 2;
   b4572:	4b72      	ldr	r3, [pc, #456]	; (b473c <_Z12dataReceivedi+0x29c>)
   b4574:	2202      	movs	r2, #2
   b4576:	601a      	str	r2, [r3, #0]
   b4578:	e7f5      	b.n	b4566 <_Z12dataReceivedi+0xc6>
    }else if(inputBuffer[0] == '3'){
   b457a:	2b33      	cmp	r3, #51	; 0x33
   b457c:	d102      	bne.n	b4584 <_Z12dataReceivedi+0xe4>
      blink = true;
   b457e:	4b70      	ldr	r3, [pc, #448]	; (b4740 <_Z12dataReceivedi+0x2a0>)
   b4580:	701c      	strb	r4, [r3, #0]
   b4582:	e7f0      	b.n	b4566 <_Z12dataReceivedi+0xc6>
    }else if(inputBuffer[0] == '4'){
   b4584:	2b34      	cmp	r3, #52	; 0x34
   b4586:	d1ee      	bne.n	b4566 <_Z12dataReceivedi+0xc6>
      blink = false;
   b4588:	4b6d      	ldr	r3, [pc, #436]	; (b4740 <_Z12dataReceivedi+0x2a0>)
        strip.setPixelColor(i, 0);
   b458a:	4d6e      	ldr	r5, [pc, #440]	; (b4744 <_Z12dataReceivedi+0x2a4>)
      blink = false;
   b458c:	2400      	movs	r4, #0
   b458e:	701c      	strb	r4, [r3, #0]
        strip.setPixelColor(i, 0);
   b4590:	b2a1      	uxth	r1, r4
   b4592:	2200      	movs	r2, #0
   b4594:	4628      	mov	r0, r5
      for(int i = 0; i < MAX_PIXELS; i++){
   b4596:	3401      	adds	r4, #1
        strip.setPixelColor(i, 0);
   b4598:	f000 fb08 	bl	b4bac <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
      for(int i = 0; i < MAX_PIXELS; i++){
   b459c:	2c64      	cmp	r4, #100	; 0x64
   b459e:	d1f7      	bne.n	b4590 <_Z12dataReceivedi+0xf0>
   b45a0:	e7e1      	b.n	b4566 <_Z12dataReceivedi+0xc6>
  }else if(size == 24){
   b45a2:	2c18      	cmp	r4, #24
   b45a4:	d126      	bne.n	b45f4 <_Z12dataReceivedi+0x154>
    Serial.println("size 24");
   b45a6:	f001 f92b 	bl	b5800 <_Z16_fetch_usbserialv>
   b45aa:	4967      	ldr	r1, [pc, #412]	; (b4748 <_Z12dataReceivedi+0x2a8>)
      Serial.printlnf("deviceID char: %c, inputBuffer char: %c", deviceID.charAt(i), inputBuffer[i]);
   b45ac:	f8df 81b8 	ldr.w	r8, [pc, #440]	; b4768 <_Z12dataReceivedi+0x2c8>
   b45b0:	f8df 91b8 	ldr.w	r9, [pc, #440]	; b476c <_Z12dataReceivedi+0x2cc>
    Serial.println("size 24");
   b45b4:	f000 ffc1 	bl	b553a <_ZN5Print7printlnEPKc>
    for(int i = 0; i < 24; i++){
   b45b8:	2400      	movs	r4, #0
      Serial.printlnf("deviceID char: %c, inputBuffer char: %c", deviceID.charAt(i), inputBuffer[i]);
   b45ba:	f001 f921 	bl	b5800 <_Z16_fetch_usbserialv>
   b45be:	4621      	mov	r1, r4
   b45c0:	4605      	mov	r5, r0
   b45c2:	4640      	mov	r0, r8
   b45c4:	f001 f84d 	bl	b5662 <_ZNK6String6charAtEj>
   b45c8:	f816 3f01 	ldrb.w	r3, [r6, #1]!
   b45cc:	4602      	mov	r2, r0
   b45ce:	4649      	mov	r1, r9
   b45d0:	4628      	mov	r0, r5
   b45d2:	f7ff fdc9 	bl	b4168 <_ZN5Print8printlnfEPKcz>
      if(deviceID.charAt(i) != inputBuffer[i]){
   b45d6:	4621      	mov	r1, r4
   b45d8:	4640      	mov	r0, r8
   b45da:	f001 f842 	bl	b5662 <_ZNK6String6charAtEj>
   b45de:	7833      	ldrb	r3, [r6, #0]
   b45e0:	4283      	cmp	r3, r0
   b45e2:	d003      	beq.n	b45ec <_Z12dataReceivedi+0x14c>
        verifyAddress = false;
   b45e4:	4b59      	ldr	r3, [pc, #356]	; (b474c <_Z12dataReceivedi+0x2ac>)
   b45e6:	2200      	movs	r2, #0
   b45e8:	701a      	strb	r2, [r3, #0]
        break;
   b45ea:	e7bc      	b.n	b4566 <_Z12dataReceivedi+0xc6>
    for(int i = 0; i < 24; i++){
   b45ec:	3401      	adds	r4, #1
   b45ee:	2c18      	cmp	r4, #24
   b45f0:	d1e3      	bne.n	b45ba <_Z12dataReceivedi+0x11a>
   b45f2:	e7b8      	b.n	b4566 <_Z12dataReceivedi+0xc6>
  }else if(size == 12){
   b45f4:	2c0c      	cmp	r4, #12
   b45f6:	d13b      	bne.n	b4670 <_Z12dataReceivedi+0x1d0>
    std::string headBuffer = "";
   b45f8:	4955      	ldr	r1, [pc, #340]	; (b4750 <_Z12dataReceivedi+0x2b0>)
   b45fa:	f107 0228 	add.w	r2, r7, #40	; 0x28
   b45fe:	f107 0010 	add.w	r0, r7, #16
   b4602:	f7ff ff23 	bl	b444c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    std::string tailBuffer = "";
   b4606:	4952      	ldr	r1, [pc, #328]	; (b4750 <_Z12dataReceivedi+0x2b0>)
   b4608:	f107 020c 	add.w	r2, r7, #12
   b460c:	f107 0028 	add.w	r0, r7, #40	; 0x28
   b4610:	f7ff ff1c 	bl	b444c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
    for(int i = 0; i < 6; i++){
   b4614:	1d6c      	adds	r4, r5, #5
       *  @return  Reference to this string.
       */
      basic_string&
      operator+=(_CharT __c)
      {
	this->push_back(__c);
   b4616:	f816 1f01 	ldrb.w	r1, [r6, #1]!
   b461a:	f107 0010 	add.w	r0, r7, #16
   b461e:	f001 fb4a 	bl	b5cb6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
   b4622:	42b4      	cmp	r4, r6
   b4624:	d1f7      	bne.n	b4616 <_Z12dataReceivedi+0x176>
   b4626:	1dac      	adds	r4, r5, #6
   b4628:	350c      	adds	r5, #12
   b462a:	f814 1b01 	ldrb.w	r1, [r4], #1
   b462e:	f107 0028 	add.w	r0, r7, #40	; 0x28
   b4632:	f001 fb40 	bl	b5cb6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
    for(int i = 6; i < 12; i++){
   b4636:	42a5      	cmp	r5, r4
   b4638:	d1f7      	bne.n	b462a <_Z12dataReceivedi+0x18a>
  { return __gnu_cxx::__stoa(&std::strtol, "stol", __str.c_str(),
			     __idx, __base); }

  inline unsigned long
  stoul(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::strtoul, "stoul", __str.c_str(),
   b463a:	2410      	movs	r4, #16
   b463c:	693a      	ldr	r2, [r7, #16]
   b463e:	4945      	ldr	r1, [pc, #276]	; (b4754 <_Z12dataReceivedi+0x2b4>)
   b4640:	9400      	str	r4, [sp, #0]
   b4642:	2300      	movs	r3, #0
   b4644:	4844      	ldr	r0, [pc, #272]	; (b4758 <_Z12dataReceivedi+0x2b8>)
   b4646:	f7ff fecf 	bl	b43e8 <_ZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>
    headColor = std::stoul(headBuffer, nullptr, 16);
   b464a:	4b44      	ldr	r3, [pc, #272]	; (b475c <_Z12dataReceivedi+0x2bc>)
   b464c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   b464e:	6018      	str	r0, [r3, #0]
   b4650:	4940      	ldr	r1, [pc, #256]	; (b4754 <_Z12dataReceivedi+0x2b4>)
   b4652:	9400      	str	r4, [sp, #0]
   b4654:	2300      	movs	r3, #0
   b4656:	4840      	ldr	r0, [pc, #256]	; (b4758 <_Z12dataReceivedi+0x2b8>)
   b4658:	f7ff fec6 	bl	b43e8 <_ZN9__gnu_cxx6__stoaImmcJiEEET0_PFT_PKT1_PPS3_DpT2_EPKcS5_PjS9_>
    tailColor = std::stoul(tailBuffer, nullptr, 16);
   b465c:	4b40      	ldr	r3, [pc, #256]	; (b4760 <_Z12dataReceivedi+0x2c0>)
   b465e:	6018      	str	r0, [r3, #0]
      { _M_dispose(); }
   b4660:	f107 0028 	add.w	r0, r7, #40	; 0x28
   b4664:	f001 fad2 	bl	b5c0c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b4668:	1938      	adds	r0, r7, r4
   b466a:	f001 facf 	bl	b5c0c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
   b466e:	e77a      	b.n	b4566 <_Z12dataReceivedi+0xc6>
      if(strip.getPixelColor(i) == headColor || strip.getPixelColor(i) == tailColor){
   b4670:	f8df 80d0 	ldr.w	r8, [pc, #208]	; b4744 <_Z12dataReceivedi+0x2a4>
   b4674:	f8df 90e4 	ldr.w	r9, [pc, #228]	; b475c <_Z12dataReceivedi+0x2bc>
   b4678:	f8df a0e4 	ldr.w	sl, [pc, #228]	; b4760 <_Z12dataReceivedi+0x2c0>
    for(int i = 0; i < size + 1; i++){
   b467c:	2600      	movs	r6, #0
   b467e:	42a6      	cmp	r6, r4
   b4680:	dc19      	bgt.n	b46b6 <_Z12dataReceivedi+0x216>
      if(strip.getPixelColor(i) == headColor || strip.getPixelColor(i) == tailColor){
   b4682:	b2b1      	uxth	r1, r6
   b4684:	4640      	mov	r0, r8
   b4686:	6079      	str	r1, [r7, #4]
   b4688:	f000 fad8 	bl	b4c3c <_ZNK17Adafruit_NeoPixel13getPixelColorEt>
   b468c:	f8d9 3000 	ldr.w	r3, [r9]
   b4690:	6879      	ldr	r1, [r7, #4]
   b4692:	4298      	cmp	r0, r3
   b4694:	d105      	bne.n	b46a2 <_Z12dataReceivedi+0x202>
        strip.setPixelColor(i, 0);
   b4696:	2200      	movs	r2, #0
   b4698:	4640      	mov	r0, r8
   b469a:	f000 fa87 	bl	b4bac <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
    for(int i = 0; i < size + 1; i++){
   b469e:	3601      	adds	r6, #1
   b46a0:	e7ed      	b.n	b467e <_Z12dataReceivedi+0x1de>
      if(strip.getPixelColor(i) == headColor || strip.getPixelColor(i) == tailColor){
   b46a2:	4640      	mov	r0, r8
   b46a4:	6079      	str	r1, [r7, #4]
   b46a6:	f000 fac9 	bl	b4c3c <_ZNK17Adafruit_NeoPixel13getPixelColorEt>
   b46aa:	f8da 3000 	ldr.w	r3, [sl]
   b46ae:	6879      	ldr	r1, [r7, #4]
   b46b0:	4298      	cmp	r0, r3
   b46b2:	d1f4      	bne.n	b469e <_Z12dataReceivedi+0x1fe>
   b46b4:	e7ef      	b.n	b4696 <_Z12dataReceivedi+0x1f6>
        strip.setPixelColor(i - 1, headColor);
   b46b6:	f8df b0a4 	ldr.w	fp, [pc, #164]	; b475c <_Z12dataReceivedi+0x2bc>
   b46ba:	f8df 8088 	ldr.w	r8, [pc, #136]	; b4744 <_Z12dataReceivedi+0x2a4>
        strip.setPixelColor(i, tailColor);
   b46be:	f8df a0a0 	ldr.w	sl, [pc, #160]	; b4760 <_Z12dataReceivedi+0x2c0>
    for(int i = 0; i < size; i++){
   b46c2:	2600      	movs	r6, #0
   b46c4:	42a6      	cmp	r6, r4
   b46c6:	f6bf af4e 	bge.w	b4566 <_Z12dataReceivedi+0xc6>
      if(inputBuffer[i] == '1'){
   b46ca:	5dab      	ldrb	r3, [r5, r6]
   b46cc:	2b31      	cmp	r3, #49	; 0x31
   b46ce:	d119      	bne.n	b4704 <_Z12dataReceivedi+0x264>
        strip.setPixelColor(i - 1, tailColor);
   b46d0:	fa1f f986 	uxth.w	r9, r6
   b46d4:	f109 31ff 	add.w	r1, r9, #4294967295	; 0xffffffff
   b46d8:	f8da 2000 	ldr.w	r2, [sl]
   b46dc:	b289      	uxth	r1, r1
   b46de:	4640      	mov	r0, r8
   b46e0:	f000 fa64 	bl	b4bac <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
        strip.setPixelColor(i, tailColor);
   b46e4:	f8da 2000 	ldr.w	r2, [sl]
   b46e8:	4649      	mov	r1, r9
   b46ea:	4640      	mov	r0, r8
   b46ec:	f000 fa5e 	bl	b4bac <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
        strip.setPixelColor(i + 1, headColor);
   b46f0:	f8db 2000 	ldr.w	r2, [fp]
   b46f4:	f109 0101 	add.w	r1, r9, #1
        strip.setPixelColor(i + 1, tailColor);
   b46f8:	b289      	uxth	r1, r1
   b46fa:	4640      	mov	r0, r8
   b46fc:	f000 fa56 	bl	b4bac <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
    for(int i = 0; i < size; i++){
   b4700:	3601      	adds	r6, #1
   b4702:	e7df      	b.n	b46c4 <_Z12dataReceivedi+0x224>
      }else if(inputBuffer[i] == '5'){
   b4704:	2b35      	cmp	r3, #53	; 0x35
   b4706:	d1fb      	bne.n	b4700 <_Z12dataReceivedi+0x260>
        strip.setPixelColor(i - 1, headColor);
   b4708:	fa1f f986 	uxth.w	r9, r6
   b470c:	f109 31ff 	add.w	r1, r9, #4294967295	; 0xffffffff
   b4710:	f8db 2000 	ldr.w	r2, [fp]
   b4714:	b289      	uxth	r1, r1
   b4716:	4640      	mov	r0, r8
   b4718:	f000 fa48 	bl	b4bac <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
        strip.setPixelColor(i, tailColor);
   b471c:	f8da 2000 	ldr.w	r2, [sl]
   b4720:	4649      	mov	r1, r9
   b4722:	4640      	mov	r0, r8
   b4724:	f000 fa42 	bl	b4bac <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
        strip.setPixelColor(i + 1, tailColor);
   b4728:	f8da 2000 	ldr.w	r2, [sl]
   b472c:	f109 0101 	add.w	r1, r9, #1
   b4730:	e7e2      	b.n	b46f8 <_Z12dataReceivedi+0x258>
   b4732:	bf00      	nop
   b4734:	000b6066 	.word	0x000b6066
   b4738:	000b606e 	.word	0x000b606e
   b473c:	2003e698 	.word	0x2003e698
   b4740:	2003e680 	.word	0x2003e680
   b4744:	2003e69c 	.word	0x2003e69c
   b4748:	000b607e 	.word	0x000b607e
   b474c:	2003e600 	.word	0x2003e600
   b4750:	000b603b 	.word	0x000b603b
   b4754:	000b60ae 	.word	0x000b60ae
   b4758:	000b5ef9 	.word	0x000b5ef9
   b475c:	2003e694 	.word	0x2003e694
   b4760:	2003e6b0 	.word	0x2003e6b0
   b4764:	2003e681 	.word	0x2003e681
   b4768:	2003e684 	.word	0x2003e684
   b476c:	000b6086 	.word	0x000b6086

000b4770 <_GLOBAL__sub_I_SystemMode>:

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4770:	4b0a      	ldr	r3, [pc, #40]	; (b479c <_GLOBAL__sub_I_SystemMode+0x2c>)
  }
}
   b4772:	b510      	push	{r4, lr}
   b4774:	2200      	movs	r2, #0
   b4776:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
   b477a:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b477e:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4780:	2003      	movs	r0, #3
   b4782:	f000 fbff 	bl	b4f84 <set_system_mode>
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count());
    }

    static String deviceID(void) {
        return spark_deviceID();
   b4786:	4806      	ldr	r0, [pc, #24]	; (b47a0 <_GLOBAL__sub_I_SystemMode+0x30>)
   b4788:	f000 fc20 	bl	b4fcc <spark_deviceID>
Adafruit_NeoPixel strip(MAX_PIXELS, D2, 0x02);
   b478c:	2302      	movs	r3, #2
}
   b478e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
Adafruit_NeoPixel strip(MAX_PIXELS, D2, 0x02);
   b4792:	4804      	ldr	r0, [pc, #16]	; (b47a4 <_GLOBAL__sub_I_SystemMode+0x34>)
   b4794:	461a      	mov	r2, r3
   b4796:	2164      	movs	r1, #100	; 0x64
   b4798:	f000 b84a 	b.w	b4830 <_ZN17Adafruit_NeoPixelC1Ethh>
   b479c:	2003e670 	.word	0x2003e670
   b47a0:	2003e684 	.word	0x2003e684
   b47a4:	2003e69c 	.word	0x2003e69c

000b47a8 <_ZN17Adafruit_NeoPixel12updateLengthEt>:
Adafruit_NeoPixel::~Adafruit_NeoPixel() {
  if (pixels) free(pixels);
  if (begun) pinMode(pin, INPUT);
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
   b47a8:	b538      	push	{r3, r4, r5, lr}
   b47aa:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
   b47ac:	68c0      	ldr	r0, [r0, #12]
void Adafruit_NeoPixel::updateLength(uint16_t n) {
   b47ae:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
   b47b0:	b108      	cbz	r0, b47b6 <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
   b47b2:	f000 fc83 	bl	b50bc <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
   b47b6:	79a3      	ldrb	r3, [r4, #6]
   b47b8:	2b06      	cmp	r3, #6
   b47ba:	bf0c      	ite	eq
   b47bc:	2004      	moveq	r0, #4
   b47be:	2003      	movne	r0, #3
   b47c0:	fb10 f005 	smulbb	r0, r0, r5
   b47c4:	b280      	uxth	r0, r0
   b47c6:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
   b47c8:	f000 fc70 	bl	b50ac <malloc>
   b47cc:	60e0      	str	r0, [r4, #12]
   b47ce:	b128      	cbz	r0, b47dc <_ZN17Adafruit_NeoPixel12updateLengthEt+0x34>
    memset(pixels, 0, numBytes);
   b47d0:	88a2      	ldrh	r2, [r4, #4]
   b47d2:	2100      	movs	r1, #0
   b47d4:	f001 faa2 	bl	b5d1c <memset>
    numLEDs = n;
   b47d8:	8065      	strh	r5, [r4, #2]
  } else {
    numLEDs = numBytes = 0;
  }
}
   b47da:	bd38      	pop	{r3, r4, r5, pc}
    numLEDs = numBytes = 0;
   b47dc:	80a0      	strh	r0, [r4, #4]
   b47de:	8060      	strh	r0, [r4, #2]
}
   b47e0:	e7fb      	b.n	b47da <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>

000b47e2 <_ZN17Adafruit_NeoPixel5beginEv>:

void Adafruit_NeoPixel::begin(void) {
   b47e2:	b510      	push	{r4, lr}
   b47e4:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
   b47e6:	2101      	movs	r1, #1
   b47e8:	79c0      	ldrb	r0, [r0, #7]
   b47ea:	f001 f947 	bl	b5a7c <pinMode>
  digitalWrite(pin, LOW);
   b47ee:	79e0      	ldrb	r0, [r4, #7]
   b47f0:	2100      	movs	r1, #0
   b47f2:	f001 f954 	bl	b5a9e <digitalWrite>
  begun = true;
   b47f6:	2301      	movs	r3, #1
   b47f8:	7023      	strb	r3, [r4, #0]
}
   b47fa:	bd10      	pop	{r4, pc}

000b47fc <_ZN17Adafruit_NeoPixel6setPinEh>:

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
   b47fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (begun) {
   b47fe:	7803      	ldrb	r3, [r0, #0]
void Adafruit_NeoPixel::setPin(uint8_t p) {
   b4800:	4605      	mov	r5, r0
   b4802:	460c      	mov	r4, r1
    if (begun) {
   b4804:	b11b      	cbz	r3, b480e <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
   b4806:	79c0      	ldrb	r0, [r0, #7]
   b4808:	2100      	movs	r1, #0
   b480a:	f001 f937 	bl	b5a7c <pinMode>
    }
    pin = p;
    if (begun) {
   b480e:	782b      	ldrb	r3, [r5, #0]
    pin = p;
   b4810:	71ec      	strb	r4, [r5, #7]
    if (begun) {
   b4812:	b15b      	cbz	r3, b482c <_ZN17Adafruit_NeoPixel6setPinEh+0x30>
        pinMode(p, OUTPUT);
   b4814:	b2a0      	uxth	r0, r4
   b4816:	2101      	movs	r1, #1
   b4818:	9001      	str	r0, [sp, #4]
   b481a:	f001 f92f 	bl	b5a7c <pinMode>
        digitalWrite(p, LOW);
   b481e:	9801      	ldr	r0, [sp, #4]
   b4820:	2100      	movs	r1, #0
    }
}
   b4822:	b003      	add	sp, #12
   b4824:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        digitalWrite(p, LOW);
   b4828:	f001 b939 	b.w	b5a9e <digitalWrite>
}
   b482c:	b003      	add	sp, #12
   b482e:	bd30      	pop	{r4, r5, pc}

000b4830 <_ZN17Adafruit_NeoPixelC1Ethh>:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   b4830:	b570      	push	{r4, r5, r6, lr}
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   b4832:	2500      	movs	r5, #0
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   b4834:	4604      	mov	r4, r0
   b4836:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   b4838:	7183      	strb	r3, [r0, #6]
   b483a:	e9c0 5503 	strd	r5, r5, [r0, #12]
   b483e:	7005      	strb	r5, [r0, #0]
   b4840:	7205      	strb	r5, [r0, #8]
  updateLength(n);
   b4842:	f7ff ffb1 	bl	b47a8 <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
   b4846:	4620      	mov	r0, r4
   b4848:	4631      	mov	r1, r6
   b484a:	f7ff ffd7 	bl	b47fc <_ZN17Adafruit_NeoPixel6setPinEh>
}
   b484e:	4620      	mov	r0, r4
   b4850:	bd70      	pop	{r4, r5, r6, pc}
	...

000b4854 <_ZN17Adafruit_NeoPixel4showEv>:

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
   b4854:	68c3      	ldr	r3, [r0, #12]
   b4856:	2b00      	cmp	r3, #0
   b4858:	f000 81a4 	beq.w	b4ba4 <_ZN17Adafruit_NeoPixel4showEv+0x350>
void Adafruit_NeoPixel::show(void) {
   b485c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4860:	7983      	ldrb	r3, [r0, #6]
   b4862:	3b02      	subs	r3, #2
   b4864:	b2db      	uxtb	r3, r3
   b4866:	2b04      	cmp	r3, #4
   b4868:	bf9c      	itt	ls
   b486a:	4abf      	ldrls	r2, [pc, #764]	; (b4b68 <_ZN17Adafruit_NeoPixel4showEv+0x314>)
   b486c:	f852 4023 	ldrls.w	r4, [r2, r3, lsl #2]
   b4870:	b085      	sub	sp, #20
   b4872:	4605      	mov	r5, r0
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
   b4874:	bf88      	it	hi
   b4876:	2432      	movhi	r4, #50	; 0x32
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b4878:	f000 fa54 	bl	b4d24 <HAL_Timer_Get_Micro_Seconds>
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
   b487c:	692b      	ldr	r3, [r5, #16]
   b487e:	1ac0      	subs	r0, r0, r3
   b4880:	42a0      	cmp	r0, r4
   b4882:	d3f9      	bcc.n	b4878 <_ZN17Adafruit_NeoPixel4showEv+0x24>

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   b4884:	4cb9      	ldr	r4, [pc, #740]	; (b4b6c <_ZN17Adafruit_NeoPixel4showEv+0x318>)
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b4886:	88ae      	ldrh	r6, [r5, #4]
    if( (PWM[device]->ENABLE == 0)                            &&
   b4888:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b488c:	b91b      	cbnz	r3, b4896 <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b488e:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b4892:	2b00      	cmp	r3, #0
   b4894:	db7e      	blt.n	b4994 <_ZN17Adafruit_NeoPixel4showEv+0x140>
   b4896:	4cb6      	ldr	r4, [pc, #728]	; (b4b70 <_ZN17Adafruit_NeoPixel4showEv+0x31c>)
   b4898:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b489c:	b923      	cbnz	r3, b48a8 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b489e:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b48a2:	2b00      	cmp	r3, #0
   b48a4:	f2c0 816e 	blt.w	b4b84 <_ZN17Adafruit_NeoPixel4showEv+0x330>
   b48a8:	4cb2      	ldr	r4, [pc, #712]	; (b4b74 <_ZN17Adafruit_NeoPixel4showEv+0x320>)
   b48aa:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b48ae:	2b00      	cmp	r3, #0
   b48b0:	f000 8144 	beq.w	b4b3c <_ZN17Adafruit_NeoPixel4showEv+0x2e8>
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b48b4:	79eb      	ldrb	r3, [r5, #7]
   b48b6:	4ab0      	ldr	r2, [pc, #704]	; (b4b78 <_ZN17Adafruit_NeoPixel4showEv+0x324>)
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b48b8:	4cb0      	ldr	r4, [pc, #704]	; (b4b7c <_ZN17Adafruit_NeoPixel4showEv+0x328>)
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b48ba:	6812      	ldr	r2, [r2, #0]
   b48bc:	0119      	lsls	r1, r3, #4
   b48be:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   b48c2:	5c57      	ldrb	r7, [r2, r1]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   b48c4:	49ae      	ldr	r1, [pc, #696]	; (b4b80 <_ZN17Adafruit_NeoPixel4showEv+0x32c>)
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b48c6:	785b      	ldrb	r3, [r3, #1]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   b48c8:	f8d1 20fc 	ldr.w	r2, [r1, #252]	; 0xfc
   b48cc:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
   b48d0:	f8c1 20fc 	str.w	r2, [r1, #252]	; 0xfc
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b48d4:	6822      	ldr	r2, [r4, #0]
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b48d6:	f003 031f 	and.w	r3, r3, #31
   b48da:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
   b48de:	2701      	movs	r7, #1
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b48e0:	433a      	orrs	r2, r7
   b48e2:	6022      	str	r2, [r4, #0]
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   b48e4:	88a9      	ldrh	r1, [r5, #4]
      uint8_t *p = pixels;
   b48e6:	f8d5 800c 	ldr.w	r8, [r5, #12]
      uint32_t cycStart = DWT->CYCCNT;
   b48ea:	f8d4 9004 	ldr.w	r9, [r4, #4]
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b48ee:	409f      	lsls	r7, r3
      for(uint16_t n=0; n<numBytes; n++) {
   b48f0:	2900      	cmp	r1, #0
   b48f2:	d044      	beq.n	b497e <_ZN17Adafruit_NeoPixel4showEv+0x12a>
   b48f4:	f04f 0e00 	mov.w	lr, #0
      uint32_t cyc = 0;
   b48f8:	4672      	mov	r2, lr

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
          cyc  = DWT->CYCCNT;

          NRF_GPIO->OUTSET |= pinMask;
   b48fa:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
        uint8_t pix = *p++;
   b48fe:	f818 cb01 	ldrb.w	ip, [r8], #1
   b4902:	2008      	movs	r0, #8
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b4904:	2680      	movs	r6, #128	; 0x80
          while(DWT->CYCCNT - cyc < CYCLES_X00);
   b4906:	6863      	ldr	r3, [r4, #4]
   b4908:	1a9b      	subs	r3, r3, r2
   b490a:	2b46      	cmp	r3, #70	; 0x46
   b490c:	d9fb      	bls.n	b4906 <_ZN17Adafruit_NeoPixel4showEv+0xb2>
          cyc  = DWT->CYCCNT;
   b490e:	6862      	ldr	r2, [r4, #4]
          NRF_GPIO->OUTSET |= pinMask;
   b4910:	f8d1 3508 	ldr.w	r3, [r1, #1288]	; 0x508

          if(pix & mask) {
   b4914:	ea1c 0f06 	tst.w	ip, r6
          NRF_GPIO->OUTSET |= pinMask;
   b4918:	ea43 0307 	orr.w	r3, r3, r7
   b491c:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508
          if(pix & mask) {
   b4920:	d02f      	beq.n	b4982 <_ZN17Adafruit_NeoPixel4showEv+0x12e>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
   b4922:	6863      	ldr	r3, [r4, #4]
   b4924:	1a9b      	subs	r3, r3, r2
   b4926:	2b28      	cmp	r3, #40	; 0x28
   b4928:	d9fb      	bls.n	b4922 <_ZN17Adafruit_NeoPixel4showEv+0xce>
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   b492a:	f8d1 350c 	ldr.w	r3, [r1, #1292]	; 0x50c
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b492e:	3801      	subs	r0, #1
          NRF_GPIO->OUTCLR |= pinMask;
   b4930:	ea43 0307 	orr.w	r3, r3, r7
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b4934:	ea4f 0656 	mov.w	r6, r6, lsr #1
          NRF_GPIO->OUTCLR |= pinMask;
   b4938:	f8c1 350c 	str.w	r3, [r1, #1292]	; 0x50c
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b493c:	d1e3      	bne.n	b4906 <_ZN17Adafruit_NeoPixel4showEv+0xb2>
      for(uint16_t n=0; n<numBytes; n++) {
   b493e:	88ab      	ldrh	r3, [r5, #4]
   b4940:	f10e 0e01 	add.w	lr, lr, #1
   b4944:	fa1f fe8e 	uxth.w	lr, lr
   b4948:	4573      	cmp	r3, lr
   b494a:	d8d8      	bhi.n	b48fe <_ZN17Adafruit_NeoPixel4showEv+0xaa>
      while(DWT->CYCCNT - cyc < CYCLES_X00);


      // If total time longer than 25%, resend the whole data.
      // Since we are likely to be interrupted by SoftDevice
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   b494c:	f44f 7130 	mov.w	r1, #704	; 0x2c0
   b4950:	fb03 f101 	mul.w	r1, r3, r1
      while(DWT->CYCCNT - cyc < CYCLES_X00);
   b4954:	6863      	ldr	r3, [r4, #4]
   b4956:	1a9b      	subs	r3, r3, r2
   b4958:	2b46      	cmp	r3, #70	; 0x46
   b495a:	d9fb      	bls.n	b4954 <_ZN17Adafruit_NeoPixel4showEv+0x100>
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   b495c:	6863      	ldr	r3, [r4, #4]
   b495e:	eba3 0909 	sub.w	r9, r3, r9
   b4962:	4589      	cmp	r9, r1
   b4964:	f0c0 80e4 	bcc.w	b4b30 <_ZN17Adafruit_NeoPixel4showEv+0x2dc>
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b4968:	f44f 7096 	mov.w	r0, #300	; 0x12c
   b496c:	f000 f9d2 	bl	b4d14 <HAL_Delay_Microseconds>
      for(uint16_t n=0; n<numBytes; n++) {
   b4970:	88a9      	ldrh	r1, [r5, #4]
      uint8_t *p = pixels;
   b4972:	f8d5 800c 	ldr.w	r8, [r5, #12]
      uint32_t cycStart = DWT->CYCCNT;
   b4976:	f8d4 9004 	ldr.w	r9, [r4, #4]
      for(uint16_t n=0; n<numBytes; n++) {
   b497a:	2900      	cmp	r1, #0
   b497c:	d1ba      	bne.n	b48f4 <_ZN17Adafruit_NeoPixel4showEv+0xa0>
      uint32_t cyc = 0;
   b497e:	460a      	mov	r2, r1
   b4980:	e7e8      	b.n	b4954 <_ZN17Adafruit_NeoPixel4showEv+0x100>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
   b4982:	6863      	ldr	r3, [r4, #4]
   b4984:	1a9b      	subs	r3, r3, r2
   b4986:	2b11      	cmp	r3, #17
   b4988:	d8cf      	bhi.n	b492a <_ZN17Adafruit_NeoPixel4showEv+0xd6>
   b498a:	6863      	ldr	r3, [r4, #4]
   b498c:	1a9b      	subs	r3, r3, r2
   b498e:	2b11      	cmp	r3, #17
   b4990:	d9f7      	bls.n	b4982 <_ZN17Adafruit_NeoPixel4showEv+0x12e>
   b4992:	e7ca      	b.n	b492a <_ZN17Adafruit_NeoPixel4showEv+0xd6>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4994:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4998:	2b00      	cmp	r3, #0
   b499a:	f6bf af7c 	bge.w	b4896 <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b499e:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b49a2:	2b00      	cmp	r3, #0
   b49a4:	f6bf af77 	bge.w	b4896 <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b49a8:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b49ac:	2b00      	cmp	r3, #0
   b49ae:	f6bf af72 	bge.w	b4896 <_ZN17Adafruit_NeoPixel4showEv+0x42>
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b49b2:	0136      	lsls	r6, r6, #4
   b49b4:	1d33      	adds	r3, r6, #4
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   b49b6:	4618      	mov	r0, r3
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b49b8:	9300      	str	r3, [sp, #0]
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   b49ba:	f000 fb77 	bl	b50ac <malloc>
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
   b49be:	2800      	cmp	r0, #0
   b49c0:	f43f af78 	beq.w	b48b4 <_ZN17Adafruit_NeoPixel4showEv+0x60>
    for(uint16_t n=0; n<numBytes; n++) {
   b49c4:	88ab      	ldrh	r3, [r5, #4]
   b49c6:	2b00      	cmp	r3, #0
   b49c8:	f000 80ed 	beq.w	b4ba6 <_ZN17Adafruit_NeoPixel4showEv+0x352>
      uint8_t pix = pixels[n];
   b49cc:	68ea      	ldr	r2, [r5, #12]
   b49ce:	3b01      	subs	r3, #1
   b49d0:	fa12 f783 	uxtah	r7, r2, r3
   b49d4:	f102 3eff 	add.w	lr, r2, #4294967295	; 0xffffffff
    uint16_t pos = 0; // bit position
   b49d8:	2300      	movs	r3, #0
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b49da:	f248 0206 	movw	r2, #32774	; 0x8006
   b49de:	f248 010d 	movw	r1, #32781	; 0x800d
      uint8_t pix = pixels[n];
   b49e2:	f81e cf01 	ldrb.w	ip, [lr, #1]!
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b49e6:	f01c 0f80 	tst.w	ip, #128	; 0x80
   b49ea:	bf0c      	ite	eq
   b49ec:	4693      	moveq	fp, r2
   b49ee:	468b      	movne	fp, r1
   b49f0:	f01c 0f40 	tst.w	ip, #64	; 0x40
   b49f4:	bf0c      	ite	eq
   b49f6:	4616      	moveq	r6, r2
   b49f8:	460e      	movne	r6, r1
   b49fa:	f01c 0f20 	tst.w	ip, #32
   b49fe:	bf0c      	ite	eq
   b4a00:	4690      	moveq	r8, r2
   b4a02:	4688      	movne	r8, r1
        pos++;
   b4a04:	f103 0901 	add.w	r9, r3, #1
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4a08:	f8cd 8008 	str.w	r8, [sp, #8]
   b4a0c:	9601      	str	r6, [sp, #4]
        pos++;
   b4a0e:	f103 0802 	add.w	r8, r3, #2
   b4a12:	fa1f f989 	uxth.w	r9, r9
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4a16:	9e01      	ldr	r6, [sp, #4]
   b4a18:	f820 b013 	strh.w	fp, [r0, r3, lsl #1]
        pos++;
   b4a1c:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4a20:	f820 6019 	strh.w	r6, [r0, r9, lsl #1]
   b4a24:	9e02      	ldr	r6, [sp, #8]
   b4a26:	f820 6018 	strh.w	r6, [r0, r8, lsl #1]
        pos++;
   b4a2a:	f103 0803 	add.w	r8, r3, #3
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4a2e:	f01c 0f10 	tst.w	ip, #16
        pos++;
   b4a32:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4a36:	bf0c      	ite	eq
   b4a38:	4693      	moveq	fp, r2
   b4a3a:	468b      	movne	fp, r1
   b4a3c:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b4a40:	f103 0804 	add.w	r8, r3, #4
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4a44:	f01c 0f08 	tst.w	ip, #8
        pos++;
   b4a48:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4a4c:	bf0c      	ite	eq
   b4a4e:	4693      	moveq	fp, r2
   b4a50:	468b      	movne	fp, r1
   b4a52:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b4a56:	f103 0805 	add.w	r8, r3, #5
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4a5a:	f01c 0f04 	tst.w	ip, #4
        pos++;
   b4a5e:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4a62:	bf0c      	ite	eq
   b4a64:	4693      	moveq	fp, r2
   b4a66:	468b      	movne	fp, r1
   b4a68:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b4a6c:	f103 0a08 	add.w	sl, r3, #8
   b4a70:	f103 0806 	add.w	r8, r3, #6
   b4a74:	3307      	adds	r3, #7
   b4a76:	b29b      	uxth	r3, r3
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4a78:	f01c 0f02 	tst.w	ip, #2
        pos++;
   b4a7c:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4a80:	bf0c      	ite	eq
   b4a82:	4693      	moveq	fp, r2
   b4a84:	468b      	movne	fp, r1
        pos++;
   b4a86:	f8cd a00c 	str.w	sl, [sp, #12]
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4a8a:	f01c 0f01 	tst.w	ip, #1
   b4a8e:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
   b4a92:	bf15      	itete	ne
   b4a94:	f820 1013 	strhne.w	r1, [r0, r3, lsl #1]
   b4a98:	f820 2013 	strheq.w	r2, [r0, r3, lsl #1]
        pos++;
   b4a9c:	fa1f f38a 	uxthne.w	r3, sl
   b4aa0:	f8bd 300c 	ldrheq.w	r3, [sp, #12]
    for(uint16_t n=0; n<numBytes; n++) {
   b4aa4:	4577      	cmp	r7, lr
   b4aa6:	d19c      	bne.n	b49e2 <_ZN17Adafruit_NeoPixel4showEv+0x18e>
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4aa8:	1c59      	adds	r1, r3, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4aaa:	3302      	adds	r3, #2
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4aac:	b289      	uxth	r1, r1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4aae:	b29b      	uxth	r3, r3
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4ab0:	0049      	lsls	r1, r1, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4ab2:	005b      	lsls	r3, r3, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4ab4:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   b4ab8:	5247      	strh	r7, [r0, r1]
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b4aba:	9a00      	ldr	r2, [sp, #0]
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4abc:	52c7      	strh	r7, [r0, r3]
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4abe:	4b2e      	ldr	r3, [pc, #184]	; (b4b78 <_ZN17Adafruit_NeoPixel4showEv+0x324>)
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b4ac0:	0856      	lsrs	r6, r2, #1
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4ac2:	681f      	ldr	r7, [r3, #0]
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   b4ac4:	2200      	movs	r2, #0
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   b4ac6:	2314      	movs	r3, #20
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   b4ac8:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
    pwm->PRESCALER = (PWM_PRESCALER_PRESCALER_DIV_1 << PWM_PRESCALER_PRESCALER_Pos);
   b4acc:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   b4ad0:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    pwm->LOOP = (PWM_LOOP_CNT_Disabled << PWM_LOOP_CNT_Pos);
   b4ad4:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    pwm->DECODER = (PWM_DECODER_LOAD_Common << PWM_DECODER_LOAD_Pos) |
   b4ad8:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;
   b4adc:	f8c4 0520 	str.w	r0, [r4, #1312]	; 0x520
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b4ae0:	f8c4 6524 	str.w	r6, [r4, #1316]	; 0x524
    pwm->SEQ[0].REFRESH  = 0;
   b4ae4:	f8c4 2528 	str.w	r2, [r4, #1320]	; 0x528
    pwm->SEQ[0].ENDDELAY = 0;
   b4ae8:	f8c4 252c 	str.w	r2, [r4, #1324]	; 0x52c
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4aec:	79eb      	ldrb	r3, [r5, #7]
   b4aee:	eb07 1c03 	add.w	ip, r7, r3, lsl #4
   b4af2:	011b      	lsls	r3, r3, #4
    pwm->ENABLE = 1;
   b4af4:	2101      	movs	r1, #1
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4af6:	5cfe      	ldrb	r6, [r7, r3]
   b4af8:	f89c 3001 	ldrb.w	r3, [ip, #1]
   b4afc:	f003 031f 	and.w	r3, r3, #31
   b4b00:	ea43 1346 	orr.w	r3, r3, r6, lsl #5
   b4b04:	f8c4 3560 	str.w	r3, [r4, #1376]	; 0x560
    pwm->ENABLE = 1;
   b4b08:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
    pwm->EVENTS_SEQEND[0]  = 0;
   b4b0c:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
    pwm->TASKS_SEQSTART[0] = 1;
   b4b10:	60a1      	str	r1, [r4, #8]
    while(!pwm->EVENTS_SEQEND[0])
   b4b12:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   b4b16:	2b00      	cmp	r3, #0
   b4b18:	d0fb      	beq.n	b4b12 <_ZN17Adafruit_NeoPixel4showEv+0x2be>
    pwm->EVENTS_SEQEND[0] = 0;
   b4b1a:	2300      	movs	r3, #0
    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   b4b1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    pwm->EVENTS_SEQEND[0] = 0;
   b4b20:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    pwm->ENABLE = 0;
   b4b24:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   b4b28:	f8c4 2560 	str.w	r2, [r4, #1376]	; 0x560
      free(pixels_pattern);
   b4b2c:	f000 fac6 	bl	b50bc <free>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b4b30:	f000 f8f8 	bl	b4d24 <HAL_Timer_Get_Micro_Seconds>
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
   b4b34:	6128      	str	r0, [r5, #16]
}
   b4b36:	b005      	add	sp, #20
   b4b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4b3c:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b4b40:	2b00      	cmp	r3, #0
   b4b42:	f6bf aeb7 	bge.w	b48b4 <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4b46:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4b4a:	2b00      	cmp	r3, #0
   b4b4c:	f6bf aeb2 	bge.w	b48b4 <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4b50:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4b54:	2b00      	cmp	r3, #0
   b4b56:	f6bf aead 	bge.w	b48b4 <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b4b5a:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4b5e:	2b00      	cmp	r3, #0
   b4b60:	f6bf aea8 	bge.w	b48b4 <_ZN17Adafruit_NeoPixel4showEv+0x60>
   b4b64:	e725      	b.n	b49b2 <_ZN17Adafruit_NeoPixel4showEv+0x15e>
   b4b66:	bf00      	nop
   b4b68:	000b60b4 	.word	0x000b60b4
   b4b6c:	4001c000 	.word	0x4001c000
   b4b70:	40021000 	.word	0x40021000
   b4b74:	40022000 	.word	0x40022000
   b4b78:	2003e6b4 	.word	0x2003e6b4
   b4b7c:	e0001000 	.word	0xe0001000
   b4b80:	e000ed00 	.word	0xe000ed00
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4b84:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4b88:	2b00      	cmp	r3, #0
   b4b8a:	f6bf ae8d 	bge.w	b48a8 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4b8e:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4b92:	2b00      	cmp	r3, #0
   b4b94:	f6bf ae88 	bge.w	b48a8 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b4b98:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4b9c:	2b00      	cmp	r3, #0
   b4b9e:	f6bf ae83 	bge.w	b48a8 <_ZN17Adafruit_NeoPixel4showEv+0x54>
   b4ba2:	e706      	b.n	b49b2 <_ZN17Adafruit_NeoPixel4showEv+0x15e>
   b4ba4:	4770      	bx	lr
    for(uint16_t n=0; n<numBytes; n++) {
   b4ba6:	2304      	movs	r3, #4
   b4ba8:	2102      	movs	r1, #2
   b4baa:	e783      	b.n	b4ab4 <_ZN17Adafruit_NeoPixel4showEv+0x260>

000b4bac <_ZN17Adafruit_NeoPixel13setPixelColorEtm>:
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
   b4bac:	8843      	ldrh	r3, [r0, #2]
   b4bae:	428b      	cmp	r3, r1
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
   b4bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
   b4bb2:	d92d      	bls.n	b4c10 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
   b4bb4:	7a06      	ldrb	r6, [r0, #8]
   b4bb6:	f3c2 4307 	ubfx	r3, r2, #16, #8
   b4bba:	f3c2 2407 	ubfx	r4, r2, #8, #8
   b4bbe:	b2d5      	uxtb	r5, r2
   b4bc0:	b13e      	cbz	r6, b4bd2 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x26>
      r = (r * brightness) >> 8;
   b4bc2:	4373      	muls	r3, r6
      g = (g * brightness) >> 8;
   b4bc4:	4374      	muls	r4, r6
      b = (b * brightness) >> 8;
   b4bc6:	4375      	muls	r5, r6
      r = (r * brightness) >> 8;
   b4bc8:	f3c3 2307 	ubfx	r3, r3, #8, #8
      g = (g * brightness) >> 8;
   b4bcc:	f3c4 2407 	ubfx	r4, r4, #8, #8
      b = (b * brightness) >> 8;
   b4bd0:	0a2d      	lsrs	r5, r5, #8
    }
    uint8_t *p = &pixels[n * (type==SK6812RGBW?4:3)];
   b4bd2:	f890 c006 	ldrb.w	ip, [r0, #6]
   b4bd6:	68c7      	ldr	r7, [r0, #12]
   b4bd8:	f1bc 0f06 	cmp.w	ip, #6
   b4bdc:	bf0c      	ite	eq
   b4bde:	2604      	moveq	r6, #4
   b4be0:	2603      	movne	r6, #3
   b4be2:	434e      	muls	r6, r1
   b4be4:	f1ac 0c02 	sub.w	ip, ip, #2
   b4be8:	19b9      	adds	r1, r7, r6
    switch(type) {
   b4bea:	f1bc 0f06 	cmp.w	ip, #6
   b4bee:	d81d      	bhi.n	b4c2c <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x80>
   b4bf0:	e8df f00c 	tbb	[pc, ip]
   b4bf4:	04081c04 	.word	0x04081c04
   b4bf8:	040f      	.short	0x040f
   b4bfa:	04          	.byte	0x04
   b4bfb:	00          	.byte	0x00
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
   b4bfc:	55bc      	strb	r4, [r7, r6]
          *p++ = r;
   b4bfe:	704b      	strb	r3, [r1, #1]
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
          *p++ = g;
          *p = b;
   b4c00:	708d      	strb	r5, [r1, #2]
        } break;
    }
  }
}
   b4c02:	e005      	b.n	b4c10 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
          *p++ = r;
   b4c04:	2bfe      	cmp	r3, #254	; 0xfe
   b4c06:	bf28      	it	cs
   b4c08:	23fe      	movcs	r3, #254	; 0xfe
   b4c0a:	55bb      	strb	r3, [r7, r6]
          *p++ = b;
   b4c0c:	704d      	strb	r5, [r1, #1]
          *p = g;
   b4c0e:	708c      	strb	r4, [r1, #2]
}
   b4c10:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p++ = r;
   b4c12:	55bb      	strb	r3, [r7, r6]
          *p++ = g;
   b4c14:	704c      	strb	r4, [r1, #1]
          *p++ = b;
   b4c16:	708d      	strb	r5, [r1, #2]
          *p = brightness ? ((w * brightness) >> 8) : w;
   b4c18:	7a03      	ldrb	r3, [r0, #8]
          uint8_t w = (uint8_t)(c >> 24);
   b4c1a:	0e12      	lsrs	r2, r2, #24
          *p = brightness ? ((w * brightness) >> 8) : w;
   b4c1c:	b913      	cbnz	r3, b4c24 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x78>
          uint8_t w = (uint8_t)(c >> 24);
   b4c1e:	b2d2      	uxtb	r2, r2
          *p = brightness ? ((w * brightness) >> 8) : w;
   b4c20:	70ca      	strb	r2, [r1, #3]
        } break;
   b4c22:	e7f5      	b.n	b4c10 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
          *p = brightness ? ((w * brightness) >> 8) : w;
   b4c24:	435a      	muls	r2, r3
   b4c26:	f3c2 2207 	ubfx	r2, r2, #8, #8
   b4c2a:	e7f9      	b.n	b4c20 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x74>
          *p++ = r;
   b4c2c:	55bb      	strb	r3, [r7, r6]
          *p++ = g;
   b4c2e:	704c      	strb	r4, [r1, #1]
   b4c30:	e7e6      	b.n	b4c00 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x54>

000b4c32 <_ZN17Adafruit_NeoPixel5ColorEhhh>:
}

// Convert separate R,G,B into packed 32-bit RGB color.
// Packed format is always RGB, regardless of LED strand color order.
uint32_t Adafruit_NeoPixel::Color(uint8_t r, uint8_t g, uint8_t b) {
  return ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
   b4c32:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
}
   b4c36:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
   b4c3a:	4770      	bx	lr

000b4c3c <_ZNK17Adafruit_NeoPixel13getPixelColorEt>:
uint32_t Adafruit_NeoPixel::Color(uint8_t r, uint8_t g, uint8_t b, uint8_t w) {
  return ((uint32_t)w << 24) | ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
}

// Query color from previously-set pixel (returns packed 32-bit RGB value)
uint32_t Adafruit_NeoPixel::getPixelColor(uint16_t n) const {
   b4c3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(n >= numLEDs) {
   b4c3e:	8843      	ldrh	r3, [r0, #2]
   b4c40:	428b      	cmp	r3, r1
   b4c42:	d946      	bls.n	b4cd2 <_ZNK17Adafruit_NeoPixel13getPixelColorEt+0x96>
    // Out of bounds, return no color.
    return 0;
  }

  uint8_t *p = &pixels[n * (type==SK6812RGBW?4:3)];
   b4c44:	7984      	ldrb	r4, [r0, #6]
   b4c46:	68c6      	ldr	r6, [r0, #12]
   b4c48:	2c06      	cmp	r4, #6
   b4c4a:	bf0c      	ite	eq
   b4c4c:	2504      	moveq	r5, #4
   b4c4e:	2503      	movne	r5, #3
   b4c50:	434d      	muls	r5, r1
   b4c52:	1972      	adds	r2, r6, r5
  uint32_t c;

  switch(type) {
   b4c54:	1ea7      	subs	r7, r4, #2
    case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
    case WS2812B_FAST:
    case WS2812B2:
    case WS2812B2_FAST: {
        c = ((uint32_t)p[1] << 16) | ((uint32_t)p[0] <<  8) | (uint32_t)p[2];
   b4c56:	7853      	ldrb	r3, [r2, #1]
   b4c58:	5d71      	ldrb	r1, [r6, r5]
   b4c5a:	7892      	ldrb	r2, [r2, #2]
   b4c5c:	2f06      	cmp	r7, #6
   b4c5e:	d834      	bhi.n	b4cca <_ZNK17Adafruit_NeoPixel13getPixelColorEt+0x8e>
   b4c60:	e8df f007 	tbb	[pc, r7]
   b4c64:	04093304 	.word	0x04093304
   b4c68:	040d      	.short	0x040d
   b4c6a:	04          	.byte	0x04
   b4c6b:	00          	.byte	0x00
   b4c6c:	0209      	lsls	r1, r1, #8
   b4c6e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
        c = ((uint32_t)p[0] << 24) | ((uint32_t)p[1] << 16) | ((uint32_t)p[2] <<  8) | (uint32_t)p[3];
      } break;
    case WS2811: // WS2811 is RGB order
    case TM1803: // TM1803 is RGB order
    default: {   // default is RGB order
        c = ((uint32_t)p[0] << 16) | ((uint32_t)p[1] <<  8) | (uint32_t)p[2];
   b4c72:	4313      	orrs	r3, r2
   b4c74:	e005      	b.n	b4c82 <_ZNK17Adafruit_NeoPixel13getPixelColorEt+0x46>
        c = ((uint32_t)p[0] << 16) | ((uint32_t)p[2] <<  8) | (uint32_t)p[1];
   b4c76:	0212      	lsls	r2, r2, #8
   b4c78:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   b4c7c:	e7f9      	b.n	b4c72 <_ZNK17Adafruit_NeoPixel13getPixelColorEt+0x36>
        c = ((uint32_t)p[0] << 24) | ((uint32_t)p[1] << 16) | ((uint32_t)p[2] <<  8) | (uint32_t)p[3];
   b4c7e:	5973      	ldr	r3, [r6, r5]
   b4c80:	ba1b      	rev	r3, r3
      } break;
  }

  // Adjust this back up to the true color, as setting a pixel color will
  // scale it back down again.
  if(brightness) { // See notes in setBrightness()
   b4c82:	7a02      	ldrb	r2, [r0, #8]
        c = ((uint32_t)p[0] << 16) | ((uint32_t)p[1] <<  8) | (uint32_t)p[2];
   b4c84:	9301      	str	r3, [sp, #4]
  if(brightness) { // See notes in setBrightness()
   b4c86:	b1ea      	cbz	r2, b4cc4 <_ZNK17Adafruit_NeoPixel13getPixelColorEt+0x88>
    //Cast the color to a byte array
    uint8_t * c_ptr =reinterpret_cast<uint8_t*>(&c);
    if (type == SK6812RGBW) {
   b4c88:	2c06      	cmp	r4, #6
      c_ptr[3] = (c_ptr[3] << 8)/brightness;
   b4c8a:	bf01      	itttt	eq
   b4c8c:	f89d 3007 	ldrbeq.w	r3, [sp, #7]
   b4c90:	021b      	lsleq	r3, r3, #8
   b4c92:	fbb3 f3f2 	udiveq	r3, r3, r2
   b4c96:	f88d 3007 	strbeq.w	r3, [sp, #7]
    }
    c_ptr[0] = (c_ptr[0] << 8)/brightness;
   b4c9a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b4c9e:	021b      	lsls	r3, r3, #8
   b4ca0:	fbb3 f3f2 	udiv	r3, r3, r2
   b4ca4:	f88d 3004 	strb.w	r3, [sp, #4]
    c_ptr[1] = (c_ptr[1] << 8)/brightness;
   b4ca8:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b4cac:	021b      	lsls	r3, r3, #8
   b4cae:	fbb3 f3f2 	udiv	r3, r3, r2
   b4cb2:	f88d 3005 	strb.w	r3, [sp, #5]
    c_ptr[2] = (c_ptr[2] << 8)/brightness;
   b4cb6:	f89d 3006 	ldrb.w	r3, [sp, #6]
   b4cba:	021b      	lsls	r3, r3, #8
   b4cbc:	fbb3 f3f2 	udiv	r3, r3, r2
   b4cc0:	f88d 3006 	strb.w	r3, [sp, #6]
  }
  return c; // Pixel # is out of bounds
   b4cc4:	9801      	ldr	r0, [sp, #4]
}
   b4cc6:	b003      	add	sp, #12
   b4cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        c = ((uint32_t)p[0] << 16) | ((uint32_t)p[1] <<  8) | (uint32_t)p[2];
   b4cca:	021b      	lsls	r3, r3, #8
   b4ccc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   b4cd0:	e7cf      	b.n	b4c72 <_ZNK17Adafruit_NeoPixel13getPixelColorEt+0x36>
    return 0;
   b4cd2:	2000      	movs	r0, #0
   b4cd4:	e7f7      	b.n	b4cc6 <_ZNK17Adafruit_NeoPixel13getPixelColorEt+0x8a>

000b4cd6 <_ZNK17Adafruit_NeoPixel9numPixelsEv>:
  return pixels;
}

uint16_t Adafruit_NeoPixel::numPixels(void) const {
  return numLEDs;
}
   b4cd6:	8840      	ldrh	r0, [r0, #2]
   b4cd8:	4770      	bx	lr

000b4cda <_ZN17Adafruit_NeoPixel5clearEv>:
uint8_t Adafruit_NeoPixel::getBrightness(void) const {
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
   b4cda:	8882      	ldrh	r2, [r0, #4]
   b4cdc:	68c0      	ldr	r0, [r0, #12]
   b4cde:	2100      	movs	r1, #0
   b4ce0:	f001 b81c 	b.w	b5d1c <memset>

000b4ce4 <_GLOBAL__sub_I_PIN_MAP2>:
}
   b4ce4:	b508      	push	{r3, lr}
  NRF5x_Pin_Info* PIN_MAP2 = HAL_Pin_Map();
   b4ce6:	f000 f82d 	bl	b4d44 <HAL_Pin_Map>
   b4cea:	4b01      	ldr	r3, [pc, #4]	; (b4cf0 <_GLOBAL__sub_I_PIN_MAP2+0xc>)
   b4cec:	6018      	str	r0, [r3, #0]
}
   b4cee:	bd08      	pop	{r3, pc}
   b4cf0:	2003e6b4 	.word	0x2003e6b4

000b4cf4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4cf4:	b508      	push	{r3, lr}
   b4cf6:	4b02      	ldr	r3, [pc, #8]	; (b4d00 <os_mutex_recursive_create+0xc>)
   b4cf8:	681b      	ldr	r3, [r3, #0]
   b4cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4cfc:	9301      	str	r3, [sp, #4]
   b4cfe:	bd08      	pop	{r3, pc}
   b4d00:	00030248 	.word	0x00030248

000b4d04 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4d04:	b508      	push	{r3, lr}
   b4d06:	4b02      	ldr	r3, [pc, #8]	; (b4d10 <HAL_RNG_GetRandomNumber+0xc>)
   b4d08:	681b      	ldr	r3, [r3, #0]
   b4d0a:	685b      	ldr	r3, [r3, #4]
   b4d0c:	9301      	str	r3, [sp, #4]
   b4d0e:	bd08      	pop	{r3, pc}
   b4d10:	00030218 	.word	0x00030218

000b4d14 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b4d14:	b508      	push	{r3, lr}
   b4d16:	4b02      	ldr	r3, [pc, #8]	; (b4d20 <HAL_Delay_Microseconds+0xc>)
   b4d18:	681b      	ldr	r3, [r3, #0]
   b4d1a:	68db      	ldr	r3, [r3, #12]
   b4d1c:	9301      	str	r3, [sp, #4]
   b4d1e:	bd08      	pop	{r3, pc}
   b4d20:	00030218 	.word	0x00030218

000b4d24 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   b4d24:	b508      	push	{r3, lr}
   b4d26:	4b02      	ldr	r3, [pc, #8]	; (b4d30 <HAL_Timer_Get_Micro_Seconds+0xc>)
   b4d28:	681b      	ldr	r3, [r3, #0]
   b4d2a:	691b      	ldr	r3, [r3, #16]
   b4d2c:	9301      	str	r3, [sp, #4]
   b4d2e:	bd08      	pop	{r3, pc}
   b4d30:	00030218 	.word	0x00030218

000b4d34 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4d34:	b508      	push	{r3, lr}
   b4d36:	4b02      	ldr	r3, [pc, #8]	; (b4d40 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4d38:	681b      	ldr	r3, [r3, #0]
   b4d3a:	695b      	ldr	r3, [r3, #20]
   b4d3c:	9301      	str	r3, [sp, #4]
   b4d3e:	bd08      	pop	{r3, pc}
   b4d40:	00030218 	.word	0x00030218

000b4d44 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   b4d44:	b508      	push	{r3, lr}
   b4d46:	4b02      	ldr	r3, [pc, #8]	; (b4d50 <HAL_Pin_Map+0xc>)
   b4d48:	681b      	ldr	r3, [r3, #0]
   b4d4a:	681b      	ldr	r3, [r3, #0]
   b4d4c:	9301      	str	r3, [sp, #4]
   b4d4e:	bd08      	pop	{r3, pc}
   b4d50:	0003022c 	.word	0x0003022c

000b4d54 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b4d54:	b508      	push	{r3, lr}
   b4d56:	4b02      	ldr	r3, [pc, #8]	; (b4d60 <HAL_Pin_Mode+0xc>)
   b4d58:	681b      	ldr	r3, [r3, #0]
   b4d5a:	689b      	ldr	r3, [r3, #8]
   b4d5c:	9301      	str	r3, [sp, #4]
   b4d5e:	bd08      	pop	{r3, pc}
   b4d60:	0003022c 	.word	0x0003022c

000b4d64 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b4d64:	b508      	push	{r3, lr}
   b4d66:	4b02      	ldr	r3, [pc, #8]	; (b4d70 <HAL_Get_Pin_Mode+0xc>)
   b4d68:	681b      	ldr	r3, [r3, #0]
   b4d6a:	68db      	ldr	r3, [r3, #12]
   b4d6c:	9301      	str	r3, [sp, #4]
   b4d6e:	bd08      	pop	{r3, pc}
   b4d70:	0003022c 	.word	0x0003022c

000b4d74 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b4d74:	b508      	push	{r3, lr}
   b4d76:	4b02      	ldr	r3, [pc, #8]	; (b4d80 <HAL_GPIO_Write+0xc>)
   b4d78:	681b      	ldr	r3, [r3, #0]
   b4d7a:	691b      	ldr	r3, [r3, #16]
   b4d7c:	9301      	str	r3, [sp, #4]
   b4d7e:	bd08      	pop	{r3, pc}
   b4d80:	0003022c 	.word	0x0003022c

000b4d84 <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   b4d84:	b508      	push	{r3, lr}
   b4d86:	4b02      	ldr	r3, [pc, #8]	; (b4d90 <hal_i2c_set_speed+0xc>)
   b4d88:	681b      	ldr	r3, [r3, #0]
   b4d8a:	681b      	ldr	r3, [r3, #0]
   b4d8c:	9301      	str	r3, [sp, #4]
   b4d8e:	bd08      	pop	{r3, pc}
   b4d90:	00030228 	.word	0x00030228

000b4d94 <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b4d94:	b508      	push	{r3, lr}
   b4d96:	4b02      	ldr	r3, [pc, #8]	; (b4da0 <hal_i2c_begin+0xc>)
   b4d98:	681b      	ldr	r3, [r3, #0]
   b4d9a:	68db      	ldr	r3, [r3, #12]
   b4d9c:	9301      	str	r3, [sp, #4]
   b4d9e:	bd08      	pop	{r3, pc}
   b4da0:	00030228 	.word	0x00030228

000b4da4 <hal_i2c_end>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
   b4da4:	b508      	push	{r3, lr}
   b4da6:	4b02      	ldr	r3, [pc, #8]	; (b4db0 <hal_i2c_end+0xc>)
   b4da8:	681b      	ldr	r3, [r3, #0]
   b4daa:	691b      	ldr	r3, [r3, #16]
   b4dac:	9301      	str	r3, [sp, #4]
   b4dae:	bd08      	pop	{r3, pc}
   b4db0:	00030228 	.word	0x00030228

000b4db4 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b4db4:	b508      	push	{r3, lr}
   b4db6:	4b02      	ldr	r3, [pc, #8]	; (b4dc0 <hal_i2c_write+0xc>)
   b4db8:	681b      	ldr	r3, [r3, #0]
   b4dba:	6a1b      	ldr	r3, [r3, #32]
   b4dbc:	9301      	str	r3, [sp, #4]
   b4dbe:	bd08      	pop	{r3, pc}
   b4dc0:	00030228 	.word	0x00030228

000b4dc4 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b4dc4:	b508      	push	{r3, lr}
   b4dc6:	4b02      	ldr	r3, [pc, #8]	; (b4dd0 <hal_i2c_available+0xc>)
   b4dc8:	681b      	ldr	r3, [r3, #0]
   b4dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4dcc:	9301      	str	r3, [sp, #4]
   b4dce:	bd08      	pop	{r3, pc}
   b4dd0:	00030228 	.word	0x00030228

000b4dd4 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4dd4:	b508      	push	{r3, lr}
   b4dd6:	4b02      	ldr	r3, [pc, #8]	; (b4de0 <hal_i2c_read+0xc>)
   b4dd8:	681b      	ldr	r3, [r3, #0]
   b4dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4ddc:	9301      	str	r3, [sp, #4]
   b4dde:	bd08      	pop	{r3, pc}
   b4de0:	00030228 	.word	0x00030228

000b4de4 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4de4:	b508      	push	{r3, lr}
   b4de6:	4b02      	ldr	r3, [pc, #8]	; (b4df0 <hal_i2c_peek+0xc>)
   b4de8:	681b      	ldr	r3, [r3, #0]
   b4dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4dec:	9301      	str	r3, [sp, #4]
   b4dee:	bd08      	pop	{r3, pc}
   b4df0:	00030228 	.word	0x00030228

000b4df4 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4df4:	b508      	push	{r3, lr}
   b4df6:	4b02      	ldr	r3, [pc, #8]	; (b4e00 <hal_i2c_flush+0xc>)
   b4df8:	681b      	ldr	r3, [r3, #0]
   b4dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4dfc:	9301      	str	r3, [sp, #4]
   b4dfe:	bd08      	pop	{r3, pc}
   b4e00:	00030228 	.word	0x00030228

000b4e04 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b4e04:	b508      	push	{r3, lr}
   b4e06:	4b02      	ldr	r3, [pc, #8]	; (b4e10 <hal_i2c_is_enabled+0xc>)
   b4e08:	681b      	ldr	r3, [r3, #0]
   b4e0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4e0c:	9301      	str	r3, [sp, #4]
   b4e0e:	bd08      	pop	{r3, pc}
   b4e10:	00030228 	.word	0x00030228

000b4e14 <hal_i2c_set_callback_on_received>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
   b4e14:	b508      	push	{r3, lr}
   b4e16:	4b02      	ldr	r3, [pc, #8]	; (b4e20 <hal_i2c_set_callback_on_received+0xc>)
   b4e18:	681b      	ldr	r3, [r3, #0]
   b4e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b4e1c:	9301      	str	r3, [sp, #4]
   b4e1e:	bd08      	pop	{r3, pc}
   b4e20:	00030228 	.word	0x00030228

000b4e24 <hal_i2c_set_callback_on_requested>:
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
   b4e24:	b508      	push	{r3, lr}
   b4e26:	4b02      	ldr	r3, [pc, #8]	; (b4e30 <hal_i2c_set_callback_on_requested+0xc>)
   b4e28:	681b      	ldr	r3, [r3, #0]
   b4e2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4e2c:	9301      	str	r3, [sp, #4]
   b4e2e:	bd08      	pop	{r3, pc}
   b4e30:	00030228 	.word	0x00030228

000b4e34 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4e34:	b508      	push	{r3, lr}
   b4e36:	4b02      	ldr	r3, [pc, #8]	; (b4e40 <hal_i2c_init+0xc>)
   b4e38:	681b      	ldr	r3, [r3, #0]
   b4e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4e3c:	9301      	str	r3, [sp, #4]
   b4e3e:	bd08      	pop	{r3, pc}
   b4e40:	00030228 	.word	0x00030228

000b4e44 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4e44:	b508      	push	{r3, lr}
   b4e46:	4b02      	ldr	r3, [pc, #8]	; (b4e50 <inet_inet_ntop+0xc>)
   b4e48:	681b      	ldr	r3, [r3, #0]
   b4e4a:	695b      	ldr	r3, [r3, #20]
   b4e4c:	9301      	str	r3, [sp, #4]
   b4e4e:	bd08      	pop	{r3, pc}
   b4e50:	00030264 	.word	0x00030264

000b4e54 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4e54:	b508      	push	{r3, lr}
   b4e56:	4b02      	ldr	r3, [pc, #8]	; (b4e60 <netdb_freeaddrinfo+0xc>)
   b4e58:	681b      	ldr	r3, [r3, #0]
   b4e5a:	689b      	ldr	r3, [r3, #8]
   b4e5c:	9301      	str	r3, [sp, #4]
   b4e5e:	bd08      	pop	{r3, pc}
   b4e60:	00030268 	.word	0x00030268

000b4e64 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4e64:	b508      	push	{r3, lr}
   b4e66:	4b02      	ldr	r3, [pc, #8]	; (b4e70 <netdb_getaddrinfo+0xc>)
   b4e68:	681b      	ldr	r3, [r3, #0]
   b4e6a:	68db      	ldr	r3, [r3, #12]
   b4e6c:	9301      	str	r3, [sp, #4]
   b4e6e:	bd08      	pop	{r3, pc}
   b4e70:	00030268 	.word	0x00030268

000b4e74 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b4e74:	b508      	push	{r3, lr}
   b4e76:	4b02      	ldr	r3, [pc, #8]	; (b4e80 <hal_spi_init+0xc>)
   b4e78:	681b      	ldr	r3, [r3, #0]
   b4e7a:	69db      	ldr	r3, [r3, #28]
   b4e7c:	9301      	str	r3, [sp, #4]
   b4e7e:	bd08      	pop	{r3, pc}
   b4e80:	00030230 	.word	0x00030230

000b4e84 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b4e84:	b508      	push	{r3, lr}
   b4e86:	4b02      	ldr	r3, [pc, #8]	; (b4e90 <hal_spi_is_enabled+0xc>)
   b4e88:	681b      	ldr	r3, [r3, #0]
   b4e8a:	6a1b      	ldr	r3, [r3, #32]
   b4e8c:	9301      	str	r3, [sp, #4]
   b4e8e:	bd08      	pop	{r3, pc}
   b4e90:	00030230 	.word	0x00030230

000b4e94 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4e94:	b508      	push	{r3, lr}
   b4e96:	4b02      	ldr	r3, [pc, #8]	; (b4ea0 <hal_usart_write+0xc>)
   b4e98:	681b      	ldr	r3, [r3, #0]
   b4e9a:	68db      	ldr	r3, [r3, #12]
   b4e9c:	9301      	str	r3, [sp, #4]
   b4e9e:	bd08      	pop	{r3, pc}
   b4ea0:	0003023c 	.word	0x0003023c

000b4ea4 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4ea4:	b508      	push	{r3, lr}
   b4ea6:	4b02      	ldr	r3, [pc, #8]	; (b4eb0 <hal_usart_available+0xc>)
   b4ea8:	681b      	ldr	r3, [r3, #0]
   b4eaa:	691b      	ldr	r3, [r3, #16]
   b4eac:	9301      	str	r3, [sp, #4]
   b4eae:	bd08      	pop	{r3, pc}
   b4eb0:	0003023c 	.word	0x0003023c

000b4eb4 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4eb4:	b508      	push	{r3, lr}
   b4eb6:	4b02      	ldr	r3, [pc, #8]	; (b4ec0 <hal_usart_read+0xc>)
   b4eb8:	681b      	ldr	r3, [r3, #0]
   b4eba:	695b      	ldr	r3, [r3, #20]
   b4ebc:	9301      	str	r3, [sp, #4]
   b4ebe:	bd08      	pop	{r3, pc}
   b4ec0:	0003023c 	.word	0x0003023c

000b4ec4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4ec4:	b508      	push	{r3, lr}
   b4ec6:	4b02      	ldr	r3, [pc, #8]	; (b4ed0 <hal_usart_peek+0xc>)
   b4ec8:	681b      	ldr	r3, [r3, #0]
   b4eca:	699b      	ldr	r3, [r3, #24]
   b4ecc:	9301      	str	r3, [sp, #4]
   b4ece:	bd08      	pop	{r3, pc}
   b4ed0:	0003023c 	.word	0x0003023c

000b4ed4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4ed4:	b508      	push	{r3, lr}
   b4ed6:	4b02      	ldr	r3, [pc, #8]	; (b4ee0 <hal_usart_flush+0xc>)
   b4ed8:	681b      	ldr	r3, [r3, #0]
   b4eda:	69db      	ldr	r3, [r3, #28]
   b4edc:	9301      	str	r3, [sp, #4]
   b4ede:	bd08      	pop	{r3, pc}
   b4ee0:	0003023c 	.word	0x0003023c

000b4ee4 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b4ee4:	b508      	push	{r3, lr}
   b4ee6:	4b02      	ldr	r3, [pc, #8]	; (b4ef0 <hal_usart_is_enabled+0xc>)
   b4ee8:	681b      	ldr	r3, [r3, #0]
   b4eea:	6a1b      	ldr	r3, [r3, #32]
   b4eec:	9301      	str	r3, [sp, #4]
   b4eee:	bd08      	pop	{r3, pc}
   b4ef0:	0003023c 	.word	0x0003023c

000b4ef4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4ef4:	b508      	push	{r3, lr}
   b4ef6:	4b02      	ldr	r3, [pc, #8]	; (b4f00 <hal_usart_available_data_for_write+0xc>)
   b4ef8:	681b      	ldr	r3, [r3, #0]
   b4efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4efc:	9301      	str	r3, [sp, #4]
   b4efe:	bd08      	pop	{r3, pc}
   b4f00:	0003023c 	.word	0x0003023c

000b4f04 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4f04:	b508      	push	{r3, lr}
   b4f06:	4b02      	ldr	r3, [pc, #8]	; (b4f10 <hal_usart_init_ex+0xc>)
   b4f08:	681b      	ldr	r3, [r3, #0]
   b4f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4f0c:	9301      	str	r3, [sp, #4]
   b4f0e:	bd08      	pop	{r3, pc}
   b4f10:	0003023c 	.word	0x0003023c

000b4f14 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4f14:	b508      	push	{r3, lr}
   b4f16:	4b02      	ldr	r3, [pc, #8]	; (b4f20 <HAL_USB_USART_Init+0xc>)
   b4f18:	681b      	ldr	r3, [r3, #0]
   b4f1a:	681b      	ldr	r3, [r3, #0]
   b4f1c:	9301      	str	r3, [sp, #4]
   b4f1e:	bd08      	pop	{r3, pc}
   b4f20:	0003024c 	.word	0x0003024c

000b4f24 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b4f24:	b508      	push	{r3, lr}
   b4f26:	4b02      	ldr	r3, [pc, #8]	; (b4f30 <HAL_USB_USART_Begin+0xc>)
   b4f28:	681b      	ldr	r3, [r3, #0]
   b4f2a:	685b      	ldr	r3, [r3, #4]
   b4f2c:	9301      	str	r3, [sp, #4]
   b4f2e:	bd08      	pop	{r3, pc}
   b4f30:	0003024c 	.word	0x0003024c

000b4f34 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4f34:	b508      	push	{r3, lr}
   b4f36:	4b02      	ldr	r3, [pc, #8]	; (b4f40 <HAL_USB_USART_Available_Data+0xc>)
   b4f38:	681b      	ldr	r3, [r3, #0]
   b4f3a:	691b      	ldr	r3, [r3, #16]
   b4f3c:	9301      	str	r3, [sp, #4]
   b4f3e:	bd08      	pop	{r3, pc}
   b4f40:	0003024c 	.word	0x0003024c

000b4f44 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4f44:	b508      	push	{r3, lr}
   b4f46:	4b02      	ldr	r3, [pc, #8]	; (b4f50 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4f48:	681b      	ldr	r3, [r3, #0]
   b4f4a:	695b      	ldr	r3, [r3, #20]
   b4f4c:	9301      	str	r3, [sp, #4]
   b4f4e:	bd08      	pop	{r3, pc}
   b4f50:	0003024c 	.word	0x0003024c

000b4f54 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4f54:	b508      	push	{r3, lr}
   b4f56:	4b02      	ldr	r3, [pc, #8]	; (b4f60 <HAL_USB_USART_Receive_Data+0xc>)
   b4f58:	681b      	ldr	r3, [r3, #0]
   b4f5a:	699b      	ldr	r3, [r3, #24]
   b4f5c:	9301      	str	r3, [sp, #4]
   b4f5e:	bd08      	pop	{r3, pc}
   b4f60:	0003024c 	.word	0x0003024c

000b4f64 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4f64:	b508      	push	{r3, lr}
   b4f66:	4b02      	ldr	r3, [pc, #8]	; (b4f70 <HAL_USB_USART_Send_Data+0xc>)
   b4f68:	681b      	ldr	r3, [r3, #0]
   b4f6a:	69db      	ldr	r3, [r3, #28]
   b4f6c:	9301      	str	r3, [sp, #4]
   b4f6e:	bd08      	pop	{r3, pc}
   b4f70:	0003024c 	.word	0x0003024c

000b4f74 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4f74:	b508      	push	{r3, lr}
   b4f76:	4b02      	ldr	r3, [pc, #8]	; (b4f80 <HAL_USB_USART_Flush_Data+0xc>)
   b4f78:	681b      	ldr	r3, [r3, #0]
   b4f7a:	6a1b      	ldr	r3, [r3, #32]
   b4f7c:	9301      	str	r3, [sp, #4]
   b4f7e:	bd08      	pop	{r3, pc}
   b4f80:	0003024c 	.word	0x0003024c

000b4f84 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4f84:	b508      	push	{r3, lr}
   b4f86:	4b02      	ldr	r3, [pc, #8]	; (b4f90 <set_system_mode+0xc>)
   b4f88:	681b      	ldr	r3, [r3, #0]
   b4f8a:	685b      	ldr	r3, [r3, #4]
   b4f8c:	9301      	str	r3, [sp, #4]
   b4f8e:	bd08      	pop	{r3, pc}
   b4f90:	00030220 	.word	0x00030220

000b4f94 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b4f94:	b508      	push	{r3, lr}
   b4f96:	4b02      	ldr	r3, [pc, #8]	; (b4fa0 <system_delay_ms+0xc>)
   b4f98:	681b      	ldr	r3, [r3, #0]
   b4f9a:	695b      	ldr	r3, [r3, #20]
   b4f9c:	9301      	str	r3, [sp, #4]
   b4f9e:	bd08      	pop	{r3, pc}
   b4fa0:	00030220 	.word	0x00030220

000b4fa4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4fa4:	b508      	push	{r3, lr}
   b4fa6:	4b03      	ldr	r3, [pc, #12]	; (b4fb4 <system_ctrl_set_app_request_handler+0x10>)
   b4fa8:	681b      	ldr	r3, [r3, #0]
   b4faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b4fae:	9301      	str	r3, [sp, #4]
   b4fb0:	bd08      	pop	{r3, pc}
   b4fb2:	0000      	.short	0x0000
   b4fb4:	00030220 	.word	0x00030220

000b4fb8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b4fb8:	b508      	push	{r3, lr}
   b4fba:	4b03      	ldr	r3, [pc, #12]	; (b4fc8 <system_ctrl_set_result+0x10>)
   b4fbc:	681b      	ldr	r3, [r3, #0]
   b4fbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b4fc2:	9301      	str	r3, [sp, #4]
   b4fc4:	bd08      	pop	{r3, pc}
   b4fc6:	0000      	.short	0x0000
   b4fc8:	00030220 	.word	0x00030220

000b4fcc <spark_deviceID>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   b4fcc:	b508      	push	{r3, lr}
   b4fce:	4b02      	ldr	r3, [pc, #8]	; (b4fd8 <spark_deviceID+0xc>)
   b4fd0:	681b      	ldr	r3, [r3, #0]
   b4fd2:	69db      	ldr	r3, [r3, #28]
   b4fd4:	9301      	str	r3, [sp, #4]
   b4fd6:	bd08      	pop	{r3, pc}
   b4fd8:	00030244 	.word	0x00030244

000b4fdc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b4fdc:	b508      	push	{r3, lr}
   b4fde:	4b02      	ldr	r3, [pc, #8]	; (b4fe8 <spark_set_random_seed_from_cloud_handler+0xc>)
   b4fe0:	681b      	ldr	r3, [r3, #0]
   b4fe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4fe4:	9301      	str	r3, [sp, #4]
   b4fe6:	bd08      	pop	{r3, pc}
   b4fe8:	00030244 	.word	0x00030244

000b4fec <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4fec:	b508      	push	{r3, lr}
   b4fee:	4b02      	ldr	r3, [pc, #8]	; (b4ff8 <network_connect+0xc>)
   b4ff0:	681b      	ldr	r3, [r3, #0]
   b4ff2:	685b      	ldr	r3, [r3, #4]
   b4ff4:	9301      	str	r3, [sp, #4]
   b4ff6:	bd08      	pop	{r3, pc}
   b4ff8:	00030240 	.word	0x00030240

000b4ffc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4ffc:	b508      	push	{r3, lr}
   b4ffe:	4b02      	ldr	r3, [pc, #8]	; (b5008 <network_connecting+0xc>)
   b5000:	681b      	ldr	r3, [r3, #0]
   b5002:	689b      	ldr	r3, [r3, #8]
   b5004:	9301      	str	r3, [sp, #4]
   b5006:	bd08      	pop	{r3, pc}
   b5008:	00030240 	.word	0x00030240

000b500c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b500c:	b508      	push	{r3, lr}
   b500e:	4b02      	ldr	r3, [pc, #8]	; (b5018 <network_disconnect+0xc>)
   b5010:	681b      	ldr	r3, [r3, #0]
   b5012:	68db      	ldr	r3, [r3, #12]
   b5014:	9301      	str	r3, [sp, #4]
   b5016:	bd08      	pop	{r3, pc}
   b5018:	00030240 	.word	0x00030240

000b501c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b501c:	b508      	push	{r3, lr}
   b501e:	4b02      	ldr	r3, [pc, #8]	; (b5028 <network_ready+0xc>)
   b5020:	681b      	ldr	r3, [r3, #0]
   b5022:	691b      	ldr	r3, [r3, #16]
   b5024:	9301      	str	r3, [sp, #4]
   b5026:	bd08      	pop	{r3, pc}
   b5028:	00030240 	.word	0x00030240

000b502c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b502c:	b508      	push	{r3, lr}
   b502e:	4b02      	ldr	r3, [pc, #8]	; (b5038 <network_on+0xc>)
   b5030:	681b      	ldr	r3, [r3, #0]
   b5032:	695b      	ldr	r3, [r3, #20]
   b5034:	9301      	str	r3, [sp, #4]
   b5036:	bd08      	pop	{r3, pc}
   b5038:	00030240 	.word	0x00030240

000b503c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b503c:	b508      	push	{r3, lr}
   b503e:	4b02      	ldr	r3, [pc, #8]	; (b5048 <network_off+0xc>)
   b5040:	681b      	ldr	r3, [r3, #0]
   b5042:	699b      	ldr	r3, [r3, #24]
   b5044:	9301      	str	r3, [sp, #4]
   b5046:	bd08      	pop	{r3, pc}
   b5048:	00030240 	.word	0x00030240

000b504c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b504c:	b508      	push	{r3, lr}
   b504e:	4b02      	ldr	r3, [pc, #8]	; (b5058 <network_listen+0xc>)
   b5050:	681b      	ldr	r3, [r3, #0]
   b5052:	69db      	ldr	r3, [r3, #28]
   b5054:	9301      	str	r3, [sp, #4]
   b5056:	bd08      	pop	{r3, pc}
   b5058:	00030240 	.word	0x00030240

000b505c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b505c:	b508      	push	{r3, lr}
   b505e:	4b02      	ldr	r3, [pc, #8]	; (b5068 <network_listening+0xc>)
   b5060:	681b      	ldr	r3, [r3, #0]
   b5062:	6a1b      	ldr	r3, [r3, #32]
   b5064:	9301      	str	r3, [sp, #4]
   b5066:	bd08      	pop	{r3, pc}
   b5068:	00030240 	.word	0x00030240

000b506c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b506c:	b508      	push	{r3, lr}
   b506e:	4b02      	ldr	r3, [pc, #8]	; (b5078 <network_set_listen_timeout+0xc>)
   b5070:	681b      	ldr	r3, [r3, #0]
   b5072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5074:	9301      	str	r3, [sp, #4]
   b5076:	bd08      	pop	{r3, pc}
   b5078:	00030240 	.word	0x00030240

000b507c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b507c:	b508      	push	{r3, lr}
   b507e:	4b02      	ldr	r3, [pc, #8]	; (b5088 <network_get_listen_timeout+0xc>)
   b5080:	681b      	ldr	r3, [r3, #0]
   b5082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5084:	9301      	str	r3, [sp, #4]
   b5086:	bd08      	pop	{r3, pc}
   b5088:	00030240 	.word	0x00030240

000b508c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b508c:	b508      	push	{r3, lr}
   b508e:	4b02      	ldr	r3, [pc, #8]	; (b5098 <network_is_on+0xc>)
   b5090:	681b      	ldr	r3, [r3, #0]
   b5092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5094:	9301      	str	r3, [sp, #4]
   b5096:	bd08      	pop	{r3, pc}
   b5098:	00030240 	.word	0x00030240

000b509c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b509c:	b508      	push	{r3, lr}
   b509e:	4b02      	ldr	r3, [pc, #8]	; (b50a8 <network_is_off+0xc>)
   b50a0:	681b      	ldr	r3, [r3, #0]
   b50a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b50a4:	9301      	str	r3, [sp, #4]
   b50a6:	bd08      	pop	{r3, pc}
   b50a8:	00030240 	.word	0x00030240

000b50ac <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b50ac:	b508      	push	{r3, lr}
   b50ae:	4b02      	ldr	r3, [pc, #8]	; (b50b8 <malloc+0xc>)
   b50b0:	681b      	ldr	r3, [r3, #0]
   b50b2:	681b      	ldr	r3, [r3, #0]
   b50b4:	9301      	str	r3, [sp, #4]
   b50b6:	bd08      	pop	{r3, pc}
   b50b8:	0003021c 	.word	0x0003021c

000b50bc <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b50bc:	b508      	push	{r3, lr}
   b50be:	4b02      	ldr	r3, [pc, #8]	; (b50c8 <free+0xc>)
   b50c0:	681b      	ldr	r3, [r3, #0]
   b50c2:	685b      	ldr	r3, [r3, #4]
   b50c4:	9301      	str	r3, [sp, #4]
   b50c6:	bd08      	pop	{r3, pc}
   b50c8:	0003021c 	.word	0x0003021c

000b50cc <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b50cc:	b508      	push	{r3, lr}
   b50ce:	4b02      	ldr	r3, [pc, #8]	; (b50d8 <vsnprintf+0xc>)
   b50d0:	681b      	ldr	r3, [r3, #0]
   b50d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b50d4:	9301      	str	r3, [sp, #4]
   b50d6:	bd08      	pop	{r3, pc}
   b50d8:	0003021c 	.word	0x0003021c

000b50dc <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b50dc:	b508      	push	{r3, lr}
   b50de:	4b02      	ldr	r3, [pc, #8]	; (b50e8 <abort+0xc>)
   b50e0:	681b      	ldr	r3, [r3, #0]
   b50e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b50e4:	9301      	str	r3, [sp, #4]
   b50e6:	bd08      	pop	{r3, pc}
   b50e8:	0003021c 	.word	0x0003021c

000b50ec <__errno>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b50ec:	b508      	push	{r3, lr}
   b50ee:	4b02      	ldr	r3, [pc, #8]	; (b50f8 <__errno+0xc>)
   b50f0:	681b      	ldr	r3, [r3, #0]
   b50f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b50f4:	9301      	str	r3, [sp, #4]
   b50f6:	bd08      	pop	{r3, pc}
   b50f8:	0003021c 	.word	0x0003021c

000b50fc <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b50fc:	b508      	push	{r3, lr}
   b50fe:	4b02      	ldr	r3, [pc, #8]	; (b5108 <__assert_func+0xc>)
   b5100:	681b      	ldr	r3, [r3, #0]
   b5102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5104:	9301      	str	r3, [sp, #4]
   b5106:	bd08      	pop	{r3, pc}
   b5108:	0003021c 	.word	0x0003021c

000b510c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b510c:	b508      	push	{r3, lr}
   b510e:	4b02      	ldr	r3, [pc, #8]	; (b5118 <newlib_impure_ptr_callback+0xc>)
   b5110:	681b      	ldr	r3, [r3, #0]
   b5112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5114:	9301      	str	r3, [sp, #4]
   b5116:	bd08      	pop	{r3, pc}
   b5118:	0003021c 	.word	0x0003021c

000b511c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b511c:	2100      	movs	r1, #0
   b511e:	f7ff bf39 	b.w	b4f94 <system_delay_ms>
	...

000b5124 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b5124:	4802      	ldr	r0, [pc, #8]	; (b5130 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b5126:	2300      	movs	r3, #0
   b5128:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b512a:	f7ff bde3 	b.w	b4cf4 <os_mutex_recursive_create>
   b512e:	bf00      	nop
   b5130:	2003e6b8 	.word	0x2003e6b8

000b5134 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5134:	2200      	movs	r2, #0
   b5136:	6840      	ldr	r0, [r0, #4]
   b5138:	4611      	mov	r1, r2
   b513a:	f7ff bf8f 	b.w	b505c <network_listening>

000b513e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b513e:	2200      	movs	r2, #0
   b5140:	6840      	ldr	r0, [r0, #4]
   b5142:	4611      	mov	r1, r2
   b5144:	f7ff bf9a 	b.w	b507c <network_get_listen_timeout>

000b5148 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5148:	6840      	ldr	r0, [r0, #4]
   b514a:	2200      	movs	r2, #0
   b514c:	f7ff bf8e 	b.w	b506c <network_set_listen_timeout>

000b5150 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5150:	6840      	ldr	r0, [r0, #4]
   b5152:	2200      	movs	r2, #0
   b5154:	f081 0101 	eor.w	r1, r1, #1
   b5158:	f7ff bf78 	b.w	b504c <network_listen>

000b515c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b515c:	2300      	movs	r3, #0
   b515e:	6840      	ldr	r0, [r0, #4]
   b5160:	461a      	mov	r2, r3
   b5162:	4619      	mov	r1, r3
   b5164:	f7ff bf6a 	b.w	b503c <network_off>

000b5168 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5168:	2300      	movs	r3, #0
   b516a:	6840      	ldr	r0, [r0, #4]
   b516c:	461a      	mov	r2, r3
   b516e:	4619      	mov	r1, r3
   b5170:	f7ff bf5c 	b.w	b502c <network_on>

000b5174 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b5174:	2200      	movs	r2, #0
   b5176:	6840      	ldr	r0, [r0, #4]
   b5178:	4611      	mov	r1, r2
   b517a:	f7ff bf4f 	b.w	b501c <network_ready>

000b517e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b517e:	2200      	movs	r2, #0
   b5180:	6840      	ldr	r0, [r0, #4]
   b5182:	4611      	mov	r1, r2
   b5184:	f7ff bf3a 	b.w	b4ffc <network_connecting>

000b5188 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5188:	6840      	ldr	r0, [r0, #4]
   b518a:	2200      	movs	r2, #0
   b518c:	2102      	movs	r1, #2
   b518e:	f7ff bf3d 	b.w	b500c <network_disconnect>

000b5192 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5192:	2300      	movs	r3, #0
   b5194:	6840      	ldr	r0, [r0, #4]
   b5196:	461a      	mov	r2, r3
   b5198:	f7ff bf28 	b.w	b4fec <network_connect>

000b519c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b519c:	4b02      	ldr	r3, [pc, #8]	; (b51a8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b519e:	2203      	movs	r2, #3
   b51a0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b51a2:	4a02      	ldr	r2, [pc, #8]	; (b51ac <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b51a4:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b51a6:	4770      	bx	lr
   b51a8:	2003e6bc 	.word	0x2003e6bc
   b51ac:	000b60d0 	.word	0x000b60d0

000b51b0 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b51b0:	4770      	bx	lr

000b51b2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b51b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b51b4:	4606      	mov	r6, r0
   b51b6:	4615      	mov	r5, r2
   b51b8:	460c      	mov	r4, r1
   b51ba:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b51bc:	42bc      	cmp	r4, r7
   b51be:	d006      	beq.n	b51ce <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b51c0:	6833      	ldr	r3, [r6, #0]
   b51c2:	f814 1b01 	ldrb.w	r1, [r4], #1
   b51c6:	689b      	ldr	r3, [r3, #8]
   b51c8:	4630      	mov	r0, r6
   b51ca:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b51cc:	e7f6      	b.n	b51bc <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b51ce:	4628      	mov	r0, r5
   b51d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b51d2 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b51d2:	7c00      	ldrb	r0, [r0, #16]
   b51d4:	2200      	movs	r2, #0
   b51d6:	f7ff bded 	b.w	b4db4 <hal_i2c_write>

000b51da <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b51da:	7c00      	ldrb	r0, [r0, #16]
   b51dc:	2100      	movs	r1, #0
   b51de:	f7ff bdf1 	b.w	b4dc4 <hal_i2c_available>

000b51e2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b51e2:	7c00      	ldrb	r0, [r0, #16]
   b51e4:	2100      	movs	r1, #0
   b51e6:	f7ff bdf5 	b.w	b4dd4 <hal_i2c_read>

000b51ea <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b51ea:	7c00      	ldrb	r0, [r0, #16]
   b51ec:	2100      	movs	r1, #0
   b51ee:	f7ff bdf9 	b.w	b4de4 <hal_i2c_peek>

000b51f2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b51f2:	7c00      	ldrb	r0, [r0, #16]
   b51f4:	2100      	movs	r1, #0
   b51f6:	f7ff bdfd 	b.w	b4df4 <hal_i2c_flush>

000b51fa <_ZN7TwoWireD0Ev>:
   b51fa:	b510      	push	{r4, lr}
   b51fc:	2114      	movs	r1, #20
   b51fe:	4604      	mov	r4, r0
   b5200:	f7fe ff4d 	bl	b409e <_ZdlPvj>
   b5204:	4620      	mov	r0, r4
   b5206:	bd10      	pop	{r4, pc}

000b5208 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b5208:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b520a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b520e:	4604      	mov	r4, r0
   b5210:	4608      	mov	r0, r1
   b5212:	2100      	movs	r1, #0
   b5214:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b5218:	4b03      	ldr	r3, [pc, #12]	; (b5228 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b521a:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b521c:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b521e:	4611      	mov	r1, r2
   b5220:	f7ff fe08 	bl	b4e34 <hal_i2c_init>
}
   b5224:	4620      	mov	r0, r4
   b5226:	bd10      	pop	{r4, pc}
   b5228:	000b610c 	.word	0x000b610c

000b522c <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   b522c:	7c00      	ldrb	r0, [r0, #16]
   b522e:	2200      	movs	r2, #0
   b5230:	f7ff bda8 	b.w	b4d84 <hal_i2c_set_speed>

000b5234 <_ZN7TwoWire5beginEh>:
{
   b5234:	460a      	mov	r2, r1
	hal_i2c_begin(_i2c, I2C_MODE_SLAVE, address, NULL);
   b5236:	7c00      	ldrb	r0, [r0, #16]
   b5238:	2300      	movs	r3, #0
   b523a:	2101      	movs	r1, #1
   b523c:	f7ff bdaa 	b.w	b4d94 <hal_i2c_begin>

000b5240 <_ZN7TwoWire5beginEi>:
  begin((uint8_t)address);
   b5240:	b2c9      	uxtb	r1, r1
   b5242:	f7ff bff7 	b.w	b5234 <_ZN7TwoWire5beginEh>

000b5246 <_ZN7TwoWire3endEv>:
	hal_i2c_end(_i2c, NULL);
   b5246:	7c00      	ldrb	r0, [r0, #16]
   b5248:	2100      	movs	r1, #0
   b524a:	f7ff bdab 	b.w	b4da4 <hal_i2c_end>

000b524e <_ZN7TwoWire9onReceiveEPFviE>:
}

// sets function called on slave write
void TwoWire::onReceive( void (*function)(int) )
{
  hal_i2c_set_callback_on_received(_i2c, function, NULL);
   b524e:	7c00      	ldrb	r0, [r0, #16]
   b5250:	2200      	movs	r2, #0
   b5252:	f7ff bddf 	b.w	b4e14 <hal_i2c_set_callback_on_received>

000b5256 <_ZN7TwoWire9onRequestEPFvvE>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  hal_i2c_set_callback_on_requested(_i2c, function, NULL);
   b5256:	7c00      	ldrb	r0, [r0, #16]
   b5258:	2200      	movs	r2, #0
   b525a:	f7ff bde3 	b.w	b4e24 <hal_i2c_set_callback_on_requested>

000b525e <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b525e:	4770      	bx	lr

000b5260 <_ZN9IPAddressD0Ev>:
   b5260:	b510      	push	{r4, lr}
   b5262:	2118      	movs	r1, #24
   b5264:	4604      	mov	r4, r0
   b5266:	f7fe ff1a 	bl	b409e <_ZdlPvj>
   b526a:	4620      	mov	r0, r4
   b526c:	bd10      	pop	{r4, pc}

000b526e <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b526e:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b5270:	7d03      	ldrb	r3, [r0, #20]
   b5272:	2b06      	cmp	r3, #6
{
   b5274:	b08d      	sub	sp, #52	; 0x34
   b5276:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5278:	f100 0704 	add.w	r7, r0, #4
   b527c:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b5280:	d012      	beq.n	b52a8 <_ZNK9IPAddress7printToER5Print+0x3a>
   b5282:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b5286:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b528a:	220a      	movs	r2, #10
   b528c:	4630      	mov	r0, r6
   b528e:	f000 f968 	bl	b5562 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b5292:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b5294:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b5296:	d019      	beq.n	b52cc <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b5298:	2c00      	cmp	r4, #0
   b529a:	d0f4      	beq.n	b5286 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b529c:	212e      	movs	r1, #46	; 0x2e
   b529e:	4630      	mov	r0, r6
   b52a0:	f000 f93c 	bl	b551c <_ZN5Print5printEc>
   b52a4:	4404      	add	r4, r0
   b52a6:	e7ee      	b.n	b5286 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b52a8:	232f      	movs	r3, #47	; 0x2f
   b52aa:	466a      	mov	r2, sp
   b52ac:	4639      	mov	r1, r7
   b52ae:	200a      	movs	r0, #10
		buf[0] = 0;
   b52b0:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b52b4:	f7ff fdc6 	bl	b4e44 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b52b8:	4668      	mov	r0, sp
   b52ba:	f000 fda3 	bl	b5e04 <strlen>
   b52be:	6833      	ldr	r3, [r6, #0]
   b52c0:	4602      	mov	r2, r0
   b52c2:	68db      	ldr	r3, [r3, #12]
   b52c4:	4669      	mov	r1, sp
   b52c6:	4630      	mov	r0, r6
   b52c8:	4798      	blx	r3
   b52ca:	4604      	mov	r4, r0
    }
    return n;
}
   b52cc:	4620      	mov	r0, r4
   b52ce:	b00d      	add	sp, #52	; 0x34
   b52d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000b52d4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b52d4:	b510      	push	{r4, lr}
   b52d6:	4b05      	ldr	r3, [pc, #20]	; (b52ec <_ZN9IPAddressC1Ev+0x18>)
   b52d8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b52da:	2211      	movs	r2, #17
   b52dc:	f840 3b04 	str.w	r3, [r0], #4
   b52e0:	2100      	movs	r1, #0
   b52e2:	f000 fd1b 	bl	b5d1c <memset>
}
   b52e6:	4620      	mov	r0, r4
   b52e8:	bd10      	pop	{r4, pc}
   b52ea:	bf00      	nop
   b52ec:	000b6134 	.word	0x000b6134

000b52f0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b52f0:	4603      	mov	r3, r0
   b52f2:	4a07      	ldr	r2, [pc, #28]	; (b5310 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b52f4:	b510      	push	{r4, lr}
   b52f6:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b52fa:	f101 0210 	add.w	r2, r1, #16
   b52fe:	f851 4b04 	ldr.w	r4, [r1], #4
   b5302:	f843 4b04 	str.w	r4, [r3], #4
   b5306:	4291      	cmp	r1, r2
   b5308:	d1f9      	bne.n	b52fe <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b530a:	780a      	ldrb	r2, [r1, #0]
   b530c:	701a      	strb	r2, [r3, #0]
}
   b530e:	bd10      	pop	{r4, pc}
   b5310:	000b6134 	.word	0x000b6134

000b5314 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b5314:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b5316:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b531a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b531e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b5322:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b5326:	2304      	movs	r3, #4
   b5328:	6041      	str	r1, [r0, #4]
   b532a:	7503      	strb	r3, [r0, #20]
}
   b532c:	bd10      	pop	{r4, pc}
	...

000b5330 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b5330:	b507      	push	{r0, r1, r2, lr}
   b5332:	4b06      	ldr	r3, [pc, #24]	; (b534c <_ZN9IPAddressC1EPKh+0x1c>)
   b5334:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b5336:	78cb      	ldrb	r3, [r1, #3]
   b5338:	9300      	str	r3, [sp, #0]
   b533a:	788b      	ldrb	r3, [r1, #2]
   b533c:	784a      	ldrb	r2, [r1, #1]
   b533e:	7809      	ldrb	r1, [r1, #0]
   b5340:	f7ff ffe8 	bl	b5314 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b5344:	b003      	add	sp, #12
   b5346:	f85d fb04 	ldr.w	pc, [sp], #4
   b534a:	bf00      	nop
   b534c:	000b6134 	.word	0x000b6134

000b5350 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b5350:	4b01      	ldr	r3, [pc, #4]	; (b5358 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b5352:	4a02      	ldr	r2, [pc, #8]	; (b535c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b5354:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b5356:	4770      	bx	lr
   b5358:	2003e6c4 	.word	0x2003e6c4
   b535c:	000b6140 	.word	0x000b6140

000b5360 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b5360:	2300      	movs	r3, #0
   b5362:	6840      	ldr	r0, [r0, #4]
   b5364:	461a      	mov	r2, r3
   b5366:	f7ff be41 	b.w	b4fec <network_connect>

000b536a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b536a:	6840      	ldr	r0, [r0, #4]
   b536c:	2200      	movs	r2, #0
   b536e:	2102      	movs	r1, #2
   b5370:	f7ff be4c 	b.w	b500c <network_disconnect>

000b5374 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b5374:	2200      	movs	r2, #0
   b5376:	6840      	ldr	r0, [r0, #4]
   b5378:	4611      	mov	r1, r2
   b537a:	f7ff be3f 	b.w	b4ffc <network_connecting>

000b537e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b537e:	2200      	movs	r2, #0
   b5380:	6840      	ldr	r0, [r0, #4]
   b5382:	4611      	mov	r1, r2
   b5384:	f7ff be4a 	b.w	b501c <network_ready>

000b5388 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b5388:	2300      	movs	r3, #0
   b538a:	6840      	ldr	r0, [r0, #4]
   b538c:	461a      	mov	r2, r3
   b538e:	4619      	mov	r1, r3
   b5390:	f7ff be4c 	b.w	b502c <network_on>

000b5394 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b5394:	2300      	movs	r3, #0
   b5396:	6840      	ldr	r0, [r0, #4]
   b5398:	461a      	mov	r2, r3
   b539a:	4619      	mov	r1, r3
   b539c:	f7ff be4e 	b.w	b503c <network_off>

000b53a0 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b53a0:	6840      	ldr	r0, [r0, #4]
   b53a2:	2100      	movs	r1, #0
   b53a4:	f7ff be72 	b.w	b508c <network_is_on>

000b53a8 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b53a8:	6840      	ldr	r0, [r0, #4]
   b53aa:	2100      	movs	r1, #0
   b53ac:	f7ff be76 	b.w	b509c <network_is_off>

000b53b0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b53b0:	6840      	ldr	r0, [r0, #4]
   b53b2:	2200      	movs	r2, #0
   b53b4:	f081 0101 	eor.w	r1, r1, #1
   b53b8:	f7ff be48 	b.w	b504c <network_listen>

000b53bc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b53bc:	6840      	ldr	r0, [r0, #4]
   b53be:	2200      	movs	r2, #0
   b53c0:	f7ff be54 	b.w	b506c <network_set_listen_timeout>

000b53c4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b53c4:	2200      	movs	r2, #0
   b53c6:	6840      	ldr	r0, [r0, #4]
   b53c8:	4611      	mov	r1, r2
   b53ca:	f7ff be57 	b.w	b507c <network_get_listen_timeout>

000b53ce <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b53ce:	2200      	movs	r2, #0
   b53d0:	6840      	ldr	r0, [r0, #4]
   b53d2:	4611      	mov	r1, r2
   b53d4:	f7ff be42 	b.w	b505c <network_listening>

000b53d8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b53d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b53dc:	b095      	sub	sp, #84	; 0x54
   b53de:	4614      	mov	r4, r2
   b53e0:	460d      	mov	r5, r1
   b53e2:	4607      	mov	r7, r0
    IPAddress addr;
   b53e4:	f7ff ff76 	bl	b52d4 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b53e8:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b53ea:	221c      	movs	r2, #28
   b53ec:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b53ee:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b53f0:	f000 fc94 	bl	b5d1c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b53f4:	2340      	movs	r3, #64	; 0x40
   b53f6:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b53f8:	4620      	mov	r0, r4
   b53fa:	466b      	mov	r3, sp
   b53fc:	aa0c      	add	r2, sp, #48	; 0x30
   b53fe:	2100      	movs	r1, #0
   b5400:	f7ff fd30 	bl	b4e64 <netdb_getaddrinfo>
    if (!r) {
   b5404:	4604      	mov	r4, r0
   b5406:	2800      	cmp	r0, #0
   b5408:	d14b      	bne.n	b54a2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b540a:	4602      	mov	r2, r0
   b540c:	2101      	movs	r1, #1
   b540e:	6868      	ldr	r0, [r5, #4]
   b5410:	f7ff fe04 	bl	b501c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5414:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5416:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5418:	4622      	mov	r2, r4
   b541a:	6868      	ldr	r0, [r5, #4]
   b541c:	f7ff fdfe 	bl	b501c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5420:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5422:	4681      	mov	r9, r0
        bool ok = false;
   b5424:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5426:	2e00      	cmp	r6, #0
   b5428:	d03b      	beq.n	b54a2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b542a:	2900      	cmp	r1, #0
   b542c:	d139      	bne.n	b54a2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b542e:	6873      	ldr	r3, [r6, #4]
   b5430:	2b02      	cmp	r3, #2
   b5432:	d003      	beq.n	b543c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b5434:	2b0a      	cmp	r3, #10
   b5436:	d011      	beq.n	b545c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5438:	69f6      	ldr	r6, [r6, #28]
   b543a:	e7f4      	b.n	b5426 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b543c:	f1b8 0f00 	cmp.w	r8, #0
   b5440:	d0fa      	beq.n	b5438 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b5442:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b5444:	a806      	add	r0, sp, #24
   b5446:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b5448:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b544a:	f7ff ff71 	bl	b5330 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b544e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5450:	1d3c      	adds	r4, r7, #4
   b5452:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5454:	682b      	ldr	r3, [r5, #0]
   b5456:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5458:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b545a:	e7ed      	b.n	b5438 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b545c:	f1b9 0f00 	cmp.w	r9, #0
   b5460:	d0ea      	beq.n	b5438 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b5462:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b5464:	2210      	movs	r2, #16
   b5466:	a801      	add	r0, sp, #4
   b5468:	f000 fc58 	bl	b5d1c <memset>
                    a.v = 6;
   b546c:	2306      	movs	r3, #6
   b546e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b5472:	ad01      	add	r5, sp, #4
   b5474:	f104 0308 	add.w	r3, r4, #8
   b5478:	3418      	adds	r4, #24
   b547a:	6818      	ldr	r0, [r3, #0]
   b547c:	6859      	ldr	r1, [r3, #4]
   b547e:	462a      	mov	r2, r5
   b5480:	c203      	stmia	r2!, {r0, r1}
   b5482:	3308      	adds	r3, #8
   b5484:	42a3      	cmp	r3, r4
   b5486:	4615      	mov	r5, r2
   b5488:	d1f7      	bne.n	b547a <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b548a:	a901      	add	r1, sp, #4
   b548c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b548e:	ad07      	add	r5, sp, #28
   b5490:	f7ff ff2e 	bl	b52f0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b5494:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5496:	1d3c      	adds	r4, r7, #4
   b5498:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b549a:	682b      	ldr	r3, [r5, #0]
   b549c:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b549e:	4649      	mov	r1, r9
   b54a0:	e7ca      	b.n	b5438 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b54a2:	9800      	ldr	r0, [sp, #0]
   b54a4:	f7ff fcd6 	bl	b4e54 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b54a8:	4638      	mov	r0, r7
   b54aa:	b015      	add	sp, #84	; 0x54
   b54ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b54b0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b54b0:	4b02      	ldr	r3, [pc, #8]	; (b54bc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b54b2:	4a03      	ldr	r2, [pc, #12]	; (b54c0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b54b4:	601a      	str	r2, [r3, #0]
   b54b6:	2200      	movs	r2, #0
   b54b8:	605a      	str	r2, [r3, #4]

} // spark
   b54ba:	4770      	bx	lr
   b54bc:	2003e6c8 	.word	0x2003e6c8
   b54c0:	000b614c 	.word	0x000b614c

000b54c4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b54c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b54c6:	4606      	mov	r6, r0
   b54c8:	460d      	mov	r5, r1
  size_t n = 0;
   b54ca:	188f      	adds	r7, r1, r2
   b54cc:	2400      	movs	r4, #0
  while (size--) {
   b54ce:	42bd      	cmp	r5, r7
   b54d0:	d00c      	beq.n	b54ec <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b54d2:	6833      	ldr	r3, [r6, #0]
   b54d4:	f815 1b01 	ldrb.w	r1, [r5], #1
   b54d8:	689b      	ldr	r3, [r3, #8]
   b54da:	4630      	mov	r0, r6
   b54dc:	4798      	blx	r3
     if (chunk>=0)
   b54de:	1e03      	subs	r3, r0, #0
   b54e0:	db01      	blt.n	b54e6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b54e2:	441c      	add	r4, r3
  while (size--) {
   b54e4:	e7f3      	b.n	b54ce <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b54e6:	2c00      	cmp	r4, #0
   b54e8:	bf08      	it	eq
   b54ea:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b54ec:	4620      	mov	r0, r4
   b54ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b54f0 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b54f0:	b513      	push	{r0, r1, r4, lr}
   b54f2:	4604      	mov	r4, r0
    }
   b54f4:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b54f6:	b159      	cbz	r1, b5510 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b54f8:	9101      	str	r1, [sp, #4]
   b54fa:	f000 fc83 	bl	b5e04 <strlen>
   b54fe:	6823      	ldr	r3, [r4, #0]
   b5500:	9901      	ldr	r1, [sp, #4]
   b5502:	68db      	ldr	r3, [r3, #12]
   b5504:	4602      	mov	r2, r0
   b5506:	4620      	mov	r0, r4
    }
   b5508:	b002      	add	sp, #8
   b550a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b550e:	4718      	bx	r3
    }
   b5510:	b002      	add	sp, #8
   b5512:	bd10      	pop	{r4, pc}

000b5514 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b5514:	b508      	push	{r3, lr}
  return write(str);
   b5516:	f7ff ffeb 	bl	b54f0 <_ZN5Print5writeEPKc>
}
   b551a:	bd08      	pop	{r3, pc}

000b551c <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b551c:	6803      	ldr	r3, [r0, #0]
   b551e:	689b      	ldr	r3, [r3, #8]
   b5520:	4718      	bx	r3

000b5522 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b5522:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b5524:	210d      	movs	r1, #13
{
   b5526:	4605      	mov	r5, r0
  size_t n = print('\r');
   b5528:	f7ff fff8 	bl	b551c <_ZN5Print5printEc>
  n += print('\n');
   b552c:	210a      	movs	r1, #10
  size_t n = print('\r');
   b552e:	4604      	mov	r4, r0
  n += print('\n');
   b5530:	4628      	mov	r0, r5
   b5532:	f7ff fff3 	bl	b551c <_ZN5Print5printEc>
  return n;
}
   b5536:	4420      	add	r0, r4
   b5538:	bd38      	pop	{r3, r4, r5, pc}

000b553a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b553a:	b538      	push	{r3, r4, r5, lr}
   b553c:	4605      	mov	r5, r0
  return write(str);
   b553e:	f7ff ffd7 	bl	b54f0 <_ZN5Print5writeEPKc>
   b5542:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b5544:	4628      	mov	r0, r5
   b5546:	f7ff ffec 	bl	b5522 <_ZN5Print7printlnEv>
  return n;
}
   b554a:	4420      	add	r0, r4
   b554c:	bd38      	pop	{r3, r4, r5, pc}

000b554e <_ZN5Print7printlnEc>:

size_t Print::println(char c)
{
   b554e:	b538      	push	{r3, r4, r5, lr}
   b5550:	4605      	mov	r5, r0
  size_t n = print(c);
   b5552:	f7ff ffe3 	bl	b551c <_ZN5Print5printEc>
   b5556:	4604      	mov	r4, r0
  n += println();
   b5558:	4628      	mov	r0, r5
   b555a:	f7ff ffe2 	bl	b5522 <_ZN5Print7printlnEv>
  return n;
}
   b555e:	4420      	add	r0, r4
   b5560:	bd38      	pop	{r3, r4, r5, pc}

000b5562 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b5562:	b530      	push	{r4, r5, lr}
   b5564:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b5566:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b5568:	2a01      	cmp	r2, #1
  *str = '\0';
   b556a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b556e:	bf98      	it	ls
   b5570:	220a      	movls	r2, #10
   b5572:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b5574:	460d      	mov	r5, r1
   b5576:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b557a:	fb01 5312 	mls	r3, r1, r2, r5
   b557e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5582:	2b09      	cmp	r3, #9
   b5584:	bf94      	ite	ls
   b5586:	3330      	addls	r3, #48	; 0x30
   b5588:	3337      	addhi	r3, #55	; 0x37
   b558a:	b2db      	uxtb	r3, r3
  } while(n);
   b558c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b558e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b5592:	d9ef      	bls.n	b5574 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b5594:	4621      	mov	r1, r4
   b5596:	f7ff ffab 	bl	b54f0 <_ZN5Print5writeEPKc>
}
   b559a:	b00b      	add	sp, #44	; 0x2c
   b559c:	bd30      	pop	{r4, r5, pc}

000b559e <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b559e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b55a2:	b086      	sub	sp, #24
   b55a4:	af00      	add	r7, sp, #0
   b55a6:	4605      	mov	r5, r0
   b55a8:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b55aa:	1d38      	adds	r0, r7, #4
   b55ac:	2114      	movs	r1, #20
{
   b55ae:	4614      	mov	r4, r2
    va_copy(args2, args);
   b55b0:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b55b2:	f7ff fd8b 	bl	b50cc <vsnprintf>

    if (n<bufsize)
   b55b6:	2813      	cmp	r0, #19
   b55b8:	d80e      	bhi.n	b55d8 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b55ba:	1d39      	adds	r1, r7, #4
   b55bc:	4628      	mov	r0, r5
   b55be:	f7ff ff97 	bl	b54f0 <_ZN5Print5writeEPKc>
   b55c2:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b55c4:	b11e      	cbz	r6, b55ce <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b55c6:	4628      	mov	r0, r5
   b55c8:	f7ff ffab 	bl	b5522 <_ZN5Print7printlnEv>
   b55cc:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b55ce:	4620      	mov	r0, r4
   b55d0:	3718      	adds	r7, #24
   b55d2:	46bd      	mov	sp, r7
   b55d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b55d8:	f100 0308 	add.w	r3, r0, #8
   b55dc:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b55e0:	46e8      	mov	r8, sp
        char bigger[n+1];
   b55e2:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b55e6:	4622      	mov	r2, r4
   b55e8:	1c41      	adds	r1, r0, #1
   b55ea:	683b      	ldr	r3, [r7, #0]
   b55ec:	4668      	mov	r0, sp
   b55ee:	f7ff fd6d 	bl	b50cc <vsnprintf>
  return write(str);
   b55f2:	4669      	mov	r1, sp
   b55f4:	4628      	mov	r0, r5
   b55f6:	f7ff ff7b 	bl	b54f0 <_ZN5Print5writeEPKc>
   b55fa:	4604      	mov	r4, r0
   b55fc:	46c5      	mov	sp, r8
   b55fe:	e7e1      	b.n	b55c4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b5600 <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   b5600:	b510      	push	{r4, lr}
  if (0 == max) {
   b5602:	4604      	mov	r4, r0
   b5604:	b128      	cbz	r0, b5612 <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
   b5606:	f000 fbbf 	bl	b5d88 <rand>
   b560a:	fb90 f3f4 	sdiv	r3, r0, r4
   b560e:	fb03 0414 	mls	r4, r3, r4, r0
}
   b5612:	4620      	mov	r0, r4
   b5614:	bd10      	pop	{r4, pc}

000b5616 <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
   b5616:	4288      	cmp	r0, r1
{
   b5618:	b510      	push	{r4, lr}
   b561a:	4604      	mov	r4, r0
  if (min >= max) {
   b561c:	da03      	bge.n	b5626 <_Z6randomii+0x10>
    return min;
  }
  return random(max - min) + min;
   b561e:	1a08      	subs	r0, r1, r0
   b5620:	f7ff ffee 	bl	b5600 <_Z6randomi>
   b5624:	4404      	add	r4, r0
}
   b5626:	4620      	mov	r0, r4
   b5628:	bd10      	pop	{r4, pc}

000b562a <_Z10randomSeedj>:

void randomSeed(unsigned int seed)
{
  srand(seed);
   b562a:	f000 bb7f 	b.w	b5d2c <srand>
	...

000b5630 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b5630:	4b01      	ldr	r3, [pc, #4]	; (b5638 <_GLOBAL__sub_I_RGB+0x8>)
   b5632:	2200      	movs	r2, #0
   b5634:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b5636:	4770      	bx	lr
   b5638:	2003e6d0 	.word	0x2003e6d0

000b563c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b563c:	b510      	push	{r4, lr}
   b563e:	4604      	mov	r4, r0
   b5640:	4608      	mov	r0, r1
{
    _spi = spi;
   b5642:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b5644:	f7ff fc16 	bl	b4e74 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b5648:	2300      	movs	r3, #0
   b564a:	6063      	str	r3, [r4, #4]
}
   b564c:	4620      	mov	r0, r4
   b564e:	bd10      	pop	{r4, pc}

000b5650 <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
   b5650:	6883      	ldr	r3, [r0, #8]
   b5652:	428b      	cmp	r3, r1
   b5654:	d903      	bls.n	b565e <_ZNK6StringixEj+0xe>
   b5656:	6800      	ldr	r0, [r0, #0]
   b5658:	b110      	cbz	r0, b5660 <_ZNK6StringixEj+0x10>
	return buffer[index];
   b565a:	5c40      	ldrb	r0, [r0, r1]
   b565c:	4770      	bx	lr
	if (index >= len || !buffer) return 0;
   b565e:	2000      	movs	r0, #0
}
   b5660:	4770      	bx	lr

000b5662 <_ZNK6String6charAtEj>:
	return operator[](loc);
   b5662:	f7ff bff5 	b.w	b5650 <_ZNK6StringixEj>
	...

000b5668 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b5668:	4b05      	ldr	r3, [pc, #20]	; (b5680 <_GLOBAL__sub_I_System+0x18>)
   b566a:	2202      	movs	r2, #2
   b566c:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b566e:	4b05      	ldr	r3, [pc, #20]	; (b5684 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b5670:	4a05      	ldr	r2, [pc, #20]	; (b5688 <_GLOBAL__sub_I_System+0x20>)
   b5672:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b5674:	2000      	movs	r0, #0
   b5676:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b567a:	f7ff bc83 	b.w	b4f84 <set_system_mode>
   b567e:	bf00      	nop
   b5680:	2003e6ec 	.word	0x2003e6ec
   b5684:	2003e6e0 	.word	0x2003e6e0
   b5688:	ffff0000 	.word	0xffff0000

000b568c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b568c:	4b02      	ldr	r3, [pc, #8]	; (b5698 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b568e:	681a      	ldr	r2, [r3, #0]
   b5690:	4b02      	ldr	r3, [pc, #8]	; (b569c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b5692:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b5694:	4770      	bx	lr
   b5696:	bf00      	nop
   b5698:	2003e604 	.word	0x2003e604
   b569c:	2003e6f0 	.word	0x2003e6f0

000b56a0 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b56a0:	4770      	bx	lr

000b56a2 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b56a2:	7441      	strb	r1, [r0, #17]
}
   b56a4:	4770      	bx	lr

000b56a6 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b56a6:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b56a8:	7c00      	ldrb	r0, [r0, #16]
   b56aa:	f7ff fc23 	bl	b4ef4 <hal_usart_available_data_for_write>
}
   b56ae:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b56b2:	bd08      	pop	{r3, pc}

000b56b4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b56b4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b56b6:	7c00      	ldrb	r0, [r0, #16]
   b56b8:	f7ff fbf4 	bl	b4ea4 <hal_usart_available>
}
   b56bc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b56c0:	bd08      	pop	{r3, pc}

000b56c2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b56c2:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b56c4:	7c00      	ldrb	r0, [r0, #16]
   b56c6:	f7ff fbfd 	bl	b4ec4 <hal_usart_peek>
}
   b56ca:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b56ce:	bd08      	pop	{r3, pc}

000b56d0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b56d0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b56d2:	7c00      	ldrb	r0, [r0, #16]
   b56d4:	f7ff fbee 	bl	b4eb4 <hal_usart_read>
}
   b56d8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b56dc:	bd08      	pop	{r3, pc}

000b56de <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b56de:	7c00      	ldrb	r0, [r0, #16]
   b56e0:	f7ff bbf8 	b.w	b4ed4 <hal_usart_flush>

000b56e4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b56e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b56e6:	7c45      	ldrb	r5, [r0, #17]
{
   b56e8:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b56ea:	b12d      	cbz	r5, b56f8 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b56ec:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b56ee:	b003      	add	sp, #12
   b56f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b56f4:	f7ff bbce 	b.w	b4e94 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b56f8:	7c00      	ldrb	r0, [r0, #16]
   b56fa:	9101      	str	r1, [sp, #4]
   b56fc:	f7ff fbfa 	bl	b4ef4 <hal_usart_available_data_for_write>
   b5700:	2800      	cmp	r0, #0
   b5702:	9901      	ldr	r1, [sp, #4]
   b5704:	dcf2      	bgt.n	b56ec <_ZN11USARTSerial5writeEh+0x8>
}
   b5706:	4628      	mov	r0, r5
   b5708:	b003      	add	sp, #12
   b570a:	bd30      	pop	{r4, r5, pc}

000b570c <_ZN11USARTSerialD0Ev>:
   b570c:	b510      	push	{r4, lr}
   b570e:	2114      	movs	r1, #20
   b5710:	4604      	mov	r4, r0
   b5712:	f7fe fcc4 	bl	b409e <_ZdlPvj>
   b5716:	4620      	mov	r0, r4
   b5718:	bd10      	pop	{r4, pc}
	...

000b571c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b571c:	b510      	push	{r4, lr}
   b571e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5722:	4604      	mov	r4, r0
   b5724:	4608      	mov	r0, r1
   b5726:	4611      	mov	r1, r2
   b5728:	2200      	movs	r2, #0
   b572a:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b572e:	4b04      	ldr	r3, [pc, #16]	; (b5740 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b5730:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5732:	2301      	movs	r3, #1
  _serial = serial;
   b5734:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5736:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b5738:	f7ff fbe4 	bl	b4f04 <hal_usart_init_ex>
}
   b573c:	4620      	mov	r0, r4
   b573e:	bd10      	pop	{r4, pc}
   b5740:	000b61a4 	.word	0x000b61a4

000b5744 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5744:	7441      	strb	r1, [r0, #17]
}
   b5746:	4770      	bx	lr

000b5748 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5748:	4770      	bx	lr

000b574a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b574a:	4770      	bx	lr

000b574c <_ZN9USBSerial4readEv>:
{
   b574c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b574e:	2100      	movs	r1, #0
   b5750:	7c00      	ldrb	r0, [r0, #16]
   b5752:	f7ff fbff 	bl	b4f54 <HAL_USB_USART_Receive_Data>
}
   b5756:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b575a:	bd08      	pop	{r3, pc}

000b575c <_ZN9USBSerial4peekEv>:
{
   b575c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b575e:	2101      	movs	r1, #1
   b5760:	7c00      	ldrb	r0, [r0, #16]
   b5762:	f7ff fbf7 	bl	b4f54 <HAL_USB_USART_Receive_Data>
}
   b5766:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b576a:	bd08      	pop	{r3, pc}

000b576c <_ZN9USBSerial17availableForWriteEv>:
{
   b576c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b576e:	7c00      	ldrb	r0, [r0, #16]
   b5770:	f7ff fbe8 	bl	b4f44 <HAL_USB_USART_Available_Data_For_Write>
}
   b5774:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5778:	bd08      	pop	{r3, pc}

000b577a <_ZN9USBSerial9availableEv>:
{
   b577a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b577c:	7c00      	ldrb	r0, [r0, #16]
   b577e:	f7ff fbd9 	bl	b4f34 <HAL_USB_USART_Available_Data>
}
   b5782:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5786:	bd08      	pop	{r3, pc}

000b5788 <_ZN9USBSerial5writeEh>:
{
   b5788:	b513      	push	{r0, r1, r4, lr}
   b578a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b578c:	7c00      	ldrb	r0, [r0, #16]
{
   b578e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5790:	f7ff fbd8 	bl	b4f44 <HAL_USB_USART_Available_Data_For_Write>
   b5794:	2800      	cmp	r0, #0
   b5796:	9901      	ldr	r1, [sp, #4]
   b5798:	dc01      	bgt.n	b579e <_ZN9USBSerial5writeEh+0x16>
   b579a:	7c60      	ldrb	r0, [r4, #17]
   b579c:	b120      	cbz	r0, b57a8 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b579e:	7c20      	ldrb	r0, [r4, #16]
   b57a0:	f7ff fbe0 	bl	b4f64 <HAL_USB_USART_Send_Data>
   b57a4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b57a8:	b002      	add	sp, #8
   b57aa:	bd10      	pop	{r4, pc}

000b57ac <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b57ac:	7c00      	ldrb	r0, [r0, #16]
   b57ae:	f7ff bbe1 	b.w	b4f74 <HAL_USB_USART_Flush_Data>

000b57b2 <_ZN9USBSerialD0Ev>:
   b57b2:	b510      	push	{r4, lr}
   b57b4:	2114      	movs	r1, #20
   b57b6:	4604      	mov	r4, r0
   b57b8:	f7fe fc71 	bl	b409e <_ZdlPvj>
   b57bc:	4620      	mov	r0, r4
   b57be:	bd10      	pop	{r4, pc}

000b57c0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b57c0:	b510      	push	{r4, lr}
   b57c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b57c6:	4604      	mov	r4, r0
   b57c8:	4608      	mov	r0, r1
   b57ca:	2100      	movs	r1, #0
   b57cc:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b57d0:	4b04      	ldr	r3, [pc, #16]	; (b57e4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b57d2:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b57d4:	2301      	movs	r3, #1
  _serial = serial;
   b57d6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b57d8:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b57da:	4611      	mov	r1, r2
   b57dc:	f7ff fb9a 	bl	b4f14 <HAL_USB_USART_Init>
}
   b57e0:	4620      	mov	r0, r4
   b57e2:	bd10      	pop	{r4, pc}
   b57e4:	000b61d4 	.word	0x000b61d4

000b57e8 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b57e8:	7c00      	ldrb	r0, [r0, #16]
   b57ea:	2200      	movs	r2, #0
   b57ec:	f7ff bb9a 	b.w	b4f24 <HAL_USB_USART_Begin>

000b57f0 <_Z19acquireSerialBufferv>:
{
   b57f0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b57f2:	2214      	movs	r2, #20
{
   b57f4:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b57f6:	2100      	movs	r1, #0
   b57f8:	f000 fa90 	bl	b5d1c <memset>
}
   b57fc:	4620      	mov	r0, r4
   b57fe:	bd10      	pop	{r4, pc}

000b5800 <_Z16_fetch_usbserialv>:
{
   b5800:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5802:	4c0f      	ldr	r4, [pc, #60]	; (b5840 <_Z16_fetch_usbserialv+0x40>)
{
   b5804:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b5806:	a803      	add	r0, sp, #12
   b5808:	f7ff fff2 	bl	b57f0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b580c:	7821      	ldrb	r1, [r4, #0]
   b580e:	f3bf 8f5b 	dmb	ish
   b5812:	f011 0101 	ands.w	r1, r1, #1
   b5816:	d10f      	bne.n	b5838 <_Z16_fetch_usbserialv+0x38>
   b5818:	4620      	mov	r0, r4
   b581a:	9101      	str	r1, [sp, #4]
   b581c:	f7fe fc41 	bl	b40a2 <__cxa_guard_acquire>
   b5820:	9901      	ldr	r1, [sp, #4]
   b5822:	b148      	cbz	r0, b5838 <_Z16_fetch_usbserialv+0x38>
   b5824:	aa03      	add	r2, sp, #12
   b5826:	4807      	ldr	r0, [pc, #28]	; (b5844 <_Z16_fetch_usbserialv+0x44>)
   b5828:	f7ff ffca 	bl	b57c0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b582c:	4620      	mov	r0, r4
   b582e:	f7fe fc3d 	bl	b40ac <__cxa_guard_release>
   b5832:	4805      	ldr	r0, [pc, #20]	; (b5848 <_Z16_fetch_usbserialv+0x48>)
   b5834:	f000 fa5e 	bl	b5cf4 <atexit>
	return _usbserial;
}
   b5838:	4802      	ldr	r0, [pc, #8]	; (b5844 <_Z16_fetch_usbserialv+0x44>)
   b583a:	b008      	add	sp, #32
   b583c:	bd10      	pop	{r4, pc}
   b583e:	bf00      	nop
   b5840:	2003e6f4 	.word	0x2003e6f4
   b5844:	2003e6f8 	.word	0x2003e6f8
   b5848:	000b5749 	.word	0x000b5749

000b584c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b584c:	2200      	movs	r2, #0
   b584e:	6840      	ldr	r0, [r0, #4]
   b5850:	4611      	mov	r1, r2
   b5852:	f7ff bbe3 	b.w	b501c <network_ready>

000b5856 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5856:	2200      	movs	r2, #0
   b5858:	6840      	ldr	r0, [r0, #4]
   b585a:	4611      	mov	r1, r2
   b585c:	f7ff bbfe 	b.w	b505c <network_listening>

000b5860 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5860:	2200      	movs	r2, #0
   b5862:	6840      	ldr	r0, [r0, #4]
   b5864:	4611      	mov	r1, r2
   b5866:	f7ff bc09 	b.w	b507c <network_get_listen_timeout>

000b586a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b586a:	6840      	ldr	r0, [r0, #4]
   b586c:	2200      	movs	r2, #0
   b586e:	f7ff bbfd 	b.w	b506c <network_set_listen_timeout>

000b5872 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5872:	6840      	ldr	r0, [r0, #4]
   b5874:	2200      	movs	r2, #0
   b5876:	f081 0101 	eor.w	r1, r1, #1
   b587a:	f7ff bbe7 	b.w	b504c <network_listen>

000b587e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b587e:	2300      	movs	r3, #0
   b5880:	6840      	ldr	r0, [r0, #4]
   b5882:	461a      	mov	r2, r3
   b5884:	4619      	mov	r1, r3
   b5886:	f7ff bbd9 	b.w	b503c <network_off>

000b588a <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b588a:	2300      	movs	r3, #0
   b588c:	6840      	ldr	r0, [r0, #4]
   b588e:	461a      	mov	r2, r3
   b5890:	4619      	mov	r1, r3
   b5892:	f7ff bbcb 	b.w	b502c <network_on>

000b5896 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5896:	2200      	movs	r2, #0
   b5898:	6840      	ldr	r0, [r0, #4]
   b589a:	4611      	mov	r1, r2
   b589c:	f7ff bbae 	b.w	b4ffc <network_connecting>

000b58a0 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b58a0:	6840      	ldr	r0, [r0, #4]
   b58a2:	2200      	movs	r2, #0
   b58a4:	2102      	movs	r1, #2
   b58a6:	f7ff bbb1 	b.w	b500c <network_disconnect>

000b58aa <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b58aa:	2300      	movs	r3, #0
   b58ac:	6840      	ldr	r0, [r0, #4]
   b58ae:	461a      	mov	r2, r3
   b58b0:	f7ff bb9c 	b.w	b4fec <network_connect>

000b58b4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b58b4:	4b02      	ldr	r3, [pc, #8]	; (b58c0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b58b6:	2204      	movs	r2, #4
   b58b8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b58ba:	4a02      	ldr	r2, [pc, #8]	; (b58c4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b58bc:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b58be:	4770      	bx	lr
   b58c0:	2003e70c 	.word	0x2003e70c
   b58c4:	000b6204 	.word	0x000b6204

000b58c8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b58c8:	4b01      	ldr	r3, [pc, #4]	; (b58d0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b58ca:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b58cc:	4770      	bx	lr
   b58ce:	bf00      	nop
   b58d0:	2003e608 	.word	0x2003e608

000b58d4 <serialEventRun>:
{
   b58d4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b58d6:	4b0b      	ldr	r3, [pc, #44]	; (b5904 <serialEventRun+0x30>)
   b58d8:	b143      	cbz	r3, b58ec <serialEventRun+0x18>
   b58da:	f7ff ff91 	bl	b5800 <_Z16_fetch_usbserialv>
   b58de:	6803      	ldr	r3, [r0, #0]
   b58e0:	691b      	ldr	r3, [r3, #16]
   b58e2:	4798      	blx	r3
   b58e4:	2800      	cmp	r0, #0
   b58e6:	dd01      	ble.n	b58ec <serialEventRun+0x18>
        serialEvent();
   b58e8:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b58ec:	4b06      	ldr	r3, [pc, #24]	; (b5908 <serialEventRun+0x34>)
   b58ee:	b143      	cbz	r3, b5902 <serialEventRun+0x2e>
   b58f0:	f000 f930 	bl	b5b54 <_Z22__fetch_global_Serial1v>
   b58f4:	6803      	ldr	r3, [r0, #0]
   b58f6:	691b      	ldr	r3, [r3, #16]
   b58f8:	4798      	blx	r3
   b58fa:	2800      	cmp	r0, #0
   b58fc:	dd01      	ble.n	b5902 <serialEventRun+0x2e>
        serialEvent1();
   b58fe:	f3af 8000 	nop.w
}
   b5902:	bd08      	pop	{r3, pc}
	...

000b590c <_post_loop>:
{
   b590c:	b508      	push	{r3, lr}
	serialEventRun();
   b590e:	f7ff ffe1 	bl	b58d4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b5912:	f7ff fa0f 	bl	b4d34 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b5916:	4b01      	ldr	r3, [pc, #4]	; (b591c <_post_loop+0x10>)
   b5918:	6018      	str	r0, [r3, #0]
}
   b591a:	bd08      	pop	{r3, pc}
   b591c:	2003e728 	.word	0x2003e728

000b5920 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5920:	4805      	ldr	r0, [pc, #20]	; (b5938 <_Z33system_initialize_user_backup_ramv+0x18>)
   b5922:	4a06      	ldr	r2, [pc, #24]	; (b593c <_Z33system_initialize_user_backup_ramv+0x1c>)
   b5924:	4906      	ldr	r1, [pc, #24]	; (b5940 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b5926:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5928:	1a12      	subs	r2, r2, r0
   b592a:	f000 f9e9 	bl	b5d00 <memcpy>
    __backup_sram_signature = signature;
   b592e:	4b05      	ldr	r3, [pc, #20]	; (b5944 <_Z33system_initialize_user_backup_ramv+0x24>)
   b5930:	4a05      	ldr	r2, [pc, #20]	; (b5948 <_Z33system_initialize_user_backup_ramv+0x28>)
   b5932:	601a      	str	r2, [r3, #0]
}
   b5934:	bd08      	pop	{r3, pc}
   b5936:	bf00      	nop
   b5938:	2003f400 	.word	0x2003f400
   b593c:	2003f404 	.word	0x2003f404
   b5940:	000b6414 	.word	0x000b6414
   b5944:	2003f400 	.word	0x2003f400
   b5948:	9a271c1e 	.word	0x9a271c1e

000b594c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b594c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b594e:	2300      	movs	r3, #0
   b5950:	9300      	str	r3, [sp, #0]
   b5952:	461a      	mov	r2, r3
   b5954:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5958:	f7ff fb2e 	bl	b4fb8 <system_ctrl_set_result>
}
   b595c:	b003      	add	sp, #12
   b595e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b5964 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b5964:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b5966:	8843      	ldrh	r3, [r0, #2]
   b5968:	2b0a      	cmp	r3, #10
   b596a:	d008      	beq.n	b597e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b596c:	2b50      	cmp	r3, #80	; 0x50
   b596e:	d10b      	bne.n	b5988 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b5970:	4b09      	ldr	r3, [pc, #36]	; (b5998 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b5972:	681b      	ldr	r3, [r3, #0]
   b5974:	b14b      	cbz	r3, b598a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b5976:	b003      	add	sp, #12
   b5978:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b597c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b597e:	f7ff ffe5 	bl	b594c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b5982:	b003      	add	sp, #12
   b5984:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5988:	2300      	movs	r3, #0
   b598a:	9300      	str	r3, [sp, #0]
   b598c:	461a      	mov	r2, r3
   b598e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5992:	f7ff fb11 	bl	b4fb8 <system_ctrl_set_result>
}
   b5996:	e7f4      	b.n	b5982 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b5998:	2003e718 	.word	0x2003e718

000b599c <module_user_init_hook>:
{
   b599c:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b599e:	4812      	ldr	r0, [pc, #72]	; (b59e8 <module_user_init_hook+0x4c>)
   b59a0:	2100      	movs	r1, #0
   b59a2:	f7ff fbb3 	bl	b510c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b59a6:	4b11      	ldr	r3, [pc, #68]	; (b59ec <module_user_init_hook+0x50>)
   b59a8:	681a      	ldr	r2, [r3, #0]
   b59aa:	4b11      	ldr	r3, [pc, #68]	; (b59f0 <module_user_init_hook+0x54>)
   b59ac:	429a      	cmp	r2, r3
   b59ae:	4b11      	ldr	r3, [pc, #68]	; (b59f4 <module_user_init_hook+0x58>)
   b59b0:	bf0c      	ite	eq
   b59b2:	2201      	moveq	r2, #1
   b59b4:	2200      	movne	r2, #0
   b59b6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b59b8:	d001      	beq.n	b59be <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b59ba:	f7ff ffb1 	bl	b5920 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b59be:	f7ff f9a1 	bl	b4d04 <HAL_RNG_GetRandomNumber>
   b59c2:	4604      	mov	r4, r0
    srand(seed);
   b59c4:	f000 f9b2 	bl	b5d2c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b59c8:	4b0b      	ldr	r3, [pc, #44]	; (b59f8 <module_user_init_hook+0x5c>)
   b59ca:	b113      	cbz	r3, b59d2 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b59cc:	4620      	mov	r0, r4
   b59ce:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b59d2:	2100      	movs	r1, #0
   b59d4:	4808      	ldr	r0, [pc, #32]	; (b59f8 <module_user_init_hook+0x5c>)
   b59d6:	f7ff fb01 	bl	b4fdc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b59da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b59de:	4807      	ldr	r0, [pc, #28]	; (b59fc <module_user_init_hook+0x60>)
   b59e0:	2100      	movs	r1, #0
   b59e2:	f7ff badf 	b.w	b4fa4 <system_ctrl_set_app_request_handler>
   b59e6:	bf00      	nop
   b59e8:	000b58c9 	.word	0x000b58c9
   b59ec:	2003f400 	.word	0x2003f400
   b59f0:	9a271c1e 	.word	0x9a271c1e
   b59f4:	2003e714 	.word	0x2003e714
   b59f8:	00000000 	.word	0x00000000
   b59fc:	000b5965 	.word	0x000b5965

000b5a00 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b5a00:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b5a02:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b5a04:	d902      	bls.n	b5a0c <pinAvailable+0xc>
    return false;
   b5a06:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b5a08:	b002      	add	sp, #8
   b5a0a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b5a0c:	f1a0 030b 	sub.w	r3, r0, #11
   b5a10:	2b02      	cmp	r3, #2
   b5a12:	d81a      	bhi.n	b5a4a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b5a14:	4c17      	ldr	r4, [pc, #92]	; (b5a74 <pinAvailable+0x74>)
   b5a16:	7821      	ldrb	r1, [r4, #0]
   b5a18:	f3bf 8f5b 	dmb	ish
   b5a1c:	f011 0101 	ands.w	r1, r1, #1
   b5a20:	d10b      	bne.n	b5a3a <pinAvailable+0x3a>
   b5a22:	4620      	mov	r0, r4
   b5a24:	9101      	str	r1, [sp, #4]
   b5a26:	f7fe fb3c 	bl	b40a2 <__cxa_guard_acquire>
   b5a2a:	9901      	ldr	r1, [sp, #4]
   b5a2c:	b128      	cbz	r0, b5a3a <pinAvailable+0x3a>
   b5a2e:	4812      	ldr	r0, [pc, #72]	; (b5a78 <pinAvailable+0x78>)
   b5a30:	f7ff fe04 	bl	b563c <_ZN8SPIClassC1E19hal_spi_interface_t>
   b5a34:	4620      	mov	r0, r4
   b5a36:	f7fe fb39 	bl	b40ac <__cxa_guard_release>
   b5a3a:	4b0f      	ldr	r3, [pc, #60]	; (b5a78 <pinAvailable+0x78>)
   b5a3c:	7818      	ldrb	r0, [r3, #0]
   b5a3e:	f7ff fa21 	bl	b4e84 <hal_spi_is_enabled>
   b5a42:	2800      	cmp	r0, #0
   b5a44:	d1df      	bne.n	b5a06 <pinAvailable+0x6>
  return true; // 'pin' is available
   b5a46:	2001      	movs	r0, #1
   b5a48:	e7de      	b.n	b5a08 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b5a4a:	2801      	cmp	r0, #1
   b5a4c:	d809      	bhi.n	b5a62 <pinAvailable+0x62>
   b5a4e:	f000 f841 	bl	b5ad4 <_Z19__fetch_global_Wirev>
   b5a52:	2100      	movs	r1, #0
   b5a54:	7c00      	ldrb	r0, [r0, #16]
   b5a56:	f7ff f9d5 	bl	b4e04 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b5a5a:	f080 0001 	eor.w	r0, r0, #1
   b5a5e:	b2c0      	uxtb	r0, r0
   b5a60:	e7d2      	b.n	b5a08 <pinAvailable+0x8>
   b5a62:	3809      	subs	r0, #9
   b5a64:	2801      	cmp	r0, #1
   b5a66:	d8ee      	bhi.n	b5a46 <pinAvailable+0x46>
   b5a68:	f000 f874 	bl	b5b54 <_Z22__fetch_global_Serial1v>
   b5a6c:	7c00      	ldrb	r0, [r0, #16]
   b5a6e:	f7ff fa39 	bl	b4ee4 <hal_usart_is_enabled>
   b5a72:	e7f2      	b.n	b5a5a <pinAvailable+0x5a>
   b5a74:	2003e71c 	.word	0x2003e71c
   b5a78:	2003e720 	.word	0x2003e720

000b5a7c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5a7c:	2823      	cmp	r0, #35	; 0x23
{
   b5a7e:	b538      	push	{r3, r4, r5, lr}
   b5a80:	4604      	mov	r4, r0
   b5a82:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5a84:	d80a      	bhi.n	b5a9c <pinMode+0x20>
   b5a86:	29ff      	cmp	r1, #255	; 0xff
   b5a88:	d008      	beq.n	b5a9c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b5a8a:	f7ff ffb9 	bl	b5a00 <pinAvailable>
   b5a8e:	b128      	cbz	r0, b5a9c <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b5a90:	4629      	mov	r1, r5
   b5a92:	4620      	mov	r0, r4
}
   b5a94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b5a98:	f7ff b95c 	b.w	b4d54 <HAL_Pin_Mode>
}
   b5a9c:	bd38      	pop	{r3, r4, r5, pc}

000b5a9e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b5a9e:	b538      	push	{r3, r4, r5, lr}
   b5aa0:	4604      	mov	r4, r0
   b5aa2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b5aa4:	f7ff f95e 	bl	b4d64 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b5aa8:	28ff      	cmp	r0, #255	; 0xff
   b5aaa:	d010      	beq.n	b5ace <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b5aac:	2806      	cmp	r0, #6
   b5aae:	d804      	bhi.n	b5aba <digitalWrite+0x1c>
   b5ab0:	234d      	movs	r3, #77	; 0x4d
   b5ab2:	fa23 f000 	lsr.w	r0, r3, r0
   b5ab6:	07c3      	lsls	r3, r0, #31
   b5ab8:	d409      	bmi.n	b5ace <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b5aba:	4620      	mov	r0, r4
   b5abc:	f7ff ffa0 	bl	b5a00 <pinAvailable>
   b5ac0:	b128      	cbz	r0, b5ace <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b5ac2:	4629      	mov	r1, r5
   b5ac4:	4620      	mov	r0, r4
}
   b5ac6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b5aca:	f7ff b953 	b.w	b4d74 <HAL_GPIO_Write>
}
   b5ace:	bd38      	pop	{r3, r4, r5, pc}

000b5ad0 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5ad0:	4770      	bx	lr
	...

000b5ad4 <_Z19__fetch_global_Wirev>:
{
   b5ad4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5ad6:	4d0e      	ldr	r5, [pc, #56]	; (b5b10 <_Z19__fetch_global_Wirev+0x3c>)
   b5ad8:	7829      	ldrb	r1, [r5, #0]
   b5ada:	f3bf 8f5b 	dmb	ish
   b5ade:	f011 0401 	ands.w	r4, r1, #1
{
   b5ae2:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5ae4:	d111      	bne.n	b5b0a <_Z19__fetch_global_Wirev+0x36>
   b5ae6:	4628      	mov	r0, r5
   b5ae8:	f7fe fadb 	bl	b40a2 <__cxa_guard_acquire>
   b5aec:	b168      	cbz	r0, b5b0a <_Z19__fetch_global_Wirev+0x36>
   b5aee:	a801      	add	r0, sp, #4
   b5af0:	f7fe fb48 	bl	b4184 <_Z17acquireWireBufferv>
   b5af4:	aa01      	add	r2, sp, #4
   b5af6:	4621      	mov	r1, r4
   b5af8:	4806      	ldr	r0, [pc, #24]	; (b5b14 <_Z19__fetch_global_Wirev+0x40>)
   b5afa:	f7ff fb85 	bl	b5208 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b5afe:	4628      	mov	r0, r5
   b5b00:	f7fe fad4 	bl	b40ac <__cxa_guard_release>
   b5b04:	4804      	ldr	r0, [pc, #16]	; (b5b18 <_Z19__fetch_global_Wirev+0x44>)
   b5b06:	f000 f8f5 	bl	b5cf4 <atexit>
	return wire;
}
   b5b0a:	4802      	ldr	r0, [pc, #8]	; (b5b14 <_Z19__fetch_global_Wirev+0x40>)
   b5b0c:	b007      	add	sp, #28
   b5b0e:	bd30      	pop	{r4, r5, pc}
   b5b10:	2003e72c 	.word	0x2003e72c
   b5b14:	2003e730 	.word	0x2003e730
   b5b18:	000b5ad1 	.word	0x000b5ad1

000b5b1c <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5b1c:	4770      	bx	lr
	...

000b5b20 <_Z20acquireSerial1Bufferv>:
{
   b5b20:	b538      	push	{r3, r4, r5, lr}
   b5b22:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b5b24:	2514      	movs	r5, #20
   b5b26:	462a      	mov	r2, r5
   b5b28:	2100      	movs	r1, #0
   b5b2a:	f000 f8f7 	bl	b5d1c <memset>
   b5b2e:	8025      	strh	r5, [r4, #0]
   b5b30:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5b32:	4907      	ldr	r1, [pc, #28]	; (b5b50 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b5b34:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5b36:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b5b38:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5b3a:	f000 f82f 	bl	b5b9c <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5b3e:	4904      	ldr	r1, [pc, #16]	; (b5b50 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b5b40:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5b42:	4628      	mov	r0, r5
   b5b44:	f000 f82a 	bl	b5b9c <_ZnajRKSt9nothrow_t>
    };
   b5b48:	60e0      	str	r0, [r4, #12]
}
   b5b4a:	4620      	mov	r0, r4
   b5b4c:	bd38      	pop	{r3, r4, r5, pc}
   b5b4e:	bf00      	nop
   b5b50:	000b6238 	.word	0x000b6238

000b5b54 <_Z22__fetch_global_Serial1v>:
{
   b5b54:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5b56:	4d0e      	ldr	r5, [pc, #56]	; (b5b90 <_Z22__fetch_global_Serial1v+0x3c>)
   b5b58:	7829      	ldrb	r1, [r5, #0]
   b5b5a:	f3bf 8f5b 	dmb	ish
   b5b5e:	f011 0401 	ands.w	r4, r1, #1
{
   b5b62:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5b64:	d111      	bne.n	b5b8a <_Z22__fetch_global_Serial1v+0x36>
   b5b66:	4628      	mov	r0, r5
   b5b68:	f7fe fa9b 	bl	b40a2 <__cxa_guard_acquire>
   b5b6c:	b168      	cbz	r0, b5b8a <_Z22__fetch_global_Serial1v+0x36>
   b5b6e:	a801      	add	r0, sp, #4
   b5b70:	f7ff ffd6 	bl	b5b20 <_Z20acquireSerial1Bufferv>
   b5b74:	aa01      	add	r2, sp, #4
   b5b76:	4621      	mov	r1, r4
   b5b78:	4806      	ldr	r0, [pc, #24]	; (b5b94 <_Z22__fetch_global_Serial1v+0x40>)
   b5b7a:	f7ff fdcf 	bl	b571c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b5b7e:	4628      	mov	r0, r5
   b5b80:	f7fe fa94 	bl	b40ac <__cxa_guard_release>
   b5b84:	4804      	ldr	r0, [pc, #16]	; (b5b98 <_Z22__fetch_global_Serial1v+0x44>)
   b5b86:	f000 f8b5 	bl	b5cf4 <atexit>
    return serial1;
}
   b5b8a:	4802      	ldr	r0, [pc, #8]	; (b5b94 <_Z22__fetch_global_Serial1v+0x40>)
   b5b8c:	b007      	add	sp, #28
   b5b8e:	bd30      	pop	{r4, r5, pc}
   b5b90:	2003e744 	.word	0x2003e744
   b5b94:	2003e748 	.word	0x2003e748
   b5b98:	000b5b1d 	.word	0x000b5b1d

000b5b9c <_ZnajRKSt9nothrow_t>:
   b5b9c:	f7fe ba7b 	b.w	b4096 <_Znaj>

000b5ba0 <_ZSt17__throw_bad_allocv>:
   b5ba0:	b508      	push	{r3, lr}
   b5ba2:	f7ff fa9b 	bl	b50dc <abort>

000b5ba6 <_ZSt19__throw_logic_errorPKc>:
   b5ba6:	b508      	push	{r3, lr}
   b5ba8:	f7ff fa98 	bl	b50dc <abort>

000b5bac <_ZSt24__throw_invalid_argumentPKc>:
   b5bac:	b508      	push	{r3, lr}
   b5bae:	f7ff fa95 	bl	b50dc <abort>

000b5bb2 <_ZSt20__throw_length_errorPKc>:
   b5bb2:	b508      	push	{r3, lr}
   b5bb4:	f7ff fa92 	bl	b50dc <abort>

000b5bb8 <_ZSt20__throw_out_of_rangePKc>:
   b5bb8:	b508      	push	{r3, lr}
   b5bba:	f7ff fa8f 	bl	b50dc <abort>

000b5bbe <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
   b5bbe:	b10a      	cbz	r2, b5bc4 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
   b5bc0:	f000 b89e 	b.w	b5d00 <memcpy>
   b5bc4:	4770      	bx	lr
	...

000b5bc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
   b5bc8:	b508      	push	{r3, lr}
   b5bca:	680b      	ldr	r3, [r1, #0]
   b5bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   b5bd0:	d302      	bcc.n	b5bd8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
   b5bd2:	480d      	ldr	r0, [pc, #52]	; (b5c08 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
   b5bd4:	f7ff ffed 	bl	b5bb2 <_ZSt20__throw_length_errorPKc>
   b5bd8:	4293      	cmp	r3, r2
   b5bda:	d90b      	bls.n	b5bf4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
   b5bdc:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
   b5be0:	ea4f 0042 	mov.w	r0, r2, lsl #1
   b5be4:	d206      	bcs.n	b5bf4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
   b5be6:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
   b5bea:	bf2a      	itet	cs
   b5bec:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
   b5bf0:	6008      	strcc	r0, [r1, #0]
   b5bf2:	600b      	strcs	r3, [r1, #0]
   b5bf4:	6808      	ldr	r0, [r1, #0]
   b5bf6:	3001      	adds	r0, #1
   b5bf8:	d501      	bpl.n	b5bfe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
   b5bfa:	f7ff ffd1 	bl	b5ba0 <_ZSt17__throw_bad_allocv>
   b5bfe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b5c02:	f7fe ba46 	b.w	b4092 <_Znwj>
   b5c06:	bf00      	nop
   b5c08:	000b6239 	.word	0x000b6239

000b5c0c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
   b5c0c:	f850 3b08 	ldr.w	r3, [r0], #8
   b5c10:	4283      	cmp	r3, r0
   b5c12:	d002      	beq.n	b5c1a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
   b5c14:	4618      	mov	r0, r3
   b5c16:	f7fe ba40 	b.w	b409a <_ZdlPv>
   b5c1a:	4770      	bx	lr

000b5c1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
   b5c1c:	2a01      	cmp	r2, #1
   b5c1e:	b410      	push	{r4}
   b5c20:	d104      	bne.n	b5c2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
   b5c22:	780a      	ldrb	r2, [r1, #0]
   b5c24:	f85d 4b04 	ldr.w	r4, [sp], #4
   b5c28:	7002      	strb	r2, [r0, #0]
   b5c2a:	4770      	bx	lr
   b5c2c:	f85d 4b04 	ldr.w	r4, [sp], #4
   b5c30:	f7ff bfc5 	b.w	b5bbe <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

000b5c34 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
   b5c34:	b508      	push	{r3, lr}
   b5c36:	1a52      	subs	r2, r2, r1
   b5c38:	f7ff fff0 	bl	b5c1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   b5c3c:	bd08      	pop	{r3, pc}

000b5c3e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
   b5c3e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b5c42:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   b5c44:	461f      	mov	r7, r3
   b5c46:	6843      	ldr	r3, [r0, #4]
   b5c48:	eb01 0802 	add.w	r8, r1, r2
   b5c4c:	1ab2      	subs	r2, r6, r2
   b5c4e:	441a      	add	r2, r3
   b5c50:	eba3 0908 	sub.w	r9, r3, r8
   b5c54:	4603      	mov	r3, r0
   b5c56:	9201      	str	r2, [sp, #4]
   b5c58:	f853 2b08 	ldr.w	r2, [r3], #8
   b5c5c:	429a      	cmp	r2, r3
   b5c5e:	bf18      	it	ne
   b5c60:	6882      	ldrne	r2, [r0, #8]
   b5c62:	460d      	mov	r5, r1
   b5c64:	bf08      	it	eq
   b5c66:	220f      	moveq	r2, #15
   b5c68:	a901      	add	r1, sp, #4
   b5c6a:	4604      	mov	r4, r0
   b5c6c:	f7ff ffac 	bl	b5bc8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
   b5c70:	4682      	mov	sl, r0
   b5c72:	b11d      	cbz	r5, b5c7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
   b5c74:	6821      	ldr	r1, [r4, #0]
   b5c76:	462a      	mov	r2, r5
   b5c78:	f7ff ffd0 	bl	b5c1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   b5c7c:	b137      	cbz	r7, b5c8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
   b5c7e:	b12e      	cbz	r6, b5c8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
   b5c80:	4632      	mov	r2, r6
   b5c82:	4639      	mov	r1, r7
   b5c84:	eb0a 0005 	add.w	r0, sl, r5
   b5c88:	f7ff ffc8 	bl	b5c1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   b5c8c:	f1b9 0f00 	cmp.w	r9, #0
   b5c90:	d007      	beq.n	b5ca2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x64>
   b5c92:	6821      	ldr	r1, [r4, #0]
   b5c94:	4435      	add	r5, r6
   b5c96:	464a      	mov	r2, r9
   b5c98:	4441      	add	r1, r8
   b5c9a:	eb0a 0005 	add.w	r0, sl, r5
   b5c9e:	f7ff ffbd 	bl	b5c1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   b5ca2:	4620      	mov	r0, r4
   b5ca4:	f7ff ffb2 	bl	b5c0c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   b5ca8:	9b01      	ldr	r3, [sp, #4]
   b5caa:	f8c4 a000 	str.w	sl, [r4]
   b5cae:	60a3      	str	r3, [r4, #8]
   b5cb0:	b002      	add	sp, #8
   b5cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b5cb6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>:
   b5cb6:	4603      	mov	r3, r0
   b5cb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b5cba:	f853 2b08 	ldr.w	r2, [r3], #8
   b5cbe:	6846      	ldr	r6, [r0, #4]
   b5cc0:	429a      	cmp	r2, r3
   b5cc2:	bf18      	it	ne
   b5cc4:	6883      	ldrne	r3, [r0, #8]
   b5cc6:	f106 0501 	add.w	r5, r6, #1
   b5cca:	bf08      	it	eq
   b5ccc:	230f      	moveq	r3, #15
   b5cce:	429d      	cmp	r5, r3
   b5cd0:	4604      	mov	r4, r0
   b5cd2:	460f      	mov	r7, r1
   b5cd4:	d906      	bls.n	b5ce4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc+0x2e>
   b5cd6:	2301      	movs	r3, #1
   b5cd8:	9300      	str	r3, [sp, #0]
   b5cda:	2300      	movs	r3, #0
   b5cdc:	461a      	mov	r2, r3
   b5cde:	4631      	mov	r1, r6
   b5ce0:	f7ff ffad 	bl	b5c3e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
   b5ce4:	6823      	ldr	r3, [r4, #0]
   b5ce6:	559f      	strb	r7, [r3, r6]
   b5ce8:	6823      	ldr	r3, [r4, #0]
   b5cea:	6065      	str	r5, [r4, #4]
   b5cec:	2200      	movs	r2, #0
   b5cee:	555a      	strb	r2, [r3, r5]
   b5cf0:	b003      	add	sp, #12
   b5cf2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5cf4 <atexit>:
   b5cf4:	2300      	movs	r3, #0
   b5cf6:	4601      	mov	r1, r0
   b5cf8:	461a      	mov	r2, r3
   b5cfa:	4618      	mov	r0, r3
   b5cfc:	f000 b906 	b.w	b5f0c <__register_exitproc>

000b5d00 <memcpy>:
   b5d00:	440a      	add	r2, r1
   b5d02:	4291      	cmp	r1, r2
   b5d04:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b5d08:	d100      	bne.n	b5d0c <memcpy+0xc>
   b5d0a:	4770      	bx	lr
   b5d0c:	b510      	push	{r4, lr}
   b5d0e:	f811 4b01 	ldrb.w	r4, [r1], #1
   b5d12:	f803 4f01 	strb.w	r4, [r3, #1]!
   b5d16:	4291      	cmp	r1, r2
   b5d18:	d1f9      	bne.n	b5d0e <memcpy+0xe>
   b5d1a:	bd10      	pop	{r4, pc}

000b5d1c <memset>:
   b5d1c:	4402      	add	r2, r0
   b5d1e:	4603      	mov	r3, r0
   b5d20:	4293      	cmp	r3, r2
   b5d22:	d100      	bne.n	b5d26 <memset+0xa>
   b5d24:	4770      	bx	lr
   b5d26:	f803 1b01 	strb.w	r1, [r3], #1
   b5d2a:	e7f9      	b.n	b5d20 <memset+0x4>

000b5d2c <srand>:
   b5d2c:	b538      	push	{r3, r4, r5, lr}
   b5d2e:	4b10      	ldr	r3, [pc, #64]	; (b5d70 <srand+0x44>)
   b5d30:	681d      	ldr	r5, [r3, #0]
   b5d32:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b5d34:	4604      	mov	r4, r0
   b5d36:	b9b3      	cbnz	r3, b5d66 <srand+0x3a>
   b5d38:	2018      	movs	r0, #24
   b5d3a:	f7ff f9b7 	bl	b50ac <malloc>
   b5d3e:	4602      	mov	r2, r0
   b5d40:	63a8      	str	r0, [r5, #56]	; 0x38
   b5d42:	b920      	cbnz	r0, b5d4e <srand+0x22>
   b5d44:	4b0b      	ldr	r3, [pc, #44]	; (b5d74 <srand+0x48>)
   b5d46:	480c      	ldr	r0, [pc, #48]	; (b5d78 <srand+0x4c>)
   b5d48:	2142      	movs	r1, #66	; 0x42
   b5d4a:	f7ff f9d7 	bl	b50fc <__assert_func>
   b5d4e:	490b      	ldr	r1, [pc, #44]	; (b5d7c <srand+0x50>)
   b5d50:	4b0b      	ldr	r3, [pc, #44]	; (b5d80 <srand+0x54>)
   b5d52:	e9c0 1300 	strd	r1, r3, [r0]
   b5d56:	4b0b      	ldr	r3, [pc, #44]	; (b5d84 <srand+0x58>)
   b5d58:	6083      	str	r3, [r0, #8]
   b5d5a:	230b      	movs	r3, #11
   b5d5c:	8183      	strh	r3, [r0, #12]
   b5d5e:	2100      	movs	r1, #0
   b5d60:	2001      	movs	r0, #1
   b5d62:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b5d66:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b5d68:	2200      	movs	r2, #0
   b5d6a:	611c      	str	r4, [r3, #16]
   b5d6c:	615a      	str	r2, [r3, #20]
   b5d6e:	bd38      	pop	{r3, r4, r5, pc}
   b5d70:	2003e608 	.word	0x2003e608
   b5d74:	000b6251 	.word	0x000b6251
   b5d78:	000b6268 	.word	0x000b6268
   b5d7c:	abcd330e 	.word	0xabcd330e
   b5d80:	e66d1234 	.word	0xe66d1234
   b5d84:	0005deec 	.word	0x0005deec

000b5d88 <rand>:
   b5d88:	4b16      	ldr	r3, [pc, #88]	; (b5de4 <rand+0x5c>)
   b5d8a:	b510      	push	{r4, lr}
   b5d8c:	681c      	ldr	r4, [r3, #0]
   b5d8e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   b5d90:	b9b3      	cbnz	r3, b5dc0 <rand+0x38>
   b5d92:	2018      	movs	r0, #24
   b5d94:	f7ff f98a 	bl	b50ac <malloc>
   b5d98:	63a0      	str	r0, [r4, #56]	; 0x38
   b5d9a:	b928      	cbnz	r0, b5da8 <rand+0x20>
   b5d9c:	4602      	mov	r2, r0
   b5d9e:	4b12      	ldr	r3, [pc, #72]	; (b5de8 <rand+0x60>)
   b5da0:	4812      	ldr	r0, [pc, #72]	; (b5dec <rand+0x64>)
   b5da2:	214e      	movs	r1, #78	; 0x4e
   b5da4:	f7ff f9aa 	bl	b50fc <__assert_func>
   b5da8:	4a11      	ldr	r2, [pc, #68]	; (b5df0 <rand+0x68>)
   b5daa:	4b12      	ldr	r3, [pc, #72]	; (b5df4 <rand+0x6c>)
   b5dac:	e9c0 2300 	strd	r2, r3, [r0]
   b5db0:	4b11      	ldr	r3, [pc, #68]	; (b5df8 <rand+0x70>)
   b5db2:	6083      	str	r3, [r0, #8]
   b5db4:	230b      	movs	r3, #11
   b5db6:	8183      	strh	r3, [r0, #12]
   b5db8:	2201      	movs	r2, #1
   b5dba:	2300      	movs	r3, #0
   b5dbc:	e9c0 2304 	strd	r2, r3, [r0, #16]
   b5dc0:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   b5dc2:	4a0e      	ldr	r2, [pc, #56]	; (b5dfc <rand+0x74>)
   b5dc4:	6920      	ldr	r0, [r4, #16]
   b5dc6:	6963      	ldr	r3, [r4, #20]
   b5dc8:	490d      	ldr	r1, [pc, #52]	; (b5e00 <rand+0x78>)
   b5dca:	4342      	muls	r2, r0
   b5dcc:	fb01 2203 	mla	r2, r1, r3, r2
   b5dd0:	fba0 0101 	umull	r0, r1, r0, r1
   b5dd4:	1c43      	adds	r3, r0, #1
   b5dd6:	eb42 0001 	adc.w	r0, r2, r1
   b5dda:	e9c4 3004 	strd	r3, r0, [r4, #16]
   b5dde:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   b5de2:	bd10      	pop	{r4, pc}
   b5de4:	2003e608 	.word	0x2003e608
   b5de8:	000b6251 	.word	0x000b6251
   b5dec:	000b6268 	.word	0x000b6268
   b5df0:	abcd330e 	.word	0xabcd330e
   b5df4:	e66d1234 	.word	0xe66d1234
   b5df8:	0005deec 	.word	0x0005deec
   b5dfc:	5851f42d 	.word	0x5851f42d
   b5e00:	4c957f2d 	.word	0x4c957f2d

000b5e04 <strlen>:
   b5e04:	4603      	mov	r3, r0
   b5e06:	f813 2b01 	ldrb.w	r2, [r3], #1
   b5e0a:	2a00      	cmp	r2, #0
   b5e0c:	d1fb      	bne.n	b5e06 <strlen+0x2>
   b5e0e:	1a18      	subs	r0, r3, r0
   b5e10:	3801      	subs	r0, #1
   b5e12:	4770      	bx	lr

000b5e14 <_strtoul_l.constprop.0>:
   b5e14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5e18:	4f36      	ldr	r7, [pc, #216]	; (b5ef4 <_strtoul_l.constprop.0+0xe0>)
   b5e1a:	4686      	mov	lr, r0
   b5e1c:	460d      	mov	r5, r1
   b5e1e:	4628      	mov	r0, r5
   b5e20:	f815 4b01 	ldrb.w	r4, [r5], #1
   b5e24:	5de6      	ldrb	r6, [r4, r7]
   b5e26:	f016 0608 	ands.w	r6, r6, #8
   b5e2a:	d1f8      	bne.n	b5e1e <_strtoul_l.constprop.0+0xa>
   b5e2c:	2c2d      	cmp	r4, #45	; 0x2d
   b5e2e:	d12f      	bne.n	b5e90 <_strtoul_l.constprop.0+0x7c>
   b5e30:	782c      	ldrb	r4, [r5, #0]
   b5e32:	2601      	movs	r6, #1
   b5e34:	1c85      	adds	r5, r0, #2
   b5e36:	2b00      	cmp	r3, #0
   b5e38:	d057      	beq.n	b5eea <_strtoul_l.constprop.0+0xd6>
   b5e3a:	2b10      	cmp	r3, #16
   b5e3c:	d109      	bne.n	b5e52 <_strtoul_l.constprop.0+0x3e>
   b5e3e:	2c30      	cmp	r4, #48	; 0x30
   b5e40:	d107      	bne.n	b5e52 <_strtoul_l.constprop.0+0x3e>
   b5e42:	7828      	ldrb	r0, [r5, #0]
   b5e44:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   b5e48:	2858      	cmp	r0, #88	; 0x58
   b5e4a:	d149      	bne.n	b5ee0 <_strtoul_l.constprop.0+0xcc>
   b5e4c:	786c      	ldrb	r4, [r5, #1]
   b5e4e:	2310      	movs	r3, #16
   b5e50:	3502      	adds	r5, #2
   b5e52:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   b5e56:	2700      	movs	r7, #0
   b5e58:	fbb8 f8f3 	udiv	r8, r8, r3
   b5e5c:	fb03 f908 	mul.w	r9, r3, r8
   b5e60:	ea6f 0909 	mvn.w	r9, r9
   b5e64:	4638      	mov	r0, r7
   b5e66:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
   b5e6a:	f1bc 0f09 	cmp.w	ip, #9
   b5e6e:	d814      	bhi.n	b5e9a <_strtoul_l.constprop.0+0x86>
   b5e70:	4664      	mov	r4, ip
   b5e72:	42a3      	cmp	r3, r4
   b5e74:	dd22      	ble.n	b5ebc <_strtoul_l.constprop.0+0xa8>
   b5e76:	2f00      	cmp	r7, #0
   b5e78:	db1d      	blt.n	b5eb6 <_strtoul_l.constprop.0+0xa2>
   b5e7a:	4580      	cmp	r8, r0
   b5e7c:	d31b      	bcc.n	b5eb6 <_strtoul_l.constprop.0+0xa2>
   b5e7e:	d101      	bne.n	b5e84 <_strtoul_l.constprop.0+0x70>
   b5e80:	45a1      	cmp	r9, r4
   b5e82:	db18      	blt.n	b5eb6 <_strtoul_l.constprop.0+0xa2>
   b5e84:	fb00 4003 	mla	r0, r0, r3, r4
   b5e88:	2701      	movs	r7, #1
   b5e8a:	f815 4b01 	ldrb.w	r4, [r5], #1
   b5e8e:	e7ea      	b.n	b5e66 <_strtoul_l.constprop.0+0x52>
   b5e90:	2c2b      	cmp	r4, #43	; 0x2b
   b5e92:	bf04      	itt	eq
   b5e94:	782c      	ldrbeq	r4, [r5, #0]
   b5e96:	1c85      	addeq	r5, r0, #2
   b5e98:	e7cd      	b.n	b5e36 <_strtoul_l.constprop.0+0x22>
   b5e9a:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
   b5e9e:	f1bc 0f19 	cmp.w	ip, #25
   b5ea2:	d801      	bhi.n	b5ea8 <_strtoul_l.constprop.0+0x94>
   b5ea4:	3c37      	subs	r4, #55	; 0x37
   b5ea6:	e7e4      	b.n	b5e72 <_strtoul_l.constprop.0+0x5e>
   b5ea8:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
   b5eac:	f1bc 0f19 	cmp.w	ip, #25
   b5eb0:	d804      	bhi.n	b5ebc <_strtoul_l.constprop.0+0xa8>
   b5eb2:	3c57      	subs	r4, #87	; 0x57
   b5eb4:	e7dd      	b.n	b5e72 <_strtoul_l.constprop.0+0x5e>
   b5eb6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   b5eba:	e7e6      	b.n	b5e8a <_strtoul_l.constprop.0+0x76>
   b5ebc:	2f00      	cmp	r7, #0
   b5ebe:	da07      	bge.n	b5ed0 <_strtoul_l.constprop.0+0xbc>
   b5ec0:	2322      	movs	r3, #34	; 0x22
   b5ec2:	f8ce 3000 	str.w	r3, [lr]
   b5ec6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b5eca:	b932      	cbnz	r2, b5eda <_strtoul_l.constprop.0+0xc6>
   b5ecc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b5ed0:	b106      	cbz	r6, b5ed4 <_strtoul_l.constprop.0+0xc0>
   b5ed2:	4240      	negs	r0, r0
   b5ed4:	2a00      	cmp	r2, #0
   b5ed6:	d0f9      	beq.n	b5ecc <_strtoul_l.constprop.0+0xb8>
   b5ed8:	b107      	cbz	r7, b5edc <_strtoul_l.constprop.0+0xc8>
   b5eda:	1e69      	subs	r1, r5, #1
   b5edc:	6011      	str	r1, [r2, #0]
   b5ede:	e7f5      	b.n	b5ecc <_strtoul_l.constprop.0+0xb8>
   b5ee0:	2430      	movs	r4, #48	; 0x30
   b5ee2:	2b00      	cmp	r3, #0
   b5ee4:	d1b5      	bne.n	b5e52 <_strtoul_l.constprop.0+0x3e>
   b5ee6:	2308      	movs	r3, #8
   b5ee8:	e7b3      	b.n	b5e52 <_strtoul_l.constprop.0+0x3e>
   b5eea:	2c30      	cmp	r4, #48	; 0x30
   b5eec:	d0a9      	beq.n	b5e42 <_strtoul_l.constprop.0+0x2e>
   b5eee:	230a      	movs	r3, #10
   b5ef0:	e7af      	b.n	b5e52 <_strtoul_l.constprop.0+0x3e>
   b5ef2:	bf00      	nop
   b5ef4:	000b62c2 	.word	0x000b62c2

000b5ef8 <strtoul>:
   b5ef8:	4613      	mov	r3, r2
   b5efa:	460a      	mov	r2, r1
   b5efc:	4601      	mov	r1, r0
   b5efe:	4802      	ldr	r0, [pc, #8]	; (b5f08 <strtoul+0x10>)
   b5f00:	6800      	ldr	r0, [r0, #0]
   b5f02:	f7ff bf87 	b.w	b5e14 <_strtoul_l.constprop.0>
   b5f06:	bf00      	nop
   b5f08:	2003e608 	.word	0x2003e608

000b5f0c <__register_exitproc>:
   b5f0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5f10:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b5fcc <__register_exitproc+0xc0>
   b5f14:	4606      	mov	r6, r0
   b5f16:	f8d8 0000 	ldr.w	r0, [r8]
   b5f1a:	461f      	mov	r7, r3
   b5f1c:	460d      	mov	r5, r1
   b5f1e:	4691      	mov	r9, r2
   b5f20:	f000 f856 	bl	b5fd0 <__retarget_lock_acquire_recursive>
   b5f24:	4b25      	ldr	r3, [pc, #148]	; (b5fbc <__register_exitproc+0xb0>)
   b5f26:	681c      	ldr	r4, [r3, #0]
   b5f28:	b934      	cbnz	r4, b5f38 <__register_exitproc+0x2c>
   b5f2a:	4c25      	ldr	r4, [pc, #148]	; (b5fc0 <__register_exitproc+0xb4>)
   b5f2c:	601c      	str	r4, [r3, #0]
   b5f2e:	4b25      	ldr	r3, [pc, #148]	; (b5fc4 <__register_exitproc+0xb8>)
   b5f30:	b113      	cbz	r3, b5f38 <__register_exitproc+0x2c>
   b5f32:	681b      	ldr	r3, [r3, #0]
   b5f34:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b5f38:	6863      	ldr	r3, [r4, #4]
   b5f3a:	2b1f      	cmp	r3, #31
   b5f3c:	dd07      	ble.n	b5f4e <__register_exitproc+0x42>
   b5f3e:	f8d8 0000 	ldr.w	r0, [r8]
   b5f42:	f000 f847 	bl	b5fd4 <__retarget_lock_release_recursive>
   b5f46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b5f4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b5f4e:	b34e      	cbz	r6, b5fa4 <__register_exitproc+0x98>
   b5f50:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b5f54:	b988      	cbnz	r0, b5f7a <__register_exitproc+0x6e>
   b5f56:	4b1c      	ldr	r3, [pc, #112]	; (b5fc8 <__register_exitproc+0xbc>)
   b5f58:	b923      	cbnz	r3, b5f64 <__register_exitproc+0x58>
   b5f5a:	f8d8 0000 	ldr.w	r0, [r8]
   b5f5e:	f000 f838 	bl	b5fd2 <__retarget_lock_release>
   b5f62:	e7f0      	b.n	b5f46 <__register_exitproc+0x3a>
   b5f64:	f44f 7084 	mov.w	r0, #264	; 0x108
   b5f68:	f7ff f8a0 	bl	b50ac <malloc>
   b5f6c:	2800      	cmp	r0, #0
   b5f6e:	d0f4      	beq.n	b5f5a <__register_exitproc+0x4e>
   b5f70:	2300      	movs	r3, #0
   b5f72:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b5f76:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b5f7a:	6863      	ldr	r3, [r4, #4]
   b5f7c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b5f80:	2201      	movs	r2, #1
   b5f82:	409a      	lsls	r2, r3
   b5f84:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b5f88:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b5f8c:	4313      	orrs	r3, r2
   b5f8e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b5f92:	2e02      	cmp	r6, #2
   b5f94:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b5f98:	bf02      	ittt	eq
   b5f9a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b5f9e:	4313      	orreq	r3, r2
   b5fa0:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b5fa4:	6863      	ldr	r3, [r4, #4]
   b5fa6:	f8d8 0000 	ldr.w	r0, [r8]
   b5faa:	1c5a      	adds	r2, r3, #1
   b5fac:	3302      	adds	r3, #2
   b5fae:	6062      	str	r2, [r4, #4]
   b5fb0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b5fb4:	f000 f80e 	bl	b5fd4 <__retarget_lock_release_recursive>
   b5fb8:	2000      	movs	r0, #0
   b5fba:	e7c6      	b.n	b5f4a <__register_exitproc+0x3e>
   b5fbc:	2003e7e8 	.word	0x2003e7e8
   b5fc0:	2003e75c 	.word	0x2003e75c
   b5fc4:	00000000 	.word	0x00000000
   b5fc8:	000b50ad 	.word	0x000b50ad
   b5fcc:	2003e66c 	.word	0x2003e66c

000b5fd0 <__retarget_lock_acquire_recursive>:
   b5fd0:	4770      	bx	lr

000b5fd2 <__retarget_lock_release>:
   b5fd2:	4770      	bx	lr

000b5fd4 <__retarget_lock_release_recursive>:
   b5fd4:	4770      	bx	lr

000b5fd6 <link_code_end>:
	...

000b5fd8 <dynalib_user>:
   b5fd8:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b5fe8:	0000 0000 6572 7571 7365 2074 6572 6563     ....request rece
   b5ff8:	7669 6465 7200 7165 6575 7473 6d20 646f     ived.request mod
   b6008:	2065 0031 6572 7571 7365 2074 6f6d 6564     e 1.request mode
   b6018:	3220 7000 7361 0073 6166 6c69 7200 6e61      2.pass.fail.ran
   b6028:	6f64 696d 657a 6120 6464 6572 7373 2520     domize address %
   b6038:	2c64 0020 6162 6973 5f63 7473 6972 676e     d, .basic_string
   b6048:	3a3a 4d5f 635f 6e6f 7473 7572 7463 6e20     ::_M_construct n
   b6058:	6c75 206c 6f6e 2074 6176 696c 0064 6f63     ull not valid.co
   b6068:	6e75 3a74 0020 6164 6174 7220 6365 6965     unt: .data recei
   b6078:	6576 3a64 0020 6973 657a 3220 0034 6564     ved: .size 24.de
   b6088:	6976 6563 4449 6320 6168 3a72 2520 2c63     viceID char: %c,
   b6098:	6920 706e 7475 7542 6666 7265 6320 6168      inputBuffer cha
   b60a8:	3a72 2520 0063 7473 756f 006c               r: %c.stoul.

000b60b4 <CSWTCH.86>:
   b60b4:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
   b60c4:	0050 0000                                   P...

000b60c8 <_ZTVN5spark13EthernetClassE>:
	...
   b60d0:	5193 000b 5189 000b 517f 000b 5175 000b     .Q...Q...Q..uQ..
   b60e0:	5169 000b 515d 000b 53a1 000b 53a9 000b     iQ..]Q...S...S..
   b60f0:	5151 000b 5149 000b 513f 000b 5135 000b     QQ..IQ..?Q..5Q..
   b6100:	53d9 000b                                   .S..

000b6104 <_ZTV7TwoWire>:
	...
   b610c:	51b1 000b 51fb 000b 51d3 000b 51b3 000b     .Q...Q...Q...Q..
   b611c:	51db 000b 51e3 000b 51eb 000b 51f3 000b     .Q...Q...Q...Q..

000b612c <_ZTV9IPAddress>:
	...
   b6134:	526f 000b 525f 000b 5261 000b 7061 0070     oR.._R..aR..app.

000b6144 <_ZTVN5spark12NetworkClassE>:
	...
   b614c:	5361 000b 536b 000b 5375 000b 537f 000b     aS..kS..uS...S..
   b615c:	5389 000b 5395 000b 53a1 000b 53a9 000b     .S...S...S...S..
   b616c:	53b1 000b 53bd 000b 53c5 000b 53cf 000b     .S...S...S...S..
   b617c:	53d9 000b 5925 252d 2d6d 6425 2554 3a48     .S..%Y-%m-%dT%H:
   b618c:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000b619c <_ZTV11USARTSerial>:
	...
   b61a4:	56a1 000b 570d 000b 56e5 000b 54c5 000b     .V...W...V...T..
   b61b4:	56b5 000b 56d1 000b 56c3 000b 56df 000b     .V...V...V...V..
   b61c4:	56a3 000b 56a7 000b                         .V...V..

000b61cc <_ZTV9USBSerial>:
	...
   b61d4:	574b 000b 57b3 000b 5789 000b 54c5 000b     KW...W...W...T..
   b61e4:	577b 000b 574d 000b 575d 000b 57ad 000b     {W..MW..]W...W..
   b61f4:	576d 000b 5745 000b                         mW..EW..

000b61fc <_ZTVN5spark9WiFiClassE>:
	...
   b6204:	58ab 000b 58a1 000b 5897 000b 584d 000b     .X...X...X..MX..
   b6214:	588b 000b 587f 000b 53a1 000b 53a9 000b     .X...X...S...S..
   b6224:	5873 000b 586b 000b 5861 000b 5857 000b     sX..kX..aX..WX..
   b6234:	53d9 000b                                   .S..

000b6238 <_ZSt7nothrow>:
   b6238:	6200 7361 6369 735f 7274 6e69 3a67 5f3a     .basic_string::_
   b6248:	5f4d 7263 6165 6574 5200 4545 544e 6d20     M_create.REENT m
   b6258:	6c61 6f6c 2063 7573 6363 6565 6564 0064     alloc succeeded.
   b6268:	742f 706d 6a2f 6e65 696b 736e 472d 4343     /tmp/jenkins-GCC
   b6278:	312d 2d30 6970 6570 696c 656e 342d 5f38     -10-pipeline-48_
   b6288:	3032 3032 3131 3432 315f 3036 3136 3038     20201124_1606180
   b6298:	3336 2f39 7273 2f63 656e 6c77 6269 6e2f     639/src/newlib/n
   b62a8:	7765 696c 2f62 696c 6362 732f 6474 696c     ewlib/libc/stdli
   b62b8:	2f62 6172 646e 632e                          b/rand.c.

000b62c1 <_ctype_>:
   b62c1:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   b62d1:	2020 2020 2020 2020 2020 2020 2020 2020                     
   b62e1:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   b62f1:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   b6301:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   b6311:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   b6321:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   b6331:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   b6341:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000b63c2 <link_const_variable_data_end>:
	...

000b63c4 <link_constructors_location>:
   b63c4:	000b4771 	.word	0x000b4771
   b63c8:	000b4ce5 	.word	0x000b4ce5
   b63cc:	000b5125 	.word	0x000b5125
   b63d0:	000b519d 	.word	0x000b519d
   b63d4:	000b5351 	.word	0x000b5351
   b63d8:	000b54b1 	.word	0x000b54b1
   b63dc:	000b5631 	.word	0x000b5631
   b63e0:	000b5669 	.word	0x000b5669
   b63e4:	000b568d 	.word	0x000b568d
   b63e8:	000b58b5 	.word	0x000b58b5

000b63ec <link_constructors_end>:
   b63ec:	00000000 	.word	0x00000000
